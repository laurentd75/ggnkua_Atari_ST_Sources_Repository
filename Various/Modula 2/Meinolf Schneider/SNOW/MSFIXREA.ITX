IMPLEMENTATION MODULE MSFixReals;

(*----------------------------------------------------------------------------
 * System-Version: MOS 3.5
 *----------------------------------------------------------------------------
 * Version       : 1.0
 *----------------------------------------------------------------------------
 * Text-Version  : V#00001
 *----------------------------------------------------------------------------
 * Modul-Holder  : Meinolf Schneider
 *----------------------------------------------------------------------------
 * Copyright June 1990 by Digital Art Meinolf Schneider
 *----------------------------------------------------------------------------
 * MS  : Meinolf Schneider
 *----------------------------------------------------------------------------
 * Datum    Autor Version Bemerkung (Arbeitsbericht)
 *----------------------------------------------------------------------------
 * 28.06.90 MS    1.0     Grundversion
 *----------------------------------------------------------------------------
 *) (*$C-,M-,R-,S-,N+*)



(*--------------------------------- intern ----------------------------------*)

(*$L-*)
PROCEDURE SQR ( L       : LONGINT ): CARDINAL;
BEGIN
  ASSEMBLER
  ; Ai := (Ai-1 + L DIV Ai-1) DIV 2
  move.l        -(A3),D0
  bmi           IsZero
  beq           IsZero
  move.w        D3,-(A7)
  move.l        D0,D1
  swap          D1
  moveq         #15,D2
  tst.w         D1
  beq           NurImUnterenWort
  moveq         #31,D2
 
 !NurImUnterenWort
 !NextBitCheck
  btst          D2,D0
  dbne          D2,NextBitCheck
  moveq         #0,D1
  lsr.w         #1,D2
  bcc           NoOdd
  addq.w        #1,D2
 !NoOdd
  bset          D2,D1
  
 !MustCalcMore
  move.w        D1,D3
  move.l        D0,D2
  divu          D1,D2
  add.w         D1,D2
  lsr.w         #1,D2
  move.w        D2,D1
  cmp.w         D3,D1
  blt           MustCalcMore
  
  move.w        (A7)+,D3
  move.w        D1,(A3)+
  rts
 
 !IsZero
  clr.w         (A3)+
  END;
END SQR;
(*$L+*)


(*--------------------------------- extern ----------------------------------*)

(*---------------------------FixRealberechnungen-----------------------------*)

(*$L-*)
PROCEDURE MulFixReals ( F1  : FixReal;
                        F2  : FixReal ): FixReal;
BEGIN
  ASSEMBLER
  movem.l       D3-D7,-(A7)
  move.l        -(A3),D0        ; F2
  move.l        -(A3),D2        ; F3
  
  clr.w         D5              ; Vorzeichenflag
  
  tst.l         D0              ; Faktor 2 negativ ?
  bpl           go
  neg.l         D0
  eori.w        #1,D5
 !go
  tst.l         D2
  bpl           go2             ; Faktor 1 negativ ?
  neg.l         D2
  eori.w        #1,D5
 !go2
  
  move.w        D5,-(A7)        ; Vorzeichen des Ergebnisses merken
  
  
  swap          D0
  move.w        D0,D1           ; D1.W = HighWord (Vorkomma) Faktor 2
  swap          D0              ; D0.W = LowWord (Nachkomma) Faktor 2
  
  swap          D2
  move.w        D2,D3           ; D3.W = HighWord (Vorkomma) Faktor 1
  swap          D2              ; D2.W = LowWord (Nachkomma) Faktor 1
  
  ; D6.L = LowDoubleWord Ergebnis
  ; D7.L = HighDoubleWord Ergebnis
  
  move.w        D2,D6           ; Frac (F2) * Frac (F1)
  mulu          D0,D6           ; = LowDoubleWord
  
  move.w        D3,D7           ; Trunc (F2) * Trunc (F1)
  mulu          D1,D7           ; = HightDoubleWord
  
  mulu          D0,D3           ; Frac (F2) * Trunc (F1)
  moveq.l       #0,D4
  move.w        D3,D4           ; => HighWord of LowDoubleWord
  swap          D4
  moveq.l       #0,D5
  swap          D3              ; und LowWord of HighDoubleWord
  move.w        D3,D5
  
  add.l         D4,D6           ; zum Ergebnis addieren
  addx.l        D5,D7
  
  mulu          D1,D2           ; Trunc (F2) * Frac (F1)
  moveq.l       #0,D4
  move.w        D2,D4           ; => HightWord of LowDoubleWord
  swap          D4
  moveq.l       #0,D5           ; und LowWord of HighDoubleWord
  swap          D2
  move.w        D2,D5
  
  add.l         D4,D6           ; wieder addieren
  addx.l        D5,D7
  
  move.w        D7,D6           ; Ergebnis ist (ohne Rangecheck!)
  swap          D6              ; (LowWord of HighDoubleWord und
  tst.w         (A7)+           ; HightWord of LowDoubleWord) => FIXREAL
  beq           go3
  neg.l         D6              ; Vorzeichen wieder anbringen
  
 !go3
  move.l        D6,(A3)+        ; fertig
  
  movem.l       (A7)+,D3-D7
  END;
END MulFixReals;
(*$L+*)




(*-------------------------- Vektorenbrechnungen ----------------------------*)


(*$L-*)
PROCEDURE VectorLengthPowerOfTwo ( V          : Vector ): LONGCARD;
BEGIN
  ASSEMBLER
  move.l        -(A3),D0        ; Y
  swap          D0
  move.l        -(A3),D1        ; X
  swap          D1
  muls          D1,D1
  muls          D0,D0
  add.l         D1,D0
  move.l        D0,(A3)+
  END;
END VectorLengthPowerOfTwo;
(*$L+*)


(*$L-*)
PROCEDURE VectorLength ( V          : Vector ): CARDINAL;
BEGIN
  ASSEMBLER
  move.l        -(A3),D0
  swap          D0
  move.l        -(A3),D1
  swap          D1
  muls          D0,D0
  muls          D1,D1
  add.l         D0,D1
  move.l        D1,(A3)+
  jmp           SQR
  END;
END VectorLength;
(*$L+*)



(*$L-*)
PROCEDURE ScaleVector ( V               : Vector;
                        LengthOfVector  : CARDINAL;
                        ScaleToLength   : CARDINAL ): Vector;
BEGIN
  ASSEMBLER
  move.w        -(A3),D0
  move.w        -(A3),D1
  tst.w         D1
  beq           Err
  
  move.l        -8(A3),D2
  swap          D2
  muls          D0,D2
  divs          D1,D2
  swap          D2
  clr.w         D2
  move.l        D2,-8(A3)
  
  move.l        -4(A3),D2
  swap          D2
  muls          D0,D2
  divs          D1,D2
  swap          D2
  clr.w         D2
  move.l        D2,-4(A3)
  rts
  
 !Err
  clr.l         -4(A3)
  clr.l         -8(A3)
  END;
END ScaleVector;
(*$L+*)
 
 
(*$L-*)
PROCEDURE AddVectors ( VectorA       : Vector;
                       VectorB       : Vector ): Vector;

BEGIN
  ASSEMBLER
  move.l        -(A3),D0        ; Y
  move.l        -(A3),D1        ; X
  add.l         D0,-4(A3)
  add.l         D1,-8(A3)
  END;
END AddVectors;
(*$L+*)

(*$L-*)
PROCEDURE SubVectors ( VectorA       : Vector;
                       VectorB       : Vector ): Vector;
BEGIN
  ASSEMBLER
  move.l        -(A3),D0        ; Y
  move.l        -(A3),D1        ; X
  sub.l         D0,-4(A3)
  sub.l         D1,-8(A3)
  END;
END SubVectors;
(*$L+*)


END MSFixReals.


