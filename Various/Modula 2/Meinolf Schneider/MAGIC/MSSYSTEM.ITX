IMPLEMENTATION MODULE MSSystems;

(*----------------------------------------------------------------------------
 * System-Version: MOS 3.5
 *----------------------------------------------------------------------------
 * Version       : 1.0
 *----------------------------------------------------------------------------
 * Text-Version  : V#00006
 *----------------------------------------------------------------------------
 * Modul-Holder  : Meinolf Schneider
 *----------------------------------------------------------------------------
 * Copyright May 1990 by Digital Art Meinolf Schneider
 *----------------------------------------------------------------------------
 * MS  : Meinolf Schneider
 *----------------------------------------------------------------------------
 * Datum    Autor Version Bemerkung (Arbeitsbericht)
 *----------------------------------------------------------------------------
 * 01.05.90 MS    1.0     Grundversion
 *----------------------------------------------------------------------------
 *) (*$C-,M-,R-,S-,N+*)


FROM    System                  IMPORT  ADDRESS, ADR, BYTE, TSize;


(*----------------------------------------------------------------------------*)

(*$L-*)
PROCEDURE Trap4XBRA;
BEGIN
  ASSEMBLER
  asc           'XBRA'
  asc           'MSSY'
  dc.w          0
  END;
END Trap4XBRA;
(*$L+*)

(*$L-*)
PROCEDURE Trap4;
BEGIN
  ASSEMBLER
  bset          #5,(A7)
  rte
  END;
END Trap4;
(*$L+*)


(*$L-*)
PROCEDURE EnterSupervisorMode;
BEGIN
  ASSEMBLER
  move.l        (A7)+,A0
  trap          #4
  jmp           (A0)
  END;
END EnterSupervisorMode;
(*$L+*)

(*$L-*)
PROCEDURE RestallSuperTrap;
BEGIN
  ASSEMBLER
  clr.l         -(A7)
  move.w        #$20,-(A7)
  trap          #1
  addq.l        #6,A7
  
  lea           Trap4,A0
  move.l        -4(A0),$90
  
  move.l        D0,-(A7)
  move.w        #$20,-(A7)
  trap          #1
  addq.l        #6,A7
  END;
END RestallSuperTrap;
(*$L+*)

(*----------------------------------------------------------------------------*)

(*$L-*)
PROCEDURE Allocate ( VAR addr    : ADDRESS;
                         siz     : LONGCARD );
BEGIN
  ASSEMBLER
  move.l        -(A3),D0
  move.l        -(A3),A0
  move.l        A3,(A0)
  addq.l        #1,D0
  bclr          #0,D0
  adda.l        D0,A3
  END;
END Allocate;
(*$L+*)

(*$L-*)
PROCEDURE MemAvail (): LONGCARD;
BEGIN
  ASSEMBLER
  move.l        A7,D0
  sub.l         A3,D0
  subq.l        #8,D0
  bpl           ok
  clr.l         D0
 !ok
  move.l        D0,(A3)+
  END;
END MemAvail;
(*$L+*)

(*----------------------------- BCONOUT Textausgabe --------------------------*)

(*$L-*)
PROCEDURE Write ( c     : CHAR );
BEGIN
  ASSEMBLER
  tst.b         -(A3)
  moveq.l       #0,D0
  move.b        -(A3),D0
  
  move.w        D0,-(A7)
  move.w        #2,-(A7)
  move.w        #3,-(A7)
  trap          #13
  addq.w        #6,A7
  END;
END Write;
(*$L+*)

(*$L-*)
PROCEDURE Writeln;
BEGIN
  ASSEMBLER
  move.b        #15c,(A3)+
  clr.b         (A3)+
  jsr           Write
  move.b        #14c,(A3)+
  clr.b         (A3)+
  jmp           Write
  END;
END Writeln;
(*$L+*)

(*$L-*)
PROCEDURE WriteString ( Text    : ARRAY OF CHAR );
BEGIN
  ASSEMBLER
  move.w        -(A3),D1        ; Height
  move.l        -(A3),A0        ; Adresse des Strings
  
  clr.w         D0
  
 !NextChar
  cmp.w         D1,D0
  bhi           ED
  move.b        0(A0,D0.W),D2
  beq           ED
  
 !fertig
  movem.l       A0/D0/D1,-(A7)
  move.w        D2,-(A7)
  move.w        #2,-(A7)
  move.w        #3,-(A7)
  trap          #13
  addq.w        #6,A7
  movem.l       (A7)+,A0/D0/D1
  addq.w        #1,D0
  bra           NextChar
 !ED
  END;
END WriteString;
(*$L+*)


(*----------------------------- Zufall ---------------------------------------*)

VAR     LastRandom      : LONGCARD;


(*$L-*)
PROCEDURE MinMaxRandom ( Min, Max       : INTEGER ): INTEGER;
BEGIN
  ASSEMBLER
  clr.w         D1
  move.l        LastRandom,D0
  moveq         #7,D2           ; 8-mal genÅgt ?
 
 !RndLoop
  btst          #30,D0
  beq           Rnd1
  addq.w        #1,D1
 
 !Rnd1
  btst          #2,D0
  beq           Rnd2
  addq.w        #1,d1

 !Rnd2
  asr.w         #1,D1           ; rechtes bit ins extendflag
  roxl.l        #1,D0           ; extendflag reinholen
  dbf           D2,RndLoop
  move.l        D0,LastRandom
  
  andi.l        #$7FFF,D0
  move.w        -(A3),D1        ; Max
  addq.w        #1,D1
  move.w        -(A3),D2        ; Min
  sub.w         D2,D1           ; Max - Min
  beq           go
  divs          D1,D0
  swap          D0              ; MOD ( Max - Min )
  add.w         D2,D0           ; + Min
  move.w        D0,(A3)+
  rts
 
 !go
  move.w        D2,(A3)+
  END
END MinMaxRandom;
(*$L+*)

(*----------------------------------------------------------------------------*)





BEGIN
  ASSEMBLER
  clr.l         -(A7)
  move.w        #$20,-(A7)
  trap          #1
  addq.l        #6,A7
  
  lea           Trap4XBRA,A0
  lea           Trap4,A0
  move.l        $90,-4(A0)
  move.l        A0,$90
  
  
   ; Zufall starten
  move.l        $420,D1
  add.l         $4BA,D1
  move.l        D1,LastRandom
  
  move.l        D0,-(A7)
  move.w        #$20,-(A7)
  trap          #1
  addq.l        #6,A7
  END;
END MSSystems.


