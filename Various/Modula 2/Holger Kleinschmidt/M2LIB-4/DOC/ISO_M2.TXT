Inhalt: Es werden einige der ISO-énderungen/Erweiterungen gegenÅber dem
        Åblichen (Wirth)Sprachstandard beschrieben. Diese AufzÑhlung ist
        weder vollstÑndig noch exakt!
        Der Abschnitt Åber Exceptions sollte vor Benutzung der ISO-Module
        gelesen werden.


o Numerische Typen

  Bei den ganzzahligen Typen gibt es nur noch CARDINAL und INTEGER.
  Dies sind die grîûten verfÅgbaren Ganzzahltypen; bei Bedarf kînnen
  Unterbereichstypen deklariert werden, die der Compiler dann bzgl. des
  Speicherplatzbedarfs optimieren kann (aber nicht muû). Es kînnen
  zusÑtzlich auch Typen wie LONGCARD oder SHORTCARD bereitgestellt
  werden, das sind dann aber Erweiterungen des jeweiligen Compilers.
  Da es nur noch jeweils einen Ganzzahltyp gibt, entfallen auch
  Kennzeichnungen fÅr LONG-Konstanten, wie z.B. ein nachgestelltes L oder D.

  FÅr CARDINAL und INTEGER gibt es zwei neue Operatoren: REM und /.
  FÅr positive Argumente verhalten sich diese beiden Operatoren genauso
  wie MOD und DIV, Unterschiede gibt es jedoch bei negativen Argumenten.
  Um das ganze weiter zu komplizieren: REM und / liefern bei negativen
  Argumenten die Ergebnisse, die frÅher MOD und DIV geliefert haben,
  wÑhrend diese jetzt umdefiniert wurden. Das Verhalten wird aus der
  folgenden Tabelle ersichtlich (aus dem Standard):

    ---------------------------------------------------------------
    | op  | 31 op 10 | 31 op (-10) | (-31) op 10 | (-31) op (-10) |
    +-----+----------+-------------+-------------+----------------+
    |  /  |    3     |    -3       |      -3     |       3        |
    | REM |    1     |     1       |      -1     |      -1        |
    | DIV |    3     |  Ausnahme   |      -4     |   Ausnahme     |
    | MOD |    1     |  Ausnahme   |       9     |   Ausnahme     |
    ---------------------------------------------------------------

  Bei den reellen Zahlen gibt es REAL und LONGREAL, wie es auch schon
  die meisten Modula-Systeme frÅher geboten haben. LONGREAL muû mindestens
  den Zahlenbereich von REAL umfassen, kann aber auch identisch (vom
  Zahlenbereich, nicht vom Typ) mit REAL sein. Die beiden Typen sind
  allerdings nicht (mehr) zuweisungskompatibel, sie mÅssen explizit
  z.B. von LONGREAL nach REAL mit FLOAT und umgekehrt mit LFLOAT (neue
  Funktion) umgewandelt werden. FÅr LONGREAL-Konstanten gibt es keine
  besondere Kennzeichnung, wie z.B. ein D als Exponent. Konstanten
  passen sich in der Genauigkeit dem umgebenden Ausdruck an, soweit das
  mîglich ist.

  Als neuen Zahlentyp gibt es komplexe Zahlen: COMPLEX und LONGCOMPLEX.
  Komplexe Zahlen sind aus einem Realteil und einem ImaginÑrteil vom
  Typ REAL bzw. LONGREAL zusammengsetzt. FÅr den Zahlenbereich von
  LONGCOMPLEX im VerhÑltnis zu COMPLEX gilt das gleiche wie fÅr LONGREAL
  und REAL. Als vordefinierte Operationen gibt es die vier Grundrechenarten
  und den Test auf (Un)Gleichheit (+, -, *, /, =, <>, #), ein Vergleich
  auf kleiner/grîûer existiert nicht. Aus (LONG)REAL-Variablen oder
  Konstanten kînnen mit dem Konstruktor CMPLX komplexe Zahlen gebildet
  werden:

    c := CMPLX(1.0, 2.0) + c;
    c := CMPLX(x, y);

  Mit den Selektoren RE und IM kann der Real- bzw. ImaginÑrteil (vom Typ
  (LONG)REAL) einer komplexen Zahl ermittelt werden:

    r := RE(c) * 5.0;
    r := IM(c) - 1.0;


o RECORDs, ARRAYs

  Zur Laufzeit lassen sich jetzt AusdrÅcke von RECORD- und ARRAY-Typen
  (value constructors, Aggregate) erstellen. Bei den einzelnen Elementen ist
  man nicht auf Konstanten festgelegt, sondern kann auch Variablen verwenden.
  Die Syntax ist der der Mengen angeglichen, genauer gesagt sind AusdrÅcke
  von Mengen auch Value Constructors. Dabei werden die einzelnen Elemente
  durch Kommata getrennt und in geschweifte Klammern eingeschlossen; vor
  der îffnenden Klammer steht der Typ des Ausdrucks. Sind einzelne Elemente
  selber strukturiert, muû deren Typ nicht angegeben werden. Bei varianten
  RECORDs muû der Selektor als zusÑtzliche Konstante aufgenommen werden,
  auf die dann die zum Selektor passenden RECORD-Elemente folgen. Bei ARRAYs
  kann ein Wiederholungsfaktor angegeben werden, wenn Feldelemente mit
  demselben Wert belegt werden sollen.

  Beispiele (aus dem Standard):

    TYPE RowType   = ARRAY [1..3] OF REAL;
         ArrayType = ARRAY [1..2] OF RowType;

    VAR  row   : RowType;
         array : ArrayType;

    ...

    row := RowType{1.0, 1.0, 1.0};
    row := RowType{1.0 BY 3};

    array := ArrayType{row, row};
    array := ArrayType{row BY 2};
    array := ArrayType{RowType{1.0, 2.0, 3.0}, RowType{1.0, 2.0, 3.0}};
    array := ArrayType{RowType{1.0, 2.0, 3.0} BY 2};
    array := ArrayType{{1.0, 2.0, 3.0}, row};


    TYPE NameType = ARRAY [0..24] OF CHAR;
         DateType = RECORD
           year, month, day : CARDINAL;
         END;
         PersonType = RECORD
           name  : NameType;
           birth : DateType;
         END;

    VAR  day, month, year : CARDINAL;
         date             : DateType;
         person, nobody   : PersonType

    ...

    date   := DateType{year, month, day}
    date   := DateType{1623, 6, 19}
    person := PersonType{"Blaise Pascal", date}
    person := PersonType{"Blaise Pascal", DateType{1623, 6, 19}}
    nobody := PersonType{NameType{"" BY 25}, DateType{0, 0, 0}}
    nobody := PersonType{{"" BY 25}, {0, 0, 0}}


o Konvertierung

  Zu unterscheiden ist zwischen der Typ-Uminterpretation (Typtransfer) und
  der Typ-Konvertierung. Bei der ersten Form wird der eigentliche Wert, das
  Bitmuster, des Ausdrucks nicht geÑndert, wÑhrend bei der zweiten Form
  tatsÑchlich Typen ineinander umgewandelt werden, wofÅr gegebenenfalls auch
  Code erzeugt wird. FrÅher wurden andere Methoden verwendet, um diese
  Effekte zu erreichen, wobei jeder Hersteller seine eigene Meinung von der
  Aufgabenteilung hatte; auûerdem waren die Mîglichkeiten meistens sehr
  beschrÑnkt. FÅr die Uminterpretation wurde zumeist die Syntax mit dem Typ
  als Funktionsname verwendet (z.B. INTEGER(<expr)), wÑhrend fÅr die
  Konvertierung die Funktion VAL zustÑndig war. Manchmal war aber auch nur
  eine der beiden Mîglichkeiten vorhanden.

  Bei ISO ist fÅr die Uminterpretation die neue Funktion SYSTEM.CAST
  zustÑndig, wobei die Syntax der von VAL entspricht:

    intval := CAST(INTEGER,cardval);

  Haben Quell- und Zieltyp den gleichen Speicherplatzbedarf, bleibt das
  Bitmuster des Ausdrucks vollstÑndig erhalten, sonst bleibt es auf jeden
  Fall bis zur kleineren der beiden Grîûen erhalten, wÑhrend der Rest
  implementierungsspezifisch ist. Die alte Syntax mit dem Typnamen als
  Funktion ist nicht mehr erlaubt.

  FÅr die Konvertierung ist die alte Funktion VAL zustÑndig, die jedoch
  sehr viel universeller geworden ist. So akzeptiert sie jetzt jede
  sinnvolle Kombination von Typen; z.B. ist auch die Konvertierung von
  und nach (LONG)REAL mîglich. Damit sind z.B. folgende Konvertierungen
  identisch:

    r := VAL(REAL,card);
    r := FLOAT(card),

  FÅr die Konvertierung nach LONGREAL gibt es die neue Funktion LFLOAT.
  FLOAT und LFLOAT akzeptieren auch (LONG)REAL-Typen, so daû eine einfache
  Konvertierung zwischen LONGREAL und REAL mîglich ist:

    lr := LFLOAT(r) + lr;
    r  := FLOAT(lr) + r;

  Eine weitere neue Konvertierungsfunktion ist INT, die eine ErgÑnzung zu
  ORD fÅr INTEGER-Resultate ist. INT akzeptiert im Gegensatz zu ORD auch
  (LONG)REAL-AusdrÅcke als Parameter. FÅr die Konvertierung von positiven
  (LONG)REAL-AusdrÅcken nach CARDINAL ist weiterhin TRUNC zustÑndig.


o Mengen

  Bei Wirth gab es nur einen Typ von Mengen, bei dem stillschweigend eine
  Abbildung der Mengenelemente auf Bits angenommen wurde. Nun gibt es
  zwei verschiedene Typen:

  * Die mit den neuen SchlÅsselwort PACKEDSET deklarierten Mengen, z.B.:

    TYPE Bitmenge = PACKEDSET OF [0..15];

    werden explizit mit Bitmengen assoziiert, fÅr die die folgenden
    Punkte gelten:

    - Wenn 'n' Element der Menge ist, dann ist das Bit 'n' gesetzt,
      sonst ist es gelîscht.

    - Bit 0 ist das niederwertigste Bit, und aufeinanderfolgende
      Bitnummern reprÑsentieren aufeinanderfolgende Bits.

    - Neben den Åblichen Mengenoperationen gibt es noch die neuen
      Funktionen SYSTEM.SHIFT und SYSTEM.ROTATE, mit denen diese
      Mengen um Bitpositionen verschoben und (logisch) rotiert werden
      kînnen. Bei einigen Compilern gab es diese beiden Funktionen
      schon vorher, sie waren aber auch fÅr andere Typen als (Bit)Mengen
      geeignet.

    - BITSET ist ein vordefinierter PACKEDSET-Typ.

    Falls BITSET und CARDINAL dieselbe Speichergrîûe haben, gilt damit
    z.B. folgendes:

      CAST(CARDINAL,BITSET{0}) = VAL(CARDINAL,1)

      SHIFT(CAST(BITSET,card), 1) = card * 2
      SHIFT(CAST(BITSET,card), -1) = card DIV 2

  * bei den mit SET deklarierten Mengen ist die interne ReprÑsentation
    nicht festgelegt, es muû insbesondere keine Abbildung auf Bits geben.

    - Die Implementierung muû mindestens die Deklaration von SET OF CHAR
      erlauben.

  FÅr die Bildung von AusdrÅcken beider Mengentypen gilt:

    - Der Basistyp muû immer angegeben werden, es muû also z.B. heiûen:
      BITSET{0..3}, und nicht: {0..3}.

    - Als einzelne Mengenelemente oder Bereiche sind nun auch Variablen
      zugelassen:

      set := Menge{0,i,5,k..j};



o Adreûarithmetik

  Die Typen ADDRESS und CARDINAL sind nicht mehr (ausdrucks)kompatibel,
  stattdessen mÅssen jetzt neue Funktionen aus SYSTEM benutzt werden, um
  mit Adressen zu rechnen: ADDADR und SUBADR ersetzen die Addition und
  Subtraktion mit beliebigen Pointer-AusdrÅcken. Dabei wird der angegebene
  CARDINAL-Wert addiert bzw. subtrahiert, die Elementgrîûe des Pointers
  wird nicht berÅcksichtigt. Mit DIFADR lÑût sich die Differenz zweier
  Pointer berechnen (z.B. fÅr einen Vergleich) und mit MAKEADR wird ein
  ADDRESS-Wert aus dem/n Parameter(n) erzeugt.

  Beispiele:

  adr1 := ADDADR(adr1, 10);
  adr1 := SUBADR(ADDADR(adr1, 5), 20);
  IF DIFADR(adr1, adr2) < 0 THEN
    (* adr1 < adr2 *)

  adr1 := MAKEADR(1000);



o Modulterminierung

  Bislang gab es nur eine Modulinitialisierung beim Programmstart (alles,
  was zwischen dem Modul-BEGIN und dem Modul-END steht, wird beim
  Programmstart automatisch ausgefÅhrt). Jetzt gibt es auch eine
  Modulterminierung, die bei Programmende ausgefÅhrt wird. ZustÑndig hierfÅr
  ist das neue SchlÅsselwort FINALLY. Alles, was zwischen dem Modul-BEGIN
  und dem FINALLY steht, gehîrt zur Initialisierung, und wird wie bisher
  bei Programmstart ausgefÅhrt. Alles, was zwischen dem FINALLY und dem
  Modul-END steht, gehîrt zur Terminierung. Die Terminierungen werden in
  der umgekehrten Reihenfolge wie die Initialisierungen ausgefÅhrt, so daû
  sich eine Schachtelung ergibt. Sowohl Modulinitialisierung als auch
  Modulterminierung sind allerdings optional.


o Ausnahmen (Exceptions)

  Dies ist wohl die wichtigste und auch tiefgreifendste Erweiterung. So
  Ñhnlich wie z.B. auch in C++ kînnen nun Fehler Åber sog. Ausnahmen
  mitgeteilt werden. Der Name kommt wohl daher, daû diese Art der
  Fehlerbehandlung nicht im normalen Kontrollfluû berÅcksichtigt wird
  (sowas wie: IF res < 0 THEN err...), sondern ein separater Prozedur- oder
  Modulblock dafÅr zustÑndig ist, der scheinbar asynchron zum normalen
  Programmablauf aktiviert wird. Neben den Ausnahmen, die vom Laufzeitsystem
  automatisch bei Fehlern erzeugt werden (Indextest usw.), kînnen auch vom
  Programmierer mit der Funktion EXCEPTIONS.RAISE Ausnahmen erzeugt werden.
  Um auf die Ausnahmen (also auch Laufzeitfehler!) reagieren zu kînnen, sind
  Ausnahmehandler erforderlich. Handler bestehen aus (fast) normalen Modul-
  oder Prozedurblîcken, die mit dem neuen SchlÅsselwort EXCEPT eingeleitet
  werden. Jede Prozedur, jede Modulinitialisierung und auch jede
  Modulfinalisierung kann parallel einen Handler besitzen, der auf gleicher
  ``Ebene'' mit dem durch BEGIN oder FINALLY eingeleiteten normalen Block ist.
  Da es unterschiedliche Ausnahmen gibt, kînnen auch die Handler selektiv
  bestimmten Ausnahmen zugeordnet werden.

  Wenn wÑhrend der AusfÅhrung des normalen Blocks irgendeine Ausnahme
  auftritt, wird folgendermaûen vorgegangen:

  1) Wenn fÅr den Block ein Handler existiert und dieser auch fÅr die
     Ausnahme zustÑndig ist, wird der Handler ausgefÅhrt.

  2) Sonst wird in der Aufrufhierarchie soweit nach oben gegangen, bis
     entweder ein fÅr diese Ausnahme zustÑndiger Handler gefunden wird,
     der dann auch ausgefÅhrt wird, oder die oberste Ebene erreicht ist.
     Wenn kein Handler gefunden wurde, wird das Programm, evtl. mit
     einer Meldung, beendet.

  D.h. auch, daû ein Programm bei einer Ausnahme beendet wird, wenn dieses
  ohne BerÅcksichtigung von Ausnahmen geschrieben wurde, was fÅr so ziemlich
  alle Ñlteren Quelltexte gelten dÅrfte.

  Damit ein Handler testen kann, ob er fÅr eine Ausnahme zustÑndig ist,
  muû jedes Bibliotheksmodul, das Ausnahmen auslîsen kann, folgende Dinge
  exportieren:

    PROCEDURE Is<Name>Exception ( ): BOOLEAN;

  Diese Funktion ist immer notwendig. FÅr Name wird ein passender Wert
  eingesetzt, z.B. der Modulname: IsIOException. Hiermit wird getestet,
  ob die Ausnahme vom betreffenden Modul ausgelîst wurde.


    TYPE <Name>Exceptions = <Enumerationstyp>;

    PROCEDURE <Name>Exception ( ): <Name>Exceptions;

  Dieser Typ und diese Prozedur sind dann notwendig, wenn das Modul mehr
  als eine Ausnahme auslîsen kann und deswegen eine Unterscheidung nîtig
  ist.

  Der Handler kann also jetzt z.B. mit: IF IsIOException() THEN, oder
  IF IOException() = notAvailable THEN testen, ob er fÅr diese Ausnahme
  zustÑndig ist.

  FÅr Laufzeitfehler-Ausnahmen existiert das Modul M2EXCEPTIONS, das alle
  diese Dinge mit dem Namen M2 exportiert. Somit kann also auch auf
  Laufzeitfehler in einer definierten Weise reagiert werden.

  Innerhalb eines Handlers gibt es nun mehrere Mîglichkeiten: Wenn der
  Handler ein RETURN ausfÅhrt, dann wird die Prozedur oder der Modulrumpf
  normal beendet als wÑre keine Ausnahme aufgetreten. Wenn der Handler
  das neue SchlÅsselwort RETRY ausfÅhrt, wird der zugehîrige normale Block,
  wÑhrend dessen AusfÅhrung die Ausnahme aufgetreten ist, nochmal wiederholt.
  Wird der Handler durch seine letzte Anweisung beendet, ohne daû eine der
  vorigen Aktionen ausgefÅhrt wurde, wird in der Aufrufhierarchie nach
  dem nÑchsten Handler gesucht, so als wÑre dieser Handler nicht zustÑndig
  fÅr die Ausnahme. Der Handler kann auch selbst wiederum eine Ausnahme
  auslîsen, wobei dann ebenfalls in der Aufrufhierarchie nach dem nÑchsten
  Handler gesucht wird.

  Dies war nur eine sehr grobe Beschreibung von Ausnahmen; die Definition
  im Standard ist Åberaus kompliziert durch die vielen Randbedingungen
  und SpezialfÑlle. Hier soll nun noch ein Beispiel folgen, das dem Standard
  entnommen wurde:


    DEFINITION MODULE LibModule;

     TYPE LibExceptions = (brokenRubberBand, outOfRubberBands)

     PROCEDURE Fly;
     PROCEDURE ReplaceRubberBand;
     PROCEDURE SupplyRubberBands;

     PROCEDURE IsLibException (): BOOLEAN;
     PROCEDURE LibException (): LibExceptions;
    END LibModule.

    DEFINITION MODULE GeneralUserExceptions;

     TYPE GeneralExceptions = (problem, disaster);

     PROCEDURE RaiseGeneralException (exc:GeneralExceptions;text:ARRAY OF CHAR);
     PROCEDURE IsGeneralException (): BOOLEAN;
     PROCEDURE GeneralException (): GeneralExceptions;
    END GeneralUserExceptions;

    IMPLEMENTATION MODULE GeneralUserExceptions;

     IMPORT EXCEPTIONS;

     VAR generalSource : EXCEPTIONS.ExceptionSource;

     PROCEDURE RaiseGeneralException (exc:GeneralExceptions;text:ARRAY OF CHAR);
     BEGIN
       EXCEPTIONS.RAISE(generalSource, ORD(exc), text);
     END RaiseGeneralException;

     PROCEDURE IsGeneralException (): BOOLEAN;
     BEGIN
       RETURN(EXCEPTIONS.IsCurrentSource(generalSource));
     END IsGeneralException;

     PROCEDURE GeneralException (): GeneralExceptions;
     BEGIN
       RETURN(VAL(GeneralExceptions,EXCEPTIONS.CurrentNumber(generalSource)));
     END GeneralException;

    BEGIN
      EXCEPTIONS.AllocateSource(generalSource);
    END GeneralUserExceptions.

    ...

    FROM LibModule IMPORT
      Fly, ReplaceRubberBand, SupplyRubberBands, IsLibException, LibException,
      LibExceptions;

    FROM GeneralUserExceptions IMPORT
      GeneralExceptions, RaiseGeneralException,

    ...

    PROCEDURE TryFlying;
    BEGIN
      Fly; (* Kann Ausnahme vom Typ 'LibException' ausloesen *)
    EXCEPT
      (* Ausnahme-Handler *)
      IF IsLibException() THEN
        (* Ausnahme vom Modul 'LibModule' ausgeloest *)
        CASE LibException() OF
         |brokenRubberBand:
            ReplaceRubberBand;
            RETRY;
            (* Nicht so schlimm, nochmal "Fly" probieren *)
        ELSE
        END;
      END;
      (* Ausnahme kann nicht von diesem Handler behandelt werden. Da kein
       * RETURN, wird die Ausnahme an die aufrufende Prozedur
       * (-> "KeepFlying") weitergereicht.
       *)
    END TryFlying;

    PROCEDURE KeepFlying;
    BEGIN
      TryFlying;
    EXCEPT
      (* Ausnahme-Handler *)
      IF IsLibException() THEN
        (* Ausnahme vom Modul 'LibModule' ausgeloest *)
        CASE LibException() OF
         |outOfRubberBands:
            SupplyRubberBands;
            RETRY;
            (* Nicht so schlimm, nochmal "TryFlying" probieren *)
        ELSE
          (* Keine weitere Bearbeitung moeglich, also abbrechen und
           * normal zur aufrufenden Prozedur zurueckkehren.
           *)
          RETURN;
        END;
      ELSE
        (* Was ist nun los? *)
        RaiseGeneralException(disaster, "Unexpected exception from LibModule");
      END;
    END KeepFlying;


Literatur:
==========
Siehe ISO_LIB.TXT
