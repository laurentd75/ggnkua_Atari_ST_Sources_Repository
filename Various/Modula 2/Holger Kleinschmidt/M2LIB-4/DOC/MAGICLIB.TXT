Gemeinsame Benutzung von M2LIB und MagicLib 4.x
===============================================
Die MagicLib von Peter Hellinger besteht aus einem residenten Kernel, der
allen Programmen zur VerfÅgung steht, und einer Bibliothek, die als
Schnittstelle die Funktionen des Kernels in der jeweiligen Programmiersprache
zur VerfÅgung stellt ('ne Art "shared library"). Damit ein Programm diese
benutzen kann, muû es sich explizit an- und abmelden. Die Prozeduren
"DosSystem.exit()" und "DosSystem.Exit()" beenden normalerweise den Prozeû,
ohne daû eine Abmeldung beim Magic-Kernel erfolgt. Dies geschieht
insbesondere auch, wenn die Funktionen der ISO-Bibliothek eine Exception
auslîsen ("EXCEPTIONS.RAISE()"), denn hierbei wird intern "exit()" ausgefÅhrt.
Mit Hilfe des Makros __MAGICLIB_TERM__, das am Anfang des Implementationsmoduls
'DOSSYSTE.IPP' definiert werden kann, wird erreicht, daû ein Hauptprozeû, der
(explizit oder implizit durch eine Exception) "exit()" oder "Exit()" aufruft,
die Funktion "M_Appl.ApplTerm()" der MagicLib ausfÅhrt, so daû er sich korrekt
abmeldet. Damit sollte es keine Probleme geben, M2LIB und MagicLib gemeinsam
zu benutzen.

Beendet sich ein Programm nicht ordnungsgemÑû beim Magic-Kernel, z.B. wegen
eines Absturzes, kînnen keine weiteren Programme gestartet werden, die
Magic benutzen. Mit dem der MagicLib beiliegenden Programm MAGICLR.PRG
kann allerdings auch ein nachtrÑgliches "Abmelden" erreicht werden, so daû
dann weitere Programme gestartet werden kînnen.

Was das Verhalten des Magic-Kernels bei Threads betrifft, z.B. ob sich
ein Thread, der mit "fork()" erzeugt wurde, separat beim Kernel an- und
abmelden muû, wie das auch mit dem separaten appl_init/appl_exit bei normalen
GEM-Programmen der Fall ist, darÅber kann ich nichts sagen. Das ist allerdings
auch weniger ein Problem von M2LIB, sondern eher das der MagicLib. Deren
Dokumentation sagt darÅber allerdings nichts.

Die MagicLib-Module benutzen teilweise die zum M2-System gehîrende
Speicherverwaltung 'Storage' um Datenstrukturen aufzubauen. Damit nicht zwei
unterschiedliche Speicherverwaltungen benutzt werden, und weil das zum
M2-System gehîrende Storage schwerlich Thread-fest ist, schlage ich vor,
den Import von 'Storage' durch den Import von 'ISOStorage' zu ersetzen.
Im einzelnen sollte auch darauf geachtet werden, welche Prozeduren der
MagicLib die Speicherverwaltung verwenden, denn auch hier gilt, daû
solche dynamischen Datenstrukturen nicht von mehreren Threads gemeinsam
manipuliert werden dÅrfen (-> THREADS.TXT). Leider steht auch darÅber nichts
in der MagicLib-Dokumentation.

Mit Hilfe der Prozedur "M_Appl.InstallTermproc()" lassen sich auch in der
MagicLib Modulterminierungen Ñhnlich wie mit "DosSystem.atexit()" installieren.
Diese werden beim Aufruf von "M_Appl.ApplTerm()" vor der Abmeldung beim
Magic-Kernel ausgefÅhrt. Aus der Sicht von M2LIB sind dies
Systemterminierungen (siehe auch THREADS.TXT), die immer dann ausgefÅhrt
werden, wenn der Hauptprozeû mit "exit()" oder "Exit()" beendet wird. Im
Gegensatz dazu werden mit "atexit()" installierte Terminierungsroutinen
nur bei "exit()" ausgefÅhrt und zwar nach der Abmeldung vom Magic-Kernel.

Bei der MagicLib gibt es ein Modul 'Portab', das, zumindest auf einem
TOS-Dateisystem, den gleichen Namen wie das M2LIB-Modul 'PORTAB' besitzt.
Um Konflikten aus dem Weg zu gehen, schlage ich vor, 'Portab' umzubenennen,
z.B. in 'M_Portab'.

Man sollte darauf achten, daû beim öbersetzen der MagicLib die gleichen
Compileroptionen wie bei der M2LIB verwendet werden, wie z.B. die Grîûen von
INTEGER/CARDINAL-Typen oder die FunktionsrÅckgabe Åber Stack oder Register.

Bei MM2 muû bei der öbersetzung der MagicLib der Platz fÅr die Bezeichner
erhîht werden, z.B. mit /I30000.
