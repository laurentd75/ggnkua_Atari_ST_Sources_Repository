DEFINITION MODULE RealConv;

(* standard library module *)

__DEF_SWITCHES__
#ifdef HM2
#ifdef __LONG_REAL__
(*$!r+: Modul muss mit $r- uebersetzt werden! *)
#else
(*$!r-: Modul muss mit $r+ uebersetzt werden! *)
#endif
#ifdef __LONG_WHOLE__
(*$!i+: Modul muss mit $i- uebersetzt werden! *)
(*$!w+: Modul muss mit $w- uebersetzt werden! *)
#else
(*$!i-: Modul muss mit $i+ uebersetzt werden! *)
(*$!w-: Modul muss mit $w+ uebersetzt werden! *)
#endif
#endif
(*****************************************************************************)
(* ISO-RealConv                                                              *)
(* --------------------------------------------------------------------------*)
(* 27-Okt-95, Holger Kleinschmidt                                            *)
(*****************************************************************************)
#if !ISO_recursive_proc_decl
FROM PORTAB IMPORT ANYTYPE;
#endif

IMPORT ConvTypes;

(*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*)

TYPE
  ConvResults = ConvTypes.ConvResults;

(*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*)

(* "ScanReal()" bildet den Startzustand eines endlichen Automaten zur
   Erkennung von gueltigen Repraesentationen von reellen Zahlen.
   Beginnend mit <nextState> := ScanReal wird solange die Prozedur
   aufgerufen, deren Wert durch den letzten Aufruf <nextState> zugewiesen
   wurde, zusammen mit dem naechsten Eingabezeichen, bis der Wert von
   <chClass> 'terminator' oder 'invalid' ist.
   Moeglicherweise kann der Interpreter Zeichen, die als 'invalid' erkannt
   wurden, ignorieren, z.B. wenn bei einer interaktiven Eingabe nur gueltige
   Zeichen als Echo zurueckgeschrieben werden, um dem Benutzer eine Kontrolle
   zu geben.

   Beispiel:
   ---------
     ...
     idx   := 0;
     state := RealConv.ScanReal;
     LOOP
       state(str[idx], class, state)
       CASE class OF
         padding:
        |valid:
        |invalid, terminator:
          EXIT;
       END;
       INC(idx);
     END;
     ...

   Wenn die Eingabesequenz endet, bevor ein Zeichen als 'terminator'
   erkannt wurde, sollte das Stringendezeichen als letzte Eingabe fuer den
   Automaten benutzt werden. Wenn die bisherige Zeichensequenz eine gueltige
   Repraesentation darstellte, wird das Stringendezeichen als 'terminator'
   erkannt, sonst als 'invalid'.
 *)


PROCEDURE ScanReal ((* EIN/ -- *)     inputCh   : CHAR;
                    (* -- /AUS *) VAR chClass   : ConvTypes.ScanClass;
#if ISO_recursive_proc_decl
                    (* -- /AUS *) VAR nextState : ConvTypes.ScanState );
#else
                    (* -- /AUS *) VAR nextState : ARRAY OF ANYTYPE    );
#endif

(* Startzustand eines endlichen Automaten zur Erkennung von
   Gleitkommazahlen:

   state    | inputCh       | chClass    | nextState
   ---------+---------------+------------+----------
   ScanReal | space         | padding    | ScanReal
   ScanReal | sign          | valid      | RS
   ScanReal | decimal digit | valid      | P
   ScanReal | other         | invalid    | ScanReal
   ---------+---------------+------------+----------
   RS       | decimal digit | valid      | P
   RS       | other         | invalid    | RS
   ---------+---------------+------------+----------
   P        | decimal digit | valid      | P
   P        | "."           | valid      | F
   P        | "E"           | valid      | E
   P        | "e"           | valid      | E
   P        | other         | terminator | --
   ---------+---------------+------------+----------
   F        | decimal digit | valid      | F
   F        | "E"           | valid      | E
   F        | "e"           | valid      | E
   F        | other         | terminator | --
   ---------+---------------+------------+----------
   E        | sign          | valid      | SE
   E        | decimal digit | valid      | WE
   E        | other         | invalid    | E
   ---------+---------------+------------+----------
   SE       | decimal digit | valid      | WE
   SE       | other         | invalid    | SE
   ---------+---------------+------------+----------
   WE       | decimal digit | valid      | WE
   WE       | other         | terminator | --
*)


PROCEDURE FormatReal ((* EIN/ -- *) str : ARRAY OF CHAR ): ConvResults;

(* Liefert das Format der Stringrepraesentation einer reellen Zahl mit
   Vorzeichen in <str>. Fuehrende Leerzeichen werden ignoriert, aber der
   gesamte Rest des Strings muss eine gueltige Repraesentation darstellen,
   die durch das Stringende abgeschlossen ist.


   'strAllRight':    <str> enthaelt eine gueltige Repraesentation einer
                     reellen Zahl mit Vorzeichen, und der Wert unter- oder
                     ueberschreitet nicht den moeglichen Wertebereich.

   'strOutOfRange':  <str> enthaelt eine gueltige Repraesentation einer
                     reellen Zahl mit Vorzeichen, aber der Wert
                     ueberschreitet den moeglichen Wertebereich.

   'strWrongFormat': <str> enthaelt zwar noch Zeichen, aber diese bilden keine
                     gueltige Repraesentation einer reellen Zahl mit
                     Vorzeichen.

   'strEmpty':       <str> enthaelt keine weiteren Zeichen ausser fuehrenden
                     Leerzeichen.
 *)


PROCEDURE ValueReal ((* EIN/ -- *) str : ARRAY OF CHAR ): REAL;

(* Wenn in <str> die gueltige Repraesentation einer reellen Zahl mit
   Vorzeichen steht, wird der entsprechende Wert zurueckgeliefert,
   ansonsten wird die 'RealConv'-Exception ausgeloest.
 *)


PROCEDURE LengthFloatReal ((* EIN/ -- *) real    : REAL;
                           (* EIN/ -- *) sigFigs : CARDINAL ): CARDINAL;

(* Liefert die Anzahl der Zeichen, die fuer eine Gleitkomma-
   Stringrepraesentation von <real> mit <sigFigs> signifikanten Stellen
   noetig sind.

   Dieser Wert entspricht der minimalen Kapazitaet von <str>, die
   benoetigt wird, um Kuerzung bei einem Aufruf von
   "LongStr.RealToFloat(real, sigFigs, str)" zu vermeiden.
 *)


PROCEDURE LengthEngReal ((* EIN/ -- *) real    : REAL;
                         (* EIN/ -- *) sigFigs : CARDINAL ): CARDINAL;

(* Liefert die Anzahl der Zeichen, die fuer eine Gleitkomma-
   Stringrepraesentation von <real> mit <sigFigs> signifikanten Stellen
   noetig sind, wobei der Exponent ein ganzzahliges Vielfaches von drei ist.

   Dieser Wert entspricht der minimalen Kapazitaet von <str>, die
   benoetigt wird, um Kuerzung bei einem Aufruf von
   "LongStr.RealToEng(real, sigFigs, str)" zu vermeiden.
 *)


PROCEDURE LengthFixedReal ((* EIN/ -- *) real  : REAL;
                           (* EIN/ -- *) place : INTEGER ): CARDINAL;

(* Liefert die Anzahl der Zeichen, die fuer eine Fixpunkt-
   Stringrepraesentation von <real>, auf <place> Stellen bzgl. des Dezimal-
   punktes gerundet, noetig sind.

   Dieser Wert entspricht der minimalen Kapazitaet von <str>, die
   benoetigt wird, um Kuerzung bei einem Aufruf von
   "LongStr.RealToFixed(real, place, str)" zu vermeiden.
 *)


PROCEDURE IsRConvException ( ): BOOLEAN;

(* Testet, ob die aufrufende Koroutine in einer Ausnahmebehandlung ist,
   weil die 'RealConv'-Exception ausgeloest wurde.
 *)

END RealConv.
