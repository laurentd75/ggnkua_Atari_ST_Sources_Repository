DEFINITION MODULE WholeConv;

(* standard library module *)

__DEF_SWITCHES__
#ifdef HM2
#ifdef __LONG_WHOLE__
(*$!i+: Modul muss mit $i- uebersetzt werden! *)
(*$!w+: Modul muss mit $w- uebersetzt werden! *)
#else
(*$!i-: Modul muss mit $i+ uebersetzt werden! *)
(*$!w-: Modul muss mit $w+ uebersetzt werden! *)
#endif
#endif
(*****************************************************************************)
(* ISO-WholeConv                                                             *)
(* --------------------------------------------------------------------------*)
(* 25-Mai-95, Holger Kleinschmidt                                            *)
(*****************************************************************************)

FROM PORTAB IMPORT
(* TYPE *) UNSIGNED, SIGNED;
#if !ISO_recursive_proc_decl
FROM PORTAB IMPORT ANYTYPE;
#endif

IMPORT ConvTypes;

(*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*)

TYPE
  ConvResults = ConvTypes.ConvResults;

(*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*)

(* "ScanInt()" und "ScanCard()" bilden den Startzustand eines endlichen
   Automaten zur Erkennung von gueltigen Repraesentationen der jeweiligen
   Zahlentypen. Beginnend mit <nextState> := ScanInt bzw. ScanCard, wird
   solange die Prozedur aufgerufen, deren Wert durch den letzten Aufruf
   <nextState> zugewiesen wurde, zusammen mit dem naechsten Eingabezeichen,
   bis der Wert von <chClass> 'terminator' oder 'invalid' ist.
   Moeglicherweise kann der Interpreter Zeichen, die als 'invalid' erkannt
   wurden, ignorieren, z.B. wenn bei einer interaktiven Eingabe nur gueltige
   Zeichen als Echo zurueckgeschrieben werden, um dem Benutzer eine Kontrolle
   zu geben.

   Beispiel:
   ---------
     ...
     idx   := 0;
     state := WholeConv.ScanInt;
     LOOP
       state(str[idx], class, state)
       CASE class OF
         padding:
        |valid:
        |invalid, terminator:
          EXIT;
       END;
       INC(idx);
     END;
     ...

   Wenn die Eingabesequenz endet, bevor ein Zeichen als 'terminator'
   erkannt wurde, sollte das Stringendezeichen als letzte Eingabe fuer den
   Automaten benutzt werden. Wenn die bisherige Zeichensequenz eine gueltige
   Repraesentation darstellte, wird das Stringendezeichen als 'terminator'
   erkannt, sonst als 'invalid'.
 *)


PROCEDURE ScanInt ((* EIN/ -- *)     inputCh   : CHAR;
                   (* -- /AUS *) VAR chClass   : ConvTypes.ScanClass;
#if ISO_recursive_proc_decl
                   (* -- /AUS *) VAR nextState : ConvTypes.ScanState );
#else
                   (* -- /AUS *) VAR nextState : ARRAY OF ANYTYPE    );
#endif

(* Startzustand eines endlichen Automaten zu Erkennung ganzer Zahlen
   mit Vorzeichen:

   state   | inputCh       | chClass    | nextState
   --------+---------------+------------+----------
   ScanInt | space         | padding    | ScanInt
   ScanInt | sign          | valid      | S
   ScanInt | decimal digit | valid      | W
   ScanInt | other         | invalid    | ScanInt
   --------+---------------+------------+----------
   S       | decimal digit | valid      | W
   S       | other         | invalid    | S
   --------+---------------+------------+----------
   W       | decimal digit | valid      | W
   W       | other         | terminator | --

*)


PROCEDURE FormatInt ((* EIN/ -- *) REF str : ARRAY OF CHAR ): ConvResults;

(* Liefert das Format der Stringrepraesentation einer ganzen Zahl mit
   Vorzeichen in <str>. Fuehrende Leerzeichen werden ignoriert, aber der
   gesamte Rest des Strings muss eine gueltige Repraesentation darstellen,
   die durch das Stringende abgeschlossen ist.


   'strAllRight'   : <str> enthaelt eine gueltige Repraesentation einer ganzen
                     Zahl mit Vorzeichen, und der Wert ueberschreitet nicht den
                     moeglichen Wertebereich.

   'strOutOfRange' : <str> enthaelt eine gueltige Repraesentation einer ganzen
                     Zahl mit Vorzeichen, aber der Wert ueberschreitet den
                     moeglichen Wertebereich.

   'strWrongFormat': <str> enthaelt noch Zeichen, die keine gueltige
                     Repraesentation einer ganzen Zahl mit Vorzeichen bilden.

   'strEmpty':       <str> enthaelt keine weiteren Zeichen ausser fuehrenden
                     Leerzeichen.
 *)


PROCEDURE ValueInt ((* EIN/ -- *) REF str : ARRAY OF CHAR ): SIGNED;

(* Wenn in <str> die gueltige Repraesentation einer ganzen Zahl mit
   Vorzeichen steht, wird der entsprechende Wert zurueckgeliefert,
   ansonsten wird die 'WholeConv'-Exception ausgeloest.
 *)


PROCEDURE LengthInt ((* EIN/ -- *) int : SIGNED ): CARDINAL;

(* Liefert die Anzahl der Zeichen, die fuer eine Stringrepraesentation
   von <int> noetig sind.

   Dieser Wert entspricht der minimalen Kapazitaet von <str>, die
   benoetigt wird, um Kuerzung bei einem Aufruf von
   "WholeStr.IntToStr(int, str)" zu vermeiden.
 *)


PROCEDURE ScanCard ((* EIN/ -- *)     inputCh   : CHAR;
                    (* -- /AUS *) VAR chClass   : ConvTypes.ScanClass;
#if ISO_recursive_proc_decl
                    (* -- /AUS *) VAR nextState : ConvTypes.ScanState );
#else
                    (* -- /AUS *) VAR nextState : ARRAY OF ANYTYPE    );
#endif

(* Startzustand eines endlichen Automaten zu Erkennung ganzer Zahlen
   ohne Vorzeichen:

   state    | inputCh       | chClass    | nextState
   ---------+---------------+------------+----------
   ScanCard | space         | padding    | ScanCard
   ScanCard | decimal digit | valid      | W
   ScanCard | other         | invalid    | ScanCard
   ---------+---------------+------------+----------
   W        | decimal digit | valid      | W
   W        | other         | terminator | --
*)


PROCEDURE FormatCard ((* EIN/ -- *) REF str : ARRAY OF CHAR ): ConvResults;

(* Liefert das Format der Stringrepraesentation einer ganzen Zahl ohne
   Vorzeichen in <str>. Fuehrende Leerzeichen werden ignoriert, aber der
   gesamte Rest des Strings muss eine gueltige Repraesentation darstellen,
   die durch das Stringende abgeschlossen ist.


   'strAllRight'   : <str> enthaelt eine gueltige Repraesentation einer ganzen
                     Zahl ohne Vorzeichen, und der Wert ueberschreitet nicht den
                     moeglichen Wertebereich.

   'strOutOfRange' : <str> enthaelt eine gueltige Repraesentation einer ganzen
                     Zahl ohne Vorzeichen, aber der Wert ueberschreitet den
                     moeglichen Wertebereich.

   'strWrongFormat': <str> enthaelt noch Zeichen, die keine gueltige
                     Repraesentation einer ganzen Zahl ohne Vorzeichen bilden.

   'strEmpty':       <str> enthaelt keine weiteren Zeichen ausser fuehrenden
                     Leerzeichen.
 *)


PROCEDURE ValueCard ((* EIN/ -- *) REF str : ARRAY OF CHAR ): UNSIGNED;

(* Wenn in <str> die gueltige Repraesentation einer ganzen Zahl ohne
   Vorzeichen steht, wird der entsprechende Wert zurueckgeliefert,
   ansonsten wird die 'WholeConv'-Exception ausgeloest.
 *)


PROCEDURE LengthCard ((* EIN/ -- *) card : UNSIGNED ): CARDINAL;

(* Liefert die Anzahl der Zeichen, die fuer eine Stringrepraesentation
   von <card> noetig sind.

   Dieser Wert entspricht der minimalen Kapazitaet von <str>, die
   benoetigt wird, um Kuerzung bei einem Aufruf von
   "WholeStr.CardToStr(card, str)" zu vermeiden.
 *)


PROCEDURE IsWholeConvException ( ): BOOLEAN;

(* Testet, ob die aufrufende Koroutine in einer Ausnahmebehandlung ist,
   weil die 'WholeConv'-Exception ausgeloest wurde.
 *)

END WholeConv.
