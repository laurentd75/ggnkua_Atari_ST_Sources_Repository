DEFINITION MODULE IOChan;

(* standard library module *)

__DEF_SWITCHES__
#ifdef HM2
#ifdef __LONG_WHOLE__
(*$!i+: Modul muss mit $i- uebersetzt werden! *)
(*$!w+: Modul muss mit $w- uebersetzt werden! *)
#else
(*$!i-: Modul muss mit $i+ uebersetzt werden! *)
(*$!w-: Modul muss mit $w+ uebersetzt werden! *)
#endif
#endif
(*****************************************************************************)
(* ISO-IOChan                                                                *)
(* --------------------------------------------------------------------------*)
(* Typen und Prozeduren, die die Schnittstelle zu Kanaelen fuer geraeteunab- *)
(* haengige Module bilden.                                                   *)
(* --------------------------------------------------------------------------*)
(* 10-Jun-95, Holger Kleinschmidt                                            *)
(*****************************************************************************)

(*============== IMPLEMENTIERUNGSHINWEIS ====================================*)
(* 'Look', 'SkipLook':                                                       *)
(*     Bei Zeilenende oder Dateiende ist das zurueckgelieferte Zeichen nicht *)
(*     undefiniert, sondern garantiert 0C.                                   *)
(*===========================================================================*)

FROM PORTAB IMPORT
(* TYPE *) UNSIGNED;

IMPORT IOConsts, ChanConsts, SYSTEM;

(*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*)

(* Werte dieses Typs werden zur Identifizierung von Kanaelen benutzt *)
TYPE
  ChanId;

(*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*)

(* Es gibt einen vordefinierten Wert, der die Kennung eines ungueltigen
   Kanals darstellt. Dieser Wert kann dazu benutzt werden, Variablen des
   Typs 'ChanId' zu initialisieren.
 *)

PROCEDURE InvalidChan ( ): ChanId;

(* Liefert die Kennung des ungueltigen Kanals *)



(* Fuer die folgenden Operationen gilt: Falls der fuer den Kanal
   zustaendige Geraetetreiber die Operation unterstuetzt, entspricht das
   Verhalten der Prozedur im groben der jeweiligen Beschreibung. Das
   genaue Verhalten wird durch den entsprechenden Geraetetreiber
   definiert. Falls der Geraetetreiber eine Operation nicht unterstuetzt,
   wird die Ausnahme 'notAvailable' ausgeloest.
 *)

(* Textoperationen, die eine evtl. noetige Umformung zwischen interner und
   externer Textrepraesentation vornehmen (z.B. Umwandlung zwischen
   interner und externer Zeilenenderepraesentation:
 *)

PROCEDURE Look ((* EIN/ -- *)     cid : ChanId;
                (* -- /AUS *) VAR ch  : CHAR;
                (* -- /AUS *) VAR res : IOConsts.ReadResults );

(* Fuehrt die 'Look'-Operation fuer den Geraetetreiber aus, der fuer
   den Kanal <cid> zustaendig ist. Falls die Operation vom Geraetetreiber
   unterstuetzt wird, wird der naechste Wert im Eingabekanal <cid> unter-
   sucht, ohne ihn aus dem Strom zu entfernen: Falls es ein Zeichen ist
   (kein Zeilenende oder das Ende des Stroms), erhaelt <ch> seinen Wert,
   ansonsten ist <ch> undefiniert.

   <res> und "ReadResult()" liefern:

   'allRight'   : Der naechste Wert im Eingabestrom ist ein Zeichen.
                  <ch> enthaelt das Zeichen.
   'endOfLine'  : Der naechste Wert im Eingabestrom ist ein Zeilenende,
                  <ch> ist undefiniert.
   'endOfInput' : Der Eingabestrom ist zuende, <ch> ist undefiniert.
 *)


PROCEDURE Skip ((* EIN/ -- *) cid : ChanId );

(* Fuehrt die 'Skip'-Operation fuer den Geraetetreiber aus, der fuer
   den Kanal <cid> zustaendig ist. Falls die Operation vom Geraetetreiber
   unterstuetzt wird, wird der naechste Wert (Zeichen oder Zeilenende) aus
   dem Eingabekanal <cid> entfernt, und "ReadResult()" liefert 'allRight'.
   Falls der Eingabestrom zuende ist, wird die Ausnahme 'skipAtEnd'
   ausgeloest.
 *)


PROCEDURE SkipLook ((* EIN/ -- *)     cid : ChanId;
                    (* -- /AUS *) VAR ch  : CHAR;
                    (* -- /AUS *) VAR res : IOConsts.ReadResults );

(* Fuehrt die 'SkipLook'-Operation fuer den Geraetetreiber aus, der fuer
   den Kanal <cid> zustaendig ist. Falls die Operation vom Geraetetreiber
   unterstuetzt wird, wird das Aequivalent zur Hintereinanderausfuehrung
   von "Skip()" und "Look()" ausgefuehrt.
 *)


PROCEDURE WriteLn ((* EIN/ -- *) cid : ChanId );

(* Fuehrt die 'WriteLn'-Operation fuer den Geraetetreiber aus, der fuer
   den Kanal <cid> zustaendig ist. Falls die Operation vom Geraetetreiber
   unterstuetzt wird, wird ein Zeilenende auf den Kanal <cid> geschrieben.
 *)


PROCEDURE TextRead ((* EIN/ -- *)     cid       : ChanId;
                    (* EIN/ -- *)     to        : SYSTEM.ADDRESS;
                    (* EIN/ -- *)     maxChars  : UNSIGNED;
                    (* -- /AUS *) VAR charsRead : UNSIGNED       );

(* Fuehrt die 'TextRead'-Operation fuer den Geraetetreiber aus, der fuer
   den Kanal <cid> zustaendig ist. Falls die Operation vom Geraetetreiber
   unterstuetzt wird, werden maximal <maxChars> aufeinanderfolgende Werte
   des Typs CHAR von der aktuellen Zeile im Kanal <cid> in ein ARRAY OF CHAR
   eingelesen, dessen Adresse des ersten Zeichens <to> ist. Die Anzahl der
   gelesenen Zeichen wird in <charsRead> gespeichert. Die Prozedur liest
   maximal bis zum Zeilenende.

   Um sicherzugehen, dass eine Zeile komplett gelesen wurde, muss die
   Operation sooft ausgefuehrt werden (mit <maxChars> groesser Null),
   bis <charsRead> gleich Null ist (und "ReadResult()" entweder 'endOfLine'
   oder 'endOfInput' liefert); es reicht nicht, aufzuhoeren, wenn
   weniger Zeichen als gefordert gelesen wurden.

   "ReadResult()" liefert:

   'allRight'   : <maxChars> = <charsRead> = 0, oder
                  <maxChars> > 0 und <charsRead> > 0
   'endOfLine'  : <maxChars> > 0 und <charsRead> = 0, da das naechste
                  Zeichen das Zeilenende ist.
   'endOfInput' : <maxChars> > 0 und <charsRead> = 0, da der
                  Eingabestrom zuende ist.
 *)


PROCEDURE TextWrite ((* EIN/ -- *) cid          : ChanId;
                     (* EIN/ -- *) from         : SYSTEM.ADDRESS;
                     (* EIN/ -- *) charsToWrite : UNSIGNED       );

(* Fuehrt die 'TextWrite'-Operation fuer den Geraetetreiber aus, der fuer
   den Kanal <cid> zustaendig ist. Falls die Operation vom Geraetetreiber
   unterstuetzt wird, werden <charsToWrite> aufeinanderfolgende Werte eines
   ARRAY OF CHAR, dessen Adresse des ersten Zeichens <from> ist, auf den
   Kanal <cid> geschrieben.
 *)



(* Binaere Operationen, die keine Umsetzung zwischen interner und externer
   Repraesentation der Daten vornehmen:
 *)

PROCEDURE RawRead ((* EIN/ -- *)     cid      : ChanId;
                   (* EIN/ -- *)     to       : SYSTEM.ADDRESS;
                   (* EIN/ -- *)     maxLocs  : UNSIGNED;
                   (* -- /AUS *) VAR locsRead : UNSIGNED       );

(* Fuehrt die 'RawRead'-Operation fuer den Geraetetreiber aus, der fuer
   den Kanal <cid> zustaendig ist. Falls die Operation vom Geraetetreiber
   unterstuetzt wird, werden maximal <maxLocs> aufeinanderfolgende Werte
   des Typs LOC vom Kanal <cid> in ein ARRAY OF LOC eingelesen, dessen
   Adresse des ersten Wertes <to> ist. Die Anzahl der gelesenen Werte
   wird in <locsRead> gespeichert.

   Um sicherzugehen, dass alle verfuegbaren Bytes des Datenstroms gelesen
   wurden, muss die Operation sooft ausgefuehrt werden (mit <maxLocs> groesser
   Null), bis <locsRead> gleich Null ist (und "ReadResult()" 'endOfInput'
   liefert); es reicht nicht, aufzuhoeren, wenn weniger Bytes als gefordert
   gelesen wurden.

   "ReadResult()" liefert:

   'allRight'   : <maxlocs> = <locsRead> = 0, oder
                  <maxlocs> > 0 und <locsRead> > 0
   'endOfInput' : <maxLocs> > 0 und <locsRead> = 0, da der
                  Eingabestrom zuende ist.
 *)


PROCEDURE RawWrite ((* EIN/ -- *) cid         : ChanId;
                    (* EIN/ -- *) from        : SYSTEM.ADDRESS;
                    (* EIN/ -- *) locsToWrite : UNSIGNED       );

(* Fuehrt die 'RawWrite'-Operation fuer den Geraetetreiber aus, der fuer
   den Kanal <cid> zustaendig ist. Falls die Operation vom Geraetetreiber
   unterstuetzt wird, werden <locsToWrite> aufeinanderfolgende Werte eines
   ARRAY OF LOC, dessen Adresse des ersten Wertes <from> ist, auf den
   Kanal <cid> geschrieben.
 *)



(* Allgemeine Operationen: *)

PROCEDURE GetName ((* EIN/ -- *)     cid : ChanId;
                   (* -- /AUS *) VAR s   : ARRAY OF CHAR );

(* Fuehrt die 'GetName'-Operation fuer den Geraetetreiber aus, der fuer
   den Kanal <cid> zustaendig ist. Das Resultat wird gekuerzt, falls
   <s> nicht gross genug ist.
 *)

PROCEDURE Reset ((* EIN/ -- *) cid : ChanId );

(* Fuehrt die 'Reset'-Operation fuer den Geraetetreiber aus, der fuer
   den Kanal <cid> zustaendig ist. <cid> wird in einen geraetespezifischen
   Zustand versetzt.
 *)

PROCEDURE Flush ((* EIN/ -- *) cid : ChanId );

(* Fuehrt die 'Flush'-Operation fuer den Geraetetreiber aus, der fuer
   den Kanal <cid> zustaendig ist. Es werden alle vom Geraetetreiber
   fuer den Kanal <cid> gepufferten Daten auf <cid> geschrieben.
 *)



(* Zugriff auf das Resultat von Leseoperationen auf Kanaelen: *)

PROCEDURE SetReadResult ((* EIN/ -- *) cid : ChanId;
                         (* EIN/ -- *) res : IOConsts.ReadResults );

(* Setzt das Resultat der letzten Leseoperation fuer den Kanal <cid>
   auf den Wert <res>.
 *)

PROCEDURE ReadResult ((* EIN/ -- *) cid : ChanId ): IOConsts.ReadResults;

(* Liefert das Resultat der letzten Leseoperation fuer den Kanal <cid> *)


(* Benutzer koennen die momentanen, fuer den Kanal gueltigen Flags
   ermitteln.
 *)

PROCEDURE CurrentFlags ((* EIN/ -- *) cid : ChanId ): ChanConsts.FlagSet;

(* Liefert die Flags, die fuer den Kanal <cid> gelten, so wie sie vom
   entsprechenden Geraetetreiber definiert sind. *)


(* Die folgenden Ausnahmen (Exceptions) sind fuer dieses Modul und
   seine Klienten definiert:
 *)

TYPE
  ChanExceptions = (
    wrongDevice,
      (* Geraet kann geraetespezifische Operation nicht ausfuehren *)
    notAvailable,
      (* Verlangte Operation ist auf dem Kanal nicht durchfuehrbar *)
    skipAtEnd,
      (* Es wurde versucht, Daten aus einem Strom zu entfernen, der
         zuende ist *)
    softDeviceError,
      (* Geraetespezifischer Fehler, der beseitigt werden kann *)
    hardDeviceError,
      (* Geraetespezifischer Fehler, der nicht beseitigt werden kann *)
    textParseError,
      (* Eingabedatum entspricht nicht einem Zeichen oder Zeilenende --
         Erkennung ist optional *)
    notAChannel
      (* Kennung ist kein Kanal -- Erkennung ist optional *)
  );


PROCEDURE IsChanException ( ): BOOLEAN;

(* Testet, ob die ausfuehrende Koroutine in einer Ausnahmebehandlung
   ist, weil eine Ausnahme vom Typ 'ChanExceptions' ausgeloest wurde.
 *)


PROCEDURE ChanException ( ): ChanExceptions;

(* Falls die ausfuehrende Koroutine in einer Ausnahmebehandlung ist,
   weil eine Ausnahme vom Typ 'ChanExceptions' ausgeloest wurde,
   wird der entsprechende Wert zurueckgeliefert, ansonsten wird eine
   Ausnahme ausgeloest.
 *)


(* Wenn ein Geraetetreiber einen Fehler entdeckt, wird die Ausnahme
   'softDeviceError' oder 'hardDeviceError' ausgeloest. Wenn die Ausnahmen
   behandelt werden, kann die folgende Prozedur benutzt werden, um die
   geraetespezifische Fehlernummer fuer den angegebenen Kanal zu ermitteln.
 *)

TYPE
  DeviceErrNum = INTEGER;

PROCEDURE DeviceError ((* EIN/ -- *) cid : ChanId ): DeviceErrNum;

(* Wenn eine Ausnahme fuer den Kanal <cid> ausgeloest wurde, wird die
   vom Geraetetreiber gespeicherte Fehlernummer zurueckgeliefert,
   ansonsten ist der Funktionswert undefiniert.
 *)

END IOChan.
