DEFINITION MODULE RealIO;

(* standard library module *)

__DEF_SWITCHES__
#ifdef HM2
#ifdef __LONG_REAL__
(*$!r+: Modul muss mit $r- uebersetzt werden! *)
#else
(*$!r-: Modul muss mit $r+ uebersetzt werden! *)
#endif
#ifdef __LONG_WHOLE__
(*$!i+: Modul muss mit $i- uebersetzt werden! *)
(*$!w+: Modul muss mit $w- uebersetzt werden! *)
#else
(*$!i-: Modul muss mit $i+ uebersetzt werden! *)
(*$!w-: Modul muss mit $w+ uebersetzt werden! *)
#endif
#endif
(*****************************************************************************)
(* ISO-RealIO                                                                *)
(* --------------------------------------------------------------------------*)
(* Ein- und Ausgabe reeller Zahlen in Textform auf den angegebenen Kanaelen  *)
(* Das Ergebnis von Eingabeoperationen kann ueber "IOResult.ReadResult()"    *)
(* erfragt werden.                                                           *)
(* --------------------------------------------------------------------------*)
(* 27-Okt-95, Holger Kleinschmidt                                            *)
(*****************************************************************************)

(*============== IMPLEMENTIERUNGSHINWEIS ====================================*)
(* Fuer diese Implementierung gilt:                                          *)
(* Eingabe: Es werden maximal 'FConvBase.MAXREAD' Zeichen beruecksichtigt.   *)
(*          Ist die Real-Darstellung laenger, liefert "IOResult.ReadResult()"*)
(*          'wrongFormat' als Ergebnis.                                      *)
(* Ausgabe: Falls fuer die Zahl der signifikanten Stellen ('sigFigs') eine   *)
(*          Null angegeben wird, werden 'FConvBase.DEFSIGFIGS' signifikante  *)
(*          Stellen verwendet.                                               *)
(*          Falls der Real-Wert eine Darstellung von Unendlich ist, oder     *)
(*          keine gueltige Repraesentation ("FConvBase.checkReal()"), wird   *)
(*          mit "FIOBase.writeForm()" eine entsprechende Stringrepraesenta-  *)
(*          tion erzeugt.                                                    *)
(*===========================================================================*)

IMPORT IOChan;

(*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*)

(* Die Textform einer Fixpunktzahl mit Vorzeichen ist:
      ["+" | "-"], decimal digit, {decimal digit}, [".", {decimal digit}]

   Die Textform einer Gleitkommazahl mit Vorzeichen ist:
      Fixpunktzahl mit Vorzeichen,
      "E" | "e", ["+" | "-"], decimal digit, {decimal digit}
 *)

PROCEDURE ReadReal ((* EIN/ -- *)     cid  : IOChan.ChanId;
                    (* -- /AUS *) VAR real : REAL          );

(* Entfernt fuehrende Leerzeichen aus dem Eingabestrom <cid> und liest
   dann alle Zeichen, die eine gueltige Darstellung einer reellen Zahl
   mit Vorzeichen bilden. Der Wert wird <real> zugewiesen.

   "IOResult.ReadResult()" liefert:

   'allRight'   : Es wurde ein gueltige Repraesentation einer reellen Zahl
                  mit Vorzeichen gelesen, und der Wert ueberschreitet nicht
                  den Wertebereich von <real>. <real> enthaelt den Wert.
   'outOfRange' : Es wurde eine gueltige Repraesentation einer reellen Zahl
                  mit Vorzeichen gelesen, aber der Wert ueber- oder unter-
                  schreitet den Wertebereich von <real>. <real> enthaelt den
                  maximal oder minimal moeglichen Wert, je nach Vorzeichen.
   'wrongFormat': Es wurden Zeichen gelesen, oder sind noch zu lesen, aber
                  diese bilden keine gueltige Repraesentation einer reellen
                  Zahl mit Vorzeichen. <real> ist undefiniert.
   'endOfLine'  : Es wurde kein Nicht-Leerzeichen gelesen, da das naechste
                  Zeichen das Zeilenende ist.
   'endOfInput' : Es wurde kein Nicht-Leerzeichen gelesen, da der
                  Eingabestrom zuende ist.
 *)


PROCEDURE WriteFloat ((* EIN/ -- *) cid     : IOChan.ChanId;
                      (* EIN/ -- *) real    : REAL;
                      (* EIN/ -- *) sigFigs : CARDINAL;
                      (* EIN/ -- *) width   : CARDINAL      );

(* Schreibt den Wert von <real> in Gleitkomma-Textform mit <sigFigs>
   signifikanten Stellen auf den Ausgabestrom <cid>.
   Falls die Repraesentation weniger als <width> Zeichen hat, wird mit
   fuehrenden Leerzeichen aufgefuellt. Falls <width> = 0, wird genau ein
   fuehrendes Leerzeichen geschrieben.

   Es wird genau eine Ziffer vor dem Dezimalpunkt (falls vorhanden)
   geschrieben.
   Ein Vorzeichen wird nur bei negativem <real> geschrieben.
   Der Exponent mit Vorzeichen wird nur geschrieben, falls sein Wert
   nicht Null ist. Falls <sigFigs> = Null ist, wird ein Defaultwert (> 0)
   eingesetzt. Falls es keine signifikanten Stellen hinter dem Dezimalpunkt
   gibt (sigFigs = 1), wird kein Dezimalpunkt geschrieben.

   Beispiele fuer die Ausgabe als wissenschaftliche Gleitkommazahl:

   <real>       3923009    39.23009   0.0003923009
   <sigFigs>
   1               4E+6        4E+1           4E-4
   2             3.9E+6      3.9E+1         3.9E-4
   5          3.9230E+6   3.9230E+1      3.9230E-4
 *)


PROCEDURE WriteEng ((* EIN/ -- *) cid     : IOChan.ChanId;
                    (* EIN/ -- *) real    : REAL;
                    (* EIN/ -- *) sigFigs : CARDINAL;
                    (* EIN/ -- *) width   : CARDINAL      );

(* Verhaelt sich wie ein Aufruf von "WriteFloat()", ausser dass der
   Exponent ein Vielfaches von Drei ist, und dementsprechend ein bis
   drei Ziffern vor dem Dezimalpunkt stehen.

   Beispiele fuer die Ausgabe als technische Gleitkommazahl:

   <real>       3923009   39.23009   0.0003923009
   <sigFigs>
   1               4E+6         40         400E-6
   2             3.9E+6         39         390E-6
   5          3.9230E+6     39.230      392.30E-6
 *)


PROCEDURE WriteFixed ((* EIN/ -- *) cid    : IOChan.ChanId;
                      (* EIN/ -- *) real   : REAL;
                      (* EIN/ -- *) places : INTEGER;
                      (* EIN/ -- *) width  : CARDINAL      );

(* Schreibt den Wert von <real> in Fixpunkt-Textform, die auf <places>
   Stellen bzgl. des Dezimalpunkts gerundet ist, auf den Ausgabestrom
   <cid>.
   Falls die Repraesentation weniger als <width> Zeichen hat, wird mit
   fuehrenden Leerzeichen aufgefuellt. Falls <width> = 0, wird genau ein
   fuehrendes Leerzeichen geschrieben.

   Ein Vorzeichen wird nur bei negativem <real> geschrieben.
   Es wird mindestens eine Ziffer vor dem Dezimalpunkt (falls vorhanden)
   geschrieben. Wenn <places> negativ ist, wird kein Dezimalpunkt
   geschrieben.

   Beispiele fuer die Ausgabe als Fixpunktzahl:

   <real>        3923009   39.23009   0.0003923009
   <places>
   -5            3920000          0              0
   -2            3923010         40              0
   -1            3923009         39              0
    0           3923009.        39.             0.
    1          3923009.0       39.2            0.0
    4       3923009.0000    39.2301         0.0004
 *)


PROCEDURE WriteReal ((* EIN/ -- *) cid    : IOChan.ChanId;
                     (* EIN/ -- *) real   : REAL;
                     (* EIN/ -- *) width  : CARDINAL      );

(* Falls <width> gross genug ist, wird <real> mit "WriteFixed()" auf den
   Ausgabestrom <cid> geschrieben, wobei <places> so gewaehlt wird, dass
   die Darstellung auf <width> Zeichen aufgefuellt wird; ansonsten wird
   mit "WriteFloat()" geschrieben, wobei <sigFigs> mindestens Eins ist, und
   maximal soviel, dass <width> nicht ueberschritten wird.

   Falls <width> = Null, wird mit "WriteFloat(cid, real, 0, 0)" geschrieben.
 *)

END RealIO.
