DEFINITION MODULE FConvBase;
__DEF_SWITCHES__
#ifdef HM2
#ifdef __LONG_WHOLE__
(*$!i+: Modul muss mit $i- uebersetzt werden! *)
(*$!w+: Modul muss mit $w- uebersetzt werden! *)
#else
(*$!i-: Modul muss mit $i+ uebersetzt werden! *)
(*$!w-: Modul muss mit $w+ uebersetzt werden! *)
#endif
#endif
(*****************************************************************************)
(* Hilfsmodul fuer ISO-Real-Konvertierungsmodule. Dieses Modul ist nicht Teil*)
(* des ISO-Standards.                                                        *)
(* --------------------------------------------------------------------------*)
(* 27-Okt-95, Holger Kleinschmidt                                            *)
(*****************************************************************************)

FROM PORTAB IMPORT
(* TYPE *) SIGNEDWORD, UNSIGNEDWORD;

FROM ConvTypes IMPORT
(* TYPE *) ConvResults;

(*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*)

CONST
#ifdef MM2
  MAXLSIGFIGS = 15; (* LONGREAL *)
  MAXSSIGFIGS = 7;  (* REAL *)
  MAXEXP      = 1240;
#else
  MAXLSIGFIGS = 16; (* LONGREAL, IEEE double precision *)
  MAXSSIGFIGS = 7;  (* REAL, IEEE single precision *)
  MAXEXP      = 310;
#endif
  DEFSIGFIGS  = 7;  (* Defaultwert, falls <sigFigs> = 0 *)
  MAXEXPFIGS  = 10;
  MAXREAD     = 255;
  MAXFORM     = 4;

CONST
#ifdef MM2
  MaxLExp = 1232;  (* Dezimalexponent von LowLong.large *)
  MinLExp = -1234; (* -""- LowLong.small *)
  MaxExp  = 18;    (* -""- LowReal.large *)
  MinExp  = -20;   (* -""- LowReal.small *)
#else
  MaxLExp = 308;   (* Dezimalexponent von LowLong.large *)
  MinLExp = -308;  (* -""- LowLong.small *)
  MaxExp  = 38;    (* -""- LowReal.large *)
  MinExp  = -38;   (* -""- LowReal.small *)
#endif

TYPE
  SigFigStr = ARRAY [0..MAXLSIGFIGS] OF CHAR;
  ExpStr    = ARRAY [0..MAXEXPFIGS] OF CHAR;
  ReadStr   = ARRAY [0..MAXREAD] OF CHAR; (* Max. String beim Einlesen *)
  FormStr   = ARRAY [0..MAXFORM] OF CHAR;

TYPE
  RealFormat = (
    mnull,    (* Negative Null *)
    pnull,    (* (Positive) Null *)
    denorm,   (* Wert unterhalb 'LowLong/Real.small' *)
    normal,   (* Normaler Wert *)
    minf,     (* Darstellung von ``minus unendlich'' *)
    pinf,     (* Darstellung von ``plus unendlich'' *)
    nan       (* Keine gueltige Darstellung (IEEE) *)
  );

(*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*)

#ifdef HM2
PROCEDURE checkReal ((* EIN/ -- *)     real   : SHORTREAL;
#else
PROCEDURE checkReal ((* EIN/ -- *)     real   : REAL;
#endif
                     (* -- /AUS *) VAR format : RealFormat ): BOOLEAN;

PROCEDURE checkLReal ((* EIN/ -- *)     real   : LONGREAL;
                      (* -- /AUS *) VAR format : RealFormat ): BOOLEAN;

(* Mit diesen beiden Prozeduren kann die interne Real-Darstellung
   von <real> ueberprueft werden. Falls <format> <= 'normal', wird
   TRUE als Funktionswert geliefert, sonst FALSE.
 *)


PROCEDURE formToStr ((* EIN/ -- *)     form : RealFormat;
                     (* -- /AUS *) VAR str  : ARRAY OF CHAR );

(* Falls <form> > 'normal' ist, enthaelt <str> eine Stringrepraesentation
   von <form>, sonst einen Leerstring.
 *)

PROCEDURE formLen ((* EIN/ -- *) form : RealFormat ): UNSIGNEDWORD;

(* Liefert die Laenge der Stringrepraesentation von <form> gemaess
   der Umsetzung mit "formToStr()".
 *)



PROCEDURE scale ((* EIN/ -- *) x     : LONGREAL;
                 (* EIN/ -- *) shift : SIGNEDWORD ): LONGREAL;

(* Multipliziert <x> mit 10.0^<shift>. Dies entspricht einer Verschiebung
   von <x> um <shift> Dezimalstellen. Das interne Format von <x> muss
   <= 'normal' sein.
 *)


PROCEDURE split ((* EIN/ -- *)     val  : LONGREAL;
                 (* -- /AUS *) VAR neg  : BOOLEAN;
                 (* -- /AUS *) VAR norm : LONGREAL;
                 (* -- /AUS *) VAR exp  : SIGNEDWORD;
                 (* -- /AUS *) VAR form : RealFormat ): BOOLEAN;

(* Spaltet <val> auf in das Vorzeichen (neg := val < 0.0), die normierte
   Mantisse im Bereich [1.0, 10.0) und den Exponenten zur Basis Zehn.
   Ausserdem wird in <form> das Format der internen Real-Darstellung
   von <val> geliefert. Falls <form> <= 'denorm', wird <val> als
   Null behandelt, falls <form> > 'normal', sind die Ausgabeparameter
   undefiniert, und es wird FALSE zurueckgeliefert.
 *)


PROCEDURE mantToStr ((* EIN/ -- *)     norm : LONGREAL;
                     (* EIN/ -- *)     fix  : BOOLEAN;
                     (* EIN/ -- *)     figs : SIGNEDWORD;
                     (* EIN/ -- *)     long : BOOLEAN;
                     (* EIN/AUS *) VAR exp  : SIGNEDWORD;
                     (* -- /AUS *) VAR digs : UNSIGNEDWORD;
                     (* -- /AUS *) VAR mant : SigFigStr    );

(* Die Prozedur konvertiert eine reelle Zahl in eine bestimmte Anzahl
   von signifikanten Stellen als String in <mant>.

   <norm> ist eine (positive) normalisierte Mantisse im Bereich [1.0, 10.0)
   und <exp> der zugehoerige Exponent zur Basis Zehn, mit dem <norm>
   multipliziert werden muesste, um den eigentlichen Wert zu erhalten.

   <fix> = TRUE: <figs> bezeichnet die Anzahl der Stellen relativ zum
   Dezimalpunkt des eigtl. Wertes. Aus <exp> und <figs> wird die Anzahl
   der signifikanten Stellen berechnet; falls der resultierende Wert
   kleiner als Null ist, wird <digs> auf Null gesetzt, und <mant>
   enthaelt nur Nullen; falls der Wert gleich Null ist, wird <digs> auf
   Eins gesetzt und eine Stelle berechnet, die zur Rundung benutzt wird,
   um als erste Ziffer eine Null oder Eins zu erhalten.

   <fix> = FALSE: <figs> bezeichnet direkt die Anzahl der signifikanten
   Stellen (<figs> = 0  ==>  <figs> := DEFSIGFIGS).

   <digs> wird die Anzahl der signifikanten Stellen zugewiesen, die auf
   max. MAXLSIGFIGS Stellen begrenzt wird, wenn <long> TRUE ist, sonst
   auf MAXSSIGFIGS Stellen.

   Es werden <digs> + 1 Stellen zu einem String konvertiert und anschliessend
   wird auf <digs> Stellen gerundet und die Rundungsstelle auf '0' gesetzt.
   Falls beim Runden ein Ueberlauf auftritt, ist <mant> gleich "10000....",
   und <exp> wird um Eins erhoeht.

   Es wird mit '0' auf MAXLSIGFIGS + 1 Stellen aufgefuellt, falls die
   Anzahl der signifikanten Stellen geringer ist, so dass <mant> zum
   Schluss eine auf <digs> Stellen gerundete Darstellung von <norm>
   mit MAXLSIGFIGS + 1 Ziffern enthaelt.
 *)


PROCEDURE adjustEng ((* EIN/AUS *) VAR exp : SIGNEDWORD;
                     (* -- /AUS *) VAR pre : UNSIGNEDWORD );

(* Berechnet aus dem Dezimalexponenten <exp> die Anzahl der Vorkommastellen
   und den entsprechend nach unten korrigierten Exponenten fuer
   die technische Gleitpunktdarstellung.
 *)

PROCEDURE expLen ((* EIN/ -- *) exp : SIGNEDWORD ): UNSIGNEDWORD;

(* Liefert die Laenge der Stringdarstellung des Exponenten <exp>. *)


PROCEDURE floatLen ((* EIN/ -- *) neg  : BOOLEAN;
                    (* EIN/ -- *) eng  : BOOLEAN;
                    (* EIN/ -- *) exp  : SIGNEDWORD;
                    (* EIN/ -- *) figs : UNSIGNEDWORD ): UNSIGNEDWORD;

(* Berechnet aus dem Vorzeichen <neg> und dem Dezimalexponenten einer
   Zahl die Anzahl von Zeichen, die fuer eine Repraesentation im
   Gleitpunktformat durch "FloatToStr()" (<eng> = FALSE) bzw. "EngToStr()"
   (<eng> = TRUE) benoetigt werden. <figs> bezeichnet die Anzahl der
   signifikanten Stellen, falls <figs> = 0, wird DEFSIGFIGS eingesetzt.
   Es wird vorausgesetzt, dass evtl. Rundungskorrekturen bereits erfolgt
   sind.
 *)

PROCEDURE FloatLength ((* EIN/ -- *) val  : LONGREAL;
                       (* EIN/ -- *) eng  : BOOLEAN;
                       (* EIN/ -- *) long : BOOLEAN;
                       (* EIN/ -- *) figs : UNSIGNEDWORD ): UNSIGNEDWORD;

(* Beruecksichtigt im Gegensatz zu "floatLen()" Rundung, ist aber
   langsamer.
 *)


PROCEDURE fixLen ((* EIN/ -- *) neg    : BOOLEAN;
                  (* EIN/ -- *) exp    : SIGNEDWORD;
                  (* EIN/ -- *) places : SIGNEDWORD ): UNSIGNEDWORD;

(* Berechnet aus dem Vorzeichen <neg> und dem Dezimalexponenten einer
   Zahl die Anzahl von Zeichen, die fuer eine Repraesentation im
   Fixpunktformat durch "FixedToStr()" benoetigt werden. <places>
   bezeichnet dabei die Anzahl der bzgl. des Dezimalpunktes gerundeten
   Stellen.
   Es wird vorausgesetzt, dass evtl. Rundungskorrekturen bereits erfolgt
   sind.
 *)


PROCEDURE FixLength ((* EIN/ -- *) val    : LONGREAL;
                     (* EIN/ -- *) long   : BOOLEAN;
                     (* EIN/ -- *) places : SIGNEDWORD ): UNSIGNEDWORD;

(* Beruecksichtigt im Gegensatz zu "fixLen()" Rundung, ist aber
   langsamer.
 *)


PROCEDURE expToStr ((* EIN/ -- *)     exp   : SIGNEDWORD;
                    (* -- /AUS *) VAR estr  : ExpStr;
                    (* -- /AUS *) VAR start : UNSIGNEDWORD );

(* Konvertiert den Wert <exp> zu einer Stringrepraesentation des
   Exponenten in der Form: 'E','-'|'+',digit,{digit}. Die Repraesentation
   beginnt bei <estr[start]> und endet mit dem Ende von <estr>, also
   <estr[MAXEXPFIGS]>.
 *)


PROCEDURE floatToStr ((* EIN/ -- *)     neg  : BOOLEAN;
                      (* EIN/ -- *)     norm : LONGREAL;
                      (* EIN/ -- *)     exp  : SIGNEDWORD;
                      (* EIN/ -- *)     eng  : BOOLEAN;
                      (* EIN/ -- *)     figs : UNSIGNEDWORD;
                      (* EIN/ -- *)     long : BOOLEAN;
                      (* -- /AUS *) VAR str  : ARRAY OF CHAR );
(* Aufruf:
 IF split(real, neg, norm, exp, form) THEN
   floatToStr(neg, norm, exp, FALSE/TRUE, figs, FALSE/TRUE, str);
 ELSE
   formToStr(form, str);
 END;
*)


PROCEDURE fixToStr ((* EIN/ -- *)     neg    : BOOLEAN;
                    (* EIN/ -- *)     norm   : LONGREAL;
                    (* EIN/ -- *)     exp    : SIGNEDWORD;
                    (* EIN/ -- *)     places : SIGNEDWORD;
                    (* EIN/ -- *)     long   : BOOLEAN;
                    (* -- /AUS *) VAR str    : ARRAY OF CHAR );
(* Aufruf:
 IF split(real, neg, norm, exp, form) THEN
   fixToStr(neg, norm, exp, places, FALSE/TRUE, str);
 ELSE
   formToStr(form, str);
 END;
*)


PROCEDURE strToReal ((* EIN/ -- *) VAR str    : ARRAY OF CHAR;
                     (* EIN/ -- *)     min    : LONGREAL;
                     (* EIN/ -- *)     minExp : SIGNEDWORD;
                     (* EIN/ -- *)     max    : LONGREAL;
                     (* EIN/ -- *)     maxExp : SIGNEDWORD;
                     (* -- /AUS *) VAR res    : ConvResults ): LONGREAL;

END FConvBase.

