DEFINITION MODULE ISOStorage;

(* required separate module *)

__DEF_SWITCHES__
#ifdef HM2
#ifdef __LONG_WHOLE__
(*$!i+: Modul muss mit $i- uebersetzt werden! *)
(*$!w+: Modul muss mit $w- uebersetzt werden! *)
#else
(*$!i-: Modul muss mit $i+ uebersetzt werden! *)
(*$!w-: Modul muss mit $w+ uebersetzt werden! *)
#endif
#endif
(*****************************************************************************)
(* ISO-Storage                                                               *)
(* --------------------------------------------------------------------------*)
(* Prozeduren fuer die dynamische Reservierung und Freigabe von Speicher zur *)
(* Laufzeit, der nicht durch Variablendefinitionen angelegt wird.            *)
(* --------------------------------------------------------------------------*)
(* 03-Jan-96, Holger Kleinschmidt                                            *)
(*****************************************************************************)

FROM PORTAB IMPORT
(* TYPE *) UNSIGNED;

IMPORT SYSTEM;

(*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*)

(*============== IMPLEMENTIERUNGSHINWEIS ====================================*)
(* Fuer diese Implementierung gilt:                                          *)
(* Der Modulname wurde etwas geaendert, um nicht mit einem evtl. vorhandenen *)
(* gleichnamigen Modul der Systembibliothek zu kollidieren.                  *)
(* Der zweite Parameter von DEALLOCATE wird ignoriert.                       *)
(* Wenn die Speicherverwaltung von mehreren Threads benutzt werden soll, sind*)
(* die zusaetzlichen Funktionen aus 'mem' zu benutzen.                       *)
(*===========================================================================*)

PROCEDURE ALLOCATE ((* -- /AUS *) VAR addr   : SYSTEM.ADDRESS;
                    (* EIN/ -- *)     amount : UNSIGNED       );

(* Reserviert einen Speicher der Groesse <amount> LOCs und weist
   <addr> seine Anfangsadresse zu. Falls ein Speicher der geforderten
   Groesse nicht reserviert werden kann, enthaelt <addr> den Wert NIL.
 *)


PROCEDURE DEALLOCATE ((* EIN/AUS *) VAR addr   : SYSTEM.ADDRESS;
                      (* EIN/ -- *)     amount : UNSIGNED       );

(* Gibt den Speicher mit der Anfangsadresse <addr> und der Groesse
   <amount> frei. <addr> enthaelt den Wert NIL. Bei der Freigabe von
   Speicher kann eine Ausnahme ausgeloest werden (moegliche Gruende
   siehe 'StorageExceptions').
 *)


TYPE
  StorageExceptions = (
    nilDeallocation,            (* erstes Argument von DEALLOCATE ist NIL *)
    pointerToUnallocatedStorage,(* freizugebender Speicher wurde nicht
                                   durch ALLOCATE reserviert. *)
    wrongStorageToUnallocate    (* die Groesse des freizugebenden Speichers
                                   stimmt nicht mit der Groesse bei der
                                   Reservierung ueberein (optional). *)
  );

PROCEDURE IsStorageException ( ): BOOLEAN;

(* Testet, ob die ausfuehrende Koroutine in einer Ausnahmebehandlung
   ist, weil eine Ausnahme vom Typ 'StorageExceptions' ausgeloest wurde.
 *)

PROCEDURE StorageException ( ): StorageExceptions;

(* Falls die ausfuehrende Koroutine in einer Ausnahmebehandlung ist,
   weil eine Ausnahme vom Typ 'StorageExceptions' ausgeloest wurde,
   wird der entsprechende Wert zurueckgeliefert, ansonsten wird eine
   Ausnahme ausgeloest.
 *)

END ISOStorage.
