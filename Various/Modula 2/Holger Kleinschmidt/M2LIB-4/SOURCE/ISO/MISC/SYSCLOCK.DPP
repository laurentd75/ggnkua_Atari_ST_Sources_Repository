DEFINITION MODULE SysClock;

(* standard library module *)

__DEF_SWITCHES__
#ifdef HM2
#ifdef __LONG_WHOLE__
(*$!i+: Modul muss mit $i- uebersetzt werden! *)
(*$!w+: Modul muss mit $w- uebersetzt werden! *)
#else
(*$!i-: Modul muss mit $i+ uebersetzt werden! *)
(*$!w-: Modul muss mit $w+ uebersetzt werden! *)
#endif
#endif
(*****************************************************************************)
(* ISO-SysClock                                                              *)
(* --------------------------------------------------------------------------*)
(* Zugriff auf eine ``Systemuhr'', die aktuelles Datum und Zeit verwaltet.   *)
(* --------------------------------------------------------------------------*)
(* 12-Aug-96, Holger Kleinschmidt                                            *)
(*****************************************************************************)

(*============== IMPLEMENTIERUNGSHINWEIS ====================================*)
(* Fuer diese Implementierung gilt:                                          *)
(* Sommerzeit und Zeitzone werden der POSIX-Environmentvariablen TZ entnommen*)
(*===========================================================================*)

CONST
  maxSecondParts = LC(999999); (* implementierungsspezifisch *)

TYPE
  Month    = [1..12];
  Day      = [1..31];
  Hour     = [0..23];
  Min      = [0..59];
  Sec      = [0..59];
  Fraction = LONGCARD; (* [0..maxSecondParts];*) (* Sekundenbruchteile *)
  UTCDiff  = [-780..720];
  (* Anzahl der Minuten, die zur lokalen Zeit addiert werden muessen, um
     UTC-Zeit (entspricht (ungefaehr) GMT-Zeit) zu erhalten.
     -780 = -((12 + 1) * 60): 12 Stunden oestlich von UTC + Sommerzeit
      720 =    12 * 60      : 12 Stunden westlich von UTC, wird durch Sommerzeit
                              nur geringer

     Mitteleuropaeische Zeit        MET: -60,
     Mitteleuropaeische Sommerzeit MEST: -120 (UTC kennt keine Sommerzeit!).
   *)

  DateTime = RECORD
    year           : CARDINAL;
    month          : Month;
    day            : Day;
    hour           : Hour;
    minute         : Min;
    second         : Sec;
    fractions      : Fraction;
    zone           : UTCDiff;
    summerTimeFlag : BOOLEAN;
    (* Sommerzeit gueltig. Interpretation haengt von lokalen
       Gegebenheiten ab.
     *)
  END;

(*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*)

PROCEDURE CanGetClock ( ) : BOOLEAN;

(* Testet, ob es moeglich ist, die Systemuhr zu lesen *)


PROCEDURE CanSetClock ( ) : BOOLEAN;

(* Testet, ob es moeglich ist, die Systemuhr zu setzen *)


PROCEDURE IsValidDateTime ((* EIN/ -- *) userData : DateTime ) : BOOLEAN;

(* Testet, ob <userData> ein gueltiges Datum und eine gueltige Zeit
   enthaelt.
 *)


PROCEDURE GetClock ((* -- /AUS *) VAR userData : DateTime );

(* Weist jedem Feld von <userData>, fuer das Informationen vorhanden sind,
   den entsprechenden Wert der Systemuhr zu. Die restlichen Felder werden
   auf Null gesetzt, wenn dieses ein gueltiger Wert ist, sonst auf die
   Untergrenze. Die Werte entsprechen der lokalen Zeit, fuer UTC-Zeit
   muss UTCDiff addiert werden.
 *)


PROCEDURE SetClock ((* EIN/ -- *) userData : DateTime );

(* Setzt die Systemuhr auf das Datum und die Zeit in <userData>.
   Falls die Systemuhr nicht gesetzt werden kann ("CanSetClock()" = FALSE),
   passiert nichts. Falls Datum oder Zeit ungueltige Werte sind, ist das
   Ergebnis undefiniert.
 *)

END SysClock.
