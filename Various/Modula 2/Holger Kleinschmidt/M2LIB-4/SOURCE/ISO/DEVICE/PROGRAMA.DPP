DEFINITION MODULE ProgramArgs;

(* standard library module *)

__DEF_SWITCHES__
#ifdef HM2
#ifdef __LONG_WHOLE__
(*$!i+: Modul muss mit $i- uebersetzt werden! *)
(*$!w+: Modul muss mit $w- uebersetzt werden! *)
#else
(*$!i-: Modul muss mit $i+ uebersetzt werden! *)
(*$!w-: Modul muss mit $w+ uebersetzt werden! *)
#endif
#endif
(*****************************************************************************)
(* ISO-ProgramArgs                                                           *)
(* --------------------------------------------------------------------------*)
(* Stellt einen Kanal zur Verfuegung, von dem Programmargumente gelesen      *)
(* werden koennen.                                                           *)
(* --------------------------------------------------------------------------*)
(* 10-Aug-96, Holger Kleinschmidt                                            *)
(*****************************************************************************)

(*============== IMPLEMENTIERUNGSHINWEIS ====================================*)
(* Fuer das Verhalten der Geraeteprozeduren dieser Implementierung gilt:     *)
(* 'Look', 'Skip', 'SkipLook', 'TextRead':                                   *)
(*     Sowohl die Kombination CR + LF als auch alleinstehende LFs gelten als *)
(*     Zeilenende, alle anderen Zeichen -- auch separat stehende CRs -- haben*)
(*     keine Sonderbedeutung und werden unveraendert uebertragen.            *)
(* 'Look', 'SkipLook':                                                       *)
(*     Bei Zeilenende oder Dateiende ist das zurueckgelieferte Zeichen nicht *)
(*     undefiniert, sondern garantiert 0C.                                   *)
(* 'TextWrite', 'WriteLn', 'RawWrite':                                       *)
(*     Nicht moeglich (--> Ausnahme).                                        *)
(* 'GetName':                                                                *)
(*     Liefert: "ProgramArgs"                                                *)
(* 'Reset':                                                                  *)
(*     Keine Besonderheiten.                                                 *)
(* 'Free', 'Flush':                                                          *)
(*     Sind moeglich, aber ohne Funktion.                                    *)
(*                                                                           *)
(* Ueblicherweise ist das erste Programmargument der Programmname (falls     *)
(* ermittelbar), danach folgen die eigentlichen Argumente.                   *)
(*===========================================================================*)

IMPORT IOChan;

(*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*)

TYPE
  ChanId = IOChan.ChanId;

(* Zu Programmbeginn oder nach einer 'Reset'-Operation auf dem Kanal, wird
   vom ersten Programmargument gelesen. Falls kein Programmargument
   existiert, liefert "IsArgPresent()" = FALSE.
 *)


PROCEDURE ArgChan ( ): ChanId;

(* Liefert die Kennung des Kanals, von dem Programmargumente gelesen werden
   koennen.
 *)


PROCEDURE IsArgPresent ( ): BOOLEAN;

(* Testet, ob momentan ein Argument vorhanden ist, von dem gelesen werden
   kann. Falls nicht, ist "read <= IOChan.CurrentFlags()" gleich FALSE,
   und bei einem Leseversuch wird die Ausnahme 'notAvailable' ausgeloest.
 *)


PROCEDURE NextArg;

(* Falls ein weiteres Programmargument existiert, beginnt eine nachfolgende
   Leseoperation beim Start dieses Arguments, ansonsten liefert ein Aufruf
   von "IsArgPresent()" den Wert FALSE.
   Das Vorhandensein dieser Prozedur erlaubt Leerzeichen und Zeilenenden
   in Programmargumenten.
 *)

END ProgramArgs.
