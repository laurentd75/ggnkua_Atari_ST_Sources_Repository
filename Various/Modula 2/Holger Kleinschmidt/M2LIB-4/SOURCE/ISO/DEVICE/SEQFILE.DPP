DEFINITION MODULE SeqFile;

(* standard library module *)

__DEF_SWITCHES__
#ifdef HM2
#ifdef __LONG_WHOLE__
(*$!i+: Modul muss mit $i- uebersetzt werden! *)
(*$!w+: Modul muss mit $w- uebersetzt werden! *)
#else
(*$!i-: Modul muss mit $i+ uebersetzt werden! *)
(*$!w-: Modul muss mit $w+ uebersetzt werden! *)
#endif
#endif
(*****************************************************************************)
(* ISO-SeqFile                                                               *)
(* --------------------------------------------------------------------------*)
(* Geraetetreiber fuer rueckspulbare sequentielle Dateien                    *)
(* --------------------------------------------------------------------------*)
(* 28-Aug-96, Holger Kleinschmidt                                            *)
(*****************************************************************************)

(*============== IMPLEMENTIERUNGSHINWEIS ====================================*)
(* Fuer das Verhalten der Geraeteprozeduren dieser Implementierung gilt:     *)
(* 'Look', 'Skip', 'SkipLook', 'TextRead':                                   *)
(*     Sowohl die Kombination CR + LF als auch alleinstehende LFs gelten als *)
(*     Zeilenende, alle anderen Zeichen -- auch separat stehende CRs -- haben*)
(*     keine Sonderbedeutung und werden unveraendert uebertragen.            *)
(* 'Look', 'SkipLook':                                                       *)
(*     Bei Zeilenende oder Dateiende ist das zurueckgelieferte Zeichen nicht *)
(*     undefiniert, sondern garantiert 0C.                                   *)
(* 'TextWrite', 'WriteLn':                                                   *)
(*     Falls in der Environmentvariablen 'UNIXMODE' das Flag 'b' gesetzt ist,*)
(*     entspricht 'TextWrite' der Prozedur 'RawWrite' und 'WriteLn' schreibt *)
(*     ein LF. Falls 'b' nicht gesetzt ist, werden LFs, denen kein CR voran- *)
(*     geht, in die Kombination CR + LF umgewandelt, und 'WriteLn' schreibt  *)
(*     ebenfalls CR + LF. Alle anderen Zeichen werden unveraendert uebertra- *)
(*     gen.                                                                  *)
(* 'RawRead', 'RawWrite':                                                    *)
(*     Keine Besonderheiten.                                                 *)
(* 'GetName':                                                                *)
(*     Liefert den bei "Open*()" angegebenen Namen.                          *)
(* 'Reset', 'Free', 'Flush':                                                 *)
(*     Keine Besonderheiten.                                                 *)
(*                                                                           *)
(* o Ein- und Ausgabe sind gepuffert.                                        *)
(* o Es ist ohne Ausfuehren der 'Flush'-Operation ein Wechsel zwischen 'Raw'-*)
(*   und 'Text'-Operationen moeglich (aber nicht sinnvoll).                  *)
(* o Ein Zeilenende sollte nur mit der 'WriteLn'-Operation erzeugt werden.   *)
(*   Soll trotzdem mit einer 'TextWrite'-Operation ein Zeilenende aus        *)
(*   CR + LF erzeugt werden, muessen beide Zeichen mit demselben 'TextWrite'-*)
(*   Aufruf geschrieben werden; es darf also nicht mit dem ersten Aufruf als *)
(*   letztes Zeichen ein CR und mit dem naechsten Aufruf als erstes Zeichen  *)
(*   ein LF geschrieben werden.                                              *)
(*                                                                           *)
(* Es koennen nur regulaere Dateien (keine FIFOs, Terminals o.ae.) mit diesem*)
(* Geraetetreiber verwendet werden, da nur diese (auf portable Weise) ein    *)
(* Zuruecksetzen des Lese/Schreibzeigers ermoeglichen.                       *)
(*===========================================================================*)

IMPORT IOChan, ChanConsts;

(*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*)

TYPE
  ChanId      = IOChan.ChanId;
  FlagSet     = ChanConsts.FlagSet;
  OpenResults = ChanConsts.OpenResults;

(* Folgende einelementige Werte von 'FlagSet' werden bei "Open*()"
 * akzeptiert:
 *)
CONST
  read  = FlagSet{ChanConsts.readFlag};
          (* Eingabeoperationen sind verlangt/verfuegbar *)
  write = FlagSet{ChanConsts.writeFlag};
          (* Ausgabeoperationen sind verlangt/verfuegbar *)
  old   = FlagSet{ChanConsts.oldFlag};
          (* Eine Datei darf/muss existieren, oder existierte, vor der
             Oeffnung eines Kanals. *)
  text  = FlagSet{ChanConsts.textFlag};
          (* Textoperationen sind verlangt/verfuegbar *)
  raw   = FlagSet{ChanConsts.rawFlag};
          (* Binaeroperationen sind verlangt/verfuegbar *)

(*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*)

(* Kanaele, die mit einem rueckspulbaren sequentiellen Dateien
   verbunden sind, sind entweder im Eingabmodus oder im Ausgabemodus.
   Im Eingabemodus sind ausschliesslich Eingabeoperationen moeglich,
   und es gilt: IOChan.CurrentFlags() * (read+write) = read. Ein Versuch auf
   die Datei zu schreiben, fuehrt zur Ausnahme 'notAvailable'.
   Im Ausgabemodus sind ausschliesslich Ausgabeoperationen moeglich,
   und es gilt: IOChan.CurrentFlags() * (read+write) = write. Ein Versuch von
   der Datei zu lesen, fuehrt zur Ausnahme 'notAvailable'.
 *)

PROCEDURE OpenWrite ((* -- /AUS *) VAR cid   : ChanId;
                     (* EIN/ -- *) REF name  : ARRAY OF CHAR;
                     (* EIN/ -- *)     flags : FlagSet;
                     (* -- /AUS *) VAR res   : OpenResults   );

(* Versucht einen Kanal zu oeffnen, der mit einer rueckspulbaren
   sequentiellen Datei mit Namen <name> verbunden ist.
   Falls der Kanal wie verlangt geoeffnet werden kann, enthaelt <cid>
   die Kennung des Kanals, und <res> ist gleich 'opened'. Sonst enthaelt
   <cid> die Kennung des ungueltigen Kanals, und <res> einen
   entsprechenden Wert. Der Ausgabemodus wird selektiert, und die Datei
   hat die Laenge Null.
   Bei einer 'Reset'-Operation wird ebenfalls der Ausgabemodus selektiert
   und die Datei auf die Laenge Null gekuerzt.

   - Das Flag 'write' wird implizit gesetzt.
   - Eine Datei mit dem angegebenen Namen darf noch nicht existieren, es sei
     denn, 'old' ist gesetzt.
   - Falls 'raw' nicht gesetzt ist, wird automatisch 'text' gesetzt.
   - Falls 'read' gesetzt ist, muss die "Reread()"-Operation verfuegbar
     sein.

   Insgesamt ergeben sich, unabhaengig von 'raw'/'text' folgende
   Kombinationen:

   o Auf eine neue Datei schreiben:

     write

   o Auf eine neue oder gekuerzte vorhandene Datei schreiben:

     old          write+old

   o Auf eine neue Datei schreiben, Eingabeoperationen moeglich

     write+read   read

   o Auf eine neue oder vorhandene Datei schreiben,
     Eingabeoperationen moeglich:

     old+read     write+old+read
 *)


PROCEDURE OpenAppend ((* -- /AUS *) VAR cid   : ChanId;
                      (* EIN/ -- *) REF name  : ARRAY OF CHAR;
                      (* EIN/ -- *)     flags : FlagSet;
                      (* -- /AUS *) VAR res   : OpenResults   );

(* Versucht einen Kanal zu oeffnen, der mit einer rueckspulbaren
   sequentiellen Datei mit Namen <name> verbunden ist.
   Falls der Kanal wie verlangt geoeffnet werden kann, enthaelt <cid>
   die Kennung des Kanals, und <res> ist gleich 'opened'. Sonst enthaelt
   <cid> die Kennung des ungueltigen Kanals, und <res> einen
   entsprechenden Wert. Der Ausgabemodus wird selektiert, und die
   Schreibposition entspricht der Laenge der Datei.
   Bei einer 'Reset'-Operation wird der Ausgabemodus selektiert.

   - Die Flags 'write' und 'old' werden implizit gesetzt.
     Eine Datei mit dem angegebenen Namen darf bereits existieren.
   - Falls 'raw' nicht gesetzt ist, wird automatisch 'text' gesetzt.
   - Falls 'read' gesetzt ist, muss die "Reread()"-Operation verfuegbar
     sein.

   Insgesamt ergeben sich, unabhaengig von 'raw'/'text' folgende
   Kombinationen:

   o Auf eine neue Datei schreiben, oder an eine vorhandene Datei
     anhaengen:

     write        old         write+old

   o Auf eine neue Datei schreiben, oder an eine vorhandene Datei
     anhaengen, Eingabeoperationen moeglich:

     read         write+read  old+read   write+old+read
 *)


PROCEDURE OpenRead ((* -- /AUS *) VAR cid   : ChanId;
                    (* EIN/ -- *) REF name  : ARRAY OF CHAR;
                    (* EIN/ -- *)     flags : FlagSet;
                    (* -- /AUS *) VAR res   : OpenResults   );

(* Versucht einen Kanal zu oeffnen, der mit einer rueckspulbaren
   sequentiellen Datei mit Namen <name> verbunden ist.
   Falls der Kanal wie verlangt geoeffnet werden kann, enthaelt <cid>
   die Kennung des Kanals, und <res> ist gleich 'opened'. Sonst enthaelt
   <cid> die Kennung des ungueltigen Kanals, und <res> einen
   entsprechenden Wert. Der Eingabemodus wird selektiert, und die
   Leseposition entspricht dem Beginn der Datei.
   Bei einer 'Reset'-Operation wird ebenfalls der Eingabemodus selektiert
   und die Leseposition befindet sich am Dateianfang.

   - Die Flags 'read' und 'old' werden implizit gesetzt.
     Eine Datei mit dem angegebenen Namen muss bereits existieren.
   - Falls 'raw' nicht gesetzt ist, wird automatisch 'text' gesetzt.
   - Falls 'write' gesetzt ist, muss die "Rewrite()"-Operation verfuegbar
     sein.

   Insgesamt ergeben sich, unabhaengig von 'raw'/'text' folgende
   Kombinationen:

   o Von einer vorhandenen Datei lesen:

     read         old         read+old

   o Von einer vorhandenen Datei lesen, Ausgabeoperationen moeglich:

     write        read+write  old+write  read+old+write
 *)


PROCEDURE IsSeqFile ((* EIN/ -- *) cid : ChanId ): BOOLEAN;

(* Testet, ob der Kanal <cid> als rueckspulbare sequentielle Datei
   von diesem Geraetetreiber geoeffnet wurde.
 *)


PROCEDURE Reread ((* EIN/ -- *) cid : ChanId );

(* Falls der Kanal <cid> als rueckspulbare sequentielle Datei von diesem
   Geraetetreiber geoeffnet wurde, wird versucht, die Leseposition
   des Kanals auf den Beginn der Datei zu setzen, und den Eingabemodus zu
   selektieren, andernfalls wird die Ausnahme 'wrongDevice' ausgeloest.

   Falls die Operation nicht ausgefuehrt werden kann, weil z.B. die Rechte
   fuer die Datei nicht ausreichen, wird weder der Eingabemodus noch
   der Ausgabemodus selektiert.
 *)


PROCEDURE Rewrite ((* EIN/ -- *) cid : ChanId );

(* Falls der Kanal <cid> als rueckspulbare sequentielle Datei von diesem
   Geraetetreiber geoeffnet wurde, wird versucht, die Schreibposition
   des Kanals auf den Beginn der Datei zu setzen, wodurch die Datei
   auf Laenge Null gekuerzt wird, und den Ausgabemodus zu selektieren,
   andernfalls wird die Ausnahme 'wrongDevice' ausgeloest.

   Falls die Operation nicht ausgefuehrt werden kann, weil z.B. die Rechte
   fuer die Datei nicht ausreichen, wird weder der Eingabemodus noch
   der Ausgabemodus selektiert.
 *)


PROCEDURE Close ((* EIN/AUS *) VAR cid : ChanId );

(* Falls der Kanal <cid> als rueckspulbare sequentielle Datei von diesem
   Geraetetreiber geoeffnet wurde, wird der Kanal geschlossen, und <cid>
   erhaelt den Wert des ungueltigen Kanals "StdChans.InvalidChan()",
   andernfalls wird die Ausnahme 'wrongDevice' ausgeloest.
 *)

END SeqFile.
