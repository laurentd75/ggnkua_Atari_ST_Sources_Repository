DEFINITION MODULE StreamFile;

(* standard library module *)

__DEF_SWITCHES__
#ifdef HM2
#ifdef __LONG_WHOLE__
(*$!i+: Modul muss mit $i- uebersetzt werden! *)
(*$!w+: Modul muss mit $w- uebersetzt werden! *)
#else
(*$!i-: Modul muss mit $i+ uebersetzt werden! *)
(*$!w-: Modul muss mit $w+ uebersetzt werden! *)
#endif
#endif
(*****************************************************************************)
(* ISO-StreamFile                                                            *)
(* --------------------------------------------------------------------------*)
(* Geraetetreiber fuer unabhaengige sequentielle Datenstroeme                *)
(* --------------------------------------------------------------------------*)
(* 10-Aug-96, Holger Kleinschmidt                                            *)
(*****************************************************************************)

(*============== IMPLEMENTIERUNGSHINWEIS ====================================*)
(* Fuer das Verhalten der Geraeteprozeduren dieser Implementierung gilt:     *)
(* 'Look', 'Skip', 'SkipLook', 'TextRead':                                   *)
(*     Ist die Datei ein Terminal, gelten sowohl CR als auch LF als Zeilen-  *)
(*     ende. Ist die Datei kein Terminal, gelten sowohl die Kombination CR+LF*)
(*     als auch alleinstehende LFs als Zeilenende, alle anderen Zeichen --   *)
(*     auch separat stehende CRs -- haben keine Sonderbedeutung und werden   *)
(*     unveraendert uebertragen.                                             *)
(* 'Look', 'SkipLook':                                                       *)
(*     Bei Zeilenende oder Dateiende ist das zurueckgelieferte Zeichen nicht *)
(*     undefiniert, sondern garantiert 0C.                                   *)
(* 'TextWrite', 'WriteLn':                                                   *)
(*     Falls in der Environmentvariablen 'UNIXMODE' das Flag 'b' gesetzt ist,*)
(*     entspricht 'TextWrite' der Prozedur 'RawWrite' und 'WriteLn' schreibt *)
(*     ein LF. Falls 'b' nicht gesetzt ist, werden LFs, denen kein CR voran- *)
(*     geht, in die Kombination CR + LF umgewandelt, und 'WriteLn' schreibt  *)
(*     ebenfalls CR + LF. Alle anderen Zeichen werden unveraendert uebertra- *)
(*     gen.                                                                  *)
(* 'RawRead', 'RawWrite':                                                    *)
(*     Keine Besonderheiten.                                                 *)
(* 'GetName':                                                                *)
(*     Liefert den bei "Open*()" angegebenen Namen.                          *)
(* 'Reset', 'Free', 'Flush':                                                 *)
(*     Keine Besonderheiten.                                                 *)
(*                                                                           *)
(* o Auf einem TOS-Dateisystem darf eine Datei nicht gleichzeitig zum Lesen  *)
(*   und Schreiben geoeffnet sein!                                           *)
(* o Ein- und Ausgabe sind gepuffert.                                        *)
(*   Ist die Datei ein Terminal, wird allerdings der Ausgabepuffer nach jedem*)
(*   Zeilenende geleert.                                                     *)
(* o Es ist ohne Ausfuehren der 'Flush'-Operation ein Wechsel zwischen 'Raw'-*)
(*   und 'Text'-Operationen moeglich (aber nicht sinnvoll).                  *)
(* o Ein Zeilenende sollte nur mit der 'WriteLn'-Operation erzeugt werden.   *)
(*   Soll trotzdem mit einer 'TextWrite'-Operation ein Zeilenende aus        *)
(*   CR + LF erzeugt werden, muessen beide Zeichen mit demselben 'TextWrite'-*)
(*   Aufruf geschrieben werden; es darf also nicht mit dem ersten Aufruf als *)
(*   letztes Zeichen ein CR und mit dem naechsten Aufruf als erstes Zeichen  *)
(*   ein LF geschrieben werden.                                              *)
(*===========================================================================*)

IMPORT IOChan, ChanConsts;

(*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*)

TYPE
  ChanId      = IOChan.ChanId;
  FlagSet     = ChanConsts.FlagSet;
  OpenResults = ChanConsts.OpenResults;

(* Folgende einelementige Werte von 'FlagSet' werden bei "Open*()"
 * akzeptiert:
 *)
CONST
  read  = FlagSet{ChanConsts.readFlag};
          (* Eingabeoperationen sind verlangt/verfuegbar *)
  write = FlagSet{ChanConsts.writeFlag};
          (* Ausgabeoperationen sind verlangt/verfuegbar *)
  old   = FlagSet{ChanConsts.oldFlag};
          (* Eine Datei darf/muss existieren, oder existierte, vor der
             Oeffnung eines Kanals. *)
  text  = FlagSet{ChanConsts.textFlag};
          (* Textoperationen sind verlangt/verfuegbar *)
  raw   = FlagSet{ChanConsts.rawFlag};
          (* Binaeroperationen sind verlangt/verfuegbar *)

(*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*)


PROCEDURE Open ((* -- /AUS *) VAR cid   : ChanId;
                (* EIN/ -- *) REF name  : ARRAY OF CHAR;
                (* EIN/ -- *)     flags : FlagSet;
                (* -- /AUS *) VAR res   : OpenResults   );

(* Versucht einen Kanal zu oeffnen, der mit einem unabhaengigen
   sequentiellen Datenstrom mit Namen <name> verbunden ist.
   Falls der Kanal wie verlangt geoeffnet werden kann, enthaelt <cid>
   die Kennung des Kanals, und <res> ist gleich 'opened'. Sonst enthaelt
   <cid> die Kennung des ungueltigen Kanals, und <res> einen
   entsprechenden Wert.

   - Falls 'write' nicht gesetzt ist, wird automatisch 'read' gesetzt.
   - Falls 'read' gesetzt ist, wird automatisch auch 'old' gesetzt.
   - Falls 'raw' nicht gesetzt ist, wird automatisch 'text' gesetzt.
   - Falls 'old' gesetzt ist, muss der Datenstrom mit Namen <name>
     bereits existieren, es sei denn, 'write' ist gesetzt.
   - Falls 'write' gesetzt ist, darf ein Datenstrom mit dem angegebenen Namen
     noch nicht existieren, es sei denn, 'old' ist gesetzt.

   Insgesamt ergeben sich, unabhaengig von 'raw'/'text' folgende
   Kombinationen:

   o Von existierendem Datenstrom lesen:

     read         old            read+old

   o Auf einen neuen Datenstrom schreiben:

     write

   o Auf einen neuen oder vorhandenen Datenstrom schreiben:

     write+old

   o Lesen von einem vorhandenen Datenstrom und
     schreiben auf einen vorhandenen Datenstrom:

     read+write   read+write+old
 *)

PROCEDURE IsStreamFile ((* EIN/ -- *) cid : ChanId ): BOOLEAN;

(* Testet, ob der Kanal <cid> als sequentieller Strom von diesem
   Geraetetreiber geoeffnet wurde.
 *)

PROCEDURE Close ((* EIN/AUS *) VAR cid : ChanId );

(* Falls der Kanal <cid> als sequentieller Strom von diesem Geraetetreiber
   geoeffnet wurde, wird der Kanal geschlossen, und <cid> erhaelt den Wert
   des ungueltigen Kanals "StdChans.InvalidChan()", andernfalls wird die
   Ausnahme 'wrongDevice' ausgeloest.
 *)

END StreamFile.
