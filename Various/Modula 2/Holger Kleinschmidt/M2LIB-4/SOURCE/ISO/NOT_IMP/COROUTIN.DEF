DEFINITION MODULE COROUTINES;

(* system module *)

IMPORT SYSTEM;

(*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*)

TYPE
  COROUTINE;

  INTERRUPTSOURCE = <implementierungsspezifisch>;

(*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*)

PROCEDURE NEWCOROUTINE ((* EIN/ -- *)     procBody  : PROC;
                        (* EIN/ -- *)     workspace : SYSTEM.ADDRESS;
                        (* EIN/ -- *)     size      : CARDINAL;
                        (* -- /AUS *) VAR cr        : COROUTINE
                        [; initprotection: PROTECTION; (* optional *)]);

(* Erzeugt aus der globalen Prozedur <procBody> eine Koroutine, deren Kennung
   in <cr> zurueckgeliefert wird. <workspace> ist ein Zeiger auf einen
   Speicherbereich, den die Koroutine verwenden kann, und <size> ist dessen
   Groesse in LOCs. Der Speicher muss selbst bereitgestellt werden. Wenn
   <size> kleiner als die minimale implementierungsspezifische Groesse
   ist, die die Koroutine benoetigt, wird eine Ausnahme ausgeloest. Mit
   dem optionalen Parameter <initprotection> kann festgelegt werden, bis
   zu welchem implementierungsspezifischen (Interrupt)Level die Koroutine
   gegen Unterbrechung durch Interrupts geschuetzt ist.
   Eine Koroutine kann nicht beendet werden; falls <procBody> versucht
   zum Aufrufer zurueckzukehren, wird eine Ausnahme ausgeloest.
 *)


PROCEDURE TRANSFER ((* -- /AUS *) VAR from : COROUTINE;
                    (* EIN/ -- *)     to   : COROUTINE );

(* In <from> wird die Kennung der aufrufenden Koroutine gespeichert, und
   danach wird die Kontrolle an die Koroutine <to> abgegeben.
 *)

PROCEDURE IOTRANSFER ((* -- /AUS *) VAR from : COROUTINE;
                      (* EIN/ -- *)     to   : COROUTINE );

(* In <from> wird die Kennung der aufrufenden Koroutine gespeichert, und
   danach wird die Kontrolle an die Koroutine <to> abgegeben. Wenn
   ein Interrupt auftritt, mit dem die aufrufende Koroutine assoziiert
   ist, wird in <from> die Kennung der unterbrochenen Koroutine gespeichert
   und die Kontrolle zurueck an die aufrufende Koroutine uebertragen.
   Die aufrufende Koroutine muss sich vorher durch "ATTACH()" mit einer
   Interruptquelle assoziiert haben.
 *)

PROCEDURE ATTACH ((* EIN/ -- *) source : INTERRUPTSOURCE );

(* Assoziiert die Interruptquelle <source> mit der ausfuehrenden Koroutine.
   Falls <source> vorher mit einer anderen Koroutine assoziiert war, wird
   diese alte Verbindung zuvor aufgeloest.
   Eine Koroutine kann mit mehreren Interruptquellen assoziiert sein.
 *)

PROCEDURE DETACH ((* EIN/ -- *) source : INTERRUPTSOURCE );

(* Falls die ausfuehrende Koroutine mit der Interruptquelle <source>
   assoziiert ist, wird die Verbindung aufgeloest, sonst passiert nichts.
 *)

PROCEDURE IsATTACHED ((* EIN/ -- *) source : INTERRUPTSOURCE ): BOOLEAN;

(* Testet, ob die Interruptquelle <source> mit eine Koroutine assoziiert
   ist.
 *)

PROCEDURE HANDLER ((* EIN/ -- *) source : INTERRUPTSOURCE ): COROUTINE;

(* Liefert die Kennung der Koroutine, die mit der Interruptquelle
   <source> assoziiert ist. Wenn keine Koroutine mit <source> assoziiert
   ist, kann eine Ausnahme ausgeloest werden.
 *)

PROCEDURE CURRENT ( ): COROUTINE;

(* Liefert die Kennung der ausfuehrenden Koroutine. *)

PROCEDURE LISTEN ((* EIN/ -- *) p : PROTECTION );

(* Der Level, bis zu dem die ausfuehrende Koroutine gegen die
   Unterbrechung durch Interrupts geschuetzt ist, wird kurzzeitig
   auf <p> gesetzt.
 *)

PROCEDURE PROT ( ): PROTECTION;

(* Liefert den implementierungsspezifischen Level, bis zu dem die
   ausfuehrende Koroutine gegen die Unterbrechung durch Interrupts
   geschuetzt ist.
 *)

END COROUTINES.
