DEFINITION MODULE SYSTEM;

(* system module *)

CONST
  BITSPERLOC  = <Implementierungsspezifische Konstante>;
  LOCSPERWORD = <Implementierungsspezifische Konstante>;

TYPE
  LOC;
  ADDRESS = POINTER TO LOC;
  WORD = ARRAY[0..LOCSPERWORD-1] OF LOC;

CONST (* Nur, falls fuer den Prozessor geeignet *)
  LOCSPERBYTE = <Implementierungsspezifische Konstante>;

TYPE (* Nur, falls fuer den Prozessor geeignet *)
  BYTE = ARRAY[0..LOCSPERBYTE-1] OF LOC;

(*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*)

PROCEDURE ADDADR ((* EIN/ -- *) addr   : ADDRESS;
                  (* EIN/ -- *) offset : CARDINAL ): ADDRESS;

(* Falls (addr + offset) eine gueltige Adresse ist, wird diese geliefert,
   sonst kann eine Ausnahme ausgeloest werden.
 *)

PROCEDURE SUBADR ((* EIN/ -- *) addr   : ADDRESS;
                  (* EIN/ -- *) offset : CARDINAL ): ADDRESS;

(* Falls (addr - offset) eine gueltige Adresse ist, wird diese geliefert,
   sonst kann eine Ausnahme ausgeloest werden.
 *)

PROCEDURE DIFADR ((* EIN/ -- *) addr1 : ADDRESS;
                  (* EIN/ -- *) addr2 : ADDRESS ): INTEGER;

(* Liefert die Differenz von (addr1 - addr2), oder kann eine Ausnahme
   ausloesen, falls eine der Adressen ungueltig ist oder der Adressraum
   nicht zusammenhaengend ist.
 *)

PROCEDURE MAKEADR ((* EIN/ -- *) val : <geeigneter Typ>; ... ): ADDRESS;

(* Liefert eine Adresse, die aus dem oder den uebergebenen Parametern
   konstruiert wurde. Falls dies keine Adresse ergibt, kann eine Ausnahme
   ausgeloest werden.
 *)

PROCEDURE ADR ((* EIN/ -- *) VAR v : <beliebiger Typ>): ADDRESS;

(* Liefert die Adresse der Variable <v> *)



PROCEDURE ROTATE ((* EIN/ -- *) val : <PACKEDSET-Typ>;
                  (* EIN/ -- *) num : INTEGER         ): <Typ von <val>>;

(* Liefert einen Bitvektor, der durch Links- (<num> > 0) oder
   Rechtsrotieren von <val> um |<num>| Bits erhalten wurde.
 *)

PROCEDURE SHIFT ((* EIN/ -- *) val : <PACKEDSET-Typ>;
                 (* EIN/ -- *) num : INTEGER         ): <Typ von <val>>;

(* Liefert einen Bitvektor, der durch Links- (<num> > 0) oder
   Rechtsschieben von <val> um |<num>| Bits erhalten wurde. Es wird
   ein logisches Schieben verwendet, d.h. von Links werden Nullbits
   nachgeschoben.
 *)


PROCEDURE CAST (<geeigneter Zieltyp>; val : <bel. Typ>): <Zieltyp>;

(* Typtransfer-Funktion. Interpretiert den Ausdruck <val> als vom
   angegebenen Zieltyp. Wenn Quell- und Zieltyp den gleichen
   Speicherplatzbedarf haben, bleibt das Bitmuster von <val> dabei
   unveraendert, wenn der Speicherplatzbedarf unterschiedlich ist,
   bleibt das Bitmuster bis zur kleineren der beiden Groessen
   unveraendert, der Rest ist nicht festgelegt. Eine Ausnahme kann
   ausgeloest werden, falls es implementierungsspezifische Beschraenkungen
   bei der Typinterpretation gibt.

   Wichtig: <val> darf keine Zahlenkonstante sein, da Konstanten
            keinen festgelegten Speicherplatzbedarf besitzen.
 *)

PROCEDURE TSIZE (<beliebiger Typ>; ...): CARDINAL;

(* Liefert die Anzahl LOCs, die benoetigt werden, um einen Ausdruck des
   angegebenen Typs zu speichern. Es koennen zusaetzliche Parameter
   angegeben werden, die unterschiedliche Varianten eines Varianten
   RECORDs auswaehlen.
 *)

END SYSTEM.
