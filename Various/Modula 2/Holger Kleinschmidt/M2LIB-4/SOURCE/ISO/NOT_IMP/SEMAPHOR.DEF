DEFINITION MODULE Semaphores;

(* part of standard library *)

__DEF_SWITCHES__
#ifdef HM2
#ifdef __LONG_WHOLE__
(*$!i+: Modul muss mit $i- uebersetzt werden! *)
(*$!w+: Modul muss mit $w- uebersetzt werden! *)
#else
(*$!i-: Modul muss mit $i+ uebersetzt werden! *)
(*$!w-: Modul muss mit $w+ uebersetzt werden! *)
#endif
#endif
(*****************************************************************************)
(* ISO-Semaphores                                                            *)
(* --------------------------------------------------------------------------*)
(* Synchronisation nebenlaeufiger Prozesse beim Zugriff auf gemeinsame       *)
(* Resourcen durch allgemeine Semaphoren.                                    *)
(* --------------------------------------------------------------------------*)
(* 27-Dez-94, Holger Kleinschmidt                                            *)
(*****************************************************************************)

(* Jede (allgemeine, im Gegensatz zu binaere) Semaphore besitzt eine
   eindeutige Kennung, einen nichtnegativen Zaehlwert und eine Menge von
   Prozessen, die durch die Semaphore blockiert sind und darauf warten, dass
   sie freigegeben wird.
   Eine Semaphore heisst frei, wenn der Zaehlwert ungleich Null ist.
 *)

TYPE
  SEMAPHORE;

(*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*)

PROCEDURE Create ((* -- /AUS *) VAR s            : SEMAPHORE;
                  (* EIN/ -- *)     initialCount : CARDINAL  );

(* Erzeugt eine neue Semaphore <s> mit einem Anfangszaehlwert von
   <initialCount>, d.h. es kann <initialCount>-mal "Claim()" ausgefuehrt
   werden bevor der aufrufende Prozess blockiert wird. Kein Prozess
   ist durch diese neue Semaphore blockiert. Wenn <s> nicht erzeugt
   werden kann, wird eine Ausnahme ausgeloest.
 *)

PROCEDURE Destroy ((* EIN/AUS *) VAR s : SEMAPHORE );

(* Nach Aufruf dieser Prozedur existiert die Semaphore <s> nicht mehr.
   Alle Resourcen, die fuer diese Semaphore angefordert werden mussten,
   werden freigegeben.
   Es darf kein Prozess durch diese Semaphore blockiert sein.
 *)

PROCEDURE Claim ((* EIN/ -- *) s : SEMAPHORE );

(* Wenn der Zaehlwert der Semaphore <s> groesser als Null ist, wird
   lediglich dieser Wert um Eins verringert, sonst wird der aufrufende
   Prozess blockiert bis die Semaphore durch einen anderen Prozess
   freigegeben wird.
 *)

PROCEDURE Release ((* EIN/ -- *) s : SEMAPHORE );

(* Wenn kein Prozess durch die Semaphore <s> blockiert ist, wird lediglich
   der Zaehlwert um Eins erhoeht, sonst wird die Blockierung bei einem der
   wartenden Prozesse geloest, so dass er weiterlaufen kann.
 *)

PROCEDURE CondClaim ((* EIN/ -- *) s : SEMAPHORE ): BOOLEAN;

(* Wie "Claim()", nur wird der aufrufende Prozess nicht blockiert, sondern
   es wird FALSE zurueckgeliefert, falls der Zaehlwert gleich Null ist,
   sonst wird TRUE zurueckgeliefert und der Zaehlwert um Eins verringert.
 *)

PROCEDURE IsSemaphoresException ( ): BOOLEAN;

(* Testet, ob die aufrufende Koroutine in einer Ausnahmebehandlung ist,
   weil die 'Semaphores'-Ausnahme ausgeloest wurde.
 *)

END Semaphores.
