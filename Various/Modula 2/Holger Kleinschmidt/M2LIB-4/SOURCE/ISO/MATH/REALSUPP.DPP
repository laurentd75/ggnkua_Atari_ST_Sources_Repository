DEFINITION MODULE RealSupport;
__DEF_SWITCHES__
#ifdef HM2
#ifdef __LONG_REAL__
(*$!r+: Modul muss mit $r- uebersetzt werden! *)
#else
(*$!r-: Modul muss mit $r+ uebersetzt werden! *)
#endif
#ifdef __LONG_WHOLE__
(*$!i+: Modul muss mit $i- uebersetzt werden! *)
(*$!w+: Modul muss mit $w- uebersetzt werden! *)
#else
(*$!i-: Modul muss mit $i+ uebersetzt werden! *)
(*$!w-: Modul muss mit $w+ uebersetzt werden! *)
#endif
#endif
(*****************************************************************************)
(* Hilfsmodul fuer ISO-RealMath. Dieses Modul ist nicht Teil des ISO-        *)
(* Standards.                                                                *)
(* Bei der Konvertierung zwischen REAL- und Ganzzahlen ist zu beachten, dass *)
(* die Genauigkeit der Ganzzahlen i.allg. hoeher als die der REAL-Zahlen ist *)
(* (z.B. 32-Bit-Ganzzahlen, aber nur 24-Bit-Mantisse fuer sieben Stellen     *)
(* Genauigkeit der REAL-Zahlen).                                             *)
(* --------------------------------------------------------------------------*)
(* 27-Aug-96, Holger Kleinschmidt                                            *)
(*****************************************************************************)

FROM PORTAB IMPORT
(* TYPE *) SIGNED, UNSIGNED;

(*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*)

PROCEDURE min ((* EIN/ -- *) x : REAL;
               (* EIN/ -- *) y : REAL ): REAL;

PROCEDURE max ((* EIN/ -- *) x : REAL;
               (* EIN/ -- *) y : REAL ): REAL;

(* Es wird das kleinere (groessere) der beiden Argumente geliefert. *)


PROCEDURE clip ((* EIN/ -- *) x     : REAL;
                (* EIN/ -- *) lower : REAL;
                (* EIN/ -- *) upper : REAL ): REAL;

(* Falls <x> kleiner als <lower> ist, wird <lower> zurueckgeliefert; falls
   <x> groesser als <upper> ist, wird <upper> zurueckgeliefert, sonst <x>.
   Ist <lower> groesser als <upper>, wird <lower> ignoriert, und der
   kleinere Wert von <x> und <upper> zurueckgeliefert.
 *)


PROCEDURE frexp ((* EIN/ -- *)     real : REAL;
                 (* -- /AUS *) VAR exp  : INTEGER ): REAL;

(* Spaltet <real> in die Mantisse 'mant', die als Funktionswert geliefert
   wird, und den Exponenten <exp> auf; es gilt:

           real = mant * 2^exp  , mit  0.5 <= |mant| < 1.0.

   Ist <real> = 0.0, wird <exp> = 0 und 'mant' = 0.0 geliefert.
 *)


PROCEDURE ldexp ((* EIN/ -- *) mant : REAL;
                 (* EIN/ -- *) exp  : INTEGER ): REAL;

(* <mant> und <exp> werden zu einer REAL-Zahl 'real' zusammengesetzt, die
   als Funktionswert geliefert wird; es gilt:

           real = mant * 2^exp.

   Da <mant> nicht notwendigerweise zwischen 0.5 und 1.0 liegen muss,
   sondern eine beliebige REAL-Zahl sein kann, laesst sich die Funktion
   dazu verwenden, REAL-Zahlen mit Zweierpotenzen zu multiplizieren
   (exp > 0) oder auch zu dividieren (exp < 0).

   Es gilt:       x := frexp(real, exp);
                  real = ldexp(x, exp).

   Ist <mant> = 0.0, wird Null zurueckgegeben.

   Je nach Implementierung der Gleitkommaarithmetik ist diese Prozedur
   erheblich schneller als die Multiplikation/Division mit Zweierpotenzen.
 *)


PROCEDURE modf ((* EIN/ -- *)     real : REAL;
                (* -- /AUS *) VAR int  : REAL ): REAL;

(* Spaltet <real> in den ganzzahligen Anteil <int> und den gebrochenen
   Anteil 'fract' auf, der als Funktionswert geliefert wird. Beide haben
   das Vorzeichen von <real>, so dass gilt:

                   real = int + fract.
 *)


PROCEDURE fmod ((* EIN/ -- *) real : REAL;
                (* EIN/ -- *) div  : REAL ): REAL;

(* MODULO-Funktion fuer reelle Zahlen. Das Ergebnis hat das Vorzeichen von
   <real>.

   Bei <div> = 0.0 wird 0.0 zurueckgeliefert.
 *)


PROCEDURE floor ((* EIN/ -- *) real : REAL ): REAL;

(* Liefert den groessten ganzzahligen (REAL)Wert, der NICHT GROESSER als
   <real> ist. Bei negativen Zahlen wird also auf die naechstkleinere
   ganze Zahl abgerundet, bei positiven Zahlen werden nur die
   Nachkommastellen abgeschnitten.
   Entspricht Rundung gegen Minus Unendlich.

   Beispiele:

     floor(-1.5) = -2.0   ,   floor(1.5) = 1.0
     floor(-1.0) = -1.0   ,   floor(1.0) = 1.0
 *)


PROCEDURE ceil ((* EIN/ -- *) real : REAL ): REAL;

(* Liefert den kleinsten ganzzahligen (REAL)Wert, der NICHT KLEINER als
   <real> ist. Bei negativen Zahlen werden also nur die Nachkommastellen
   abgeschnitten, bei positiven Zahlen wird auf die naechstgroessere ganze
   Zahl aufgerundet.
   Entspricht Rundung gegen Plus Unendlich.

   Beispiele:

     ceil(-1.5) = -1.0    ,   ceil(1.5) = 2.0
     ceil(-1.0) = -1.0    ,   ceil(1.0) = 1.0
 *)


PROCEDURE float ((* EIN/ -- *) card : UNSIGNED ): REAL;

(* Wandelt die uebergebene ganze Zahl in eine reelle Zahl.
   Fuer alle positiven Ganzzahlen, falls die Standardfunktion FLOAT dies
   nicht packt.
 *)


PROCEDURE real ((* EIN/ -- *) int : SIGNED ): REAL;

(* Wandelt die uebergebene ganze Zahl in eine reelle Zahl.
   Im Gegensatz zu "float()" koennen auch negative Zahlen gewandelt werden.
 *)


PROCEDURE trunc ((* EIN/ -- *) real : REAL ): UNSIGNED;

(* Hierbei werden einfach nur die Nachkommastellen abgeschnitten.
   Es koennen alle positiven Ganzzahlen erzeugt werden, falls TRUNC dies
   nicht packt.
 *)


PROCEDURE int ((* EIN/ -- *) real : REAL ): SIGNED;

(* Hierbei werden einfach nur die Nachkommastellen abgeschnitten.
   Im Gegensatz zu "trunc()" koennen auch negative Zahlen erzeugt werden.
 *)



PROCEDURE entier ((* EIN/ -- *) real : REAL ): SIGNED;

(* Wandeln die uebergebene reelle Zahl in die groesste ganze Zahl, die
   kleiner oder gleich der reellen Zahl ist, somit besteht bei negativen
   Zahlen zwischen "int()" und "entier()" ein Unterschied:

      int(-1.0) = -1  entier(-1.0) = -1, aber
      int(-1.1) = -1, entier(-1.1) = -2

   Die Funktion entspricht:  int(floor(value))
 *)

END RealSupport.
