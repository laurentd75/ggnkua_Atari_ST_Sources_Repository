DEFINITION MODULE LongComplexMath;

(* standard library module *)

__DEF_SWITCHES__
#ifdef HM2
#ifdef __LONG_WHOLE__
(*$!i+: Modul muss mit $i- uebersetzt werden! *)
(*$!w+: Modul muss mit $w- uebersetzt werden! *)
#else
(*$!i-: Modul muss mit $i+ uebersetzt werden! *)
(*$!w-: Modul muss mit $w+ uebersetzt werden! *)
#endif
#endif
(*****************************************************************************)
(* ISO-LongComplexMath                                                       *)
(* --------------------------------------------------------------------------*)
(* Mathematische Funktionen fuer den Typ LONGCOMPLEX.                        *)
(* --------------------------------------------------------------------------*)
(* 02-Nov-95, Holger Kleinschmidt                                            *)
(*****************************************************************************)

#if ISO_complex
CONST
  i    = CMPLX(0.0, 1.0);
  one  = CMPLX(1.0, 0.0);
  zero = CMPLX(0.0, 0.0);
#else
TYPE
  LONGCOMPLEX = RECORD
    re : LONGREAL;
    im : LONGREAL;
  END;

#if ISO_value_constructor
CONST
  i    = LONGCOMPLEX{0.0, 1.0};
  one  = LONGCOMPLEX{1.0, 0.0};
  zero = LONGCOMPLEX{0.0, 0.0};
#else
VAR
  i    : LONGCOMPLEX;
  one  : LONGCOMPLEX;
  zero : LONGCOMPLEX;
#endif
#endif

(*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*)

#if !ISO_complex
(* Die folgenden Funktionen sind nicht ISO, sondern nur vorhanden, weil
 * der ISO-Standard-Typ LONGCOMPLEX nicht existiert.
 *)

PROCEDURE RE ((* EIN/ -- *) z : LONGCOMPLEX ): LONGREAL;

PROCEDURE IM ((* EIN/ -- *) z : LONGCOMPLEX ): LONGREAL;

PROCEDURE cequ ((* EIN/ -- *) z1 : LONGCOMPLEX;
                (* EIN/ -- *) z2 : LONGCOMPLEX ): BOOLEAN;

#if ISO_struct_return
PROCEDURE CMPLX ((* EIN/ -- *) re : LONGREAL;
                 (* EIN/ -- *) im : LONGREAL ): LONGCOMPLEX;

PROCEDURE cneg ((* EIN/ -- *) z : LONGCOMPLEX ): LONGCOMPLEX;

PROCEDURE cadd ((* EIN/ -- *) z1 : LONGCOMPLEX;
                (* EIN/ -- *) z2 : LONGCOMPLEX ): LONGCOMPLEX;

PROCEDURE csub ((* EIN/ -- *) z1 : LONGCOMPLEX;
                (* EIN/ -- *) z2 : LONGCOMPLEX ): LONGCOMPLEX;

PROCEDURE cmul ((* EIN/ -- *) z1 : LONGCOMPLEX;
                (* EIN/ -- *) z2 : LONGCOMPLEX ): LONGCOMPLEX;

PROCEDURE cdiv ((* EIN/ -- *) z1 : LONGCOMPLEX;
                (* EIN/ -- *) z2 : LONGCOMPLEX ): LONGCOMPLEX;
#else
PROCEDURE CMPLX ((* EIN/ -- *)     re : LONGREAL;
                 (* EIN/ -- *)     im : LONGREAL;
                 (* -- /AUS *) VAR z  : LONGCOMPLEX );

PROCEDURE cneg ((* EIN/ -- *)     z    : LONGCOMPLEX;
                (* -- /AUS *) VAR zneg : LONGCOMPLEX );

PROCEDURE cadd ((* EIN/ -- *)     z1   : LONGCOMPLEX;
                (* EIN/ -- *)     z2   : LONGCOMPLEX;
                (* -- /AUS *) VAR zadd : LONGCOMPLEX );

PROCEDURE csub ((* EIN/ -- *)     z1   : LONGCOMPLEX;
                (* EIN/ -- *)     z2   : LONGCOMPLEX;
                (* -- /AUS *) VAR zsub : LONGCOMPLEX );

PROCEDURE cmul ((* EIN/ -- *)     z1   : LONGCOMPLEX;
                (* EIN/ -- *)     z2   : LONGCOMPLEX;
                (* -- /AUS *) VAR zmul : LONGCOMPLEX );

PROCEDURE cdiv ((* EIN/ -- *)     z1   : LONGCOMPLEX;
                (* EIN/ -- *)     z2   : LONGCOMPLEX;
                (* -- /AUS *) VAR zdiv : LONGCOMPLEX );
#endif /* ISO_struct_return */
#endif /* ISO_complex */


PROCEDURE abs ((* EIN/ -- *) z : LONGCOMPLEX ) : LONGREAL;

(* Liefert eine Approximation fuer den absoluten Wert (Modulus, Laenge,
   Groesse) von <z>.
 *)


PROCEDURE arg ((* EIN/ -- *) z : LONGCOMPLEX ) : LONGREAL;

(* Liefert eine Approximation fuer den Winkel, den <z> mit der
   positiven x-Achse in der komplexen Zahlenebene einschliesst (Phase).
   Der Wertebereich ist: (-pi, pi] (Hauptwert).
   Falls "abs(z)" gleich Null, wird eine Ausnahme ausgeloest.
 *)

#if ISO_struct_return
PROCEDURE conj ((* EIN/ -- *) z : LONGCOMPLEX ) : LONGCOMPLEX;

(* Liefert eine Approximation fuer die zu <z> konjugiert komplexe Zahl. *)


PROCEDURE power ((* EIN/ -- *) base     : LONGCOMPLEX;
                 (* EIN/ -- *) exponent : LONGREAL    ) : LONGCOMPLEX;

(* Liefert eine Approximation fuer die Potenzierung von <exponent>
   zur Basis <base> (Hauptwert).
 *)


PROCEDURE sqrt ((* EIN/ -- *) z : LONGCOMPLEX ) : LONGCOMPLEX;

(* Liefert eine Approximation fuer den Hauptwert der Quadratwurzel
   von <z>.
 *)


PROCEDURE exp ((* EIN/ -- *) z : LONGCOMPLEX ) : LONGCOMPLEX;

(* Liefert eine Approximation fuer die Potenzierung von <z> zur
   Eulerschen Zahl e.
 *)


PROCEDURE ln ((* EIN/ -- *) z : LONGCOMPLEX ) : LONGCOMPLEX;

(* Liefert eine Approximation fuer den Hauptzweig des natuerlichen
   Logarithmus von <z>.
 *)


PROCEDURE sin ((* EIN/ -- *) z : LONGCOMPLEX ) : LONGCOMPLEX;

(* Liefert eine Approximation fuer den komplexen Sinus von <z>. *)


PROCEDURE cos ((* EIN/ -- *) z : LONGCOMPLEX ) : LONGCOMPLEX;

(* Liefert eine Approximation fuer den komplexen Kosinus von <z>. *)


PROCEDURE tan ((* EIN/ -- *) z : LONGCOMPLEX ) : LONGCOMPLEX;

(* Liefert eine Approximation fuer den komplexen Tangens von <z>.
   Falls <z> (Realteil, Imaginaerteil gleich Null) ein ungerades
   Vielfachen von Pi/2 ist, wird eine Ausnahme ausgeloest.
 *)


PROCEDURE arcsin ((* EIN/ -- *) z : LONGCOMPLEX ) : LONGCOMPLEX;

(* Liefert eine Approximation fuer den Hauptzweig des komplexen
   Arcussinus von <z>.
 *)


PROCEDURE arccos ((* EIN/ -- *) z : LONGCOMPLEX ) : LONGCOMPLEX;

(* Liefert eine Approximation fuer den Hauptzweig des komplexen
   Arcuskosinus von <z>.
 *)


PROCEDURE arctan ((* EIN/ -- *) z : LONGCOMPLEX ) : LONGCOMPLEX;

(* Liefert eine Approximation fuer den Hauptzweig des komplexen
   Arcustangens von <z>.
 *)


PROCEDURE polarToComplex ((* EIN/ -- *) abs : LONGREAL;
                          (* EIN/ -- *) arg : LONGREAL ) : LONGCOMPLEX;

(* Liefert eine Approximation fuer die komplexe Zahl, deren
   Polarkoordinaten <abs> (laenge) und <arg> (Winkel) sind.
 *)


PROCEDURE scalarMult ((* EIN/ -- *) scalar : LONGREAL;
                      (* EIN/ -- *) z      : LONGCOMPLEX ): LONGCOMPLEX;

(* Liefert eine Approximation fuer das Skalarprodukt von <scalar> und <z>. *)
#else
PROCEDURE conj ((* EIN/ -- *)     z     : LONGCOMPLEX;
                (* -- /AUS *) VAR zconj : LONGCOMPLEX );

(* Liefert eine Approximation fuer die zu <z> konjugiert komplexe Zahl. *)


PROCEDURE power ((* EIN/ -- *)     base     : LONGCOMPLEX;
                 (* EIN/ -- *)     exponent : LONGREAL;
                 (* -- /AUS *) VAR zpow     : LONGCOMPLEX );

(* Liefert eine Approximation fuer die Potenzierung von <exponent>
   zur Basis <base> (Hauptwert).
 *)


PROCEDURE sqrt ((* EIN/ -- *)     z     : LONGCOMPLEX;
                (* -- /AUS *) VAR zsqrt : LONGCOMPLEX );

(* Liefert eine Approximation fuer den Hauptwert der Quadratwurzel
   von <z>.
 *)


PROCEDURE exp ((* EIN/ -- *)     z    : LONGCOMPLEX;
               (* -- /AUS *) VAR zexp : LONGCOMPLEX );

(* Liefert eine Approximation fuer die Potenzierung von <z> zur
   Eulerschen Zahl e.
 *)


PROCEDURE ln ((* EIN/ -- *)     z   : LONGCOMPLEX;
              (* -- /AUS *) VAR zln : LONGCOMPLEX );

(* Liefert eine Approximation fuer den Hauptzweig des natuerlichen
   Logarithmus von <z>.
 *)


PROCEDURE sin ((* EIN/ -- *)     z    : LONGCOMPLEX;
               (* -- /AUS *) VAR zsin : LONGCOMPLEX );

(* Liefert eine Approximation fuer den komplexen Sinus von <z>. *)


PROCEDURE cos ((* EIN/ -- *)     z    : LONGCOMPLEX;
               (* -- /AUS *) VAR zcos : LONGCOMPLEX );

(* Liefert eine Approximation fuer den komplexen Kosinus von <z>. *)


PROCEDURE tan ((* EIN/ -- *)     z    : LONGCOMPLEX;
               (* -- /AUS *) VAR ztan : LONGCOMPLEX );

(* Liefert eine Approximation fuer den komplexen Tangens von <z>.
   Falls <z> (Realteil, Imaginaerteil gleich Null) zu nahe an einem
   ungeraden Vielfachen von Pi/2 liegt, wird eine Ausnahme ausgeloest.
 *)


PROCEDURE arcsin ((* EIN/ -- *)     z     : LONGCOMPLEX;
                  (* -- /AUS *) VAR zasin : LONGCOMPLEX );

(* Liefert eine Approximation fuer den Hauptzweig des komplexen
   Arcussinus von <z>.
 *)


PROCEDURE arccos ((* EIN/ -- *)     z     : LONGCOMPLEX;
                  (* -- /AUS *) VAR zacos : LONGCOMPLEX );

(* Liefert eine Approximation fuer den Hauptzweig des komplexen
   Arcuskosinus von <z>.
 *)


PROCEDURE arctan ((* EIN/ -- *)     z     : LONGCOMPLEX;
                  (* -- /AUS *) VAR zatan : LONGCOMPLEX );

(* Liefert eine Approximation fuer den Hauptzweig des komplexen
   Arcustangens von <z>.
 *)


PROCEDURE polarToComplex ((* EIN/ -- *)     abs : LONGREAL;
                          (* EIN/ -- *)     arg : LONGREAL;
                          (* -- /AUS *) VAR z   : LONGCOMPLEX );

(* Liefert eine Approximation fuer die komplexe Zahl, deren
   Polarkoordinaten <abs> (laenge) und <arg> (Winkel) sind.
 *)


PROCEDURE scalarMult ((* EIN/ -- *)     scalar : LONGREAL;
                      (* EIN/ -- *)     z      : LONGCOMPLEX;
                      (* -- /AUS *) VAR zscal  : LONGCOMPLEX );

(* Liefert eine Approximation fuer das Skalarprodukt von <scalar> und <z>. *)
#endif /* ISO_struct_return */

PROCEDURE IsCMathException(): BOOLEAN;

(* Testet, ob die aufrufende Koroutine in einer Ausnahmebehandlung ist,
   weil die 'LongComplexMath'-Exception ausgeloest wurde.
 *)

END LongComplexMath.
