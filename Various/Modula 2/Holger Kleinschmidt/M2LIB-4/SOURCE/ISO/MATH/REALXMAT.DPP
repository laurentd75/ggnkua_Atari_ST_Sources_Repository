DEFINITION MODULE RealXMath;
__DEF_SWITCHES__
#ifdef HM2
#ifdef __LONG_REAL__
(*$!r+: Modul muss mit $r- uebersetzt werden! *)
#else
(*$!r-: Modul muss mit $r+ uebersetzt werden! *)
#endif
#ifdef __LONG_WHOLE__
(*$!i+: Modul muss mit $i- uebersetzt werden! *)
(*$!w+: Modul muss mit $w- uebersetzt werden! *)
#else
(*$!i-: Modul muss mit $i+ uebersetzt werden! *)
(*$!w-: Modul muss mit $w+ uebersetzt werden! *)
#endif
#endif
(*****************************************************************************)
(* Weitere Funktionen fuer den Typ REAL und Hilfsmodul fuer ISO.ComplexMath  *)
(* --------------------------------------------------------------------------*)
(* Dieses Modul ist nicht Teil des ISO-Standards.                            *)
(* --------------------------------------------------------------------------*)
(* 29-Jul-96, Holger Kleinschmidt                                            *)
(*****************************************************************************)

(*============== IMPLEMENTIERUNGSHINWEIS ====================================*)
(* Fuer diese Implementierung gilt:                                          *)
(* Die Softwarefunktionen werden mit einer Genauigkeit von knapp 8 Dezi-     *)
(* malstellen (IEEE single precision) berechnet. Dieser Wert wird aber nur   *)
(* erreicht, wenn die interne REAL-Darstellung ebenfalls mindestens diese    *)
(* Genauigkeit erlaubt.                                                      *)
(*===========================================================================*)


(* Wurzel *)

PROCEDURE cbrt ((* EIN/ -- *) x : REAL ): REAL;

(* Liefert eine Approximation der Kubikwurzel von <x>. *)


PROCEDURE hypot ((* EIN/ -- *) x : REAL;
                 (* EIN/ -- *) y : REAL ): REAL;

(* Liefert den Wert von sqrt(x*x + y*y) (Hypothenuse), vermeidet aber
   vorzeitigen Ueberlauf.
 *)




(* Hyperbelfunktionen *)

PROCEDURE sinh ((* EIN/ -- *) x : REAL ): REAL;

(* Liefert eine Approximation des Sinus Hyperbolicus von <x>. *)


PROCEDURE cosh ((* EIN/ -- *) x : REAL ): REAL;

(* Liefert eine Approximation des Cosinus Hyperbolicus von <x>. *)


PROCEDURE tanh ((* EIN/ -- *) x : REAL ): REAL;

(* Liefert eine Approximation des Tangens Hyperbolicus von <x>. *)


PROCEDURE arcsinh ((* EIN/ -- *) x : REAL ): REAL;

(* Liefert eine Approximation des Area Sinus Hyperbolicus von <x>. *)


PROCEDURE arccosh ((* EIN/ -- *) x : REAL ): REAL;

(* Liefert eine Approximation des Area Cosinus Hyperbolicus von <x>.
   Falls <x> kleiner Eins, wird eine Ausnahme ausgeloest.
 *)


PROCEDURE arctanh ((* EIN/ -- *) x : REAL ): REAL;

(* Liefert eine Approximation des Area Tangens Hyperbolicus von <x>.
   Falls |<x>| groesser gleich Eins wird eine Ausnahme ausgeloest.
 *)




(* Exponential- und Logarithmusfunktionen mit verschiedenen Basen *)

PROCEDURE exp10 ((* EIN/ -- *) x : REAL ): REAL;

(* Liefert eine Approximation der Potenzierung von <x> zur Basis Zehn. *)


PROCEDURE powI ((* EIN/ -- *) base : REAL;
                (* EIN/ -- *) exp  : INTEGER ): REAL;

(* Liefert eine Approximation der Potenzierung von <exp>
   zur Basis <base>.
   Falls <base> gleich Null und <exp> kleiner oder gleich Null wird
   eine Ausnahme ausgeloest.
 *)


PROCEDURE log10 ((* EIN/ -- *) x : REAL ): REAL;

(* Liefert eine Approximation des Logarithmus von <x> zur Basis Zehn.
   Falls <x> kleiner oder gleich Null, wird eine Ausnahme ausgeloest.
 *)


PROCEDURE log ((* EIN/ -- *) x    : REAL;
               (* EIN/ -- *) base : REAL ): REAL;

(* Liefert eine Approximation des Logarithmus von <x> zur Basis <base>.
   Falls <x> oder <base> kleiner oder gleich Null, wird eine Ausnahme
   ausgeloest.
 *)




(* Konvertierungen *)

PROCEDURE arctan2 ((* EIN/ -- *) y : REAL;
                   (* EIN/ -- *) x : REAL ): REAL;

(* Berechnet aus <x> und <y>, die Koordinaten in einem rechtwinkligen
   Koordinatensystem darstellen, den entsprechenden Winkel in einem
   Polarkoordinatensystem (bzgl. der positive x-Achse).
   Im wesentlichen wird dabei arctan(y / x) berechnet, der Wertebereich
   ist jedoch: (-pi, pi].
   Falls <x> und <y> gleich Null, wird eine Ausnahme ausgeloest.

   Die Reihenfolge der Parameter ist zu beachten!
 *)


PROCEDURE rectToPol ((* EIN/ -- *)     x      : REAL;
                     (* EIN/ -- *)     y      : REAL;
                     (* -- /AUS *) VAR radius : REAL;
                     (* -- /AUS *) VAR angle  : REAL );

PROCEDURE polToRect ((* EIN/ -- *)     radius : REAL;
                     (* EIN/ -- *)     angle  : REAL;
                     (* -- /AUS *) VAR x      : REAL;
                     (* -- /AUS *) VAR y      : REAL );

(* "rectToPol()" wandelt Koordinaten eines rechtwinkligen Koordinatensystem
   in Koordinaten eines Polarkoordinatensystem. "polToRect()" macht das
   Gegenteil.
   Fuer den Winkel <angle> gilt das bei "atan2()" Gesagte, ausser dass der
   Wertebereich [0, 2*pi) ist.
 *)


PROCEDURE degToRad ((* EIN/ -- *) x : REAL ): REAL;

PROCEDURE radToDeg ((* EIN/ -- *) x : REAL ): REAL;

(* Konvertierung zwischen 'Radiant' und 'Grad'. Es gilt:  180 Grad <=> pi. *)


PROCEDURE secToRad ((* EIN/ -- *) deg : CARDINAL;
                    (* EIN/ -- *) min : CARDINAL;
                    (* EIN/ -- *) sec : REAL     ): REAL;

PROCEDURE radToSec ((* EIN/ -- *)     rad : REAL;
                    (* -- /AUS *) VAR deg : CARDINAL;
                    (* -- /AUS *) VAR min : CARDINAL;
                    (* -- /AUS *) VAR sec : REAL     );

(* Konvertierung zwischen Radiant und einer Winkelangabe in Grad,
   Minuten und Sekunden.
 *)


PROCEDURE IsRXMathException ( ): BOOLEAN;

(* Testet, ob die aufrufende Koroutine in einer Ausnahmebehandlung ist,
   weil die 'RealXMath'-Ausnahme ausgeloest wurde.
 *)

END RealXMath.
