DEFINITION MODULE RealMath;

(* standard library module *)

__DEF_SWITCHES__
#ifdef HM2
#ifdef __LONG_REAL__
(*$!r+: Modul muss mit $r- uebersetzt werden! *)
#else
(*$!r-: Modul muss mit $r+ uebersetzt werden! *)
#endif
#ifdef __LONG_WHOLE__
(*$!i+: Modul muss mit $i- uebersetzt werden! *)
(*$!w+: Modul muss mit $w- uebersetzt werden! *)
#else
(*$!i-: Modul muss mit $i+ uebersetzt werden! *)
(*$!w-: Modul muss mit $w+ uebersetzt werden! *)
#endif
#endif
(*****************************************************************************)
(* ISO-RealMath                                                              *)
(* --------------------------------------------------------------------------*)
(* Mathematische Funktionen fuer den Typ REAL.                               *)
(* --------------------------------------------------------------------------*)
(* 27-Aug-96, Holger Kleinschmidt                                            *)
(*****************************************************************************)

(*============== IMPLEMENTIERUNGSHINWEIS ====================================*)
(* Fuer diese Implementierung gilt:                                          *)
(* Die Softwarefunktionen werden mit einer Genauigkeit von knapp 8 Dezi-     *)
(* malstellen (IEEE single precision) berechnet. Dieser Wert wird aber nur   *)
(* erreicht, wenn die interne REAL-Darstellung ebenfalls mindestens diese    *)
(* Genauigkeit erlaubt.                                                      *)
(*===========================================================================*)

FROM PORTAB IMPORT
(* TYPE *) SIGNED;

(*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*)

CONST
  pi   = 3.1415926535897932384626433832795028841972;
  exp1 = 2.7182818284590452353602874713526624977572;

(*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*)

PROCEDURE sqrt ((* EIN/ -- *) x : REAL ): REAL;

(* Liefert eine Approximation der nichtnegativen Wurzel von <x>.
   Falls <x> kleiner Null, wird eine Ausnahme ausgeloest.
 *)


PROCEDURE exp ((* EIN/ -- *) x : REAL ): REAL;

(* Liefert eine Approximation der Potenzierung von <x> zur Eulerschen
   Konstanten e.
 *)


PROCEDURE ln ((* EIN/ -- *) x : REAL ): REAL;

(* Liefert eine Approximation des natuerlichen Logarithmus von <x>.
   Falls <x> kleiner oder gleich Null, wird eine Ausnahme ausgeloest.
 *)


(* Der Winkel bei den trigonometrischen Funktionen wird als Radiant
   (Periode: [0..2*Pi)) angegeben.
 *)

PROCEDURE sin ((* EIN/ -- *) x : REAL ): REAL;

(* Liefert eine Approximation des Sinus von <x>. *)


PROCEDURE cos ((* EIN/ -- *) x : REAL ): REAL;

(* Liefert eine Approximation des Kosinus von <x>. *)


PROCEDURE tan ((* EIN/ -- *) x : REAL ): REAL;

(* Liefert eine Approximation des Tangens von <x>.
   Falls <x> ein ungerades Vielfachen von Pi/2 ist, wird eine
   Ausnahme ausgeloest.
 *)


PROCEDURE arcsin ((* EIN/ -- *) x : REAL ): REAL;

(* Liefert eine Approximation des Arcussinus von <x>.
   Der Wertebereich ist: (-pi/2, pi/2].
   Falls |<x>| groesser als Eins, wird eine Ausnahme ausgeloest.
 *)


PROCEDURE arccos ((* EIN/ -- *) x : REAL ): REAL;

(* Liefert eine Approximation des Arcuskosinus von <x>.
   Der Wertebereich ist: [0, pi].
   Falls |<x>| groesser als Eins, wird eine Ausnahme ausgeloest.
 *)


PROCEDURE arctan ((* EIN/ -- *) x : REAL ): REAL;

(* Liefert eine Approximation des Arcustangens von <x>.
   Der Wertebereich ist: (-pi/2, pi/2].
 *)


PROCEDURE power ((* EIN/ -- *) base     : REAL;
                 (* EIN/ -- *) exponent : REAL ): REAL;

(* Liefert eine Approximation der Potenzierung von <exponent>
   zur Basis <base>.
   Falls <base> kleiner oder gleich Null, wird eine Ausnahme ausgeloest.

   Imp: <base> darf auch kleiner oder gleich Null sein, dann gelten
        allerdings Einschraenkugen fuer <exponent>:
        Falls <base> kleiner Null und <exp> keine ganze Zahl, wird eine
        Ausnahme ausgeloest. Falls <base> gleich Null und <exp> kleiner
        oder gleich Null wird ebenfalls eine Ausnahme ausgeloest.
 *)


PROCEDURE round ((* EIN/ -- *) x : REAL ): SIGNED;

(* Liefert den ganzzahligen Wert, der am nahsten an <x> liegt. Falls
   <x> genau zwischen zwei ganzzahligen Werten liegt, ist das Ergebnis
   implementierungsspezifisch.
   Falls |<x>| zu gross fuer SIGNED, kann eine Ausnahme ausgeloest werden.

   Imp: Falls <x> genau zwischen zwei ganzzahligen Werten liegt, wird
        auf die naechste gerade Zahl gerundet.
 *)


PROCEDURE IsRMathException ( ): BOOLEAN;

(* Testet, ob die aufrufende Koroutine in einer Ausnahmebehandlung ist,
   weil die 'RealMath'-Ausnahme ausgeloest wurde.
 *)

END RealMath.
