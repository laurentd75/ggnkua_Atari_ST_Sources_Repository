DEFINITION MODULE ComplexMath;

(* standard library module *)

__DEF_SWITCHES__
#ifdef HM2
#ifdef __LONG_REAL__
(*$!r+: Modul muss mit $r- uebersetzt werden! *)
#else
(*$!r-: Modul muss mit $r+ uebersetzt werden! *)
#endif
#ifdef __LONG_WHOLE__
(*$!i+: Modul muss mit $i- uebersetzt werden! *)
(*$!w+: Modul muss mit $w- uebersetzt werden! *)
#else
(*$!i-: Modul muss mit $i+ uebersetzt werden! *)
(*$!w-: Modul muss mit $w+ uebersetzt werden! *)
#endif
#endif
(*****************************************************************************)
(* ISO-ComplexMath                                                           *)
(* --------------------------------------------------------------------------*)
(* Mathematische Funktionen fuer den Typ COMPLEX.                            *)
(* --------------------------------------------------------------------------*)
(* 02-Nov-95, Holger Kleinschmidt                                            *)
(*****************************************************************************)

#if ISO_complex
CONST
  i    = CMPLX(0.0, 1.0);
  one  = CMPLX(1.0, 0.0);
  zero = CMPLX(0.0, 0.0);
#else
TYPE
  COMPLEX = RECORD
    re : REAL;
    im : REAL;
  END;

#if ISO_value_constructor
CONST
  i    = COMPLEX{0.0, 1.0};
  one  = COMPLEX{1.0, 0.0};
  zero = COMPLEX{0.0, 0.0};
#else
VAR
  i    : COMPLEX;
  one  : COMPLEX;
  zero : COMPLEX;
#endif
#endif

(*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*)

#if !ISO_complex
(* Die folgenden Funktionen sind nicht ISO, sondern nur vorhanden, weil
 * der ISO-Standard-Typ COMPLEX nicht existiert.
 *)

PROCEDURE RE ((* EIN/ -- *) z : COMPLEX ): REAL;

PROCEDURE IM ((* EIN/ -- *) z : COMPLEX ): REAL;

PROCEDURE cequ ((* EIN/ -- *) z1 : COMPLEX;
                (* EIN/ -- *) z2 : COMPLEX ): BOOLEAN;

#if ISO_struct_return
PROCEDURE CMPLX ((* EIN/ -- *) re : REAL;
                 (* EIN/ -- *) im : REAL ): COMPLEX;

PROCEDURE cneg ((* EIN/ -- *) z : COMPLEX ): COMPLEX;

PROCEDURE cadd ((* EIN/ -- *) z1 : COMPLEX;
                (* EIN/ -- *) z2 : COMPLEX ): COMPLEX;

PROCEDURE csub ((* EIN/ -- *) z1 : COMPLEX;
                (* EIN/ -- *) z2 : COMPLEX ): COMPLEX;

PROCEDURE cmul ((* EIN/ -- *) z1 : COMPLEX;
                (* EIN/ -- *) z2 : COMPLEX ): COMPLEX;

PROCEDURE cdiv ((* EIN/ -- *) z1 : COMPLEX;
                (* EIN/ -- *) z2 : COMPLEX ): COMPLEX;
#else
PROCEDURE CMPLX ((* EIN/ -- *)     re : REAL;
                 (* EIN/ -- *)     im : REAL;
                 (* -- /AUS *) VAR z  : COMPLEX );

PROCEDURE cneg ((* EIN/ -- *)     z    : COMPLEX;
                (* -- /AUS *) VAR zneg : COMPLEX );

PROCEDURE cadd ((* EIN/ -- *)     z1   : COMPLEX;
                (* EIN/ -- *)     z2   : COMPLEX;
                (* -- /AUS *) VAR zadd : COMPLEX );

PROCEDURE csub ((* EIN/ -- *)     z1   : COMPLEX;
                (* EIN/ -- *)     z2   : COMPLEX;
                (* -- /AUS *) VAR zsub : COMPLEX );

PROCEDURE cmul ((* EIN/ -- *)     z1   : COMPLEX;
                (* EIN/ -- *)     z2   : COMPLEX;
                (* -- /AUS *) VAR zmul : COMPLEX );

PROCEDURE cdiv ((* EIN/ -- *)     z1   : COMPLEX;
                (* EIN/ -- *)     z2   : COMPLEX;
                (* -- /AUS *) VAR zdiv : COMPLEX );
#endif /* ISO_struct_return */
#endif /* ISO_complex */


PROCEDURE abs ((* EIN/ -- *) z : COMPLEX ) : REAL;

(* Liefert eine Approximation fuer den absoluten Wert (Modulus, Laenge,
   Groesse) von <z>.
 *)


PROCEDURE arg ((* EIN/ -- *) z : COMPLEX ) : REAL;

(* Liefert eine Approximation fuer den Winkel, den <z> mit der
   positiven x-Achse in der komplexen Zahlenebene einschliesst (Phase).
   Der Wertebereich ist: (-pi, pi] (Hauptwert).
   Falls "abs(z)" gleich Null, wird eine Ausnahme ausgeloest.
 *)

#if ISO_struct_return
PROCEDURE conj ((* EIN/ -- *) z : COMPLEX ) : COMPLEX;

(* Liefert eine Approximation fuer die zu <z> konjugiert komplexe Zahl. *)


PROCEDURE power ((* EIN/ -- *) base     : COMPLEX;
                 (* EIN/ -- *) exponent : REAL    ) : COMPLEX;

(* Liefert eine Approximation fuer die Potenzierung von <exponent>
   zur Basis <base> (Hauptwert).
 *)


PROCEDURE sqrt ((* EIN/ -- *) z : COMPLEX ) : COMPLEX;

(* Liefert eine Approximation fuer den Hauptwert der Quadratwurzel
   von <z>.
 *)


PROCEDURE exp ((* EIN/ -- *) z : COMPLEX ) : COMPLEX;

(* Liefert eine Approximation fuer die Potenzierung von <z> zur
   Eulerschen Zahl e.
 *)


PROCEDURE ln ((* EIN/ -- *) z : COMPLEX ) : COMPLEX;

(* Liefert eine Approximation fuer den Hauptzweig des natuerlichen
   Logarithmus von <z>.
 *)


PROCEDURE sin ((* EIN/ -- *) z : COMPLEX ) : COMPLEX;

(* Liefert eine Approximation fuer den komplexen Sinus von <z>. *)


PROCEDURE cos ((* EIN/ -- *) z : COMPLEX ) : COMPLEX;

(* Liefert eine Approximation fuer den komplexen Kosinus von <z>. *)


PROCEDURE tan ((* EIN/ -- *) z : COMPLEX ) : COMPLEX;

(* Liefert eine Approximation fuer den komplexen Tangens von <z>.
   Falls <z> (Realteil, Imaginaerteil gleich Null) ein ungerades
   Vielfachen von Pi/2 ist, wird eine Ausnahme ausgeloest.
 *)


PROCEDURE arcsin ((* EIN/ -- *) z : COMPLEX ) : COMPLEX;

(* Liefert eine Approximation fuer den Hauptzweig des komplexen
   Arcussinus von <z>.
 *)


PROCEDURE arccos ((* EIN/ -- *) z : COMPLEX ) : COMPLEX;

(* Liefert eine Approximation fuer den Hauptzweig des komplexen
   Arcuskosinus von <z>.
 *)


PROCEDURE arctan ((* EIN/ -- *) z : COMPLEX ) : COMPLEX;

(* Liefert eine Approximation fuer den Hauptzweig des komplexen
   Arcustangens von <z>.
 *)


PROCEDURE polarToComplex ((* EIN/ -- *) abs : REAL;
                          (* EIN/ -- *) arg : REAL ) : COMPLEX;

(* Liefert eine Approximation fuer die komplexe Zahl, deren
   Polarkoordinaten <abs> (laenge) und <arg> (Winkel) sind.
 *)


PROCEDURE scalarMult ((* EIN/ -- *) scalar : REAL;
                      (* EIN/ -- *) z      : COMPLEX ): COMPLEX;

(* Liefert eine Approximation fuer das Skalarprodukt von <scalar> und <z>. *)

#else

PROCEDURE conj ((* EIN/ -- *)     z     : COMPLEX;
                (* -- /AUS *) VAR zconj : COMPLEX );

(* Liefert eine Approximation fuer die zu <z> konjugiert komplexe Zahl. *)


PROCEDURE power ((* EIN/ -- *)     base     : COMPLEX;
                 (* EIN/ -- *)     exponent : REAL;
                 (* -- /AUS *) VAR zpow     : COMPLEX );

(* Liefert eine Approximation fuer die Potenzierung von <exponent>
   zur Basis <base> (Hauptwert).
 *)


PROCEDURE sqrt ((* EIN/ -- *)     z     : COMPLEX;
                (* -- /AUS *) VAR zsqrt : COMPLEX );

(* Liefert eine Approximation fuer den Hauptwert der Quadratwurzel
   von <z>.
 *)


PROCEDURE exp ((* EIN/ -- *)     z    : COMPLEX;
               (* -- /AUS *) VAR zexp : COMPLEX );

(* Liefert eine Approximation fuer die Potenzierung von <z> zur
   Eulerschen Zahl e.
 *)


PROCEDURE ln ((* EIN/ -- *)     z   : COMPLEX;
              (* -- /AUS *) VAR zln : COMPLEX );

(* Liefert eine Approximation fuer den Hauptzweig des natuerlichen
   Logarithmus von <z>.
 *)


PROCEDURE sin ((* EIN/ -- *)     z    : COMPLEX;
               (* -- /AUS *) VAR zsin : COMPLEX );

(* Liefert eine Approximation fuer den komplexen Sinus von <z>. *)


PROCEDURE cos ((* EIN/ -- *)     z    : COMPLEX;
               (* -- /AUS *) VAR zcos : COMPLEX );

(* Liefert eine Approximation fuer den komplexen Kosinus von <z>. *)


PROCEDURE tan ((* EIN/ -- *)     z    : COMPLEX;
               (* -- /AUS *) VAR ztan : COMPLEX );

(* Liefert eine Approximation fuer den komplexen Tangens von <z>.
   Falls <z> (Realteil, Imaginaerteil gleich Null) zu nahe an einem
   ungeraden Vielfachen von Pi/2 liegt, wird eine Ausnahme ausgeloest.
 *)


PROCEDURE arcsin ((* EIN/ -- *)     z     : COMPLEX;
                  (* -- /AUS *) VAR zasin : COMPLEX );

(* Liefert eine Approximation fuer den Hauptzweig des komplexen
   Arcussinus von <z>.
 *)


PROCEDURE arccos ((* EIN/ -- *)     z     : COMPLEX;
                  (* -- /AUS *) VAR zacos : COMPLEX );

(* Liefert eine Approximation fuer den Hauptzweig des komplexen
   Arcuskosinus von <z>.
 *)


PROCEDURE arctan ((* EIN/ -- *)     z     : COMPLEX;
                  (* -- /AUS *) VAR zatan : COMPLEX );

(* Liefert eine Approximation fuer den Hauptzweig des komplexen
   Arcustangens von <z>.
 *)


PROCEDURE polarToComplex ((* EIN/ -- *)     abs : REAL;
                          (* EIN/ -- *)     arg : REAL;
                          (* -- /AUS *) VAR z   : COMPLEX );

(* Liefert eine Approximation fuer die komplexe Zahl, deren
   Polarkoordinaten <abs> (laenge) und <arg> (Winkel) sind.
 *)


PROCEDURE scalarMult ((* EIN/ -- *)     scalar : REAL;
                      (* EIN/ -- *)     z      : COMPLEX;
                      (* -- /AUS *) VAR zscal  : COMPLEX );

(* Liefert eine Approximation fuer das Skalarprodukt von <scalar> und <z>. *)
#endif /* ISO_struct_return */

PROCEDURE IsCMathException(): BOOLEAN;

(* Testet, ob die aufrufende Koroutine in einer Ausnahmebehandlung ist,
   weil die 'ComplexMath'-Exception ausgeloest wurde.
 *)

END ComplexMath.
