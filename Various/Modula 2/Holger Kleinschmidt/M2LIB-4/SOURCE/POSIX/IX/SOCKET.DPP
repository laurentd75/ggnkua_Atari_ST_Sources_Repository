DEFINITION MODULE Socket;
__DEF_SWITCHES__
#ifdef HM2
#ifdef __LONG_WHOLE__
(*$!i+: Modul muss mit $i- uebersetzt werden! *)
(*$!w+: Modul muss mit $w- uebersetzt werden! *)
#else
(*$!i-: Modul muss mit $i+ uebersetzt werden! *)
(*$!w-: Modul muss mit $w+ uebersetzt werden! *)
#endif
#endif
(*****************************************************************************)
(* Elementaroperationen auf ``Sockets'' fuer das MiNT-net von Kay Roemer.    *)
(* Die Schnittstelle entspricht den Header-Dateien sys/{socket.h,un.h}.      *)
(* Fuer weitere Informationen ist die Dokumentation zum MiNT-Net zu Rate zu  *)
(* ziehen.                                                                   *)
(* --------------------------------------------------------------------------*)
(* 23-Mai-96, Holger Kleinschmidt                                            *)
(*****************************************************************************)

FROM SYSTEM IMPORT
(* TYPE *) ADDRESS;

FROM PORTAB IMPORT
(* TYPE *) UNSIGNEDWORD, UNSIGNEDLONG;

FROM types IMPORT
(* TYPE *) short, int, long, sizeT, PathName;

(*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*)

CONST (* Socket types *)
  SockStream    = 1;
  SockDgram     = 2;
  SockRaw       = 3;
  SockRdm       = 4;
  SockSeqpacket = 5;

CONST (* Protocol families *)
  PfUnspec = 0;
  PfUnix   = 1;
  PfInet   = 2;

CONST (* Address families, same as above *)
  AfUnspec = PfUnspec;
  AfUnix   = PfUnix;
  AfInet   = PfInet;
  AfLink   = 200;


TYPE (* Flags for send/recv *)
#if reverse_set
  MsgFlag = (
    Msg15, Msg14, Msg13, Msg12, Msg11, Msg10, Msg9,
    Msg8, Msg7, Msg6, Msg5, Msg4, Msg3,
    MsgDontroute, (* 0x0004 *)
    MsgPeek,      (* 0x0002 *)
    MsgOob        (* 0x0001 *)
  );
#else
  MsgFlag = (
    MsgOob,       (* 0x0001 *)
    MsgPeek,      (* 0x0002 *)
    MsgDontroute, (* 0x0004 *)
    Msg3, Msg4, Msg5, Msg6, Msg7, Msg8,
    Msg9, Msg10, Msg11, Msg12, Msg13, Msg14, Msg15
  );
#endif

  MsgFlags = PACKEDSET OF MsgFlag;


CONST (* Levels for use with [s|g]etsockopt call *)
  SolSocket = 0FFFFH;

CONST (* Options for use with [s|g]etsockopt call *)
  SoDebug     = 1;
  SoReuseaddr = 2;
  SoType      = 3;
  SoError     = 4;
  SoDontroute = 5;
  SoBroadcast = 6;
  SoSndbuf    = 7;
  SoRcvbuf    = 8;
  SoKeepalive = 9;
  SoOobinline = 10;
  SoLinger    = 11;
  SoChksum    = 40;
  SoDropconn  = 41;


TYPE (* Structure used for SoLinger *)
  LingerRec = RECORD
    lOnoff  : long;
    lLinger : long;
  END;

TYPE (* Generic socket address *)
  SockaddrPtr = POINTER TO SockaddrRec;
  SockaddrRec = RECORD
    saFamily : short;
    saData   : ARRAY [0..13] OF CHAR;
  END;

TYPE
  SockaddrUnPtr = POINTER TO SockaddrUnRec;
  SockaddrUnRec = RECORD
    sunFamily : short;
    sunPath   : PathName;
  END;

TYPE (* Structure used for scatter/gather io *)
  IovecPtr = POINTER TO IovecRec;
  IovecRec = RECORD
    iovBase : ADDRESS;
    iovLen  : sizeT;
  END;

TYPE (* Structure describing a message used with sendmsg/recvmsg *)
  MsghdrPtr = POINTER TO MsghdrRec;
  MsghdrRec = RECORD
    msgName         : ADDRESS;
    msgNamelen      : sizeT;
    msgIov          : IovecPtr;
    msgIovlen       : sizeT;
    msgAccrights    : ADDRESS;
    msgAccrightslen : sizeT;
  END;

TYPE
  SocketBuf = ARRAY [0..1] OF int;

(*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*)

PROCEDURE socket ((* EIN/ -- *) af       : int;
                  (* EIN/ -- *) type     : int;
                  (* EIN/ -- *) protocol : int ): int;

PROCEDURE socketpair ((* EIN/ -- *)     af       : int;
                      (* EIN/ -- *)     type     : int;
                      (* EIN/ -- *)     protocol : int;
                      (* -- /AUS *) VAR sv       : SocketBuf ): int;

PROCEDURE bind ((* EIN/ -- *) s       : int;
                (* EIN/ -- *) addr    : ADDRESS;
                (* EIN/ -- *) addrlen : sizeT ): int;

PROCEDURE listen ((* EIN/ -- *) s       : int;
                  (* EIN/ -- *) backlog : int ): int;

PROCEDURE accept ((* EIN/ -- *)     s       : int;
                  (* EIN/ -- *)     addr    : ADDRESS;
                  (* EIN/AUS *) VAR addrlen : sizeT ): int;

PROCEDURE connect ((* EIN/ -- *) s       : int;
                   (* EIN/ -- *) addr    : ADDRESS;
                   (* EIN/ -- *) addrlen : sizeT ): int;

PROCEDURE getsockname ((* EIN/ -- *)     s       : int;
                       (* EIN/ -- *)     addr    : ADDRESS;
                       (* EIN/AUS *) VAR addrlen : sizeT ): int;

PROCEDURE getpeername ((* EIN/ -- *)     s       : int;
                       (* EIN/ -- *)     addr    : ADDRESS;
                       (* EIN/AUS *) VAR addrlen : sizeT ): int;

PROCEDURE send ((* EIN/ -- *) s     : int;
                (* EIN/ -- *) msg   : ADDRESS;
                (* EIN/ -- *) len   : sizeT;
                (* EIN/ -- *) flags : MsgFlags ): int;

PROCEDURE sendto ((* EIN/ -- *) s     : int;
                  (* EIN/ -- *) msg   : ADDRESS;
                  (* EIN/ -- *) len   : sizeT;
                  (* EIN/ -- *) flags : MsgFlags;
                  (* EIN/ -- *) to    : ADDRESS;
                  (* EIN/ -- *) tolen : sizeT ): int;

PROCEDURE recv ((* EIN/ -- *) s     : int;
                (* EIN/ -- *) msg   : ADDRESS;
                (* EIN/ -- *) len   : sizeT;
                (* EIN/ -- *) flags : MsgFlags ): int;

PROCEDURE recvfrom ((* EIN/ -- *)     s       : int;
                    (* EIN/ -- *)     msg     : ADDRESS;
                    (* EIN/ -- *)     len     : sizeT;
                    (* EIN/ -- *)     flags   : MsgFlags;
                    (* EIN/ -- *)     from    : ADDRESS;
                    (* EIN/AUS *) VAR fromlen : sizeT ): int;

PROCEDURE setsockopt ((* EIN/ -- *) s       : int;
                      (* EIN/ -- *) level   : int;
                      (* EIN/ -- *) optname : int;
                      (* EIN/ -- *) optval  : ADDRESS;
                      (* EIN/ -- *) optlen  : sizeT ): int;

PROCEDURE getsockopt ((* EIN/ -- *)     s       : int;
                      (* EIN/ -- *)     level   : int;
                      (* EIN/ -- *)     optname : int;
                      (* EIN/ -- *)     optval  : ADDRESS;
                      (* EIN/AUS *) VAR optlen  : sizeT ): int;

PROCEDURE shutdown ((* EIN/ -- *) s   : int;
                    (* EIN/ -- *) how : int ): int;

PROCEDURE sendmsg ((* EIN/ -- *)     s     : int;
                   (* EIN/ -- *) VAR msg   : MsghdrRec;
                   (* EIN/ -- *)     flags : MsgFlags ): int;

PROCEDURE recvmsg ((* EIN/ -- *)     s     : int;
                   (* -- /AUS *) VAR msg   : MsghdrRec;
                   (* EIN/ -- *)     flags : MsgFlags ): int;

END Socket.
