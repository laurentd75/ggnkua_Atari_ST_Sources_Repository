DEFINITION MODULE iX;
__DEF_SWITCHES__
#ifdef HM2
#ifdef __LONG_WHOLE__
(*$!i+: Modul muss mit $i- uebersetzt werden! *)
(*$!w+: Modul muss mit $w- uebersetzt werden! *)
#else
(*$!i-: Modul muss mit $i+ uebersetzt werden! *)
(*$!w-: Modul muss mit $w+ uebersetzt werden! *)
#endif
#endif
#if no_reexport
#  error *** compiler does not allow reexporting!
#endif
(****************************************************************************)
(* Das Modul fasst Aufrufe, Typen und Konstanten zusammen, die nicht zu     *)
(* POSIX.1 gehoeren, aber in anderen UNIX-Systemen zu finden sind.          *)
(* Fuer Leute, die lieber aus einem einzigen Modul importieren wollen, und  *)
(* deren Compiler den Reexport erlaubt.                                     *)
(* Fuer die Beschreibung der Funktionen sollten die entsprechenden Defini-  *)
(* tionsmodule konsultiert werden.                                          *)
(* -------------------------------------------------------------------------*)
(* 31-Aug-96, Holger Kleinschmidt                                           *)
(****************************************************************************)
#if !ISO_proc_const
FROM SYSTEM IMPORT ADDRESS;
FROM types  IMPORT int,unsigned,unsignedlong,signedlong,StrPtr,offT,pidT,
                   sizeT,devT,timeT,gidT;
FROM dir    IMPORT DIR;
FROM proc   IMPORT WaitVal,WaitOptions,GroupArrayPtr;
FROM sys    IMPORT PasswdPtr,GroupPtr;
#endif
IMPORT er,types,str,dir,proc,sys,sig,term,args,blk,fcrypt;

(*===========================================================================*)
(* Modul: 'er'                                                               *)
(*===========================================================================*)

CONST
  ENOTSOCK        = er.ENOTSOCK;
  EDESTADDRREQ    = er.EDESTADDRREQ;
  EMSGSIZE        = er.EMSGSIZE;
  EPROTOTYPE      = er.EPROTOTYPE;
  ENOPROTOOPT     = er.ENOPROTOOPT;
  EPROTONOSUPPORT = er.EPROTONOSUPPORT;
  ESOCKTNOSUPPORT = er.ESOCKTNOSUPPORT;
  EOPNOTSUPP      = er.EOPNOTSUPP;
  EPFNOSUPPORT    = er.EPFNOSUPPORT;
  EAFNOSUPPORT    = er.EAFNOSUPPORT;
  EADDRINUSE      = er.EADDRINUSE;
  EADDRNOTAVAIL   = er.EADDRNOTAVAIL;
  ENETDOWN        = er.ENETDOWN;
  ENETUNREACH     = er.ENETUNREACH;
  ENETRESET       = er.ENETRESET;
  ECONNABORTED    = er.ECONNABORTED;
  ECONNRESET      = er.ECONNRESET;
  EISCONN         = er.EISCONN;
  ENOTCONN        = er.ENOTCONN;
  ESHUTDOWN       = er.ESHUTDOWN;
  ETIMEDOUT       = er.ETIMEDOUT;
  ECONNREFUSED    = er.ECONNREFUSED;
  EHOSTDOWN       = er.EHOSTDOWN;
  EHOSTUNREACH    = er.EHOSTUNREACH;
  EALREADY        = er.EALREADY;
  EINPROGRESS     = er.EINPROGRESS;
  EWOULDBLOCK     = er.EWOULDBLOCK;

(*===========================================================================*)
(* Modul: 'types'                                                            *)
(*===========================================================================*)

CONST
  sIFMT  = types.sIFMT;
  sIFCHR = types.sIFCHR;
  sIFDIR = types.sIFDIR;
  sIFBLK = types.sIFBLK;
  sIFREG = types.sIFREG;
  sIFIFO = types.sIFIFO;
  sIFLNK = types.sIFLNK;

TYPE
  TimevalRec = types.TimevalRec;
  TimevalPtr = types.TimevalPtr;

(*===========================================================================*)
(* Modul: 'str'                                                             *)
(*===========================================================================*)

#if ISO_proc_const
CONST
  strcasecmp  = str.strcasecmp;
  stricmp     = str.strcasecmp;  (* Alias *)
  strncasecmp = str.strncasecmp;
  strnicmp    = str.strncasecmp; (* Alias *)
#else
VAR (* READ ONLY! *)
  strcasecmp  : PROCEDURE(StrPtr,StrPtr):int;
  stricmp     : PROCEDURE(StrPtr,StrPtr):int;
  strncasecmp : PROCEDURE(StrPtr,StrPtr,sizeT):int;
  strnicmp    : PROCEDURE(StrPtr,StrPtr,sizeT):int;
#endif

(*===========================================================================*)
(* Modul: 'dir'                                                              *)
(*===========================================================================*)

#if ISO_proc_const
CONST
  telldir = dir.telldir;
  seekdir = dir.seekdir;
  major   = dir.major;
  minor   = dir.minor;
  makedev = dir.makedev;
#else
VAR (* READ ONLY! *)
  telldir : PROCEDURE(DIR):offT;
  seekdir : PROCEDURE(DIR,offT);
  major   : PROCEDURE(devT):unsigned;
  minor   : PROCEDURE(devT):unsigned;
  makedev : PROCEDURE(unsigned,unsigned):devT;
#endif

(*===========================================================================*)
(* Modul: 'sig'                                                              *)
(*===========================================================================*)

CONST
  SIGNULL   = sig.SIGNULL;
  SIGTRAP   = sig.SIGTRAP;
  SIGIOT    = sig.SIGIOT;
  SIGEMT    = sig.SIGEMT;
  SIGBUS    = sig.SIGBUS;
  SIGSYS    = sig.SIGSYS;
  SIGURG    = sig.SIGURG;
  SIGIO     = sig.SIGIO;
  SIGXCPU   = sig.SIGXCPU;
  SIGXFSZ   = sig.SIGXFSZ;
  SIGVTALRM = sig.SIGVTALRM;
  SIGPROF   = sig.SIGPROF;
  SIGWINCH  = sig.SIGWINCH;

CONST
  NSIG = sig.NSIG;

TYPE
  SigAtomicT = sig.SigAtomicT;

TYPE
  ItimervalRec = sig.ItimervalRec;
  ItimervalPtr = sig.ItimervalPtr;

  TimerType    = sig.TimerType;
  TimevalCmp   = sig.TimevalCmp;

#if ISO_proc_const
CONST
  killpg     = sig.killpg;
  usleep     = sig.usleep;
  timerclear = sig.timerclear;
  timerisset = sig.timerisset;
  timercmp   = sig.timercmp;
  getitimer  = sig.getitimer;
  setitimer  = sig.setitimer;
  sigmask    = sig.sigmask;
  sigpause   = sig.sigpause;
  sigblock   = sig.sigblock;
  sigsetmask = sig.sigsetmask;
#else
VAR (* READ ONLY! *)
  killpg     : PROCEDURE(pidT,int):int;
  usleep     : PROCEDURE(signedlong):signedlong;
  timerclear : PROCEDURE(VAR TimevalRec);
  timerisset : PROCEDURE(TimevalRec):BOOLEAN;
  timercmp   : PROCEDURE(TimevalRec,TimevalRec,TimevalCmp):BOOLEAN;
  getitimer  : PROCEDURE(TimerType,VAR ItimervalRec):int;
  setitimer  : PROCEDURE(TimerType,ItimervalPtr,ItimervalPtr):int;
  sigmask    : PROCEDURE(int):unsignedlong;
  sigpause   : PROCEDURE(unsignedlong);
  sigblock   : PROCEDURE(unsignedlong):unsignedlong;
  sigsetmask : PROCEDURE(unsignedlong):unsignedlong;
#endif

(*===========================================================================*)
(* Modul: 'sys'                                                              *)
(*===========================================================================*)

CONST
  MAXHOSTNAMELEN = sys.MAXHOSTNAMELEN;

TYPE
  fsidT = sys.fsidT;

TYPE
  StatfsRec = sys.StatfsRec;

TYPE
  TimebRec = sys.TimebRec;

  TimezonePtr = sys.TimezonePtr;
  TimezoneRec = sys.TimezoneRec;


#if ISO_proc_const
CONST
  statfs       = sys.statfs;
  gethostname  = sys.gethostname;
  getpagesize  = sys.getpagesize;
  setpwent     = sys.setpwent;
  endpwent     = sys.endpwent;
  getpwent     = sys.getpwent;
  setgrent     = sys.setgrent;
  endgrent     = sys.endgrent;
  getgrent     = sys.getgrent;
  stime        = sys.stime;
  gettimeofday = sys.gettimeofday;
  settimeofday = sys.settimeofday;
  ftime        = sys.ftime;
#else
VAR (* READ ONLY! *)
  statfs       : PROCEDURE(REF ARRAY OF CHAR,VAR StatfsRec):int;
  gethostname  : PROCEDURE(StrPtr,sizeT):int;
  getpagesize  : PROCEDURE():int;
  setpwent     : PROCEDURE;
  endpwent     : PROCEDURE;
  getpwent     : PROCEDURE():PasswdPtr;
  setgrent     : PROCEDURE;
  endgrent     : PROCEDURE;
  getgrent     : PROCEDURE():GroupPtr;
  stime        : PROCEDURE(timeT):int;
  gettimeofday : PROCEDURE(TimevalPtr,TimezonePtr):int;
  settimeofday : PROCEDURE(TimevalPtr,TimezonePtr):int;
  ftime        : PROCEDURE(VAR TimebRec);
#endif

(*===========================================================================*)
(* Modul: 'proc'                                                             *)
(*===========================================================================*)

CONST
  wRetcode  = proc.wRetcode;
  wTermsig  = proc.wTermsig;
  wCoredump = proc.wCoredump;
  wStopval  = proc.wStopval;
  wStopsig  = proc.wStopsig;
  WSTOPPED  = proc.WSTOPPED;

CONST
  FDSETSIZE = proc.FDSETSIZE;

TYPE
  fdSet    = proc.fdSet;
  FdSetPtr = proc.FdSetPtr;

TYPE
  RusageRec = proc.RusageRec;

#if ISO_proc_const
CONST
  vfork      = proc.vfork;
  setreuid   = proc.setreuid;
  setregid   = proc.setregid;
  wait3      = proc.wait3;
  wait4      = proc.wait4;
  setpgrp    = proc.setpgid;  (* Alias *)
  setgroups  = proc.setgroups;
  initgroups = proc.initgroups;
  nice       = proc.nice;
  select     = proc.select;
  FDZERO     = proc.FDZERO;
  FDSET      = proc.FDSET;
  FDCLR      = proc.FDCLR;
  FDISSET    = proc.FDISSET;
#else
VAR (* READ ONLY! *)
  vfork      : PROCEDURE():pidT;
  setreuid   : PROCEDURE(int,int):int;
  setregid   : PROCEDURE(int,int):int;
  wait3      : PROCEDURE(VAR WaitVal,WaitOptions,VAR RusageRec):pidT;
  wait4      : PROCEDURE(pidT,VAR WaitVal,WaitOptions,VAR RusageRec):pidT;
  setpgrp    : PROCEDURE(pidT,pidT):int;
  setgroups  : PROCEDURE(int,GroupArrayPtr):int;
  initgroups : PROCEDURE(REF ARRAY OF CHAR,gidT):int;
  nice       : PROCEDURE(int):int;
  select     : PROCEDURE(int,FdSetPtr,FdSetPtr,FdSetPtr,TimevalPtr):int;
  FDZERO     : PROCEDURE(VAR fdSet);
  FDSET      : PROCEDURE(int,VAR fdSet);
  FDCLR      : PROCEDURE(int,VAR fdSet);
  FDISSET    : PROCEDURE(int,fdSet):BOOLEAN;
#endif

(*===========================================================================*)
(* Modul: 'term'                                                             *)
(*===========================================================================*)

CONST
  CEOF    = term.CEOF;
  CEOL    = term.CEOL;
  CERASE  = term.CERASE;
  CKILL   = term.CKILL;
  CINTR   = term.CINTR;
  CQUIT   = term.CQUIT;
  CSUSP   = term.CSUSP;
  CSTOP   = term.CSTOP;
  CSTART  = term.CSTART;
  CLNEXT  = term.CLNEXT;
  CWERASE = term.CWERASE;
  CDSUSP  = term.CDSUSP;
  CRPRNT  = term.CRPRNT;
  CFLUSHO = term.CFLUSHO;

CONST
  TIOCGETP         = term.TIOCGETP;
  TIOCSETN         = term.TIOCSETN;
  TIOCGETC         = term.TIOCGETC;
  TIOCSETC         = term.TIOCSETC;
  TIOCGLTC         = term.TIOCGLTC;
  TIOCSLTC         = term.TIOCSLTC;
  TIOCGPGRP        = term.TIOCGPGRP;
  TIOCSPGRP        = term.TIOCSPGRP;
  TIOCFLUSH        = term.TIOCFLUSH;
  TIOCSTOP         = term.TIOCSTOP;
  TIOCSTART        = term.TIOCSTART;
  TIOCGWINSZ       = term.TIOCGWINSZ;
  TIOCSWINSZ       = term.TIOCSWINSZ;
  TIOCGXKEY        = term.TIOCGXKEY;
  TIOCSXKEY        = term.TIOCSXKEY;
  TIOCIBAUD        = term.TIOCIBAUD;
  TIOCOBAUD        = term.TIOCOBAUD;
  TIOCCBRK         = term.TIOCCBRK;
  TIOCSBRK         = term.TIOCSBRK;
  TIOCGFLAGS       = term.TIOCGFLAGS;
  TIOCSFLAGS       = term.TIOCSFLAGS;
  TIOCOUTQ         = term.TIOCOUTQ;
  TIOCSETP         = term.TIOCSETP;
  TIOCHPCL         = term.TIOCHPCL;
  TIOCCAR          = term.TIOCCAR;
  TIOCNCAR         = term.TIOCNCAR;
  TIOCWONLINE      = term.TIOCWONLINE;
  TIOCSFLAGSB      = term.TIOCSFLAGSB;
  TIOCGSTATE       = term.TIOCGSTATE;
  TIOCSSTATEB      = term.TIOCSSTATEB;
  TIOCGVMIN        = term.TIOCGVMIN;
  TIOCSVMIN        = term.TIOCSVMIN;
  TIOCLBIS         = term.TIOCLBIS;
  TIOCLBIC         = term.TIOCLBIC;
  TIOCNOTTY        = term.TIOCNOTTY;
  TIOCGETD         = term.TIOCGETD;
  TIOCSETD         = term.TIOCSETD;
  TIOCLGET         = term.TIOCLGET;
  TIOCLSET         = term.TIOCLSET;
  NTTYDISC         = term.NTTYDISC;
  LCRTBS           = term.LCRTBS;
  LCRTERA          = term.LCRTERA;
  LCRTKIL          = term.LCRTKIL;
  LPRTERA          = term.LPRTERA;
  LFLUSHO          = term.LFLUSHO;
  LLITOUT          = term.LLITOUT;
  FIONREAD         = term.FIONREAD;
  FIONWRITE        = term.FIONWRITE;
  SHMGETBLK        = term.SHMGETBLK;
  SHMSETBLK        = term.SHMSETBLK;
  TCURSOFF         = term.TCURSOFF;
  TCURSON          = term.TCURSON;
  TCURSBLINK       = term.TCURSBLINK;
  TCURSSTEADY      = term.TCURSSTEADY;
  TCURSSRATE       = term.TCURSSRATE;
  TCURSGRATE       = term.TCURSGRATE;
  SIOCGLOWAT       = term.SIOCGLOWAT;
  SIOCSLOWAT       = term.SIOCSLOWAT;
  SIOCGHIWAT       = term.SIOCGHIWAT;
  SIOCSHIWAT       = term.SIOCSHIWAT;
  SIOCSPGRP        = term.SIOCSPGRP;
  SIOCGPGRP        = term.SIOCGPGRP;
  SIOCATMARK       = term.SIOCATMARK;
  SIOCGIFNAME      = term.SIOCGIFNAME;
  SIOCSIFLINK      = term.SIOCSIFLINK;
  SIOCGIFCONF      = term.SIOCGIFCONF;
  SIOCGIFFLAGS     = term.SIOCGIFFLAGS;
  SIOCSIFFLAGS     = term.SIOCSIFFLAGS;
  SIOCGIFADDR      = term.SIOCGIFADDR;
  SIOCSIFADDR      = term.SIOCSIFADDR;
  SIOCGIFDSTADDR   = term.SIOCGIFDSTADDR;
  SIOCSIFDSTADDR   = term.SIOCSIFDSTADDR;
  SIOCGIFBRDADDR   = term.SIOCGIFBRDADDR;
  SIOCSIFBRDADDR   = term.SIOCSIFBRDADDR;
  SIOCGIFNETMASK   = term.SIOCGIFNETMASK;
  SIOCSIFNETMASK   = term.SIOCSIFNETMASK;
  SIOCGIFMETRIC    = term.SIOCGIFMETRIC;
  SIOCSIFMETRIC    = term.SIOCSIFMETRIC;
  SIOCGIFMTU       = term.SIOCGIFMTU;
  SIOCSIFMTU       = term.SIOCSIFMTU;
  SIOCGIFSTATS     = term.SIOCGIFSTATS;
  SIOCGIFHWADDR    = term.SIOCGIFHWADDR;
  SIOCADDRT        = term.SIOCADDRT;
  SIOCDELRT        = term.SIOCDELRT;
  SIOCDARP         = term.SIOCDARP;
  SIOCGARP         = term.SIOCGARP;
  SIOCSARP         = term.SIOCSARP;

TYPE
  TcharsRec  = term.TcharsRec;
  LtcharsRec = term.LtcharsRec;
  SgttybRec  = term.SgttybRec;
  WinsizeRec = term.WinsizeRec;
  IflinkRec  = term.IflinkRec;

CONST
  tCRMOD   = term.tCRMOD;
  tCBREAK  = term.tCBREAK;
  tECHO    = term.tECHO;
  tRAW     = term.tRAW;
  tNOFLSH  = term.tNOFLSH;
  tTOSTOP  = term.tTOSTOP;
  tXKEY    = term.tXKEY;
  tECHOCTL = term.tECHOCTL;
  tTANDEM  = term.tTANDEM;
  tRTSCTS  = term.tRTSCTS;
  tEVENP   = term.tEVENP;
  tODDP    = term.tODDP;

#if ISO_proc_const
CONST
  ioctl = term.ioctl;
#else
VAR (* READ ONLY! *)
  ioctl : PROCEDURE(int,int,ADDRESS):int;
#endif

(*===========================================================================*)
(* Modul: 'args'                                                             *)
(*===========================================================================*)

#if ISO_proc_const
CONST
  putenv = args.putenv;
#else
VAR (* READ ONLY! *)
  putenv : PROCEDURE(StrPtr):int;
#endif

(*===========================================================================*)
(* Modul: 'blk'                                                              *)
(*===========================================================================*)

#if ISO_proc_const
CONST
  bcopy = blk.bcopy;
  bzero = blk.bzero;
  bcmp  = blk.memcmp; (* Alias *)
#else
VAR (* READ ONLY! *)
  bcopy : PROCEDURE(ADDRESS,ADDRESS,sizeT);
  bzero : PROCEDURE(ADDRESS,sizeT);
  bcmp  : PROCEDURE(ADDRESS,ADDRESS,sizeT):int;
#endif

(*===========================================================================*)
(* Modul: 'fcrypt'                                                           *)
(*===========================================================================*)

#if ISO_proc_const
CONST
  crypt = fcrypt.crypt;
#else
VAR (* READ ONLY! *)
  crypt : PROCEDURE(StrPtr,StrPtr):StrPtr;
#endif

END iX.
