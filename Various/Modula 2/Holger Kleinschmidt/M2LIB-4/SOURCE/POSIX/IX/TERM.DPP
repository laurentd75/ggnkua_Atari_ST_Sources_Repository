DEFINITION MODULE term;
__DEF_SWITCHES__
#ifdef HM2
#ifdef __LONG_WHOLE__
(*$!i+: Modul muss mit $i- uebersetzt werden! *)
(*$!w+: Modul muss mit $w- uebersetzt werden! *)
#else
(*$!i-: Modul muss mit $i+ uebersetzt werden! *)
(*$!w-: Modul muss mit $w+ uebersetzt werden! *)
#endif
#endif
(*****************************************************************************)
(* Funktionen, die Terminalattribute kontrollieren.                          *)
(*                                                                           *)
(* Ein Fehler ist immer dann aufgetreten, wenn bei Funktionen ein negativer  *)
(* Wert (-1) bzw. NULL zurueckgegeben wird. Die genaue Fehlerursache kann bei*)
(* Bedarf ueber "e.errno" und die entsprechenden Konstanten ermittelt werden.*)
(* Die Funktionen veraendern "errno" nur dann, wenn ein Fehler aufgetreten   *)
(* ist, bei erfolgreicher Ausfuehrung wird "errno" nicht veraendert.         *)
(*                                                                           *)
(* GEMDOS/MiNT:                                                              *)
(* Die Eigenschaften der Funktionen unter dem ``blanken'' GEMDOS sind z.T.   *)
(* stark eingeschraenkt; unter dem Stichwort GEMDOS ist deswegen immer       *)
(* angegeben, in wieweit die Funktion emuliert werden kann.                  *)
(* Unter der Betriebssystemerweiterung MiNT bzw. einer anderen Erweiterung,  *)
(* die ebenfalls zumindest teilweise die neuen MiNT-Funktionen zur Verfuegung*)
(* stellt, ist eine bessere Unterstuetzung der Funktionen zu erwarten; wie   *)
(* weit diese geht, ist unter dem Stichwort MiNT angegeben.                  *)
(* --------------------------------------------------------------------------*)
(* 02-Sep-96, Holger Kleinschmidt                                            *)
(*****************************************************************************)

FROM SYSTEM IMPORT
(* TYPE *) ADDRESS;

FROM PORTAB IMPORT
(* TYPE *) UNSIGNEDWORD, WORDSET;

FROM types IMPORT
(* TYPE *) int, pidT, StrPtr;

(*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*)

CONST
  LCtermid = 128; (* Minimale Stringgroesse fuer "ctermid()" *)


TYPE (* Flags, die die Ein/Ausgabe beeinflussen *)
  tciflag = (
    IGNCR,
      (* Ein empfangenes CR-Zeichen wird ignoriert (nicht in die Eingabe
         uebernommen. *)
    ICRNL,
      (* Falls IGNCR nicht gesetzt ist, wird ein empfangenes CR-Zeichen
         in ein NL-Zeichen verwandelt (wird zum Zeilenbegrenzer). *)
    INLCR,
      (* Ein empfangenes NL-Zeichen wird in ein CR-Zeichen verwandelt,
         und ist damit kein Zeilenbegrenzer mehr, es sei denn, das EOF-
         oder EOL-Zeichen ist gleich dem CR-Zeichen. *)
    INPCK,
      (* Es wird ein ``Parity-Check'' der Eingabe vorgenommen. *)
    IGNPAR,
      (* Bytes mit ``Parity''- oder ``Framing''-Fehlern werden ignoriert. *)
    PARMRK,
      (* Falls IGNPAR nicht gesetzt ist, wird ein Byte X mit ``Parity''-
         oder ``Framing''-Fehler bei der Eingabe in die Drei-Byte-Sequenz
         255, 0, X verwandelt. Falls beide Flags nicht gesetzt sind, wird
         ein Fehler als Nullbyte gelesen. *)
    ISTRIP,
      (* Bytes werden Modulo 128 gelesen. Falls das Flag nicht gesetzt
         ist, wird ein Byte mit dem Wert 255 in die Zwei-Byte-Sequenz
         255, 255 verwandelt. *)
    IGNBRK,
      (* Eine ``Break''-Bedingung (eine bestimmte Zeitspanne nur Nullbits)
         wird ignoriert. Falls 'IGNBRK' und 'BRKINT' geloescht sind, wird
         eine ``Break''-Bedingung als Nullbyte gelesen ('PARMRK' geloescht)
         oder als Drei-Byte-Sequenz 255, 0, 0 ('PARMRK' gesetzt). *)
    BRKINT,
      (* Falls 'IGNBRK' geloescht ist, werden gepufferte Ein- und
         Ausgaben bei einer ``Break''-Bedingung geloescht, und falls
         das Terminal das Kontrollterminal fuer einen Vordergrund-
         Prozess ist, wird ein 'SIGINT'-Signal fuer die entsprechende
         Prozessgruppe ausgeloest. *)
    IXON,
      (* STOP- und START-Zeichen werden nicht in die Eingabe uebernommen,
         sondern stoppen die Terminalausgabe bzw. schalten sie wieder
         ein. Falls das Flag geloescht ist, werden die Zeichen als
         normale Eingaben uebernommen. *)
    IXOFF,
      (* Das System kann STOP- und START-Zeichen senden, damit der
         Eingabepuffer nicht ueberlaeuft ('MAX_INPUT'), bzw. damit
         wieder Zeichen gesendet werden sollen. *)
    tciflag11,tciflag12,tciflag13,tciflag14,tciflag15
  );

TYPE
  tciflagT = PACKEDSET OF tciflag;




TYPE (* Flags, die die Ausgabe beeinflussen, nicht standardisiert *)
  tcoflag = (
    OPOST, (* Implementierungsspezifische Zeichenwandlung bei der Ausgabe *)
    ONLCR, (* Nicht POSIX: LF -> CR + LF *)
    tcoflag2,  tcoflag3,  tcoflag4,  tcoflag5,  tcoflag6,
    tcoflag7,  tcoflag8,  tcoflag9,  tcoflag10, tcoflag11, tcoflag12,
    tcoflag13, tcoflag14, tcoflag15
  );

TYPE
  tcoflagT = PACKEDSET OF tcoflag;




TYPE (* Flags, die die Terminal-Hardware beeinflussen *)
  tccflag = (
    CLOCAL,
      (* Die Terminal-Statusleitungen (Carrier usw.) werden nicht beachtet,
         da das Terminal systemlokal ist. *)
    CREAD,
      (* Falls gesetzt, werden Zeichen empfangen, sonst nicht. *)
    CSTOPB,
      (* Falls gesetzt, werden nach jedem Zeichen zwei Stoppbits gesendet *)
    csize0, (* siehe unten *)
    csize1, (* siehe unten *)
    PARENB,
      (* ``Parity''-Pruefung und -Erkennung eingeschaltet *)
    PARODD,
      (* Es wird ``Odd Parity'' verwendet, sonst ``Even Parity''. *)
    HUPCL,
      (* Wenn das Terminal von keinem Prozess mehr geoeffnet ist, wird
         automatisch die Verbindung unterbrochen. *)
    CRTSCTS,
      (* Nicht POSIX: Hardware-Handshaking mit RTS/CTS *)

    tccflag9,tccflag10,tccflag11,tccflag12,tccflag13,tccflag14,tccflag15
  );

TYPE
  tccflagT = PACKEDSET OF tccflag;

CONST
  (* Maske und Werte fuer 5,6,7 oder 8 Bit pro Byte *)
  CSIZE = tccflagT{csize0,csize1};

  CS5 = tccflagT{};
  CS6 = tccflagT{csize0};
  CS7 = tccflagT{csize1};
  CS8 = tccflagT{csize0,csize1};



TYPE (* Flags, die fuer Anwendungsprogramme von Interesse sind *)
  tclflag = (
    ICANON,
      (* Terminal ist im ``kanonischen Modus'' (Eingabe wird zeilenweise
         behandelt), sonst im ``Nicht kanonischen Modus'' (keine Zeilen-
         struktur). *)
    ECHO,
      (* Echo bei der Eingabe *)
    ECHOE,
      (* Falls 'ICANON' gesetzt ist, loescht ein 'ERASE'-Zeichen das vorige
         Zeichen vom Bildschirm. *)
    ECHOK,
      (* Falls 'ICANON' gesetzt ist, loescht ein 'KILL'-Zeichen entweder
         die aktuelle Zeile vom Bildschirm oder ein 'NL'-Zeichen wird
         zurueckgesendet. *)
    ECHONL,
      (* Falls 'ICANON' gesetzt ist, erfolgt fuer ein empfangenes 'NL'-Zeichen
         ein Echo, auch wenn 'ECHO' nicht gesetzt ist. *)
    ISIG,
      (* Die Zeichen 'INTR', 'QUIT' und 'SUSP' werden nicht in die Eingabe
         uebernommen, sondern loesen die entsprechende Ausnahme aus. *)
    NOFLSH,
      (* Beim Empfang eines 'INTR'-, 'QUIT'- oder 'SUSP'-Zeichens werden
         gepufferte Ein- und Ausgaben geloescht. *)
    IEXTEN,
      (* Implementierungsspezifische Spezialzeichen und -funktionen werden
         verfuegbar gemacht (Funktionstasten u.ae.). *)
    TOSTOP,
      (* Falls ``Job control'' unterstuetzt wird, und ein Hintergrundprozess
         auf sein Kontrollterminal zu schreiben versucht, wird ein 'SIGTTOU'-
         Signal fuer dessen Prozessgruppe generiert. *)
    ECHOCTL,
      (* Nicht POSIX: Kontrollzeichen X als ^X darstellen *)

    tclflag10,tclflag11,tclflag12,tclflag13,tclflag14,tclflag15
  );

TYPE
  tclflagT = PACKEDSET OF tclflag;



TYPE
  speedT = (
    B0,     (* Fuer Ausgabe: Verbindung aufgeben (``Hang up'')
               Fuer Eingabe: Gleiche Baudrate wie Ausgabe      *)
    B50,    (*    50 baud *)
    B75,    (*    75 baud *)
    B110,   (*   110 baud *)
    B134,   (*   134 baud *)
    B150,   (*   150 baud *)
    B200,   (*   200 baud *)
    B300,   (*   300 baud *)
    B600,   (*   600 baud *)
    B1200,  (*  1200 baud *)
    B1800,  (*  1800 baud *)
    B2400,  (*  2400 baud *)
    B4800,  (*  4800 baud *)
    B9600,  (*  9600 baud *)
    B19200, (* 19200 baud *)
    B38400  (* 38400 baud *)
  );

TYPE
  ccT = UNSIGNEDWORD; (* ``Multibyte Character'' fuer Spezialzeichen *)

  (* Indizes fuer die Spezialzeichen in 'TermiosRec.cCc' *)
  ccIdx = (
    VEOF,   (* Ende der Eingabe *)
    VEOL,   (* Ende der Zeile *)
    VERASE, (* Letztes Zeichen loeschen *)
    VKILL,  (* Zeile loeschen *)
    VINTR,  (* SIGINT ausloesen *)
    VQUIT,  (* SIGQUIT ausloesen *)
    VSUSP,  (* SIGTSTP ausloesen *)
    VSTOP,  (* Ausgabe vom System anhalten *)
    VSTART, (* Gestoppte Ausgabe weiterlaufen lassen *)

    VMIN,
    VTIME,
    (* 'MIN' und 'TIME' haben nur eine Bedeutung, wenn 'ICANON' in
     * 'cLflag' nicht gesetzt ist. In diesem Fall befindet sich das Terminal
     * im sog. nicht-kanonischen Modus, in dem die Eingabe nicht in
     * Zeilen strukturiert ist, sondern es einzig um Einzelzeichen geht.
     * 'MIN' ist die Anzahl der Zeichen, die mindestens vorhanden sein
     * muss, bevor "read()" zurueckkehrt, und 'TIME' ist ein Time-Out-Wert,
     * mit der das Warten auf die Zeichen begrenzt werden kann (in Zehntel-
     * Sekunden).
     *
     * GEMDOS: TIME = 0 und MIN = 1 konstant, d.h. es gibt keinen
     *         Time-Out, und "read()" kehrt zurueck, wenn mindestens
     *         ein Zeichen gelesen werden konnte.
     * MiNT: Wird ab 1.11 unterstuetzt.
     *)

    VLNEXT,  (* Nicht POSIX: Naechstes Zeichen nicht interpretieren *)
    VWERASE, (* Nicht POSIX: Letztes Wort loeschen *)
    VDSUSP,  (* Nicht POSIX: SIGTSTP nach Ende der Eingabe *)
    VREPRINT,(* Nicht POSIX: Bisherige Eingabe nochmal auf Bildschirm *)
    VFLUSHO  (* Nicht POSIX: Ausgabepuffer loeschen *)
  );

CONST (* Anzahl der konfigurierbaren Spezialzeichen *)
  NCCS = 16; (* ORD(MAX(ccIdx)) + 1 *)

CONST
  (* Diese Spezialzeichen stehen fest *)
  CR = 13; (* Vorsicht: Ist in 'types' als CHAR definiert! *)
  NL = 10;

(* Nicht POSIX: Defaultwerte einiger Spezialzeichen *)
CONST
  CEOF    = 4C;  (* ^D *)
  CEOL    = 15C; (* ^M, CR *)
  CERASE  = 10C; (* ^H, BS *)
  CKILL   = 25C; (* ^U *)
  CINTR   = 3C;  (* ^C *)
  CQUIT   = 34C; (* ^\ *)
  CSUSP   = 32C; (* ^Z *)
  CSTOP   = 23C; (* ^S *)
  CSTART  = 21C; (* ^Q *)
  CLNEXT  = 26C; (* ^V *)
  CWERASE = 27C; (* ^W *)
  CDSUSP  = 31C; (* ^Y *)
  CRPRNT  = 22C; (* ^R *)
  CFLUSHO = 17C; (* ^O *)


TYPE
  TermiosRec = RECORD
    cIflag  : tciflagT;
    cOflag  : tcoflagT;
    cCflag  : tccflagT;
    cLflag  : tclflagT;
    cIspeed : speedT;  (* Als explizites Feld nicht POSIX *)
    cOspeed : speedT;  (* Als explizites Feld nicht POSIX *)
#if only_subrange_index
    cCc     : ARRAY [VEOF..VFLUSHO] OF ccT;
#else
    cCc     : ARRAY ccIdx OF ccT;
#endif
  END;


TYPE
  AttrActions = (
    TCSANOW,
      (* Terminalattribute werden sofort gesetzt. *)
    TCSADRAIN,
      (* Terminalattribute werden gesetzt, sobald alle gepufferten Ausgaben
         geschrieben wurden. *)
    TCSAFLUSH
      (* Wie 'TCSADRAIN', aber entfernt alle Eingaben, die bis zum Setzen
         der Attribute noch nicht gelesen wurden. *)
  );

TYPE
  FlowActions = (
    TCOOFF,
      (* Alle Ausgaben vom System anhalten. *)
    TCOON,
      (* Die Ausgaben vom System wieder einschalten. *)
    TCIOFF,
      (* System sendet ein 'STOP'-Zeichen, damit das Terminal keine Daten
         mehr senden soll. *)
    TCION
      (* System sendet ein 'START'-Zeichen, damit das Terminal wieder senden
         soll. *)
  );

TYPE
  QueueTypes = (
    TCIFLUSH,
      (* Alle noch nicht gelesenen Eingaben werden geloescht. *)
    TCOFLUSH,
      (* Alle noch nicht gesendeten Ausgaben werden geloescht. *)
    TCIOFLUSH
      (* 'TCIFLUSH' + 'TCOFLUSH' *)
  );


(*============================ ioctl() ======================================*)
(* Nicht POSIX *)

CONST (* Terminals *)
  TIOCGETP    = 5400H; (* ('T'<< 8)|0 *)
  TIOCSETN    = 5401H; (* ('T'<< 8)|1 *)
  TIOCGETC    = 5402H; (* ('T'<< 8)|2 *)
  TIOCSETC    = 5403H; (* ('T'<< 8)|3 *)
  TIOCGLTC    = 5404H; (* ('T'<< 8)|4 *)
  TIOCSLTC    = 5405H; (* ('T'<< 8)|5 *)
  TIOCGPGRP   = 5406H; (* ('T'<< 8)|6 *)
  TIOCSPGRP   = 5407H; (* ('T'<< 8)|7 *)
  TIOCFLUSH   = 5408H; (* ('T'<< 8)|8 *)
  TIOCSTOP    = 5409H; (* ('T'<< 8)|9 *)
  TIOCSTART   = 540AH; (* ('T'<< 8)|10 *)
  TIOCGWINSZ  = 540BH; (* ('T'<< 8)|11 *)
  TIOCSWINSZ  = 540CH; (* ('T'<< 8)|12 *)
  TIOCGXKEY   = 540DH; (* ('T'<< 8)|13 *)
  TIOCSXKEY   = 540EH; (* ('T'<< 8)|14 *)

  TIOCIBAUD   = 5412H; (* ('T'<< 8)|18 *)
  TIOCOBAUD   = 5413H; (* ('T'<< 8)|19 *)
  TIOCCBRK    = 5414H; (* ('T'<< 8)|20 *)
  TIOCSBRK    = 5415H; (* ('T'<< 8)|21 *)
  TIOCGFLAGS  = 5416H; (* ('T'<< 8)|22 *)
  TIOCSFLAGS  = 5417H; (* ('T'<< 8)|23 *)
  TIOCOUTQ    = 5418H; (* ('T'<< 8)|24 *)
  TIOCSETP    = 5419H; (* ('T'<< 8)|25 *)
  TIOCHPCL    = 541AH; (* ('T'<< 8)|26 *)
  TIOCCAR     = 541BH; (* ('T'<< 8)|27 *)
  TIOCNCAR    = 541CH; (* ('T'<< 8)|28 *)
  TIOCWONLINE = 541DH; (* ('T'<< 8)|29 *)
  TIOCSFLAGSB = 541EH; (* ('T'<< 8)|30 *)
  TIOCGSTATE  = 541FH; (* ('T'<< 8)|31 *)
  TIOCSSTATEB = 5420H; (* ('T'<< 8)|32 *)
  TIOCGVMIN   = 5421H; (* ('T'<< 8)|33 *)
  TIOCSVMIN   = 5422H; (* ('T'<< 8)|34 *)

  TIOCLBIS    = 54F6H; (* ('T'<< 8)|246 *)
  TIOCLBIC    = 54F7H; (* ('T'<< 8)|247 *)
  TIOCNOTTY   = 54FBH; (* ('T'<< 8)|251 *)
  TIOCGETD    = 54FCH; (* ('T'<< 8)|252 *)
  TIOCSETD    = 54FDH; (* ('T'<< 8)|253 *)
  TIOCLGET    = 54FEH; (* ('T'<< 8)|254 *)
  TIOCLSET    = 54FFH; (* ('T'<< 8)|255 *)

CONST
  NTTYDISC = 1;

CONST
  LCRTBS  = 0001H;
  LCRTERA = 0002H;
  LCRTKIL = 0004H;
  LPRTERA = 0010H;
  LFLUSHO = 0020H;
  LLITOUT = 0100H;

TYPE
  TcharsRec = RECORD
    tIntrc  : CHAR;
    tQuitc  : CHAR;
    tStartc : CHAR;
    tStopc  : CHAR;
    tEofc   : CHAR;
    tBrkc   : CHAR;
  END;

  LtcharsRec = RECORD
    tSuspc  : CHAR;
    tDsuspc : CHAR;
    tRprntc : CHAR;
    tFlushc : CHAR;
    tWerasc : CHAR;
    tLnextc : CHAR;
  END;

  SgttybRec = RECORD
    sgIspeed : CHAR;
    sgOspeed : CHAR;
    sgErase  : CHAR;
    sgKill   : CHAR;
    sgFlags  : WORDSET;
  END;

CONST (* sgFlags *)
#if reverse_set
  tCRMOD   = 15;
  tCBREAK  = 14;
  tECHO    = 13;
  tRAW     = 11;
  tNOFLSH  = 9;
  tTOSTOP  = 7;
  tXKEY    = 6;
  tECHOCTL = 5;
  tTANDEM  = 3;
  tRTSCTS  = 2;
  tEVENP   = 1;
  tODDP    = 0;
#else
  tCRMOD   = 0;
  tCBREAK  = 1;
  tECHO    = 2;
  tRAW     = 4;
  tNOFLSH  = 6;
  tTOSTOP  = 8;
  tXKEY    = 9;
  tECHOCTL = 10;
  tTANDEM  = 12;
  tRTSCTS  = 13;
  tEVENP   = 14;
  tODDP    = 15;
#endif

TYPE
  XkeyRec = RECORD
    xkNum : UNSIGNEDWORD;
    xkDef : ARRAY [0..7] OF CHAR;
  END;

TYPE
  WinsizeRec = RECORD
    wsRow    : UNSIGNEDWORD;
    wsCol    : UNSIGNEDWORD;
    wsXpixel : UNSIGNEDWORD;
    wsYpixel : UNSIGNEDWORD;
  END;


CONST (* Offene Dateien *)
  FSTAT     = 4600H; (* ('F'<< 8)|0 *)
  FIONREAD  = 4601H; (* ('F'<< 8)|1 *)
  FIONWRITE = 4602H; (* ('F'<< 8)|2 *)
  FUTIME    = 4603H; (* ('F'<< 8)|3 *)
  FTRUNCATE = 4604H; (* ('F'<< 8)|4 *)

(* MagiCMac *)
  FMACOPENRES = 4648H; (* 'F'<< 8)|72 *)
  FMACGETTYCR = 4649H; (* 'F'<< 8)|73 *)
  FMACSETTYCR = 464AH; (* 'F'<< 8)|74 *)
  FMACMAGICEX = 464BH; (* 'F'<< 8)|75 *)


CONST (* Prozesse *)
  PPROCADDR    = 5001H; (* ('P'<< 8)|1 *)
  PBASEADDR    = 5002H; (* ('P'<< 8)|2 *)
  PCTXTSIZE    = 5003H; (* ('P'<< 8)|3 *)
  PSETFLAGS    = 5004H; (* ('P'<< 8)|4 *)
  PGETFLAGS    = 5005H; (* ('P'<< 8)|5 *)
  PTRACESFLAGS = 5006H; (* ('P'<< 8)|6 *)
  PTRACEGFLAGS = 5007H; (* ('P'<< 8)|7 *)
  PTRACEGO     = 5008H; (* ('P'<< 8)|8 *)
  PTRACEFLOW   = 5009H; (* ('P'<< 8)|9 *)
  PTRACESTEP   = 500AH; (* ('P'<< 8)|10 *)
  PTRACE11     = 500BH; (* ('P'<< 8)|11 *)
  PLOADINFO    = 500CH; (* ('P'<< 8)|12 *)
  PFSTAT       = 500DH; (* ('P'<< 8)|13 *)

TYPE
  PloadinfoRec = RECORD
    fnamelen : UNSIGNEDWORD;
    cmdlin   : POINTER TO ARRAY [0..127] OF CHAR;
    fname    : StrPtr;
  END;


CONST (* shared memory *)
  SHMGETBLK = 4D00H; (* ('M'<< 8)|0 *)
  SHMSETBLK = 4D01H; (* ('M'<< 8)|1 *)

CONST (* Cursor *)
  TCURSOFF    = 6300H; (* ('c'<< 8)|0 *)
  TCURSON     = 6301H; (* ('c'<< 8)|1 *)
  TCURSBLINK  = 6302H; (* ('c'<< 8)|2 *)
  TCURSSTEADY = 6303H; (* ('c'<< 8)|3 *)
  TCURSSRATE  = 6304H; (* ('c'<< 8)|4 *)
  TCURSGRATE  = 6305H; (* ('c'<< 8)|5 *)

CONST (* Sockets *)
(* socket-level I/O control calls *)
  SIOCGLOWAT     = 5301H; (* ('S'<< 8)|1 *)
  SIOCSLOWAT     = 5302H; (* ('S'<< 8)|2 *)
  SIOCGHIWAT     = 5303H; (* ('S'<< 8)|3 *)
  SIOCSHIWAT     = 5304H; (* ('S'<< 8)|4 *)
  SIOCSPGRP      = 5305H; (* ('S'<< 8)|5 *)
  SIOCGPGRP      = 5306H; (* ('S'<< 8)|6 *)
  SIOCATMARK     = 5307H; (* ('S'<< 8)|7 *)

(* socket configuration controls *)
  SIOCGIFNAME    = 530AH; (* ('S'<< 8)|10, get iface name *)
  SIOCSIFLINK    = 530BH; (* ('S'<< 8)|11, connect iface to device *)
  SIOCGIFCONF    = 530CH; (* ('S'<< 8)|12, get iface list *)
  SIOCGIFFLAGS   = 530DH; (* ('S'<< 8)|13, get flags *)
  SIOCSIFFLAGS   = 530EH; (* ('S'<< 8)|14, set flags *)
  SIOCGIFADDR    = 530FH; (* ('S'<< 8)|15, get iface address *)
  SIOCSIFADDR    = 5310H; (* ('S'<< 8)|16, set iface address *)
  SIOCGIFDSTADDR = 5311H; (* ('S'<< 8)|17, get iface remote address *)
  SIOCSIFDSTADDR = 5312H; (* ('S'<< 8)|18, set iface remotw address *)
  SIOCGIFBRDADDR = 5313H; (* ('S'<< 8)|19, get iface ibroadcast address *)
  SIOCSIFBRDADDR = 5314H; (* ('S'<< 8)|20, set iface broadcast address *)
  SIOCGIFNETMASK = 5315H; (* ('S'<< 8)|21, get iface network mask *)
  SIOCSIFNETMASK = 5316H; (* ('S'<< 8)|22, set iface network mask *)
  SIOCGIFMETRIC  = 5317H; (* ('S'<< 8)|23, get metric *)
  SIOCSIFMETRIC  = 5318H; (* ('S'<< 8)|24, set metric *)
  SIOCGIFMTU     = 531BH; (* ('S'<< 8)|27, get MTU size *)
  SIOCSIFMTU     = 531CH; (* ('S'<< 8)|28, set MTU size *)
  SIOCGIFSTATS   = 531DH; (* ('S'<< 8)|29, get interface statistics *)
  SIOCGIFHWADDR  = 5332H; (* ('S'<< 8)|50, get if hardware address *)

(* routing table calls *)
  SIOCADDRT      = 531DH; (* ('S'<< 8)|30, add routing table entry *)
  SIOCDELRT      = 531EH; (* ('S'<< 8)|31, delete routing table entry *)

(* ARP cache control calls *)
  SIOCDARP       = 5328H; (* ('S'<< 8)|40, delete ARP table entry *)
  SIOCGARP       = 5329H; (* ('S'<< 8)|41, get ARP table entry *)
  SIOCSARP       = 5330H; (* ('S'<< 8)|42, set ARP table entry *)

TYPE
  IflinkRec = RECORD
    ifname : ARRAY [0..15] OF CHAR;
    device : ARRAY [0..127] OF CHAR;
  END;

(*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*)

PROCEDURE isatty ((* EIN/ -- *) fd : int ): int;

(* Liefert einen Wert groesser Null, falls <fd> das Handle eines (Pseudo)
   Terminals ist.

   GEMDOS: Der Test wird mit "DosFile.IsTerm()" durchgefuehrt.
     MiNT: -""-
 *)


PROCEDURE ttyname ((* EIN/ -- *) fd : int ): StrPtr;

(* Falls <fd> ein Terminal repraesentiert, wird ein Zeiger auf den Pfadnamen
   fuer dieses Terminal geliefert. Dieser Zeiger bleibt gueltig, bis erneut
   "ttyname()" oder "ctermid()" aufgerufen wird. Falls <fd> kein Terminal
   repraesentiert, wird NULL zurueckgeliefert.

   GEMDOS: <fd> = -2 liefert "/dev/aux", sonst "/dev/tty".
     MiNT: Keine Besonderheiten.
 *)


PROCEDURE ctermid ((* EIN/ -- *) buf : StrPtr ): StrPtr;

(* Die Funktion liefert den Pfadnamen des Kontrollterminals fuer diesen
   Prozess, unabhaengig davon, ob der Prozess gerade ein Kontrollterminal
   besitzt. Wenn <buf> NULL ist, wird ein Zeiger auf einen internen Puffer
   geliefert, der bis zum naechsten "ctermid()" oder "ttyname()" gueltig
   bleibt, sonst wird der Name nach <buf> kopiert, der auf ein Feld von
   mindestens 'LCtermid' Zeichen zeigen muss, und <buf> als Funktionswert
   geliefert.

   GEMDOS: liefert "/dev/tty".
     MiNT: Wenn ein Fehler auftritt, ist der Name "".
 *)


PROCEDURE cfgetispeed ((* EIN/ -- *) term : TermiosRec ): speedT;

PROCEDURE cfsetispeed ((* EIN/AUS *) VAR term  : TermiosRec;
                       (* EIN/ -- *)     speed : speedT     ): int;

PROCEDURE cfgetospeed ((* EIN/ -- *) term : TermiosRec ): speedT;

PROCEDURE cfsetospeed ((* EIN/AUS *) VAR term  : TermiosRec;
                       (* EIN/ -- *)     speed : speedT     ): int;

(* Dienen dem Ermitteln und Veraendern der Ein- und Ausgabegeschwindigkeit,
   die in Variablen des Typs 'TermiosRec' kodiert ist. Die neuen
   Geschwindigkeiten werden nur in den uebergebenen Variablen manipuliert,
   zum Setzen der Geschwindigkeiten ist "tcsetattr()" zu verwenden.

   "cfgetispeed()": Ermittelt die in <term> kodierte Eingabegeschwindigkeit.
   "cfsetispeed()": Kodiert die Eingabegeschwindigkeit in <term>.
   "cfgetospeed()": Ermittelt die in <term> kodierte Ausgabegeschwindigkeit.
   "cfsetospeed()": Kodiert Ausgabegeschwindigkeit in <term>.

   GEMDOS: Keine Besonderheiten.
     MiNT: -""-
 *)


(* Fuer alle folgenden Funktionen gilt: Wenn die Attribute des
 * Kontrollterminals gesetzt werden sollen, darf der Prozess kein
 * Hintergrundprozess sein.
 *)

PROCEDURE tcgetattr ((* EIN/ -- *)     fd   : int;
                     (* -- /AUS *) VAR term : TermiosRec ): int;

PROCEDURE tcsetattr ((* EIN/ -- *)     fd   : int;
                     (* EIN/ -- *)     act  : AttrActions;
                     (* EIN/ -- *) VAR term : TermiosRec  ): int;

(* "tcgetattr()" ermittelt die Terminalattribute, wenn <fd> die Kennung
   eines Terminals ist. Die entsprechenden Werte werden in <term> gesetzt.

   "tcsetattr()" setzt die Terminalattribute, wenn <fd> die Kennung eines
   Terminals ist, auf die Werte in <term>. <act> gibt an, zu welchem
   Zeitpunkt die neuen Werte gesetzt werden (siehe 'AttrActions').
   Die Funktion meldet Erfolg, solange mindestens eins der neuen Attribute
   gesetzt werden konnte; es wird erst ein Fehler gemeldet, wenn kein
   einziges Attribut gesetzt werden konnte! Deshalb muss durch erneutes
   Lesen der Attribute festgestellt werden, welche Dinge tatsaechlich
   veraendert wurden.

     MiNT: Es werden nur einige Terminalattribute unterstuetzt, im einzelnen
           gibt es folgende Einschraenkungen:

           tciflagT:
           o IGNCR, INLCR, PARMRK und ISTRIP sind immer geloescht.
           o IXON und IXOFF haben immer denselben Wert.
           o ICRNL und cOflag.ONLCR haben immer denselben Wert.
           o IGNBRK und BRKINT haben immer unterschiedliche Werte.

           tcoflagT:
           o OPOST ist immer gesetzt.
           o ONLCR und cIflag.ICRNL haben immer denselben Wert.

           tccflagT:
           o CREAD ist immer gesetzt.

           tclflagT:
           o ECHONL ist immer geloescht
           o ECHO, ECHOE und ECHOK haben immer denselben Wert.
           o Wenn ICANON gesetzt ist, ist auch ISIG gesetzt.

   GEMDOS: Hier gibt es zusaetzliche Einschraenkungen:
           <fd> wird ignoriert. Die Flags ICANON, ISIG, ECHO* ICRNL und
           NOFLSH beeinflussen ueber globale Variablen
           ('DosFile.TTYMODE') das Verhalten von "read()" und "write()",
           die anderen Einstellungen werden mit 'Rsconf' vorgenommen und
           beeinflussen direkt die serielle Schnittstelle.

           tciflagT:
           o Da nicht festgestellt werden kann welches Synchronisations-
             verfahren gerade verwendet wird, ist bei "tcgetattr()" IXON
             gesetzt und IXOFF geloescht. Beim Setzen der Attribute werden
             die beiden Flags nur dann beruecksichtigt, wenn sie denselben
             Wert haben.
           o IGNBRK ist immer gesetzt und BRKINT immer geloescht.

           tccflagT:
           o Wenn die serielle Schnittstelle mit einer Baudrate arbeitet,
             die keiner aus 'speedT' entspricht, wird beim Lesen der
             Attribute als Wert B0 zurueckgegeben. Beim Setzen der Attribute
             wird ein Wert von B0 ignoriert.
           o CLOCAL ist immer gesetzt.
           o HUPCL ist immer geloescht.

           tclflagT:
           o TOSTOP ist immer geloescht.

           Die Werte der Spezialzeichen aus 'cCc' koennen nicht veraendert
           werden.
 *)


PROCEDURE tcsendbreak ((* EIN/ -- *) fd       : int;
                       (* EIN/ -- *) duration : int ): int;

(* Wenn <fd> die Kennung einer asynchronen (seriellen) Schnittstelle ist,
   wird eine ``Break condition'', d.h. eine Folge von Nullbits, gesendet.
   Falls <duration> = 0, dauert die Uebetragung mindestens eine
   Viertelsekunde; andere Werte fuehren zu einer systemspezifischen Dauer.

   GEMDOS: <fd> wird ignoriert und mittels 'Rsconf' ein Break gesendet.
     MiNT: <duration> ist eine Zeit in Millisekunden.
 *)


PROCEDURE tcdrain ((* EIN/ -- *) fd : int ): int;

(* Der aufrufende Prozess wird solange blockiert, bis alle Ausgaben auf <fd>
   gesendet wurden.

   GEMDOS: Nicht implementiert
     MiNT: Keine Besonderheiten.
 *)


PROCEDURE tcflow ((* EIN/ -- *) fd     : int;
                  (* EIN/ -- *) action : FlowActions ): int;

(* Kontrolliert die Ein- und Ausgabe gemaess <action> (siehe 'FlowActions').

   GEMDOS: Nicht implementiert
     MiNT: <act> darf nur die Werte 'TCOOFF' und 'TCOON' annehmen.
 *)


PROCEDURE tcflush ((* EIN/ -- *) fd   : int;
                   (* EIN/ -- *) qsel : QueueTypes ): int;

(* Loescht gepufferte, aber noch nicht gelesene bzw. gesendete Ein- und
   Ausgaben; welche Daten geloescht werden, wird ueber <qsel> bestimmt
   (siehe 'QueueTypes').

   GEMDOS: Nicht implementiert
     MiNT: Keine Besonderheiten.
 *)


PROCEDURE tcgetpgrp ((* EIN/ -- *) fd : int ): pidT;

PROCEDURE tcsetpgrp ((* EIN/ -- *) fd   : int;
                     (* EIN/ -- *) pgrp : pidT ): int;

(* "tcgetpgrp()": Ermittelt die Prozessgruppenkennung der Vordergrundpro-
                  zessgruppe des Kontrollterminals.
   "tcsetpgrp()": Setzt die Kennung der Vordergrundprozessgruppe fuer das
                  Kontrollterminal auf <pgrp>.

   GEMDOS: Nicht implementiert.
     MiNT: Keine Besonderheiten.
 *)


PROCEDURE ioctl ((* EIN/ -- *) fd  : int;
                 (* EIN/ -- *) cmd : int;
                 (* EIN/ -- *) arg : ADDRESS ): int;

(* Fuehrt unterschiedliche Operationen auf den Dateien, Geraeten oder
   Prozessen, die durch die Kennung <fd> repraesentiert werden, aus.
   Die Operation wird durch <cmd> ausgewaehlt und ein evtl. noetiger
   Parameter wird ueber <arg> angegeben. Dies ist meistens ein
   Zeiger auf eine bestimmte Struktur, wie z.B. 'TcharsRec'.
   Genauere Informationen koennen z.B. der MiNT-Dokumentation oder
   der MiNT-Net-Dokumentation entnommen werden.

   GEMDOS: Es sind nur einige der TIOC*-Kommandos implementiert.
     MiNT: Keine Besonderheiten, Unterstuetzung der Kommandos haengt
           vom jeweilgen Objekt ab.
 *)

END term.
