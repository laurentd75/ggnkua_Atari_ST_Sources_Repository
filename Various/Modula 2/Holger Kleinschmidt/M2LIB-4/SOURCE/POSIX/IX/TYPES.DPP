DEFINITION MODULE types;
__DEF_SWITCHES__
#ifdef HM2
#ifdef __LONG_WHOLE__
(*$!i+: Modul muss mit $i- uebersetzt werden! *)
(*$!w+: Modul muss mit $w- uebersetzt werden! *)
#else
(*$!i-: Modul muss mit $i+ uebersetzt werden! *)
(*$!w-: Modul muss mit $w+ uebersetzt werden! *)
#endif
#endif
(*****************************************************************************)
(* 28-Jun-96, Holger Kleinschmidt                                            *)
(*****************************************************************************)

IMPORT PORTAB;

(*===========================================================================*)
(* ``C-''-Standardtypen                                                      *)
(*===========================================================================*)

(* Definitionen fuer ``C''-Strings *)
CONST
#if (defined LPRM2) || (defined SPCM2)
  MAXSTR   = 32000; (* bel. Obergrenze *)
  MAXARRAY = 8000;  (* bel. Obergrenze *)
#else
  MAXSTR   = 65534; (* bel. Obergrenze *)
  MAXARRAY = 65534; (* bel. Obergrenze *)
#endif

TYPE
  StrRange   = [0..MAXSTR];
  ArrayRange = [0..MAXARRAY];

  StrPtr   = POINTER TO ARRAY StrRange OF CHAR; (* Nicht ohne Index deref.! *)
  StrPPtr  = POINTER TO StrPtr; (* dito *)
  StrArray = POINTER TO ARRAY ArrayRange OF StrPtr; (* dito *)

TYPE
  char          = PORTAB.SIGNEDBYTE;
  signedchar    = PORTAB.SIGNEDBYTE;
  unsignedchar  = PORTAB.UNSIGNEDBYTE;
  uchar         = PORTAB.UNSIGNEDBYTE;

  short         = PORTAB.SIGNEDWORD;
  signedshort   = PORTAB.SIGNEDWORD;
  unsignedshort = PORTAB.UNSIGNEDWORD;
  ushort        = PORTAB.UNSIGNEDWORD;

  int           = INTEGER;
  signedint     = INTEGER;
  unsigned      = CARDINAL;
  unsignedint   = CARDINAL;
  uint          = CARDINAL;

  long          = PORTAB.SIGNEDLONG;
  signedlong    = PORTAB.SIGNEDLONG;
  unsignedlong  = PORTAB.UNSIGNEDLONG;
  ulong         = PORTAB.UNSIGNEDLONG;

  float         = REAL;
  double        = LONGREAL;

  charP         = StrPtr;
  voidP         = PORTAB.ANYPOINTER;

(*===========================================================================*)
(* POSIX.1 - Konstanten und -Typen:                                          *)
(*===========================================================================*)

CONST
  NULL = PORTAB.NULL;

TYPE
  (* Die Typen sind je nach System zu aendern *)
  uidT   = PORTAB.UNSIGNEDWORD;
  gidT   = PORTAB.UNSIGNEDWORD;
  pidT   = INTEGER;
  inoT   = PORTAB.UNSIGNEDLONG;
  nlinkT = PORTAB.UNSIGNEDWORD;
  devT   = PORTAB.SIGNEDWORD;
  offT   = PORTAB.SIGNEDLONG;
  sizeT  = PORTAB.UNSIGNEDLONG;
  ssizeT = PORTAB.SIGNEDLONG;
  clockT = PORTAB.SIGNEDLONG;
  timeT  = PORTAB.SIGNEDLONG;

(* Mindestwerte fuer Maximalangaben, d.h. das Betriebs/Dateisystem muss
   mindestens diese Groessen unterstutzen, darf aber auch mehr.
   Die tatsaechlichen Werte lassen sich ueber "sys.path/sysconf()"
   zur Laufzeit erfragen, oder ueber die nachfolgenden Konstanten,
   falls vorhanden.

   "GEMDOS": Die meisten Anforderungen werden nicht erfuellt.
 *)
CONST
  PosixArgMax      = 4096;
  PosixChildMax    = 6;
  PosixLinkMax     = 8;
  PosixMaxCanon    = 255;
  PosixMaxInput    = 255;
  PosixNameMax     = 14;
  PosixNGroupsMax  = 0;
  PosixOpenMax     = 16;
  PosixPathMax     = 255;
  PosixPipeBuf     = 512;
  PosixStreamMax   = 8;
  PosixSsizeMax    = 32767;


CONST (* Ist POSIX, es soll aber "sys.sysconf(scClkTck)" benutzt werden! *)
  ClkTck = LC(200); (* Aufloesung von 'clockT': (ClkTck Intervalle)/ Sekunde *)

CONST (* Nicht POSIX *)
  ClocksPerSec = ClkTck;

(* Das sind die einzigen beiden Werte, die zur Uebersetzungszeit bekannt
 * sein muessen, alle anderen Werte koennen durch "sys.path/sysconf()"
 * ermittelt werden.
 *)
CONST
  NGroupsMax = 0; (* Der von "sysconf()" gelieferte Wert kann groesser sein *)
#if no_MIN_MAX
  SsizeMax   = PORTAB.MAXSIGNEDLONG;
#else
  SsizeMax   = MAX(ssizeT);
#endif

CONST
#ifdef __GEMDOS__
  NAMEMAX = 128;
  PATHMAX = 256;
#elif (defined __PCDOS__)
  NAMEMAX = 14;
  PATHMAX = 64; (* ?? *)
#else
  NAMEMAX = PosixNameMax;
  PATHMAX = PosixPathMax;
#endif

TYPE (* Nicht POSIX: *)
  FileName = ARRAY [0..NAMEMAX] OF CHAR;
#ifdef __PCDOS__
  PathName = ARRAY [0..PATHMAX+NAMEMAX] OF CHAR; (* ?? *)
#else
  PathName = ARRAY [0..PATHMAX] OF CHAR;
#endif

TYPE (* Nicht POSIX: *)
  PathPtr = POINTER TO PathName;


(* Die Zugriffsberechtigung auf Dateien ist in drei Klassen eingeteilt:
 *
 * o Falls die effektive Benutzerkennung des Prozesses gleich der
 *   Benutzerkennung des Dateibesitzers ist, gelten die sI?USR Flags.
 *
 * o Falls die effektive Gruppenkennung oder eine der zusaetzlichen
 *   Gruppenkennungen gleich der Gruppenkennung des Dateibesitzers ist,
 *   gelten die sI?GRP Flags.
 *
 * o Falls keine der obigen Bedingungen zutrifft, gelten die sI?OTH Flags.
 *)
TYPE
#if reverse_set
  FileMode = (
    Type15,   (* = 100000B *)
    Type14,   (* = 040000B *)
    Type13,   (* = 020000B *)
    Type12,   (* = 010000B *)

    sISUID,   (* = 004000B, set user-id, Effektive Benutzer-ID bei Ausfuehrung setzen *)
    sISGID,   (* = 002000B, set group-id, Effektive Gruppen-ID bei Ausfuehrung setzen *)
    sISVTX,   (* = 001000B, Nicht POSIX: sticky bit, nach AusfÅhrung im Speicher halten *)

    sIRUSR,   (* = 000400B, Besitzer : Leseberechtigung *)
    sIWUSR,   (* = 000200B, Besitzer : Schreibberechtigung *)
    sIXUSR,   (* = 000100B, Besitzer : Ausfuehr/Suchberechtigung *)
    sIRGRP,   (* = 000040B, Gruppe   : Leseberechtigung *)
    sIWGRP,   (* = 000020B, Gruppe   : Schreibberechtigung *)
    sIXGRP,   (* = 000010B, Gruppe   : Ausfuehr/Suchberechtigung *)
    sIROTH,   (* = 000004B, Andere   : Leseberechtigung *)
    sIWOTH,   (* = 000002B, Andere   : Schreibberechtigung *)
    sIXOTH    (* = 000001B, Andere   : Ausfuehr/Suchberechtigung *)
  );
#else
  FileMode = (
    sIXOTH,   (* = 000001B, Andere   : Ausfuehr/Suchberechtigung *)
    sIWOTH,   (* = 000002B, Andere   : Schreibberechtigung *)
    sIROTH,   (* = 000004B, Andere   : Leseberechtigung *)
    sIXGRP,   (* = 000010B, Gruppe   : Ausfuehr/Suchberechtigung *)
    sIWGRP,   (* = 000020B, Gruppe   : Schreibberechtigung *)
    sIRGRP,   (* = 000040B, Gruppe   : Leseberechtigung *)
    sIXUSR,   (* = 000100B, Besitzer : Ausfuehr/Suchberechtigung *)
    sIWUSR,   (* = 000200B, Besitzer : Schreibberechtigung *)
    sIRUSR,   (* = 000400B, Besitzer : Leseberechtigung *)

    sISVTX,   (* = 001000B, Nicht POSIX: sticky bit, nach AusfÅhrung im Speicher halten *)
    sISGID,   (* = 002000B, set group-id, Effektive Gruppen-ID bei Ausfuehrung setzen *)
    sISUID,   (* = 004000B, set user-id, Effektive Benutzer-ID bei Ausfuehrung setzen *)

    Type12,   (* = 010000B *)
    Type13,   (* = 020000B *)
    Type14,   (* = 040000B *)
    Type15    (* = 100000B *)
  );
#endif
  modeT = PACKEDSET OF FileMode;


CONST
  sIRWXU = modeT{sIRUSR, sIWUSR, sIXUSR};
  sIRWXG = modeT{sIRGRP, sIWGRP, sIXGRP};
  sIRWXO = modeT{sIROTH, sIWOTH, sIXOTH};

(* Die folgenden Konstanten sind nicht POSIX: *)
CONST
#if reverse_set
  sIFMT  = modeT{Type15..Type12};         (* 170000B, Maske fuer Dateityp *)
#else
  sIFMT  = modeT{Type12..Type15};         (* 170000B, Maske fuer Dateityp *)
#endif
  sIFCHR = modeT{Type13};                 (* 020000B, Zeichenor. Geraet *)
  sIFDIR = modeT{Type14};                 (* 040000B, Verzeichnis *)
  sIFBLK = modeT{Type13, Type14};         (* 060000B, Blockor. Geraet *)
  sIFREG = modeT{Type15};                 (* 100000B, Normale Datei *)
  sIFIFO = modeT{Type13, Type15};         (* 120000B, Pipe *)
  sIFLNK = modeT{Type13, Type14, Type15}; (* 160000B, Symb. Link, *)

(* IF st.stMode * sIFMT = sIFCHR THEN
 *           ...
 *)

CONST (* Nicht POSIX: *)
  STDPERM = modeT{sIRUSR,sIWUSR,sIRGRP,sIWGRP,sIROTH,sIWOTH};


TYPE (* Nicht POSIX: *)
  TimevalPtr = POINTER TO TimevalRec;
  TimevalRec = RECORD
    tvSec  : long; (* Sekunden *)
    tvUSec : long; (* Mikrosekunden *)
  END;

(*===========================================================================*)
(* Sonstige Typen und Konstanten. Nicht POSIX.1.                             *)
(*===========================================================================*)

(* X* steht fuer "UNIX", D* fuer "PCDOS", G* steht fuer "GEMDOS" *)
CONST
  (* *DIRSEP ist EINZELZEICHEN, das Pfadkomponenten voneinander trennt *)
  XDIRSEP = '/';
  DDIRSEP = 134C;(* Wegen C-Praeprozessor... *)
  GDIRSEP = 134C;(* -''- *)

#ifdef __GEMDOS__
  DIRSEP = GDIRSEP;
#elif (defined __PCDOS__)
  DIRSEP = DDIRSEP;
#else
  DIRSEP = XDIRSEP;
#endif

CONST
  (* EINZELZEICHEN, das Dateinamen von der Extension trennt. Da *IX vom
   * System her eigtl. nicht zwischen Dateiname und Extension trennt, ist
   * das Trennzeichen nur der Konvention halber das gleiche wie bei
   * (PC/GEM)DOS.
   *)
  SUFFIXSEP = '.';

(*===========================================================================*)
(* ASCII-Controlzeichen                                                      *)
(*===========================================================================*)

(* Die wichtigsten Steuerzeichen *)
CONST
  NUL  = 0C;
  EOT  = 04C;
  BEL  = 07C;
  BS   = 10C;
  HT   = 11C;
  LF   = 12C;
  VT   = 13C;
  FF   = 14C;
  CR   = 15C;
  ESC  = 33C;
  DEL  = 177C;

(* Die uebrigen Steuerzeichen *)
  SOH = 01C;    STX = 02C;    ETX = 03C;    ENQ = 05C;
  ACK = 06C;    SO  = 16C;    SI  = 17C;    DLE = 20C;
  DC1 = 21C;    XON = 21C;
  DC2 = 22C;
  DC3 = 23C;    XOFF= 23C;
  DC4 = 24C;
  NAK = 25C;    SYN = 26C;    ETB = 27C;    CAN = 30C;
  EM  = 31C;    SUB = 32C;    FS  = 34C;    GS  = 35C;
  RS  = 36C;    US  = 37C;

CONST
  EOS = 0C; (* Terminator fuer M2-Strings, falls kleiner als Feld *)

END types.

