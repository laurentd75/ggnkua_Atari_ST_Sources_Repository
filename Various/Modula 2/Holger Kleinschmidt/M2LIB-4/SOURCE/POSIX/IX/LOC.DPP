DEFINITION MODULE loc;
__DEF_SWITCHES__
#ifdef HM2
#ifdef __LONG_WHOLE__
(*$!i+: Modul muss mit $i- uebersetzt werden! *)
(*$!w+: Modul muss mit $w- uebersetzt werden! *)
#else
(*$!i-: Modul muss mit $i+ uebersetzt werden! *)
(*$!w-: Modul muss mit $w+ uebersetzt werden! *)
#endif
#endif
(****************************************************************************)
(* Unterstuetzung von ``Locales''. Fuer eine genauere Beschreibung kann     *)
(* der entsprechende Abschnitt (locale.texi) des Manuals der GNU-Lib (glibc)*)
(* herangezogen werden.                                                     *)
(* -------------------------------------------------------------------------*)
(* 10-Aug-96, Holger Kleinschmidt                                           *)
(****************************************************************************)

FROM PORTAB IMPORT
(* TYPE *) SIGNEDWORD;

FROM types IMPORT
(* TYPE *) StrPtr;

(*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*)

TYPE
  LcType = (
    LcCtype,
    LcCollate,
    LcTime,
    LcNumeric,
    LcMonetary,
    LcMessages, (* Nicht POSIX.1, aber POSIX.2 *)
    LcAll
  );

TYPE
  LConvRec = RECORD
    decimalPoint : StrPtr;
      (* Symbol fuer ``Dezimalpunkt'' bei normalen Zahlen,
       * z.B.: "." oder "," (in 12.3 oder 12,3).
       *)
    thousandsSep : StrPtr;
      (* Symbol fuer die Gruppierung von Ziffern links vom Dezimalpunkt
       * bei normalen Zahlen, z.B.: "," oder "." (in 1,234.00 oder 1.234,00).
       *)
    grouping : StrPtr;
      (* Legt die Anzahl der Ziffern in jeder Gruppe von Ziffern links
       * vom Dezimalpunkt bei normalen Zahlen fest. Dies ist eine Folge
       * durch Semikola getrennter ganzer Zahlen; die erste Zahl legt
       * dabei die erste Gruppe direkt vor dem Dezimalpunkt fest, die
       * weiteren Zahlen legen die weiteren Gruppen bis zur allerersten
       * fest; die Zahlen stehen also in der umgekehrten Reihenfolge wie
       * die zugehoerigen Zifferngruppen. Wenn die letzte Zahl der Liste
       * nicht gleich -1 ist, wird die letzte Zahl, falls vorhanden,
       * fuer alle weiteren Zifferngruppen wiederholt. Wenn die letzte
       * Zahl gleich -1 ist, werden die weiteren Ziffern nicht mehr gruppiert.
       * Z.B.: "3" (in 123,456,789.00) oder "4;1;-1" (in 12344,5,6789.00).
       * Der Wert "" bedeutet, dass keine Gruppierung stattfinden soll.
       *)
    intCurrSymbol : StrPtr;
      (* Internationales Waehrungssymbol, bestehend aus vier Zeichen,
       * wobei das vierte Zeichen das Symbol vom Betrag trennt,
       * z.B.: "USD " oder "DEM " (in USD 12.3000 oder DEM 12,3000).
       *)
    currencySymbol : StrPtr;
      (* Nationales Waehrungssymbol, z.B.: "$" oder "DM"
       * (in $12.30 oder 12,30 DM).
       *)
    monDecimalPoint : StrPtr;
      (* Wie 'decimalPoint', aber fuer Geldbetraege. *)
    monThousandsSep : StrPtr;
      (* Wie 'thousandsSep', aber fuer Geldbetraege. *)
    monGrouping : StrPtr;
      (* Wie 'grouping', aber fuer Geldbetraege. *)
    positiveSign : StrPtr;
      (* Vorzeichen fuer positive Geldbetraege, z.B.: "" oder "+" *)
    negativeSign : StrPtr;
      (* Vorzeichen fuer negative Geldbetraege, z.B.: "-" *)

    (* Bei den folgenden Variablen bedeutet ein Wert von -1:
     * Nicht festgelegt.
     *)
    intFracDigits : SIGNEDWORD;
      (* Anzahl der Ziffern rechts vom Dezimalpunkt bei Geldbetraegen,
       * die unter Verwendung von 'intCurrSymbol' angegeben werden,
       * z.B.: 2 (in DEM 123,00).
       *)
    fracDigits : SIGNEDWORD;
      (* Anzahl der Ziffern rechts vom Dezimalpunkt bei Geldbetraegen,
       * die unter Verwendung von 'currencySymbol' angegeben werden,
       * z.B.: 2 (in 123,00 DM).
       *)
    pCsPrecedes : SIGNEDWORD;
      (* Betrifft nichtnegative Geldbetraege:
       *
       * 0: Das Waehrungssymbol steht hinter dem Geldbetrag.
       * 1: Das Waehrungssymbol steht vor dem Geldbetrag.
       *
       * Dies sollte nur fuer das nationale Waehrungssymbol verwendet
       * werden, 'intCurrSymbol' sollte immer vor dem Betrag stehen.
       *)
    pSepBySpace : SIGNEDWORD;
      (* Betrifft nichtnegative Geldbetraege:
       *
       * 0: Betrag und Waehrungssymbol sind nicht durch ein Leerzeichen
       *    voneinander getrennt.
       * 1: Betrag und Waehrungssymbol sind durch ein Leerzeichen
       *    voneinander getrennt.
       * 2: Waehrungssymbol und Vorzeichen sind durch ein Leerzeichen
       *    voneinander getrennt, wenn sie aufeinanderfolgen.
       *
       * Dies sollte nur fuer das nationale Waehrungssymbol verwendet
       * werden, da in 'intCurrSymbol' bereits ein Trennzeichen enthalten ist.
       *)
    nCsPrecedes : SIGNEDWORD;
      (* Wie 'pCsPrecedes', aber fuer negative Geldbetraege. *)
    nSepBySpace : SIGNEDWORD;
      (* Wie 'pSepBySpace', aber fuer negative Geldbetraege. *)
    pSignPosn : SIGNEDWORD;
      (* Betrifft nichtnegative Geldbetraege:
       *
       * 0: Waehrungssymbol und Betrag sind durch () geklammert.
       * 1: Das Vorzeichen steht vor dem Waehrungssymbol und dem Betrag.
       * 2: Das Vorzeichen steht hinter dem Waehrungssymbol und dem Betrag.
       * 3: Das Vorzeichen steht vor dem Waehrungssymbol, aber nicht
       *    notwendigerweise vor dem Betrag.
       * 4: Das Vorzeichen steht hinter dem Waehrungssymbol, aber nicht
       *    notwendigerweise hinter dem Betrag.
       *)
    nSignPosn : SIGNEDWORD;
      (* Wie 'pSignPos', aber fuer negative Geldbetraege. *)
  END;

  LConvPtr = POINTER TO LConvRec;

(*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*)

PROCEDURE setlocale ((* EIN/ -- *) category : LcType;
                     (* EIN/ -- *) locale   : StrPtr ): StrPtr;

(* Wenn <locale> gleich NULL ist, wird der Name des aktuellen Locales fuer
   <category> geliefert.
   Falls <locale>^ ein Leerstring ist, wird fuer <locale>^ ein Wert anhand
   von Environmentvariablen gesucht:

   1) Falls die Environmentvariable LC_ALL definiert ist und keinen
      Leerstring enthaelt, wird deren Inhalt fuer <locale> verwendet.

   2) Falls eine Environmentvariable mit demselben Namen wie <category>
      existiert (z.B. LC_TIME fuer LcTime) und keinen Leerstring enthaelt,
      wird deren Inhalt fuer <locale> verwendet.

   3) Falls die Environmentvariable LANG definiert ist und keinen Leerstring
      enthaelt, wird deren Inhalt fuer <locale> verwendet.

   4) Sonst wird ein implementierungsspezifischer Wert verwendet.

   Wenn <locale>^ einen ungueltigen bzw. nicht unterstuetzten String
   enthaelt, wird nichts veraendert und NULL zurueckgeliefert.
   Sonst wird das Locale fuer <category> auf einen Wert gesetzt, der
   <locale>^ entspricht, und <locale> zurueckgeliefert.
   Das Format des Strings fuer <category> = 'LcAll' ist nicht dokumentiert,
   aber das Ergebnis eines Aufrufes mit <locale> gleich NULL kann wieder
   als Parameter bei einem spaeteren Aufruf verwendet werden.

   GEMDOS/MiNT: Die 'LC_COLLATE'-Kategorie wird nicht unterstuetzt. Die
                folgenden Locales werden unterstuetzt: "POSIX" (= "C").
                Wenn im Implementationsmodul beim Praeprozessieren die
                entsprechenden Makros gesetzt waren, werden auch
                "en" (ENglish), "de" (DEutsch), "fr" (FRancais),
                "nl" (Hollaendisch) unterstuetzt.
 *)


(* Nicht POSIX, aber Ansi-C: *)
PROCEDURE localeconv ( ): LConvPtr;

(* Liefert einen Zeiger auf eine statische Variable vom Typ 'LConvRec', die
   die Werte der augenblicklichen 'LC_MONETARY'- und 'LC_NUMERIC'-Locales
   enthaelt. Die Variable wird beim naechsten Aufruf der Prozedur
   ueberschrieben.
 *)

END loc.
