DEFINITION MODULE POSIX2;
__DEF_SWITCHES__
#ifdef HM2
#ifdef __LONG_WHOLE__
(*$!i+: Modul muss mit $i- uebersetzt werden! *)
(*$!w+: Modul muss mit $w- uebersetzt werden! *)
#else
(*$!i-: Modul muss mit $i+ uebersetzt werden! *)
(*$!w-: Modul muss mit $w+ uebersetzt werden! *)
#endif
#endif
(*****************************************************************************)
(* POSIX.2-Funktionen                                                        *)
(* --------------------------------------------------------------------------*)
(* 10-Aug-96, Holger Kleinschmidt                                            *)
(*****************************************************************************)

FROM types IMPORT
(* TYPE *) int, StrPtr, StrArray;

(*========================= "fnmatch()" =====================================*)

CONST
  FNMNoMatch = 1;

TYPE
  FNMFlag = (
    FNMPathname, (* Wildcards ('*', '?') und Mengen ('[...]') ``matchen''
                  * nicht ueber Verzeichnisgrenzen ('/') hinweg -> (Datei)Namen
                  * werden durch '/.../' begrenzt.
                  *)
    FNMPeriod,   (* Wildcards ('*', '?') und Mengen ('[...]') ``matchen''
                  * kein fuehrendes '.' bei (Datei)Namen.
                  *)
    FNMNoEscape  (* Das Zeichen 'ESCAPECHAR' hebt nicht die Spezialbedeutung
                  * von '*', '?', '[', ']' (und ESCAPECHAR) auf.
                  *)
  );

  FNMFlags = PACKEDSET OF FNMFlag;

(* nicht POSIX: *)
CONST
  ESCAPECHAR = 134C;
  INVERTCHAR = '!'; (* Alternativ: '^' *)

(*========================= "getopt()" ======================================*)

VAR
  optarg : StrPtr; (* Argument einer Option *)
  optind : int;    (* Naechstes Programmargument *)
  optopt : int;    (* Fehlerhafte Option *)

CONST
  (* Bei POSIX.2 ist dies eine Variable; wenn sie einen Wert ungleich Null
   * hat, wird bei einem Fehler von "getopt()" automatisch eine Fehler-
   * meldung auf dem Standardfehlerkanal (stderr) produziert. Da hierzu
   * die C-HIGH-Level-IO (FILE) benutzt wird, ist die Option in dieser
   * Implementierung gestrichen.
   *)
  opterr = 0;

(*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*)

PROCEDURE fnmatch ((* EIN/ -- *) REF str   : ARRAY OF CHAR;
                   (* EIN/ -- *) REF pat   : ARRAY OF CHAR;
                   (* EIN/ -- *)     flags : FNMFlags      ): int;

(* Testet, ob das Muster <pat> auf den String <str> passt (0 = passt).
   Die folgenden Zeichen haben im Muster eine Spezialbedeutung:

           '*': steht fuer beliebig viele (auch Null) Zeichen
           '?': steht fuer genau ein beliebiges Zeichen
           '[': Leitet eine Mengendefinition ein, d.h das korrespondierende
                Zeichen im String muss ein Zeichen aus dieser Menge sein.
           '-': Innerhalb einer Mengendefinition wird ein Bereich durch das
                unmittelbar davor und unmittelbar dahinter stehende Zeichen
                gebildet. Das korrespondierende Zeichen kann innerhalb und
                einschliesslich der Grenzen liegen.
                Als erstes oder letztes Element einer Menge steht es fuer
                sich selbst.
           ']': Beendet die Definition einer Menge; als erstes Element
                einer Menge oder ohne ein vorausgehendes, noch nicht
                abgeschlossenes '[', steht es fuer sich selbst.
   INVERTCHAR : Als erstes Zeichen einer Mengendefinition bedeutet es, dass
                das korrespondierende Zeichen im String KEIN Zeichen aus
                dieser Menge sein darf.
   ESCAPECHAR : Hebt die Sonderfunktion der obigen Zeichen und auch von
                sich selbst auf; die uebrigen Zeichen werden nicht
                beeinflusst.

   Mit <flags> kann die Interpretation der obigen Spezialzeichen
   beeinflusst werden (siehe Definition von 'FNMFlag').
 *)


PROCEDURE system ((* EIN/ -- *) REF cmd : ARRAY OF CHAR ): int;

(* Es wird ein Unterprozess erzeugt, der <cmd> als Kommando an einen
   Kommandointerpreter uebergibt; Die Prozedur kehrt erst zurueck, wenn
   das Kommando beendet oder ein Fehler aufgetreten ist. Waehrend des
   Wartens auf die Beendigung des Unterprozesses, werden die Signale
   SIGINT und SIGQUIT ignoriert und das Signal SIGCHLD blockiert.

   GEMDOS/MiNT: Falls die Environmentvariable SHELL existiert, wird deren
                Inhalt als Kommandoshell verwendet (kann, braucht aber
                weder Pfad noch Extension zu enthalten), sonst "/bin/sh"
                (darf auch Extension haben).
                Der Kommandointerpreter wird auf folgende Weise aufgerufen:
                <shell> -c <cmd>.
                Zuerst wird versucht, einen Unterprozess mit "fork()" +
                "exec()" zu erzeugen; funktioniert "fork()" nicht, erfolgt
                der Aufruf ueber "spawn()". Funktioniert auch das nicht,
                wird ein Aufruf ueber '_shell_p' abgesetzt, wenn die
                Anwesenheit eines Interpreters mit Sicherheit festgestellt
                werden kann ("DosSystem.ShellInstalled()" darf weder
                'UnknownShell' noch 'NoShell' liefern).
                Die oben angegebene Behandlung der Signale ist nur bei der
                Ausfuehrung mit fork/exec gegeben! Unter MiNT sollte es
                eigentlich immer "/bin/sh" geben, viele von *IX portierte
                Utilities verlassen sich darauf!
                Wenn SHELL einen Wert hat, dann muss die dort eingetragene
                Shell auch den Parameter -c verstehen!
 *)


PROCEDURE getopt ((* EIN/ -- *)     argc   : int;
                  (* EIN/ -- *)     argv   : StrArray;
                  (* EIN/ -- *) REF optstr : ARRAY OF CHAR ): int;

(* Mithilfe dieser Prozedur lassen sich Optionen, die dem Programm als
   Parameter uebergeben wurden, analysieren. <argc> und <argv> sind Anzahl
   der Programmargumente und die Argumente selber, so wie sie von "main()"
   geliefert werden. Optionen bestehen aus einzelnen Buchstaben, die als
   Optionen gegenueber anderen Parametern gekennzeichnet werden, indem sie
   direkt hinter einem '-' stehen; Optionen muessen vor allen anderen
   Parametern angegeben werden, da der erste Nicht-Optionsparameter die
   Liste der Optionen beendet. In <optstr> steht die Liste der gueltigen
   Optionszeichen (ohne das fuehrende '-'). Wenn hier ein Zeichen von einem
   ':' gefolgt wird, hat die Option ein Argument. Das Optionsargument
   steht entweder direkt hinter der Option im gleichen Programmparameter
   (das Optionsargument ist von der Option nicht durch ein Leerzeichen
   getrennt) oder im naechsten Programmparameter (dann ist die Option das
   letzte Zeichen im entsprechenden Programmparameter). Wenn eine Option
   mehr als ein Optionsargument hat, so stehen die Argumente im selben
   Programmparameter (im selben wie die Option oder im naechsten, wie eben
   erlaeutert), sind aber untereinander durch Leerzeichen oder Kommata
   voneinander getrennt.
   Es ist moeglich, mehrere Optionen, die keine Argumente haben, hinter
   einem einzigen '-' zu einem Programmargument zusammenzufassen.
   Die Variable 'optind' enthaelt den Index des naechsten Programmparameters
   in <argv>^. Bei Programmstart steht dort eine Eins und "getopt()"
   erhoeht sie entsprechend, wenn der augenblickliche Programmparameter
   abgearbeitet ist.
   Als Funktionswert wird das naechste Optionszeichen (auf 'int' erweitert)
   aus <argv> geliefert, das einem Optionszeichen aus <optstr> entspricht.
   Wird eine Option gefunden, die nicht in <optstr> enthalten ist, wird
   '?' geliefert, und die Variable 'optopt' enthaelt das fehlerhafte
   Optionszeichen.
   Wenn die Option ein Argument hat, enthaelt die Variable 'optarg' die
   Anfangsadresse des Arguments. Wenn ein erwartetes Argument fehlt, wird
   als Funktionswert ein ':' geliefert, falls das erste Zeichen in <optstr>
   ebenfalls ein ':' ist, sonst wird ein '?' geliefert; auch hier enthaelt
   die Variable 'optopt' das fehlerhafte Optionszeichen.
   Die spezielle Option "--" kennzeichnet das Ende der Optionen und wird
   von "getopt()" uebersprungen, indem 'optind' erhoeht wird; alle weiteren
   Parameter werden nicht mehr als Optionen betrachtet.

   GEMDOS/MiNT: Keine Besonderheiten
 *)

END POSIX2.
