DEFINITION MODULE proc;
__DEF_SWITCHES__
#ifdef HM2
#ifdef __LONG_WHOLE__
(*$!i+: Modul muss mit $i- uebersetzt werden! *)
(*$!w+: Modul muss mit $w- uebersetzt werden! *)
#else
(*$!i-: Modul muss mit $i+ uebersetzt werden! *)
(*$!w-: Modul muss mit $w+ uebersetzt werden! *)
#endif
#endif
(*****************************************************************************)
(* Funktionen, die mit Prozessen zu tun haben.                               *)
(*                                                                           *)
(* Ein Fehler ist immer dann aufgetreten, wenn bei Funktionen ein negativer  *)
(* Wert (-1) bzw. NULL zurueckgegeben wird. Die genaue Fehlerursache kann bei*)
(* Bedarf ueber "e.errno" und die entsprechenden Konstanten ermittelt werden.*)
(* Die Funktionen veraendern "errno" nur dann, wenn ein Fehler aufgetreten   *)
(* ist, bei erfolgreicher Ausfuehrung wird "errno" nicht veraendert.         *)
(*                                                                           *)
(* GEMDOS/MiNT:                                                              *)
(* Die Eigenschaften der Funktionen unter dem ``blanken'' GEMDOS sind z.T.   *)
(* stark eingeschraenkt; unter dem Stichwort GEMDOS ist deswegen immer       *)
(* angegeben, in wieweit die Funktion emuliert werden kann.                  *)
(* Unter der Betriebssystemerweiterung MiNT bzw. einer anderen Erweiterung,  *)
(* die ebenfalls zumindest teilweise die neuen MiNT-Funktionen zur Verfuegung*)
(* stellt, ist eine bessere Unterstuetzung der Funktionen zu erwarten; wie   *)
(* weit diese geht, ist unter dem Stichwort MiNT angegeben.                  *)
(* --------------------------------------------------------------------------*)
(* 10-Aug-96, Holger Kleinschmidt                                            *)
(*****************************************************************************)

FROM PORTAB IMPORT
(* TYPE *) ANYLONG, WORDSET;

FROM types IMPORT
(* TYPE *) int, unsigned, long, sizeT, uidT, gidT, pidT, clockT, StrPtr,
           StrArray, modeT, TimevalRec, TimevalPtr;

(*=========================== "times()" =====================================*)

TYPE
  TmsRec = RECORD
    tmsUtime  : clockT; (* CPU-Zeit im Benutzercode *)
    tmsStime  : clockT; (* CPU-Zeit im System *)
    tmsCUtime : clockT; (* CPU-Zeit im Benutzercode aller beendeten Unterpr.*)
    tmsCStime : clockT; (* CPU-Zeit im System aller beendeten Unterprozesse *)
  END;

(* Nicht POSIX: *)
(*=========================== "tfork()" =====================================*)
CONST
  MINSTACKSIZE = 4096;

TYPE
  ThreadProc = PROCEDURE(ANYLONG): int;

(*======================= "wait()", "waitpid()" =============================*)

TYPE
  WaitVal = WORDSET;

(* Repraesentation des Typs 'WaitVal' ist nicht zur Benutzung
 * ausserhalb des Moduls gedacht.
 * Konstanten sind nicht POSIX.
 *)
CONST
#if reverse_set
  wRetcode  = WaitVal{0..7};
  wTermsig  = WaitVal{9..15};
  wCoredump = 8;
  wStopval  = WaitVal{8..15};
  wStopsig  = WaitVal{0..7};

  WSTOPPED  = WaitVal{9..15};
#else
  wRetcode  = WaitVal{8..15};
  wTermsig  = WaitVal{0..6};
  wCoredump = 7;
  wStopval  = WaitVal{0..7};
  wStopsig  = WaitVal{8..15};

  WSTOPPED  = WaitVal{0..6};
#endif

 (*  IF state * wStopval = WSTOPPED THEN
  *    stoppedBy := VAL(CARDINAL,CAST(UNSIGNEDWORD,state * wStopsig) DIV 256);
  *    ...
  *  ELSIF state * wTermsig <> WaitVal{} THEN
  *    terminatedBy := VAL(CARDINAL,CAST(UNSIGNEDWORD,state * wTermsig));
  *    coreDumped   := wCoredump IN state;
  *    ...
  *  ELSE
  *    retCode := VAL(INTEGER,CAST(SIGNEDWORD,state * wRetcode) DIV 256);
  *    ...
  *  END;
  *)

TYPE
#if reverse_set
  WaitOption = (
    waitop15, waitop14, waitop13, waitop12, waitop11, waitop10, waitop9,
    waitop8,  waitop7,  waitop6,  waitop5,  waitop4,  waitop3,  waitop2,
    WUNTRACED, (* 0002H, Auch gestoppte Unterprozesse beruecksichtigen *)
    WNOHANG   (* 0001H, Nicht auf Beendigung warten, sofort zurueck *)
  );
#else
  WaitOption = (
    WNOHANG,   (* 0001H, Nicht auf Beendigung warten, sofort zurueck *)
    WUNTRACED, (* 0002H, Auch gestoppte Unterprozesse beruecksichtigen *)
    waitop2, waitop3,  waitop4,  waitop5,  waitop6,  waitop7,  waitop8,
    waitop9, waitop10, waitop11, waitop12, waitop13, waitop14, waitop15
  );
#endif

  WaitOptions = PACKEDSET OF WaitOption;


(* Nicht POSIX: *)
(*======================= "wait3()", "wait4()" ==============================*)

TYPE
  RusageRec = RECORD
    ruUtime    : TimevalRec; (* user time used *)
    ruStime    : TimevalRec; (* system time used *)
    ruMaxrss   : long;       (* maximum resident set size *)
    ruIxrss    : long;       (* integral shared memory size *)
    ruIdrss    : long;       (* integral unshared data size *)
    ruIsrss    : long;       (* integral unshared stack size *)
    ruMinflt   : long;       (* page reclaims *)
    ruMajflt   : long;       (* page faults (requiring I/O) *)
    ruNswap    : long;       (* memory swaps *)
    ruInblock  : long;       (* block input operations *)
    ruOublock  : long;       (* block output operations *)
    ruMsgsnd   : long;       (* messages sent *)
    ruMsgrcv   : long;       (* messages received *)
    ruNsignals : long;       (* signals received *)
    ruNvcsw    : long;       (* voluntary context switches *)
    ruNivcsw   : long;       (* involuntary context switches *)
  END;


(* Nicht POSIX: *)
(*========= "select()","FDCLR()","FDSET()","FDZERO()","FDISSET()" ===========*)

CONST
  FDSETSIZE = 32;

CONST
  MAXFDSET = 1;

(* 'fdSet' ist eine Menge von Dateikennungen *)
TYPE
  fdSet = ARRAY [0..MAXFDSET] OF WORDSET;

  FdSetPtr = POINTER TO fdSet;

(*===================== "get/setgroups()" ===================================*)

TYPE
  GroupArrayRange = [0..999]; (* beliebige Obergrenze *)
  GroupArray      = ARRAY GroupArrayRange OF gidT;
  GroupArrayPtr   = POINTER TO GroupArray;

(*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*)

PROCEDURE umask ((* EIN/ -- *) excl : modeT ): modeT;

(* Setzt die Dateiattributmaske des Prozesses, die als Filter fuer die
   Zugriffsberechtigung benutzt wird, wenn eine Datei mit "open()" oder
   "creat()" neu erstellt oder ein Verzeichnis mit "mkdir()" angelegt wird:
   Von der angegebenen Zugriffsberechtigung wird immer zuerst die Maske
   subtrahiert, so dass Dateien z.B. grundsaetzlich fuer Gruppe und andere
   schreibgeschuetzt werden koennen.
   Als Funktionswert wird die alte Maske zurueckgeliefert.

   GEMDOS: Keine Besonderheiten, aber nicht sonderlich sinnvoll.
     MiNT: Keine Besonderheiten.
 *)


PROCEDURE chdir ((* EIN/ -- *) REF dir : ARRAY OF CHAR ): int;

(* Setzt das neue aktuelle Verzeichnis auf <dir>, das bei allen relativen
   Pfadangaben benutzt wird.

   GEMDOS: Keine Besonderheiten.
     MiNT: -""-
 *)


PROCEDURE getcwd ((* EIN/ -- *) buf    : StrPtr;
                  (* EIN/ -- *) bufsiz : sizeT   ): StrPtr;

(* In <buf>^ wird ein absoluter Pfad des augenblicklichen
   Arbeitsverzeichnisses abgelegt. <bufsiz> bezeichnet den Platz in <buf>
   fuer Pfad einschliesslich Nullbyte. Der Pfad ist immer mit einem
   Nullbyte abgeschlossen. Wenn <buf> nicht gross genug ist, wird ein
   Fehler gemeldet und NULL als Funktionswert zurueckgeliefert, <buf>^
   ist dann undefiniert; sonst ist der Funktionswert gleich <buf>.

   GEMDOS/MiNT:
   Achtung: Der Stack wird mit mindestens <bufsiz> Bytes belastet, darum
            sollte <bufsiz> nicht zu grož gewaehlt werden (oder die
            Stackgroesse des Programms muss entsprechend hoch sein)!

   Auch wenn <bufsiz> kleiner als 'PATHMAX' ist, wird intern mindestens ein
   Puffer dieser Groesse bereitgestellt, damit ein zu kleiner Wert sauber
   mit einer Fehlermeldung statt mit einem Absturz wegen Ueberschreiben
   fremden Speichers abgefangen wird, falls 'Dgetcwd' nicht unterstuetzt
   wird.
 *)


PROCEDURE getlogin ( ): StrPtr;

(* Liefert einen Zeiger auf einen statischen Speicherbereich, in dem der
   login-Name steht, der mit dem aufrufenden Prozess assoziiert ist.
   Wenn der login-Name nicht festgestellt werden kann, wird NULL geliefert.

   MiNT/GEMDOS: Der login-Name wird der Environmentvariablen 'LOGNAME'
                entnommen. Existiert diese Variable nicht oder ist sie leer,
                wird versucht, den Namen mit "getpwuid()" zu ermitteln.
                Klappt das auch nicht, und die reale Benutzerkennung ist
                nicht groesser Null, lautet der name 'root'; sonst wird NULL
                zurueckgeliefert.
 *)


PROCEDURE getpid ( ): pidT;

PROCEDURE getppid ( ): pidT;

(* Liefert die Kennung des eigenen bzw. des uebergeordneten Prozesses.

   GEMDOS: Aus der Adresse der BasePage wird ein eindeutiger Wert berechnet.
     MiNT: Keine Besonderheiten.
 *)


PROCEDURE getuid ( ): uidT;

PROCEDURE getgid ( ): gidT;

PROCEDURE geteuid ( ): uidT;

PROCEDURE getegid ( ): gidT;

PROCEDURE setuid ((* EIN/ -- *) uid : uidT ): int;

PROCEDURE setgid ((* EIN/ -- *) gid : gidT ): int;

(* Noch nicht POSIX: *)
PROCEDURE seteuid ((* EIN/ -- *) euid : uidT ): int;

(* Noch nicht POSIX: *)
PROCEDURE setegid ((* EIN/ -- *) egid : gidT ): int;

(* Nicht POSIX: *)
PROCEDURE setreuid ((* EIN/ -- *) ruid : int;
                    (* EIN/ -- *) euid : int ): int;

(* Nicht POSIX: *)
PROCEDURE setregid ((* EIN/ -- *) rgid : int;
                    (* EIN/ -- *) egid : int ): int;

(* Funktionen fuer das Abfragen und Setzen diverser Kennungen:
   "getuid/gid"  : liefern reale Benutzer- bzw. Gruppenkennung des aufrufen-
                   den Prozesses.
   "geteuid/gid" : liefern effektive Benutzer- bzw. Gruppenkennung des
                   aufrufenden Prozesses.
   "setuid/gid"  : Falls der aufrufende Prozess die entsprechenden Rechte
                   besitzt, d.h. die effektive Kennung die des Superusers
                   ist, werden die reale und effektive Kennung und, falls
                   vorhanden, die saved set user/group ID auf <uid> bzw.
                   <gid> gesetzt.
                   Falls der Prozess diese Rechte nicht besitzt, aber <uid>
                   bzw. <gid> der realen Kennung oder der saved set ID
                   entsprechen, wird die effektive Kennung auf diesen Wert
                   gesetzt.
                   Sonst ist das Setzen der Kennung nicht erlaubt.
   "seteuid/gid" : Falls der aufrufende Prozess Superuser-Rechte hat, oder
                   wenn <euid> bzw <egid> gleich der realen oder saved set
                   user/group ID ist, wird die effektive Kennung auf diesen
                   Wert gesetzt. Die saved set ID wird nicht veraendert.
   "setreuid/gid": Es koennen die reale und effektive Kennung gleichzeitig
                   auf verschiedene Werte gesetzt werden. Ist ein Wert
                   gleich -1, wird die entsprechende Kennung nicht
                   veraendert. Hat der aufrufende Prozess Superuser-Rechte,
                   koennen die Kennungen beliebig gesetzt werden, sonst kann
                   nur entweder die reale Kennung auf die effektive Kennung
                   oder aber die effektive Kennung auf die reale Kennung
                   oder die saved set ID gesetzt werden.
                   Wenn die reale Kennung geaendert wird oder die effektive
                   Kennung auf einen Wert ungleich der realen Kennung
                   gesetzt wird, wird die saved set ID auf die neue
                   effektive Kennung gesetzt.

   Die realen Kennungen identifizieren den Benutzer bzw. die Gruppe.

   Der Zugriff auf Systemresourcen (z.B. Dateien) wird ueber die effektiven
   Kennungen geregelt, die normalerweise gleich den realen Kennungen sind,
   es sei denn, es wird ein Programm ausgefuehrt, das die ``set user ID''
   oder ``set group ID'' Bits im Modusfeld gesetzt hat, wodurch der
   ausfuehrende Prozess als effektive Kennung die Kennung des Dateibesitzers
   (z.B. ``Superuser'') und damit auch seine Zugriffsberechtigung bekommt.
   Die realen Kennungen werden hierdurch aber nicht beeinflusst.

   Falls die effektiven Kennungen eines set user/group ID-Programms gemerkt
   werden ("sysconf(_SC_SAVED_IDS)"), kann ein Prozess zeitweilig die
   effektiven Kennungen auf die realen setzen und dann wieder zurueck auf
   die urspruenglichen, was sonst nur fuer den Superuser moeglich waere.

   GEMDOS: Die Kennung ist immer gleich Null (``Superuser'').
     MiNT: Bei "set[r]euid/gid()" kann es Unterschiede dabei geben, wann was
           gesetzt werden darf und wird.
 *)


PROCEDURE getgroups ((* EIN/ -- *) size : int;
                     (* EIN/ -- *) list : GroupArrayPtr ): int;

(* Liefert die Kennungen der zusaetzlich verfuegbaren Gruppen fuer den
   aufrufenden Prozess. <size> ist die maximale Anzahl der Gruppenkennungen,
   fuer die in <list>^ Platz ist. Als Funktionswert wird die tatsaechliche
   Anzahl der Kennungen geliefert. Falls <size> groesser als Null aber
   kleiner als die Anzahl der verfuegbaren Gruppenkennungen ist, passiert
   nichts und es wird ein Fehler gemeldet (ret = -1). Falls <size> gleich
   Null ist, wird die Anzahl der verfuegbaren Gruppenkennungen geliefert,
   ohne sie in <list> zu speichern.
   Es ist nicht festgelegt, ob die augenblickliche effektive Gruppenkennung
   in der Liste enthalten ist!

   GEMDOS/MiNT: Die augenblickliche Gruppenkennung ist nicht enthalten.
 *)


(* Nicht POSIX: *)
PROCEDURE setgroups ((* EIN/ -- *) size : int;
                     (* EIN/ -- *) list : GroupArrayPtr ): int;

(* Setzt die Kennungen der zusaetzlich verfuegbaren Gruppen fuer den
   aufrufenden Prozess. <size> ist die Anzahl der Gruppenkennungen in
   <list>^. Die effektive Benutzerkennung muss die des Superusers sein.

   GEMDOS: Liefert immer -1 (errno = 'ENOSYS').
     MiNT: Keine Besonderheiten.
 *)


(* Nicht POSIX: *)
PROCEDURE initgroups ((* EIN/ -- *) REF user    : ARRAY OF CHAR;
                      (* EIN/ -- *)     basegid : gidT          ): int;

(* Ermittelt aus /etc/group oder einer anderen Datei, in der die
   entsprechenden Daten stehen, die Gruppenkennungen, auf die der Benutzer
   <user> Zugriff hat, und setzt sie mittels "setgroups()". <basegid> wird
   automatisch beruecksichtigt.
   Die effektive Benutzerkennung muss die des Superusers sein.
   Da die "getgr()"-Funktionen aus 'sys' verwendet werden, wird der hierbei
   verwendete interne Puffer veraendert.

   GEMDOS/MiNT: Es werden maximal soviele Gruppenkennungen beruecksichtigt
                wie "sysconf(_SC_NGROUPS_MAX)" angibt.
 *)


PROCEDURE getpgrp ( ): pidT;

PROCEDURE setpgid ((* EIN/ -- *) pid  : pidT;
                   (* EIN/ -- *) pgid : pidT ): int;

PROCEDURE setsid ( ): pidT;

(* "getpgrp()": ermittelt die Prozessgruppe des aufrufenden Prozesses.
   "setpgid()": Setzt die Prozessgruppe des Prozesses <pid> auf den Wert
                <pgid>. Wenn <pid> oder <pgid> Null sind, wird stattdessen
                die Prozesskennung des aufrufenden Prozesses eingesetzt.
   "setsid()" : Der aufrufende Prozess verliert sein Kontrollterminal (von
                dem aus bestimmte Tasten Signale ausloesen koennen - fuer
                ``job control''), und wird zum einzigen Mitglied einer
                neuen Prozessgruppe, die das einzige Mitglied einer neuen
                ``Session'' ist. Die Prozessgruppe ist die Prozesskennung
                des aufrufenden Prozesses. Wenn der Prozess bereits eine
                Prozessgruppe anfuehrt (Kennung der Prozesses ist auch
                Kennung der Prozessgruppe), darf die Funktion nicht
                ausgefuehrt werden.

   GEMDOS: "getpgrp()" liefert den gleichen Wert wie "getpid()". Fuer <pid>
           und <pgid> bei "setpgid()" sind nur Null und der Wert von
           "getpid()" erlaubt. "setsid()" liefert immer -1 (errno = 'EPERM')
     MiNT: "getpgrp()" und "setpgid()": Keine Besonderheiten.
           "setsid()": MiNT unterstuetzt keine Sessions. Es wird lediglich
           ein setpgid(0,0) ausgefuehrt.
           Der Verlust des Kontrollterminals wird simuliert, indem das
           Handle -1 auf u:\dev\null umgelenkt wird.
 *)


PROCEDURE nice ((* EIN/ -- *) delta : int ): int;

PROCEDURE renice ((* EIN/ -- *) pid   : pidT;
                  (* EIN/ -- *) delta : int  ): int;

(* "renice()" veraendert die Prioritaet des Prozesses mit der Kennung
   <pid> um <delta>. Dabei bedeuten positive Werte fuer <delta>, dass
   die Prioritaet verringert wird (der Prozess wird mehr 'nice'), negative
   Werte, dass die Prioritaet erhoeht wird. Zurueckgegeben wird die
   neue Prioritaet des Prozesses, wobei das Vorzeichen jetzt die
   entgegengesetzte Bedeutung hat (positive Werte: hohe Prioritaet), oder
   -1, wenn ein Fehler aufgetreten ist.
   "nice()" veraendert die Prioritaet des aktuellen Prozesses und ist
   aequivalent zu renice(getpid(), delta).

   GEMDOS: Tut nichts. <pid> muss die aktuelle Prozesskennung sein.
     MiNT: keine Besonderheiten.
 *)


PROCEDURE fork ( ): pidT;

(* Der aktuelle Prozess wird in zwei gleichartige Prozesse aufgeteilt, aber
   mit getrenntem Speicherbereich und unterschiedlichen Prozesskennungen.
   Konnte der neue Prozess nicht erzeugt werden, wird dem aufrufenden
   Prozess ein Fehler gemeldet; sonst liefert die Funktion dem aufrufenden
   (= Parent) die (positive) Prozesskennung des neuen Prozesses (= Child)
   und dem neuen Prozess eine Null.
   Die beiden Prozesse laufen parallel weiter.

   GEMDOS: Liefert immer -1 (errno = 'ENOSYS').
     MiNT: Bei Versionen vor FreeMiNT 1.12.6 bleibt der Elternprozess
           blockiert bis der Kindprozess sich beendet oder "exec*()"
           ausgefuehrt hat.

   Vor Anwendung dieser Prozedur unbedingt THREADS.TXT lesen!
 *)


(* Nicht POSIX: *)
PROCEDURE vfork ( ): pidT;

(* Funktion wie "fork()", die Prozesse benutzen aber denselben
   Speicherbereich, insbesondere benutzen sie auch denselben Stack.
   Der Elternprozess bleibt auf jeden Fall blockiert bis der Kindprozess ein
   "Exit()" oder "exec*()" ausgefuehrt hat.

   Der neue Prozess muss(!) explizit mit "Exit()" oder "exec*()" beendet
   werden; er darf nicht implizit durch das Ende des Hauptprogramms beendet
   werden.

   Bei der Anwendung der Funktion ist etwas Vorsicht geboten:
   Zwischen dem "vfork()" und dem "Exit()"oder "execv*()" des Kindprozesses
   darf der Stackpointer nicht hochgesetzt werden, etwa durch einen Aufruf
   von "vfork()" innerhalb einer WITH- oder FOR-Anweisung oder innerhalb
   einer Prozedur, und dem Aufruf von "execv*()" ausserhalb, denn sonst
   ueberschreibt der Kindprozess fuer den Elternprozess wichtige
   Informationen, wenn er etwas auf dem Stack ablegt; und das geschieht
   spaetestens beim Terminieren des Kindprozesses oder dem Ueberlagern mit
   einem neuen Programm durch "execv*()", denn die Parameter werden auf
   dem Stack abgelegt. Das Ergebnis ist mit Sicherheit ein Absturz, vor
   allem, wenn "vfork()" innerhalb einer Prozedur aufgerufen wird -- dann
   fehlt naemlich die Return-Adresse fuer den Elternprozess.

   GEMDOS/MiNT: Die Gruende fuer die Schwierigkeiten sind allerdings bei
   GEMDOS und MiNT unterschiedlich:
   Unter MiNT wird fuer Eltern- und Kindprozess tatsaechlich derselbe Stack
   benutzt, mit den eben erwaehnten Folgen. Unter GEMDOS wird "vfork()"
   durch "tfork()" emuliert, wodurch der Kindprozess einen anderen Stack
   erhaelt, und folglich keine vorher auf dem Stack abgelegte Werte mehr
   gueltig sind.

   Vor Anwendung dieser Prozedur unbedingt THREADS.TXT lesen!

   Aufrufe duerfen nicht geschachtelt werden, d.h. innerhalb eines mit
   "vfork()" erzeugten Unterprozesses darf kein weiterer Aufruf dieser
   Prozedur erfolgen!
 *)


(* Nicht POSIX: *)
PROCEDURE SetStacksize ((* EIN/ -- *) stacksize : CARDINAL );

(* Nicht POSIX: *)
PROCEDURE tfork ((* EIN/ -- *) func : ThreadProc;
                 (* EIN/ -- *) arg  : ANYLONG    ): int;

(* "tfork()" generiert aus einer Funktion vom Typ 'ThreadProc' einen neuen
   Prozess mit eigener Prozesskennung und eigenem Stack, der sonstige
   Adressraum ist aber derselbe wie beim aufrufenden Prozess, d.h. auf
   globale Variablen wird gemeinsam zugegriffen. Deshalb ist auch Vorsicht
   bei der Benutzung von Bibliotheksfunktionen innerhalb des neuen Prozesses
   (``Thread'') geboten. Insbesondere bei Benutzung der Speicherverwaltung
   muss eine Registrierung des Threads mit "mem.Register*()" erfolgen.
   Mit "SetStacksize()" laesst sich die Stackgroesse des neuen Prozesses
   festlegen; sie kann aber nicht kleiner als 'MINSTACKSIZE' werden.

   Vor Anwendung dieser Prozedur unbedingt THREADS.TXT lesen!
 *)


PROCEDURE execve ((* EIN/ -- *) prg  : StrPtr;
                  (* EIN/ -- *) argv : StrArray;
                  (* EIN/ -- *) envp : StrArray ): int;

PROCEDURE execv ((* EIN/ -- *) prg  : StrPtr;
                 (* EIN/ -- *) argv : StrArray ): int;

PROCEDURE execvp ((* EIN/ -- *) prg  : StrPtr;
                  (* EIN/ -- *) argv : StrArray ): int;

(* Ersetzt den aufrufenden Prozess durch einen neuen, der aus dem Programm
   gebildet wird, dessen Dateiname <prg>^ ist. <args> und <env> sind Felder
   aus Zeigern auf Parameter und Environment-Variablen, so dass der neue
   Prozess diese als Elemente der Kommandozeile bzw. als Environment-
   Variablen holen kann.
   Ist <envp> = NULL, wird das augenblickliche Environment vererbt.
   Falls ein Fehler auftritt, wird ein negativer Wert zurueckgeliefert,
   andernfalls kehrt die Funktion NICHT zum Aufrufer zurueck, da dieser
   durch das neue Programm ersetzt wurde.
   Mit der Kombination "fork()" & "execv*()" koennen somit neue Prozesse
   gestartet werden.
   Falls die Datei <prg>^ das ``set user/group ID''-Bit gesetzt hat,
   bekommt der Prozess als effektive Kennung die Kennung des Dateibesitzers.

   Spezielle Versionen von "execve()":

   "execv()" : es wird das augenblickliche Environment vererbt.
   "execvp()": das augenblickliche Environment wird vererbt, und <prg>^ wird
               in allen in PATH angegebenen Verzeichnissen gesucht, wenn es
               nicht bereits selbst eine Pfadangabe enthaelt.

   GEMDOS: Funktioniert, ist aber ohne "fork()" nicht sinnvoll.
     MiNT: Keine Besonderheiten.

   Die Kommandozeilenparameter werden dem neuen Programm ueber die normale
   Kommandozeile in der BasePage und das ARGV-Verfahren (einschliesslich
   Erweiterung fuer leere Argumente) mitgeteilt.
   Falls <prg>^ bei "execvp()" keine Extension hat, werden die in der
   Environmentvariablen 'TOSEXT' angegebenen Extensionen ausprobiert, und
   zum Schluss automatisch die Datei ohne Extension, wenn dies nicht bereits
   in 'TOSEXT' angegeben war. Falls 'TOSEXT' nicht existiert, werden die
   Extensionen aus 'DosDir.TOSEXT' probiert.
 *)


PROCEDURE waitpid ((* EIN/ -- *)     pid     : pidT;
                   (* -- /AUS *) VAR state   : WaitVal;
                   (* EIN/ -- *)     options : WaitOptions ): pidT;

(* Wartet auf die Beendigung oder das Stoppen eines vom aufrufenden Prozess
   gestarteten Unterprozesses. Als Funktionswert wird die 'pid' des
   entsprechenden Prozesses oder -1 bei einem Fehler (z.B. wenn keine
   Prozesse gestartet wurden) zurueckgeliefert. In <state> steht kodiert
   die Ursache der Beendigung oder des Stoppens (siehe Definition von
   'WaitVal').
   Mit <options> wird das Verhalten der Prozedur festgelegt (siehe Def. von
   'WaitOptions').
   Mit <pid> wird festgelegt, welche Unterprozesse beruecksichtigt werden
   sollen:

     <pid> = -1: alle Unterprozesse
     <pid> >  0: nur Unterprozess mit dieser Prozesskennung
     <pid> =  0: alle Unterprozesse mit der gleichen Prozessgruppenkennung
                 wie der aufrufende Prozess
     <pid> < -1: alle Unterprozesse, die <pid> als Prozessgruppenkennung
                 haben

   GEMDOS: Wenn <pid> = 0 oder -1, wird die Prozesskennung des letzten mit
           "tfork()" gestarteten Unterprozesses geliefert, sonst wird immer
           -1 geliefert (errno = 'ECHILD').
     MiNT: Keine Besonderheiten.
 *)


PROCEDURE wait ((* -- /AUS *) VAR state : WaitVal ): pidT;

(* Aequivalent zu "waitpid(-1, state, WaitOptions{})", es werden also keine
   gestoppten Unterprozesse beruecksichtigt.

   GEMDOS: siehe "waitpid()".
     MiNT: Keine Besonderheiten.
 *)


(* Nicht POSIX: *)
PROCEDURE wait3 ((* -- /AUS *) VAR state   : WaitVal;
                 (* EIN/ -- *)     options : WaitOptions;
                 (* -- /AUS *) VAR usage   : RusageRec   ): pidT;

(* Variante von "waitpid()": <state> und <options> sind entsprechend, es
   werden alle Unterprozesse beruecksichtigt, und in <usage> werden
   Informationen ueber die vom beendeten Unterprozess benoetigten Resourcen
   abgelegt.

   GEMDOS/MiNT: In <usage> enthalten nur die ersten beiden Felder einen
                sinnvollen Wert, sonst siehe "waitpid()".
 *)


(* Nicht POSIX: *)
PROCEDURE wait4 ((* EIN/ -- *)     pid     : pidT;
                 (* -- /AUS *) VAR state   : WaitVal;
                 (* EIN/ -- *)     options : WaitOptions;
                 (* -- /AUS *) VAR usage   : RusageRec   ): pidT;

(* Falls <pid> gleich Null, entspricht die Funktion "wait3()". Falls <pid>
   groesser als Null ist, wird nur der Unterprozess mit dieser Kennung
   beruecksichtigt.
 *)


PROCEDURE WIFEXITED   ((* EIN/ -- *) state : WaitVal ): BOOLEAN;
PROCEDURE WEXITSTATUS ((* EIN/ -- *) state : WaitVal ): int;

PROCEDURE WIFSIGNALED ((* EIN/ -- *) state : WaitVal ): BOOLEAN;
PROCEDURE WTERMSIG    ((* EIN/ -- *) state : WaitVal ): int;

PROCEDURE WIFSTOPPED ((* EIN/ -- *) state : WaitVal ): BOOLEAN;
PROCEDURE WSTOPSIG   ((* EIN/ -- *) state : WaitVal ): int;

(* Diese Funktionen sind bei POSIX als Makros definiert.

   "WIFEXITED()"  : TRUE, genau dann, wenn der Unterprozess ``normal''
                    beendet wurde, d.h. nicht durch ein Signal.
   "WEXITSTATUS()": Falls "WIFEXITED()" = TRUE, wird der Returncode des
                    Unterprozesses geliefert. Dabei werden aber nur die
                    unteren 8 Bit des Returncodes benutzt und
                    vorzeichenrichtig erweitert.
                    Wenn "WIFEXITED()" = FALSE, ist der Funktionswert nicht
                    definiert !
   "WIFSIGNALED()": TRUE, genau dann, wenn der Unterprozess durch ein Signal
                    beendet wurde.
   "WTERMSIG()"   : Falls "WIFSIGNALED()" = TRUE, wird der Ordinalwert des
                    beendenden Signals geliefert.
                    Wenn "WIFSIGNALED()" = FALSE,ist der Funktionswert nicht
                    definiert !
   "WIFSTOPPED()" : TRUE, genau dann, wenn der Unterprozess momentan
                    gestoppt, aber nicht beendet ist (``Job Control'').
   "WSTOPSIG()"   : Falls "WIFSTOPPED()" = TRUE, wird der Ordinalwert des
                    Signals, das den Prozess gestoppt hat, geliefert.
                    Wenn "WIFSTOPPED()" = FALSE, ist der Funktionswert nicht
                    definiert !

   Es sollten ausschliesslich diese Funktionen benutzt werden, um einen
   Status vom Typ 'WaitVal' zu analysieren.

   GEMDOS: keine Besonderheiten.
     MiNT: -""-
 *)


(* Nicht POSIX: *)
PROCEDURE FDZERO ((* -- /AUS *) VAR fdset : fdSet );

PROCEDURE FDSET ((* EIN/ -- *)     fd    : int;
                 (* -- /AUS *) VAR fdset : fdSet );

PROCEDURE FDCLR ((* EIN/ -- *)     fd    : int;
                 (* -- /AUS *) VAR fdset : fdSet );

PROCEDURE FDISSET ((* EIN/ -- *) fd    : int;
                   (* EIN/ -- *) fdset : fdSet ): BOOLEAN;

(* Funktionen zur Manipulation von Variablen des Typs 'fdSet'.
   Es MUESSEN(!) ausschliesslich diese Funktionen benutzt werden, um
   Variablen vom Typ 'fdSet' zu manipulieren, da die Zuordnung von Elementen
   zur unterliegenden Bitrepraesentation NICHT festgelegt ist!
   Die Funktionen sind unter *IX als Makros definiert.

   "FDZERO"  : Loescht die Menge <fdSet>.
   "FDSET"   : Setzt die Dateikennung <fd> in <fdSet>.
   "FDCLR"   : Loescht die Dateikennung <fd> in <fdSet>.
   "FDISSET" : Testet, ob die Dateikennung <fd> in <fdSet> gesetzt ist.

   GEMDOS: Keine Besonderheiten.
     MiNT: -""-
 *)


(* Nicht POSIX: *)
PROCEDURE select ((* EIN/ -- *) width     : int;
                  (* EIN/ -- *) readfds   : FdSetPtr;
                  (* EIN/ -- *) writefds  : FdSetPtr;
                  (* EIN/ -- *) exceptfds : FdSetPtr;
                  (* EIN/ -- *) timeout   : TimevalPtr ): int;

(* Mithilfe dieser Prozedur kann auf das Eintreten bestimmter Bedingungen
   bei geoeffneten Dateien unter Einhaltung eines Timeouts gewartet werden.

   Die Dateien werden als Elemente von Mengen angegeben, wobei die
   Ordnungszahl jedes Elements einer Dateikennung entspricht, also z.B.
   Element 0 fuer die Standardeingabe. Es werden nur die Dateikennungen
   beachtet, deren Wert kleiner als <width> ist; Ist <width> groesser oder
   gleich FDSETSIZE, werden alle Kennungen beachtet. Falls kein Fehler
   auftritt, werden in den angegebenen Mengen ausschliesslich die
   Dateikennungen gesetzt, bei denen die Bedingungen eingetreten sind,
   die anderen Elemente werden geloescht; die Ergebnismengen sind immer
   Teilmengen der urspruenglichen Mengen. <readfds>^ repraesentiert die
   Menge der Dateien, bei denen auf das Bereitwerden zum Lesen gewartet
   werden soll, <writefds>^ repraesentiert die Dateien, bei denen auf das
   Bereitwerden zum Schreiben gewartet werden soll und <exceptfds>^
   repraesentiert die Dateien, bei denen auf das Eintreten einer
   Ausnahmebedingung gewartet werden soll.

   Die Funktion kehrt zurueck, sobald mindestens bei einer Datei die
   angegebene Bedingung eingetreten oder der Timeout abgelaufen ist. Als
   Funktionswert wird die Anzahl der bereiten Kennungen geliefert (also die
   Anzahl der in allen Mengen zusammen enthaltenen Elemente) oder Null,
   falls der Timeout abgelaufen (dann sind auch alle Mengen leer) ist oder
   -1, falls ein Fehler aufgetreten ist (dann ist der Inhalt der Mengen
   undefiniert). Ist einer der Zeiger gleich NULL, wird er nicht beachtet.
   In <timeout> ist angegeben, wie lange maximal auf das Bereitwerden der
   angegebenen Dateien gewartet wird, bevor die Funktion von selbst
   zurueckkehrt. Ist <timeout> gleich NULL, wird ohne Timeout auf das
   Bereitwerden der angegebenen Dateien gewartet; ist <timeout>^ gleich
   Null, wird nur der augenblickliche Zustand der Dateien abgefragt, und die
   Funktion kehrt sofort zurueck -- dies kann fuer ein ``Pollen'' benutzt
   werden.

   GEMDOS: In <readfds>^ koennen nur die Kennungen 0 und 2, in <writefds>^
           nur die Kennungen 1 und 2 getestet werden. <timeout> sollte nicht
           NULL oder zu gross sein, da die Funktion keine Bildschirmausgaben
           macht und deshalb nicht abgebrochen werden kann.
     MiNT: Keine Besonderheiten.
 *)


PROCEDURE times ((* -- /AUS *) VAR buf : TmsRec ): clockT;

(* Liefert Informationen ueber die vom Prozess und seine Unterprozesse
   verbrauchte Zeit (siehe Def. von 'TmsRec'); die Zeiten sind in der
   Einheit 'sys.ClkTck's / Sekunde angegeben.
   Als Funktionswert wird die vergangene Zeit seit einem beliebigen, aber
   festen Zeitpunkt in der Vergangenheit zurueckgeliefert; durch mehrmaligen
   Aufruf der Funktion koennen so Zeitdifferenzen gemessen werden. Auch hier
   ist die Einheit 'sys.ClkTck's / Sekunde.

   GEMDOS: Die im System verbrachte Zeit kann nicht festgestellt werden.
     MiNT: Keine Besonderheiten.
 *)


(* Nicht POSIX: *)
PROCEDURE clock ( ): clockT;

(* Liefert die (Prozessor)Zeit, die der aufrufende Prozess bisher verbraucht
   hat, in der Einheit 'sys.ClkTck's / Sekunde.

   GEMDOS/MiNT: Die Summe von 'TmsRec.tmsUtime' und 'TmsRec.tmsStime' eines
                "times()"-Aufrufs wird zurueckgeliefert.
 *)



(*===========================================================================*)
(* Die folgenden Funktionen haben NICHTS mit POSIX oder *IX zu tun, sind     *)
(* jedoch fuer "PCDOS" und "GEMDOS" notwendig, um ein *IX-like               *)
(* Programmstarten zu ermoeglichen. Fuer *IX sind die Funktionen immerhin    *)
(* bequem.                                                                   *)
(*===========================================================================*)

TYPE
  SpawnMode = (
    pOVERLAY, (* Aufrufer wird durch neuen Prozess ersetzt (= exec)*)
    pNOWAIT,  (* neuer Prozess laeuft parallel zum erzeugenden Prozess *)
    pWAIT    (* Erzeugender Prozess wird unterbrochen *)
  );

(*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*)

PROCEDURE spawnve ((* EIN/ -- *) mode : SpawnMode;
                   (* EIN/ -- *) prg  : StrPtr;
                   (* EIN/ -- *) argv : StrArray;
                   (* EIN/ -- *) envp : StrArray  ): int;

(* Diese Prozedur fasst die Prozeduren "fork()", "execve()" und "waitpid()"
   auf unterschiedliche Weise zusammen.

   <mode> = pOVERLAY: "spawnve()" entspricht "execve()"
   <mode> = pNOWAIT : es wird ein "fork()" ausgefuehrt, und dann <prg>^ mit
                      "execve()" gestartet.
                      Rueckgabewert ist entweder -1 und 'errno' wird gesetzt
                      falls beim Aufruf von "spawnve()" etwas schiefgeht,
                      oder die positive 'pid' des erzeugten Prozesses.
   <mode> = pWAIT   : wie pNOWAIT, aber es wird mit "waitpid()" auf das Ende
                      des erzeugten Prozesses gewartet. Falls beim Aufruf
                      von "spawnve()" etwas schiefgeht, ist der Rueckgabewert
                      gleich -1 und 'errno' wird gesetzt, ansonsten
                      wird 'errno' auf Null gesetzt(!), und die unteren 16
                      Bit des Funktionswertes sind vom Typ 'WaitVal'. Da im
                      oberen Byte von 'WaitVal' der Returncode des aufgeru-
                      fenen Prozesses enthalten ist (falls der Prozess nicht
                      durch ein Signal gestoppt oder terminiert wurde) und
                      dieser auch negativ sein kann, und 'WaitVal' fuer den
                      Funktionswert auch vorzeichenrichtig auf int-Groesse
                      erweitert wird, muss ein Fehler von "spawnve()"
                      durch Inspizieren von 'errno' ermittelt werden:

                        ret := spawnve(pWAIT,...);
                        IF errno # 0 THEN
                          (* "spawnve()"-Fehler *)
                        ...

   GEMDOS/MiNT:
             Diese Prozedur laeuft fuer <mode> = 'pWAIT' oder 'pOVERLAY'
             auch ohne MiNT.
             ACHTUNG: Es wird wirklich nur das Programm ueber 'Pexec'
             gestartet, es wird weder der Bildschirm geloescht, die Maus
             ausgeschaltet, noch der Critical-Error-Handler umgesetzt! Ehe
             man jetzt aber selbst daran geht dies zu tun, sollte man daran
             denken, dass es zum Chaos fuehrt, falls Prozesse parallel laufen
             (unter MiNT), da es nur einen Bildschirm, eine Maus und einen
             Error-Handler (vor MiNT 0.95) gibt! Das Problem laesst sich nur
             loesen, wenn TOS-Programme ihre Ausgaben in GEM-Fenster
             schreiben, wie dies unter MultiTOS der Fall ist.
             Wenn ein (Unter)Prozess keine Bidschirmausgaben macht, ist dies
             natuerlich kein Problem.
             Ohne MiNT wird Pexec mit Modus 0 (pWAIT) gestartet, sonst
             sind auch Modus 100 (pNOWAIT) und 200 (pOVERLAY) moeglich.
             ("MiNT"-Unterstuetzung.)
 *)


PROCEDURE spawnv ((* EIN/ -- *) mode : SpawnMode;
                  (* EIN/ -- *) prg  : StrPtr;
                  (* EIN/ -- *) argv : StrArray  ): int;

PROCEDURE spawnvp ((* EIN/ -- *) mode : SpawnMode;
                   (* EIN/ -- *) prg  : StrPtr;
                   (* EIN/ -- *) argv : StrArray  ): int;

(* Verhalten sich zu "spawnve()" wie "execv()" und "execvp()" zu "execve()" *)

END proc.
