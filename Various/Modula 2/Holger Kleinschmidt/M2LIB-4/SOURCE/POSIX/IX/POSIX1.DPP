DEFINITION MODULE POSIX1;
__DEF_SWITCHES__
#ifdef HM2
#ifdef __LONG_WHOLE__
(*$!i+: Modul muss mit $i- uebersetzt werden! *)
(*$!w+: Modul muss mit $w- uebersetzt werden! *)
#else
(*$!i-: Modul muss mit $i+ uebersetzt werden! *)
(*$!w-: Modul muss mit $w+ uebersetzt werden! *)
#endif
#endif
#if no_reexport
#  error *** compiler does not allow reexporting!
#endif
(****************************************************************************)
(* Das Modul fasst alle POSIX.1-Aufrufe, -Typen und -Konstanten und ein paar*)
(* weitere Definitionen, die zwar nicht POSIX sind, aber fuer die Ausfueh-  *)
(* rung der Prozeduren benoetigt werden, aus den unterliegenden Modulen zu- *)
(* sammen. Fuer Leute, die lieber aus einem einzigen Modul importieren wol- *)
(* len, und deren Compiler den Reexport erlaubt.                            *)
(* Fuer die Beschreibung der Funktionen sollten die entsprechenden Defini-  *)
(* tionsmodule konsultiert werden.                                          *)
(* -------------------------------------------------------------------------*)
(* 12-Jul-96, Holger Kleinschmidt & Ulrich Kaiser                           *)
(****************************************************************************)

FROM types IMPORT int;
#if !ISO_proc_const
FROM SYSTEM IMPORT ADDRESS;
FROM PORTAB IMPORT UNSIGNEDWORD;
FROM types  IMPORT signedlong,StrPtr,StrArray;
#endif
IMPORT types,er,DosSystem,loc,tim,file,dir,proc,sys,term,sig,jump;

(*===========================================================================*)
(* Modul: 'er'                                                               *)
(*===========================================================================*)

PROCEDURE errno():int;
(* Diese Prozedur liefert den Wert von 'er.errno', da 'errno' als Variable
   nicht exportiert werden kann. Dadurch kann zwar 'errno' aus diesem Modul
   importiert werden, da es aber eine Funktion ist, gibt es sowohl einen
   syntaktischen Unterschied zu einer Variable ("errno()" statt 'errno') als
   auch einen semantischen (Der Wert kann nur abgefragt, aber nicht
   veraendert werden).
 *)

CONST
  E2BIG        = er.E2BIG;
  EACCES       = er.EACCES;
  EAGAIN       = er.EAGAIN;
  EBADF        = er.EBADF;
  EBUSY        = er.EBUSY;
  ECHILD       = er.ECHILD;
  EDEADLK      = er.EDEADLK;
  EDOM         = er.EDOM;
  EEXIST       = er.EEXIST;
  EFAULT       = er.EFAULT;
  EFBIG        = er.EFBIG;
  EINTR        = er.EINTR;
  EINVAL       = er.EINVAL;
  EIO          = er.EIO;
  EISDIR       = er.EISDIR;
  EMFILE       = er.EMFILE;
  EMLINK       = er.EMLINK;
  ENAMETOOLONG = er.ENAMETOOLONG;
  ENFILE       = er.ENFILE;
  ENODEV       = er.ENODEV;
  ENOENT       = er.ENOENT;
  ENOEXEC      = er.ENOEXEC;
  ENOLCK       = er.ENOLCK;
  ENOMEM       = er.ENOMEM;
  ENOSPC       = er.ENOSPC;
  ENOSYS       = er.ENOSYS;
  ENOTDIR      = er.ENOTDIR;
  ENOTEMPTY    = er.ENOTEMPTY;
  ENOTTY       = er.ENOTTY;
  ENXIO        = er.ENXIO;
  EPERM        = er.EPERM;
  EPIPE        = er.EPIPE;
  ERANGE       = er.ERANGE;
  EROFS        = er.EROFS;
  ESPIPE       = er.ESPIPE;
  ESRCH        = er.ESRCH;
  EXDEV        = er.EXDEV;
  ELOOP        = er.ELOOP;

(*===========================================================================*)
(* Modul: 'types'                                                            *)
(*===========================================================================*)

CONST
  NULL = types.NULL;

CONST
  PosixArgMax      = types.PosixArgMax;
  PosixChildMax    = types.PosixChildMax;
  PosixLinkMax     = types.PosixLinkMax;
  PosixMaxCanon    = types.PosixMaxCanon;
  PosixMaxInput    = types.PosixMaxInput;
  PosixNameMax     = types.PosixNameMax;
  PosixNGroupsMax  = types.PosixNGroupsMax;
  PosixOpenMax     = types.PosixOpenMax;
  PosixPathMax     = types.PosixPathMax;
  PosixPipeBuf     = types.PosixPipeBuf;
  PosixStreamMax   = types.PosixStreamMax;
  PosixSsizeMax    = types.PosixSsizeMax;

CONST
  ClkTck     = types.ClkTck;
  NGroupsMax = types.NGroupsMax;
  SsizeMax   = types.SsizeMax;

TYPE
  uidT   = types.uidT;
  gidT   = types.gidT;
  inoT   = types.inoT;
  timeT  = types.timeT;
  offT   = types.offT;
  sizeT  = types.sizeT;
  ssizeT = types.ssizeT;
  devT   = types.devT;
  nlinkT = types.nlinkT;
  pidT   = types.pidT;
  clockT = types.clockT;

TYPE
  FileMode = types.FileMode;
  modeT    = types.modeT;

CONST
  sIRWXU = types.sIRWXU;
  sIRWXG = types.sIRWXG;
  sIRWXO = types.sIRWXO;

(*===========================================================================*)
(* Modul: 'tim'                                                              *)
(*===========================================================================*)
(*
VAR
  tzname : TZstr; -- kann als Variable nicht reexportiert werden.
*)

TYPE
  TmRec = tim.TmRec;
  TmPtr = tim.TmPtr;

#if ISO_proc_const
CONST
  tzset     = tim.tzset;
  localtime = tim.localtime;
  gmtime    = tim.gmtime;
  asctime   = tim.asctime;
  ctime     = tim.ctime;
  mktime    = tim.mktime;
  strftime  = tim.strftime;
#else
VAR (* READ ONLY! *)
  tzset     : PROCEDURE;
  localtime : PROCEDURE(timeT):TmPtr;
  gmtime    : PROCEDURE(timeT):TmPtr;
  asctime   : PROCEDURE(TmPtr):StrPtr;
  ctime     : PROCEDURE(timeT):StrPtr;
  mktime    : PROCEDURE(TmPtr):timeT;
  strftime  : PROCEDURE(StrPtr,sizeT,StrPtr,TmPtr):sizeT;
#endif

(*===========================================================================*)
(* Modul: 'file'                                                             *)
(*===========================================================================*)

TYPE
  OpenModes = file.OpenModes;
  OpenMode  = file.OpenMode;

CONST
  oACCMODE = file.oACCMODE;

  oRDONLY  = file.oRDONLY;
  oWRONLY  = file.oWRONLY;
  oRDWR    = file.oRDWR;

TYPE
  SeekMode = file.SeekMode;

TYPE
  FDFlags  = file.FDFlags;
  FDFlag   = file.FDFlag;

TYPE
  FcntlCmd = file.FcntlCmd;

TYPE
  LockType = file.LockType;

TYPE
  FlockRec = file.FlockRec;

TYPE
  FcntlArg = file.FcntlArg;


TYPE
  PipeBuf = file.PipeBuf;

CONST
  StdinFileNo  = file.StdinFileNo;
  StdoutFileNo = file.StdoutFileNo;
  StderrFileNo = file.StderrFileNo;


#if ISO_proc_const
CONST
  creat     = file.creat;
  open      = file.open;
  open3     = file.open3;
  fcntl     = file.fcntl;
  close     = file.close;
  read      = file.read;
  write     = file.write;
  lseek     = file.lseek;
  ftruncate = file.ftruncate;
  dup       = file.dup;
  dup2      = file.dup2;
  pipe      = file.pipe;
#else
VAR (* READ ONLY! *)
  creat     : PROCEDURE(REF ARRAY OF CHAR,modeT):int;
  open      : PROCEDURE(REF ARRAY OF CHAR,OpenModes):int;
  open3     : PROCEDURE(REF ARRAY OF CHAR,OpenModes,modeT):int;
  fcntl     : PROCEDURE(int,FcntlCmd,VAR FcntlArg):int;
  close     : PROCEDURE(int):types.int;
  read      : PROCEDURE(int,ADDRESS,sizeT):ssizeT;
  write     : PROCEDURE(int,ADDRESS,sizeT):ssizeT;
  lseek     : PROCEDURE(int,offT,SeekMode):offT;
  ftruncate : PROCEDURE(int,offT):int;
  dup       : PROCEDURE(int):int;
  dup2      : PROCEDURE(int,int):int;
  pipe      : PROCEDURE(VAR PipeBuf):int;
#endif

(*===========================================================================*)
(* Modul: 'dir'                                                              *)
(*===========================================================================*)

TYPE
  StatRec = dir.StatRec;

TYPE
  AccessModes = dir.AccessModes;
  AccessMode  = dir.AccessMode;

CONST
  fOK = dir.fOK;

TYPE
  UTimBuf = dir.UTimBuf;
  UTimPtr = dir.UTimPtr;

TYPE
  DIR       = dir.DIR;
  DirentPtr = dir.DirentPtr;
  DirentRec = dir.DirentRec;

#if ISO_proc_const
CONST
  mkdir     = dir.mkdir;
  rmdir     = dir.rmdir;
  link      = dir.link;
  unlink    = dir.unlink;
  rename    = dir.rename;
  opendir   = dir.opendir;
  readdir   = dir.readdir;
  rewinddir = dir.rewinddir;
  closedir  = dir.closedir;
  symlink   = dir.symlink;
  readlink  = dir.readlink;
  chmod     = dir.chmod;
  chown     = dir.chown;
  utime     = dir.utime;
  stat      = dir.stat;
  fstat     = dir.fstat;
  lstat     = dir.lstat;
  access    = dir.access;
  sISCHR    = dir.sISCHR;
  sISDIR    = dir.sISDIR;
  sISBLK    = dir.sISBLK;
  sISREG    = dir.sISREG;
  sISFIFO   = dir.sISFIFO;
  sISLNK    = dir.sISLNK;
#else
VAR (* READ ONLY! *)
  mkdir     : PROCEDURE(REF ARRAY OF CHAR,modeT):int;
  rmdir     : PROCEDURE(REF ARRAY OF CHAR):int;
  link      : PROCEDURE(REF ARRAY OF CHAR,REF ARRAY OF CHAR):int;
  unlink    : PROCEDURE(REF ARRAY OF CHAR):int;
  rename    : PROCEDURE(REF ARRAY OF CHAR,REF ARRAY OF CHAR):int;
  opendir   : PROCEDURE(REF ARRAY OF CHAR):DIR;
  readdir   : PROCEDURE(DIR):DirentPtr;
  rewinddir : PROCEDURE(DIR);
  closedir  : PROCEDURE(VAR DIR):int;
  symlink   : PROCEDURE(REF ARRAY OF CHAR,REF ARRAY OF CHAR):int;
  readlink  : PROCEDURE(REF ARRAY OF CHAR,StrPtr,sizeT):int;
  chmod     : PROCEDURE(REF ARRAY OF CHAR,modeT):int;
  chown     : PROCEDURE(REF ARRAY OF CHAR,uidT,gidT):int;
  utime     : PROCEDURE(REF ARRAY OF CHAR,UTimPtr):int;
  stat      : PROCEDURE(REF ARRAY OF CHAR,VAR StatRec):int;
  fstat     : PROCEDURE(int,VAR StatRec):int;
  lstat     : PROCEDURE(REF ARRAY OF CHAR,VAR StatRec):int;
  access    : PROCEDURE(REF ARRAY OF CHAR,AccessModes):int;
  sISCHR    : PROCEDURE(modeT):BOOLEAN;
  sISDIR    : PROCEDURE(modeT):BOOLEAN;
  sISBLK    : PROCEDURE(modeT):BOOLEAN;
  sISREG    : PROCEDURE(modeT):BOOLEAN;
  sISFIFO   : PROCEDURE(modeT):BOOLEAN;
  sISLNK    : PROCEDURE(modeT):BOOLEAN;
#endif

(*===========================================================================*)
(* Modul: 'proc'                                                             *)
(*===========================================================================*)

TYPE
  WaitVal     = proc.WaitVal;
  WaitOption  = proc.WaitOption;
  WaitOptions = proc.WaitOptions;

TYPE
  TmsRec = proc.TmsRec;

TYPE
  GroupArrayRange = proc.GroupArrayRange;
  GroupArray      = proc.GroupArray;
  GroupArrayPtr   = proc.GroupArrayPtr;

#if ISO_proc_const
CONST
  umask       = proc.umask;
  chdir       = proc.chdir;
  getcwd      = proc.getcwd;
  getlogin    = proc.getlogin;
  getpid      = proc.getpid;
  getppid     = proc.getppid;
  getuid      = proc.getuid;
  getgid      = proc.getgid;
  geteuid     = proc.geteuid;
  getegid     = proc.getegid;
  setuid      = proc.setuid;
  setgid      = proc.setgid;
  seteuid     = proc.seteuid;
  setegid     = proc.setegid;
  getgroups   = proc.getgroups;
  getpgrp     = proc.getpgrp;
  setpgid     = proc.setpgid;
  setsid      = proc.setsid;
  fork        = proc.fork;
  execve      = proc.execve;
  execv       = proc.execv;
  execvp      = proc.execvp;
  waitpid     = proc.waitpid;
  wait        = proc.wait;
  WIFEXITED   = proc.WIFEXITED;
  WEXITSTATUS = proc.WEXITSTATUS;
  WIFSIGNALED = proc.WIFSIGNALED;
  WTERMSIG    = proc.WTERMSIG;
  WIFSTOPPED  = proc.WIFSTOPPED;
  WSTOPSIG    = proc.WSTOPSIG;
  times       = proc.times;
#else
VAR (* READ ONLY! *)
  umask       : PROCEDURE(modeT):modeT;
  chdir       : PROCEDURE(REF ARRAY OF CHAR):int;
  getcwd      : PROCEDURE(StrPtr,sizeT):StrPtr;
  getlogin    : PROCEDURE():StrPtr;
  getpid      : PROCEDURE():pidT;
  getppid     : PROCEDURE():pidT;
  getuid      : PROCEDURE():uidT;
  getgid      : PROCEDURE():gidT;
  geteuid     : PROCEDURE():uidT;
  getegid     : PROCEDURE():gidT;
  setuid      : PROCEDURE(uidT):int;
  setgid      : PROCEDURE(gidT):int;
  seteuid     : PROCEDURE(uidT):int;
  setegid     : PROCEDURE(gidT):int;
  getgroups   : PROCEDURE(int,GroupArrayPtr):int;
  getpgrp     : PROCEDURE():pidT;
  setpgid     : PROCEDURE(pidT,pidT):int;
  setsid      : PROCEDURE():pidT;
  fork        : PROCEDURE():pidT;
  execve      : PROCEDURE(StrPtr,StrArray,StrArray):int;
  execv       : PROCEDURE(StrPtr,StrArray):int;
  execvp      : PROCEDURE(StrPtr,StrArray):int;
  waitpid     : PROCEDURE(pidT,VAR WaitVal,WaitOptions):pidT;
  wait        : PROCEDURE(VAR WaitVal):pidT;
  WIFEXITED   : PROCEDURE(WaitVal):BOOLEAN;
  WEXITSTATUS : PROCEDURE(WaitVal):int;
  WIFSIGNALED : PROCEDURE(WaitVal):BOOLEAN;
  WTERMSIG    : PROCEDURE(WaitVal):int;
  WIFSTOPPED  : PROCEDURE(WaitVal):BOOLEAN;
  WSTOPSIG    : PROCEDURE(WaitVal):int;
  times       : PROCEDURE(VAR TmsRec):clockT;
#endif

(*===========================================================================*)
(* Modul: 'DosSystem'                                                        *)
(*===========================================================================*)

#if ISO_proc_const
CONST
  Exit = DosSystem.Exit;
#else
VAR (* READ ONLY! *)
  Exit : PROCEDURE(int);
#endif

(*===========================================================================*)
(* Modul: 'term'                                                             *)
(*===========================================================================*)

CONST
  LCtermid = term.LCtermid;

TYPE
  tciflag  = term.tciflag;
  tciflagT = term.tciflagT;

TYPE
  tcoflag  = term.tcoflag;
  tcoflagT = term.tcoflagT;

TYPE
  tccflag  = term.tccflag;
  tccflagT = term.tccflagT;

TYPE
  tclflag  = term.tclflag;
  tclflagT = term.tclflagT;

TYPE
  speedT = term.speedT;

TYPE
  ccT   = term.ccT;
  ccIdx = term.ccIdx;

CONST
  NCCS = term.NCCS;

CONST
  CR = term.CR;
  NL = term.NL;

TYPE
  TermiosRec = term.TermiosRec;

TYPE
  AttrActions = term.AttrActions;

TYPE
  FlowActions = term.FlowActions;

TYPE
  QueueTypes = term.QueueTypes;


#if ISO_proc_const
CONST
  isatty      = term.isatty;
  ttyname     = term.ttyname;
  ctermid     = term.ctermid;
  cfgetispeed = term.cfgetispeed;
  cfgetospeed = term.cfgetospeed;
  cfsetispeed = term.cfsetispeed;
  cfsetospeed = term.cfsetospeed;
  tcgetattr   = term.tcgetattr;
  tcsetattr   = term.tcsetattr;
  tcsendbreak = term.tcsendbreak;
  tcdrain     = term.tcdrain;
  tcflow      = term.tcflow;
  tcflush     = term.tcflush;
  tcgetpgrp   = term.tcgetpgrp;
  tcsetpgrp   = term.tcsetpgrp;
#else
VAR (* READ ONLY! *)
  isatty      : PROCEDURE(int):int;
  ttyname     : PROCEDURE(int):StrPtr;
  ctermid     : PROCEDURE(StrPtr):StrPtr;
  cfgetispeed : PROCEDURE(TermiosRec):speedT;
  cfsetispeed : PROCEDURE(VAR TermiosRec,speedT):int;
  cfgetospeed : PROCEDURE(TermiosRec):speedT;
  cfsetospeed : PROCEDURE(VAR TermiosRec,speedT):int;
  tcgetattr   : PROCEDURE(int,VAR TermiosRec):int;
  tcsetattr   : PROCEDURE(int,AttrActions,VAR TermiosRec):int;
  tcsendbreak : PROCEDURE(int,int):int;
  tcdrain     : PROCEDURE(int):int;
  tcflow      : PROCEDURE(int,FlowActions):int;
  tcflush     : PROCEDURE(int,QueueTypes):int;
  tcgetpgrp   : PROCEDURE(int):pidT;
  tcsetpgrp   : PROCEDURE(int,pidT):int;
#endif

(*===========================================================================*)
(* Modul: 'sig'                                                              *)
(*===========================================================================*)

#if (defined LPRM2) || (defined SPCM2) || (defined MM2)
CONST
  SigDfl = sig.SigDfl;
  SigIgn = sig.SigIgn;
#else
VAR (* READ ONLY! *)
  SigDfl : sig.SignalHandler;
  SigIgn : sig.SignalHandler;
#endif

CONST
  SIGHUP  = sig.SIGHUP;
  SIGINT  = sig.SIGINT;
  SIGQUIT = sig.SIGQUIT;
  SIGILL  = sig.SIGILL;
  SIGABRT = sig.SIGABRT;
  SIGFPE  = sig.SIGFPE;
  SIGKILL = sig.SIGKILL;
  SIGSEGV = sig.SIGSEGV;
  SIGPIPE = sig.SIGPIPE;
  SIGALRM = sig.SIGALRM;
  SIGTERM = sig.SIGTERM;
  SIGSTOP = sig.SIGSTOP;
  SIGTSTP = sig.SIGTSTP;
  SIGCONT = sig.SIGCONT;
  SIGCHLD = sig.SIGCHLD;
  SIGTTIN = sig.SIGTTIN;
  SIGTTOU = sig.SIGTTOU;
  SIGUSR1 = sig.SIGUSR1;
  SIGUSR2 = sig.SIGUSR2;

TYPE
  SigsetPtr = sig.SigsetPtr;

TYPE
  sigsetT = sig.sigsetT;

TYPE
  SignalHandler = sig.SignalHandler;

TYPE
  SaFlag  = sig.SaFlag;
  SaFlags = sig.SaFlags;

TYPE
  SigactionPtr = sig.SigactionPtr;
  SigactionRec = sig.SigactionRec;

TYPE
  SigBlockType = sig.SigBlockType;

#if ISO_proc_const
CONST
  sigemptyset = sig.sigemptyset;
  sigfillset  = sig.sigfillset;
  sigaddset   = sig.sigaddset;
  sigdelset   = sig.sigdelset;
  sigismember = sig.sigismember;
  sigaction   = sig.sigaction;
  sigprocmask = sig.sigprocmask;
  sigpending  = sig.sigpending;
  kill        = sig.kill;
  pause       = sig.pause;
  sigsuspend  = sig.sigsuspend;
  sleep       = sig.sleep;
  alarm       = sig.alarm;
#else
VAR (* READ ONLY! *)
  sigemptyset : PROCEDURE(VAR sigsetT);
  sigfillset  : PROCEDURE(VAR sigsetT);
  sigaddset   : PROCEDURE(VAR sigsetT,int):int;
  sigdelset   : PROCEDURE(VAR sigsetT,int):int;
  sigismember : PROCEDURE(sigsetT,int):int;
  sigaction   : PROCEDURE(int,SigactionPtr,SigactionPtr):int;
  sigprocmask : PROCEDURE(SigBlockType,SigsetPtr,SigsetPtr):int;
  sigpending  : PROCEDURE(VAR sigsetT):int;
  kill        : PROCEDURE(pidT,int):int;
  pause       : PROCEDURE;
  sigsuspend  : PROCEDURE(sigsetT);
  sleep       : PROCEDURE(CARDINAL):CARDINAL;
  alarm       : PROCEDURE(CARDINAL):CARDINAL;
#endif

(*===========================================================================*)
(* Modul: 'sys'                                                              *)
(*===========================================================================*)

TYPE
  PConfVal = sys.PConfVal;
  SConfVal = sys.SConfVal;

TYPE
  UtsnameRec = sys.UtsnameRec;

TYPE
  PasswdPtr = sys.PasswdPtr;
  PasswdRec = sys.PasswdRec;

TYPE
  GroupPtr = sys.GroupPtr;
  GroupRec = sys.GroupRec;

#if ISO_proc_const
CONST
  uname    = sys.uname;
  pathconf = sys.pathconf;
  sysconf  = sys.sysconf;
  time     = sys.time;
  getpwnam = sys.getpwnam;
  getpwuid = sys.getpwuid;
  getgrnam = sys.getgrnam;
  getgrgid = sys.getgrgid;
#else
VAR (* READ ONLY! *)
  uname    : PROCEDURE(VAR UtsnameRec):int;
  pathconf : PROCEDURE(REF ARRAY OF CHAR,PConfVal):signedlong;
  sysconf  : PROCEDURE(SConfVal):signedlong;
  time     : PROCEDURE(ADDRESS):timeT;
  getpwnam : PROCEDURE(REF ARRAY OF CHAR):PasswdPtr;
  getpwuid : PROCEDURE(uidT):PasswdPtr;
  getgrnam : PROCEDURE(REF ARRAY OF CHAR):GroupPtr;
  getgrgid : PROCEDURE(gidT):GroupPtr;
#endif

(*===========================================================================*)
(* Modul: 'jump'                                                             *)
(*===========================================================================*)

TYPE
  JmpBuf    = jump.JmpBuf;
  SigJmpBuf = jump.SigJmpBuf;

#if ISO_proc_const
CONST
  setjmp      = jump.setjmp;
  longjmp     = jump.longjmp;
  sigsetjmp   = jump.sigsetjmp;
  siglongjmp  = jump.siglongjmp;
#else
VAR (* READ ONLY! *)
  setjmp      : PROCEDURE(VAR JmpBuf):int;
  longjmp     : PROCEDURE(VAR JmpBuf,int);
  sigsetjmp   : PROCEDURE(VAR SigJmpBuf,UNSIGNEDWORD):int;
  siglongjmp  : PROCEDURE(VAR SigJmpBuf,int);
#endif

(*===========================================================================*)
(* Modul: 'loc'                                                              *)
(*===========================================================================*)

TYPE
  LcType = loc.LcType;

#if ISO_proc_const
CONST
  setlocale = loc.setlocale;
#else
VAR (* READ ONLY! *)
  setlocale : PROCEDURE(LcType,StrPtr):StrPtr;
#endif

END POSIX1.
