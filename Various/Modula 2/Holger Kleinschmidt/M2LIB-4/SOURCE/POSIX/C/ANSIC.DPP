DEFINITION MODULE ANSIC;
__DEF_SWITCHES__
#ifdef HM2
#ifdef __LONG_WHOLE__
(*$!i+: Modul muss mit $i- uebersetzt werden! *)
(*$!w+: Modul muss mit $w- uebersetzt werden! *)
#else
(*$!i-: Modul muss mit $i+ uebersetzt werden! *)
(*$!w-: Modul muss mit $w+ uebersetzt werden! *)
#endif
#endif
#if no_reexport
#  error *** compiler does not allow reexporting!
#endif
(****************************************************************************)
(* Dieses Modul fasst alle ANSI-C-Bibliotheksfunktionen aus den unterlie-   *)
(* genden Modulen zusammen. Teilweise sind diese Funktionen ebenfalls       *)
(* POSIX.1-Funktionen, werden aber ueblicherweise nur mit ``C'' in Verbin-  *)
(* dung gebracht. Fuer Leute, die lieber aus einem einzigen Modul importie- *)
(* ren wollen, und deren Compiler den Reexport erlaubt.                     *)
(* Fuer die Beschreibung der Funktionen muessen die entsprechenden Defini-  *)
(* tionsmodule konsultiert werden.                                          *)
(* -------------------------------------------------------------------------*)
(* 28-Jun-96, Holger Kleinschmidt                                           *)
(****************************************************************************)
#if !ISO_proc_const
FROM SYSTEM IMPORT ADDRESS;
FROM PORTAB IMPORT ANYTYPE;
FROM types  IMPORT sizeT,timeT,clockT;
FROM sig    IMPORT SignalHandler;
#endif
IMPORT DosSystem,types,args,loc,ctype,str,lib,dir,tim,sig,proc,blk,mem;

(*===========================================================================*)
(* Modul: 'types'                                                            *)
(*===========================================================================*)

CONST
  NULL = types.NULL;

CONST
  ClocksPerSec = types.ClocksPerSec;

TYPE
  StrRange = types.StrRange;
  StrPtr   = types.StrPtr;
  StrPPtr  = types.StrPPtr;

TYPE
  ArrayRange = types.ArrayRange;
  StrArray   = types.StrArray;

TYPE
  char          = types.char;
  signedchar    = types.signedchar;
  unsignedchar  = types.unsignedchar;

  short         = types.short;
  signedshort   = types.signedshort;
  unsignedshort = types.unsignedshort;

  int           = types.int;
  signedint     = types.signedint;
  unsigned      = types.unsigned;
  unsignedint   = types.unsignedint;

  long          = types.long;
  signedlong    = types.signedlong;
  unsignedlong  = types.unsignedlong;

  float         = types.float;
  double        = types.double;

(*===========================================================================*)
(* Modul: 'ctype'                                                            *)
(*===========================================================================*)

#if ISO_proc_const
CONST
  isalnum  = ctype.isalnum;
  isalpha  = ctype.isalpha;
  iscntrl  = ctype.iscntrl;
  isdigit  = ctype.isdigit;
  isgraph  = ctype.isgraph;
  islower  = ctype.islower;
  isprint  = ctype.isprint;
  ispunct  = ctype.ispunct;
  isspace  = ctype.isspace;
  isupper  = ctype.isupper;
  isxdigit = ctype.isxdigit;
  tolower  = ctype.tolower;
  toupper  = ctype.toupper;
#else
VAR (* READ ONLY! *)
  isalnum  : PROCEDURE(CHAR):BOOLEAN;
  isalpha  : PROCEDURE(CHAR):BOOLEAN;
  iscntrl  : PROCEDURE(CHAR):BOOLEAN;
  isdigit  : PROCEDURE(CHAR):BOOLEAN;
  isgraph  : PROCEDURE(CHAR):BOOLEAN;
  islower  : PROCEDURE(CHAR):BOOLEAN;
  isprint  : PROCEDURE(CHAR):BOOLEAN;
  ispunct  : PROCEDURE(CHAR):BOOLEAN;
  isspace  : PROCEDURE(CHAR):BOOLEAN;
  isupper  : PROCEDURE(CHAR):BOOLEAN;
  isxdigit : PROCEDURE(CHAR):BOOLEAN;
  tolower  : PROCEDURE(CHAR):CHAR;
  toupper  : PROCEDURE(CHAR):CHAR;
#endif

(*===========================================================================*)
(* Modul: 'str'                                                              *)
(*===========================================================================*)

#if ISO_proc_const
CONST
  strlen   = str.strlen;
  strcpy   = str.strcpy;
  strncpy  = str.strncpy;
  strcat   = str.strcat;
  strncat  = str.strncat;
  strcmp   = str.strcmp;
  strncmp  = str.strncmp;
  strchr   = str.strchr;
  strrchr  = str.strrchr;
  strstr   = str.strstr;
  strpbrk  = str.strpbrk;
  strerror = str.strerror;
#else
VAR (* READ ONLY! *)
  strlen   : PROCEDURE(StrPtr):sizeT;
  strcpy   : PROCEDURE(StrPtr,StrPtr);
  strncpy  : PROCEDURE(StrPtr,StrPtr,sizeT);
  strcat   : PROCEDURE(StrPtr,StrPtr);
  strncat  : PROCEDURE(StrPtr,StrPtr,sizeT);
  strcmp   : PROCEDURE(StrPtr,StrPtr):int;
  strncmp  : PROCEDURE(StrPtr,StrPtr,sizeT):int;
  strchr   : PROCEDURE(StrPtr,CHAR):StrPtr;
  strrchr  : PROCEDURE(StrPtr,CHAR):StrPtr;
  strstr   : PROCEDURE(StrPtr,StrPtr):StrPtr;
  strpbrk  : PROCEDURE(StrPtr,StrPtr):StrPtr;
  strerror : PROCEDURE(int):StrPtr;
#endif

(*===========================================================================*)
(* Modul: 'args'                                                             *)
(*===========================================================================*)

PROCEDURE environ():StrArray;
(* Diese Prozedur liefert den Wert von 'args.environ', da 'environ' als
   Variable nicht exportiert werden kann. Dadurch kann zwar 'environ' aus
   diesem Modul importiert werden, da es aber eine Funktion ist, gibt es
   sowohl einen syntaktischen Unterschied zu einer Variable ("environ()"
   statt 'environ', und keine direkte Dereferenzierung) als auch einen
   semantischen (Der Wert kann nur abgefragt, aber nicht veraendert werden).
 *)

#if ISO_proc_const
CONST
  main   = args.main;
  getenv = args.getenv;
#else
VAR (* READ ONLY! *)
  main   : PROCEDURE(VAR ArrayRange,VAR StrArray);
  getenv : PROCEDURE(REF ARRAY OF CHAR):StrPtr;
#endif

(*===========================================================================*)
(* Modul: 'DosSystem'                                                        *)
(*===========================================================================*)

CONST
  ExitSuccess = DosSystem.ExitSuccess;
  ExitFailure = DosSystem.ExitFailure;

#if ISO_proc_const
CONST
  exit   = DosSystem.exit;
  atexit = DosSystem.atexit;
#else
VAR (* READ ONLY! *)
  exit   : PROCEDURE(int);
  atexit : PROCEDURE(PROC):int;
#endif

(*===========================================================================*)
(* Modul: 'lib'                                                              *)
(*===========================================================================*)

CONST
  RandMax = lib.RandMax;

TYPE
  CompareProc = lib.CompareProc;

#if ISO_proc_const
CONST
  ptr     = lib.ptr;
  void    = lib.void;
  atoi    = lib.atoi;
  atol    = lib.atol;
  strtol  = lib.strtol;
  strtoul = lib.strtoul;
  sprintf = lib.sprintf;
  bsearch = lib.bsearch;
  qsort   = lib.qsort;
  rand    = lib.rand;
  srand   = lib.srand;
#else
VAR (* READ ONLY! *)
  ptr     : PROCEDURE(VAR ARRAY OF ANYTYPE):ADDRESS;
  void    : PROCEDURE(int);
  atoi    : PROCEDURE(StrPtr):int;
  atol    : PROCEDURE(StrPtr):long;
  strtol  : PROCEDURE(StrPtr,StrPPtr,int):long;
  strtoul : PROCEDURE(StrPtr,StrPPtr,int):unsignedlong;
  sprintf : PROCEDURE(StrPtr,REF ARRAY OF CHAR,ARRAY OF ADDRESS):int;
  bsearch : PROCEDURE(ADDRESS,ADDRESS,sizeT,sizeT,CompareProc):ADDRESS;
  qsort   : PROCEDURE(ADDRESS,sizeT,sizeT,CompareProc);
  rand    : PROCEDURE():int;
  srand   : PROCEDURE(unsigned);
#endif

(*===========================================================================*)
(* Modul: 'tim'                                                              *)
(*===========================================================================*)

#if ISO_proc_const
CONST
  difftime = tim.difftime;
#else
VAR (* READ ONLY! *)
  difftime : PROCEDURE(timeT,timeT):double;
#endif

(*===========================================================================*)
(* Modul: 'proc'                                                             *)
(*===========================================================================*)

#if ISO_proc_const
CONST
  clock = proc.clock;
#else
VAR (* READ ONLY! *)
  clock : PROCEDURE():clockT;
#endif

(*===========================================================================*)
(* Modul: 'sig'                                                              *)
(*===========================================================================*)

CONST
  SigErr = sig.SigErr;

#if ISO_proc_const
CONST
  signal = sig.signal;
  raise  = sig.raise;
  abort  = sig.abort;
#else
VAR (* READ ONLY! *)
  signal : PROCEDURE(int,SignalHandler,VAR SignalHandler):int;
  raise  : PROCEDURE(int):int;
  abort  : PROCEDURE;
#endif

(*===========================================================================*)
(* Modul: 'blk'                                                              *)
(*===========================================================================*)

#if ISO_proc_const
CONST
  memmove = blk.memmove;
  memcpy  = blk.memmove; (* Alias *)
  memset  = blk.memset;
  memchr  = blk.memchr;
  memcmp  = blk.memcmp;
#else
VAR (* READ ONLY! *)
  memmove : PROCEDURE(ADDRESS,ADDRESS,sizeT);
  memcpy  : PROCEDURE(ADDRESS,ADDRESS,sizeT);
  memset  : PROCEDURE(ADDRESS,int,sizeT);
  memchr  : PROCEDURE(ADDRESS,int,sizeT):ADDRESS;
  memcmp  : PROCEDURE(ADDRESS,ADDRESS,sizeT):int;
#endif

(*===========================================================================*)
(* Modul: 'loc'                                                              *)
(*===========================================================================*)

TYPE
  LConvRec = loc.LConvRec;
  LConvPtr = loc.LConvPtr;

#if ISO_proc_const
CONST
  localeconv = loc.localeconv;
#else
VAR (* READ ONLY! *)
  localeconv : PROCEDURE():LConvPtr;
#endif

(*===========================================================================*)
(* Modul: 'dir'                                                              *)
(*===========================================================================*)

#if ISO_proc_const
CONST
  remove = dir.unlink; (* Alias *)
#else
VAR (* READ ONLY! *)
  remove : PROCEDURE(REF ARRAY OF CHAR):int;
#endif

(*===========================================================================*)
(* Modul: 'mem'                                                              *)
(*===========================================================================*)

#if ISO_proc_const
CONST
  malloc  = mem.malloc;
  calloc  = mem.calloc;
  realloc = mem.realloc;
  free    = mem.free;
  strdup  = mem.strdup;
#else
VAR (* READ ONLY! *)
  malloc  : PROCEDURE(sizeT):ADDRESS;
  calloc  : PROCEDURE(sizeT,sizeT):ADDRESS;
  realloc : PROCEDURE(ADDRESS,sizeT):ADDRESS;
  free    : PROCEDURE(ADDRESS);
  strdup  : PROCEDURE(StrPtr):StrPtr;
#endif

END ANSIC.
