DEFINITION MODULE lib;
__DEF_SWITCHES__
#ifdef HM2
#ifdef __LONG_WHOLE__
(*$!i+: Modul muss mit $i- uebersetzt werden! *)
(*$!w+: Modul muss mit $w- uebersetzt werden! *)
#else
(*$!i-: Modul muss mit $i+ uebersetzt werden! *)
(*$!w-: Modul muss mit $w+ uebersetzt werden! *)
#endif
#endif
(*****************************************************************************)
(* Verschiedene Bibliotheksfunktionen                                        *)
(* --------------------------------------------------------------------------*)
(* 29-Mae-96, Holger Kleinschmidt                                            *)
(*****************************************************************************)

FROM SYSTEM IMPORT
(* TYPE *) ADDRESS;

FROM PORTAB IMPORT
(* TYPE *) UNSIGNEDLONG, SIGNEDLONG, ANYTYPE, ANYLONG;

FROM types IMPORT
(* TYPE *) StrPtr, StrPPtr, sizeT, int, unsigned, long, unsignedlong;

(*=========================== "rand()" ======================================*)

CONST
#if no_MIN_MAX
  RandMax = 32767;
#else
  RandMax = MAX(int);
#endif

(*================ "lfind()", "bsearch()", "qsort()" ========================*)

TYPE
  CompareProc = PROCEDURE ((* par1 *) ADDRESS,
                           (* par2 *) ADDRESS ): int;

  (* par1^  <  par2^  ==>  < 0
     par1^  =  par2^  ==>  = 0
     par1^  >  par2^  ==>  > 0


     Beispiel:

      PROCEDURE cmp ((* EIN/ -- *) op1,
                    (* EIN/ -- *) op2 : ADDRESS ): int;

      TYPE ElemPtr = POINTER TO REAL; (* je nach Elementtyp *)

      VAR ptr1 : ElemPtr;
          ptr2 : ElemPtr;

      BEGIN
       ptr1 := op1;
       ptr2 := op2;

       IF ptr1^ < ptr2^ THEN
         RETURN(-1);
       ELSIF ptr1^ > ptr2^  THEN
         RETURN(1);
       ELSE
         RETURN(0);
       END;
      END cmp;
   *)
(*============================= "sprintf()" =================================*)

TYPE
  arg1 = ARRAY [0..0] OF ADDRESS;
  arg2 = ARRAY [0..1] OF ADDRESS;
  arg3 = ARRAY [0..2] OF ADDRESS;
  arg4 = ARRAY [0..3] OF ADDRESS;
  arg5 = ARRAY [0..4] OF ADDRESS;
  arg6 = ARRAY [0..5] OF ADDRESS;
  arg7 = ARRAY [0..6] OF ADDRESS;
  arg8 = ARRAY [0..7] OF ADDRESS;
  arg9 = ARRAY [0..8] OF ADDRESS;

(*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*)

(* Nicht POSIX: *)
PROCEDURE ptr ((* EIN/ -- *) VAR anything : ARRAY OF ANYTYPE ): ADDRESS;

PROCEDURE void ((* -- / -- *) anyint : int );

PROCEDURE voidl ((* -- / -- *) anylong : ANYLONG );

(* "ptr()" macht nichts anderes als "SYSTEM.ADR()" und liefert die Adresse
   von <anything>; hierdurch soll der Import aus SYSTEM vermieden werden.
   "void()" und "voidl()" machen rein gar nichts, sie dienen nur dazu, einen
   'int'- oder 'long'-Funktionswert zu ignorieren, wenn er nicht benoetigt
   wird, um so eine Zuweisung und die Deklaration einer zusaetzlichen
   Variable zu verweiden. Leider ist es nicht moeglich beliebige Typen zu
   ignorieren, da die meisten Compiler bei 'ARRAY OF ANYTYPE' eine Variable
   erwarten.
   Diese Prozeduren sollen das Bilden von Zeigern auf Objekte mittels dem
   Operator '&' und das Ignorieren von Funktionswerten mittels Cast nach
   (void) in ``C'' simulieren.
 *)


(* Weder POSIX, noch ANSI-C: *)
PROCEDURE lfind ((* EIN/ -- *) key     : ADDRESS;
                 (* EIN/ -- *) base    : ADDRESS;
                 (* EIN/ -- *) nelems  : sizeT;
                 (* EIN/ -- *) size    : sizeT;
                 (* EIN/ -- *) compare : CompareProc ): ADDRESS;

(* Prozedur fuer lineare Suche in einem Feld aus gleichartigen, direkt
   hintereinander angeordneten Elementen (ACHTUNG: Fuellbytes muessen bei
   der Angabe von <size> beruecksichtigt werden!).
   Falls das gesuchte Element gefunden wird, ist der Funktionswert dessen
   Adresse im Feld, sonst wird NULL zurueckgeliefert.

   <base>    ist die Adresse des ersten Elementes des Feldes
   <nelems>  ist die Anzahl der Feldelemente
   <size>    ist die Groesse eine Feldelementes in Bytes
   <compare> ist die Vergleichsfunktion (siehe Def. 'CompareProc')
   <key>     ist die Adresse des gesuchten Elementes
 *)


PROCEDURE bsearch ((* EIN/ -- *) key     : ADDRESS;
                   (* EIN/ -- *) base    : ADDRESS;
                   (* EIN/ -- *) nelems  : sizeT;
                   (* EIN/ -- *) size    : sizeT;
                   (* EIN/ -- *) compare : CompareProc  ): ADDRESS;

(* Prozedur fuer binaere Suche in einem Feld aus gleichartigen, direkt
   hintereinander angeordneten Elementen. Die Elemente muessen gemaess der
   verwendeten Vergleichsprozedur aufsteigend sortiert sein.
   Falls das gesuchte Element gefunden wird, ist der Funktionswert dessen
   Adresse im Feld, sonst wird NULL zurueckgeliefert.

   Bedeutung der Parameter siehe: "lfind()"
 *)


PROCEDURE qsort ((* EIN/ -- *) base    : ADDRESS;
                 (* EIN/ -- *) nelems  : sizeT;
                 (* EIN/ -- *) size    : sizeT;
                 (* EIN/ -- *) compare : CompareProc  );

(* Prozedur fuer Sortierung nach dem ``Quicksort''-Algorithmus in einem Feld
   aus gleichartigen, direkt hintereinander angeordneten Elementen.
   Die Sortierung ist nicht stabil, d.h. es ist nicht garantiert, dass die
   relative Ordnung von Elementen mit gleichem (Neben-)Schluessel erhalten
   bleibt.
   Stackbelastung: O(log(nelems))

   Bedeutung der Parameter siehe: "lfind()"
 *)


(* Weder POSIX, noch Ansi-C: *)
PROCEDURE itoa ((* EIN/ -- *) n    : int;
                (* EIN/ -- *) buf  : StrPtr;
                (* EIN/ -- *) base : int    );

PROCEDURE ltoa ((* EIN/ -- *) n    : long;
                (* EIN/ -- *) buf  : StrPtr;
                (* EIN/ -- *) base : int    );

PROCEDURE ultoa ((* EIN/ -- *) n    : unsignedlong;
                 (* EIN/ -- *) buf  : StrPtr;
                 (* EIN/ -- *) base : int           );

(* Wandeln den Wert <n> in eine Stringrepraesentation um. Es wird die
   kuerzest moegliche Darstellung gewaehlt, d.h. es werden keine fuehrenden
   Nullen geschrieben, und bei positiven Zahlen wird kein Leerzeichen oder
   ein Plus verwendet. <base> bestimmt die Basis der Zahlendarstellung und
   muss innerhalb von [2..36] liegen; liegt <base> ausserhalb, wird Zehn
   angenommen. Das Ergebnis wird nach <buf>^ geschrieben, der Platz muss
   ausreichend gross sein.
 *)


PROCEDURE sprintf ((* EIN/ -- *)     str  : StrPtr;
                   (* EIN/ -- *) REF form : ARRAY OF CHAR;
                   (* EIN/ -- *)     args : ARRAY OF ADDRESS ): int;

(* Hiermit kann eine beliebige Anzahl Argumente in einen String unter
   Kontrolle einer Formatangabe gewandelt werden. Das Ergebnis wird
   im Puffer <str>^ abgelegt, der gross genug sein muss. Als Funktionswert
   wird die Anzahl der geschriebenen Zeichen ohne das abschliessende
   Nullbyte geliefert. <args> enthaelt Zeiger auf die Argumente, wobei
   Anzahl und Typ der Argumente durch die Formatangabe <form> festgelegt
   werden.

   <form> kann sowohl normale Zeichen als auch Formatangaben enthalten.
   Die normalen Zeichen werden unveraendert nach <str>^ kopiert;
   Formatangaben beginnen mit einem Prozentzeichen '%' und haben
   folgenden Aufbau:

     format == '%'[flags][width]['.'precision][length][type]

     'flags' kann in beliebiger Reihenfolge die folgenden Zeichen
     enthalten:

       '-': Das Argument wird linksbuendig ins Feld geschrieben,
            sonst rechtsbuendig.
       '+': Eine positive Zahl erhaelt auch ein Vorzeichen, sonst
            nur eine negative.
       ' ': Wenn vor einer Zahl kein Vorzeichen stehen wuerde, wird
            ein Leerzeichen vorangestellt.
       '0': Bei Zahlen wird zur Feldbreite mit fuehrenden Nullen
            aufgefuellt, statt mit Leerzeichen, aber nur, wenn keine
            Genauigkeit angegeben wurde und wenn das Argument
            rechtsbuendig geschrieben wird.
       '#': Wenn eine Zahl ungleich Null ist, wird bei einer oktalen
            Darstellung eine Null vorangestellt und bei einer sedezimalen
            Darstellung ein '0x' oder '0X'.

     'width' ist eine positive Dezimalzahl, die die minimale Feldbreite
     festlegt. Wenn die Darstellung des Arguments weniger als 'width' Zeichen
     belegt, wird mit Leerzeichen oder Nullen auf die Feldbreite aufgefuellt.
     Wenn 'width' fehlt, wird die Darstellung nicht veraendert.
     'width' kann auch das Zeichen '*' sein; dann legt das naechste
     Argument, das vom Typ INTEGER sein muss, die Feldbreite fest.
     Wenn sie negativ ist, wird der Absolutwert genommen und das
     Argument linksbuendig geschrieben.

     'precision' ist eine nichtnegative Dezimalzahl, mit der festgelegt wird,
     wieviel Zeichen bei einem Stringargument hoechstens ausgegeben werden
     und wieviel Zeichen bei einer Zahlendarstellung mindestens ausgegeben
     werden, wobei gegebenenfalls mit fuehrenden Nullen aufgefuellt wird.
     'precision' kann auch das Zeichen '*' sein; dann legt das naechste
     Argument, das vom Typ INTEGER sein muss, die Genauigkeit fest.
     Ein negativer Wert wird ignoriert.
     Wenn 'precision' gleich Null ist, wird ein Zahlenwert von Null
     nicht ausgegeben, sonst wird ein '0' geschrieben. Das beeinflusst
     allerdings nicht das evtl. Auffuellen mit Nullen auf die Feldbreite.

     'length' legt die Speichergroesse des Arguments bei einer
     Zahlendarstellung fest und kann eins der folgenden Zeichen sein:

       'h': Das Argument hat WORD-Groesse, d.h. ist vom Typ
            SIGNEDWORD oder UNSIGNEDWORD.
       'l': Das Argument hat LONG-Groesse, d.h. ist vom Typ
            SIGNEDLONG oder UNSIGNEDLONG.

     'type' schliesslich bezeichnet den Typ des Arguments und kann eins
     der folgenden Zeichen sein:

       'd','i': Das Argument ist vom Typ INTEGER, bzw. SIGNEDWORD oder
                SIGNEDLONG, wenn 'h' oder 'l' angegeben sind.
                Dezimaldarstellung mit Vorzeichen.
       'u'    : Das Argument ist vom Typ CARDINAL, bzw. UNSIGNEDWORD oder
                UNSIGNEDLONG, wenn 'h' oder 'l' angegeben sind.
                Dezimaldarstellung ohne Vorzeichen.
       'o'    : Das Argument ist vom Typ CARDINAL, bzw. UNSIGNEDWORD oder
                UNSIGNEDLONG, wenn 'h' oder 'l' angegeben sind.
                Oktaldarstellung ohne Vorzeichen.
       'x','X': Das Argument ist vom Typ CARDINAL, bzw. UNSIGNEDWORD oder
                UNSIGNEDLONG, wenn 'h' oder 'l' angegeben sind.
                Sedezimaldarstellung ohne Vorzeichen. Bei 'x' werden kleine
                Buchstaben fuer die Ziffern von 10 bis 15 benutzt, sonst
                Grossbuchstaben.
       'p'    : Das Argument ist von einem POINTER-Typ (z.B. ADDRESS).
                Implementierungsspezifische Darstellung.
       'c'    : Das Argument ist vom Typ CHAR.
                Einzelzeichendarstellung.
       's'    : Das Argument ist vom Typ StrPtr.
                Stringdarstellung.
       'n'    : Das Argument ist vom Typ INTEGER. Im Argument wird
                die Anzahl der bisher nach <str>^ geschriebenen Zeichen
                abgelegt; <str>^ wird nicht veraendert.
       '%'    : Kein Argument. Es wird ein '%' nach <str>^ geschrieben.


   GEMDOS/MiNT: Fuer die Argumenttypen musste natuerlich auf die in
                Modula-2 vorhandenen Typen zurueckgegriffen werden, deswegen
                ist das nicht ganz identisch zur ``C''-Funktion; ausserdem
                fehlen die Formatierungen fuer REAL-Werte. Diese sind
                bei Bedarf mit den ISO-Funktionen vorzunehmen. Da auf die
                Argumente ueber Zeiger zugegriffen wird, kann der angegebene
                Typ, und besonders die Speicherplatzgroesse, nicht
                ueberprueft werden, darauf ist also selbst zu achten. Das
                betrifft insbesondere die Systeme, bei denen die
                Speichergroesse von CARDINAL und INTEGER veraendert werden
                kann. Weiterhin hat die Original-C-Funktion eine variable
                Argumentliste. Da so etwas in Modula nicht existiert, musste
                der Umweg ueber das Feld von Zeigern gegangen werden.
                Wenn der Compiler allerdings ARRAY-Konstruktoren gemaess
                ISO unterstuetzt, kann etwas Aehnliches erreicht werden:

           VAR i1, i2, i3 : INTEGER;
           ...
           sprintf(ADR(buf), "%d, %d", arg2{ADR(i1), ADR(i2)})
           sprintf(ADR(buf), "%d, %d, %d", arg3{ADR(i1), ADR(i2), ADR(i3)})
 *)


(* Nicht POSIX, aber ANSI-C: *)
PROCEDURE strtol ((* EIN/ -- *) str  : StrPtr;
                  (* EIN/ -- *) end  : StrPPtr;
                  (* EIN/ -- *) base : int      ): long;

PROCEDURE strtoul ((* EIN/ -- *) str  : StrPtr;
                   (* EIN/ -- *) end  : StrPPtr;
                   (* EIN/ -- *) base : int      ): unsignedlong;

(* Wandelt die Stringrepraesentation <str>^ einer Zahl in ihre interne
   Darstellung, die als Funktionswert geliefert wird. Die
   Stringrepraesentation muss der weiter unten angegebenen Syntax genuegen.

   Falls <end> nicht gleich NULL ist, wird in <end>^ ein Zeiger auf das
   erste Zeichen von <str>^ gespeichert, das nicht zur Umwandlung verwendet
   wurde.
   <base> ist die gewuenschte Basis der Zahl. gueltige Werte sind 0 und 2
   bis 36; andere Werte werden zu Null korrigiert. Ist <base> gleich Null,
   wird die Basis der Repraesentation entnommen, d.h. es koennen Binaer-,
   Oktal- und Sedezimalzahlen erkannt werden; ist der Zahl keine Basis
   vorangestellt, wird eine Dezimalzahl erwartet. Ist <base> gleich 2, 8
   oder 16, so kann trotzdem zusaetzlich eine Basis der Zahl vorangestellt
   sein, sie wird aber ignoriert, solange sie dem Wert von <base> entspricht.

   Wenn bei der Umwandlung ein Ueberlauf auftritt, wird als Funktionswert
   der jeweils groesst/kleinstmoegliche Wert zurueckgeliefert und 'errno'
   auf 'ERANGE' gesetzt.

   Die Syntax:

     whole      ::= {SPACE}['+'|'-']('%'bin)('$'hex)('0'octHexNull)(num)
                    Stringendekeine gueltige Ziffer
     octHexNull ::= ('x'|'X')hexoct e (* leer, fuer die NULL *)
     bin        ::= bindigit{bindigit}
     oct        ::= octdigit{octdigit}
     hex        ::= hexdigit{hexdigit}
     num        ::= digit{digit}
     bindigit   ::= '0'|'1'
     octdigit   ::= bindigit|'2'..'7'
     hexdigit   ::= octdigit|'8'|'9'|'a'..'f'|'A'..'F'
     digit      ::= hexdigit|'g'..'z'|'G'..'Z'
 *)


(* Nicht POSIX, aber ANSI-C: *)
PROCEDURE atol ((* EIN/ -- *) str : StrPtr ): long;

PROCEDURE atoi ((* EIN/ -- *) str : StrPtr ): int;

(* "atol()" entspricht: "strtol(str, NULL, 10)", bei "atoi()" wird das
   Ergebnis zusaetzlich nach 'int' gewandelt.
 *)


PROCEDURE rand ( ): int;

PROCEDURE srand ((* EIN/ -- *) seed : unsigned );

(* "rand()" liefert eine Pseudozufallszahl im Bereich [0..RandMax]. Die
   jeweils letzte Zufallszahl wird gemerkt und als Ausgangspunkt fuer die
   Berechnung der naechsten verwendet. Mit "srand()" kann dieser
   Ausgangspunkt explizit gesetzt werden, so dass reproduzierbare
   Zahlenfolgen moeglich sind. Zu Programmstart wird als Ausgangswert
   die Eins verwendet.
 *)

END lib.
