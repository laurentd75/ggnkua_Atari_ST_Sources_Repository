DEFINITION MODULE blk;
__DEF_SWITCHES__
#ifdef HM2
#ifdef __LONG_WHOLE__
(*$!i+: Modul muss mit $i- uebersetzt werden! *)
(*$!w+: Modul muss mit $w- uebersetzt werden! *)
#else
(*$!i-: Modul muss mit $i+ uebersetzt werden! *)
(*$!w-: Modul muss mit $w+ uebersetzt werden! *)
#endif
#endif
(*****************************************************************************)
(* (effiziente) Operationen auf typenlosen Speicherbereichen.                *)
(* Dies sind Ansi-C-Funktionen, bis auf "memswap()" und "*alloc()".          *)
(* "memmove()" und "memset()" liefern allerdings nicht die Adresse des Ziel- *)
(* strings als Funktionswert.                                                *)
(*                                                                           *)
(* Die Speicherbereiche duerfen an ungeraden Adressen beginnen. Wird als     *)
(* Laenge eine Null angegeben, passiert nichts und es wird gegebenenfalls    *)
(* Null oder NULL zurueckgeliefert.                                          *)
(* --------------------------------------------------------------------------*)
(* 04-Dez-95, Holger Kleinschmidt                                            *)
(*****************************************************************************)

FROM SYSTEM IMPORT
(* TYPE *) ADDRESS;

FROM PORTAB IMPORT
(* TYPE *) UNSIGNEDLONG;

FROM types IMPORT
(* TYPE *) int, sizeT;

(*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*)

PROCEDURE memmove ((* EIN/ -- *) dst : ADDRESS;
                   (* EIN/ -- *) src : ADDRESS;
                   (* EIN/ -- *) len : sizeT   );

(* Nicht Ansi-C: *)
PROCEDURE bcopy ((* EIN/ -- *) src : ADDRESS;
                 (* EIN/ -- *) dst : ADDRESS;
                 (* EIN/ -- *) len : sizeT   );

(* Kopieren <len> Bytes von <src> nach <dst>. Die Bereiche duerfen sich
   ueberlappen. Wenn beide Adressen gerade oder ungerade sind, wird
   besonders schnell kopiert.
 *)


PROCEDURE memset ((* EIN/ -- *) dst : ADDRESS;
                  (* EIN/ -- *) val : int;
                  (* EIN/ -- *) len : sizeT   );

(* Nicht Ansi-C: *)
PROCEDURE bzero ((* EIN/ -- *) dst : ADDRESS;
                 (* EIN/ -- *) len : sizeT   );

(* memset() setzt <len> Bytes ab Adresse <dst> auf <val>. Der Wert in
   <val> wird modulo 256 genommen, d.h. es zaehlt nur das untere Byte.
   bzero(d,l) entspricht memset(d,0,l).
 *)


PROCEDURE memchr ((* EIN/ -- *) src : ADDRESS;
                  (* EIN/ -- *) val : int;
                  (* EIN/ -- *) len : sizeT   ): ADDRESS;

(* Liefert einen Zeiger auf das erste Byte mit dem Wert <val> modulo 256,
   das in den ersten <len> Bytes ab <src> vorkommt, oder NULL, falls ein
   solcher Wert nicht vorkommt.
 *)


PROCEDURE memcmp ((* EIN/ -- *) blk1 : ADDRESS;
                  (* EIN/ -- *) blk2 : ADDRESS;
                  (* EIN/ -- *) len  : sizeT   ): int;

(* Vergleicht <len> Bytes ab den Adressen <blk1> und <blk2> miteinander.
   Falls alle Bytes gleich sind, wird Null zurueckgeliefert, falls ein Byte
   in <blk>^ kleiner als in <blk2>^ ist, wird ein Wert kleiner Null
   zurueckgeliefert, falls ein Byte gresser ist, wird ein Wert groesser Null
   zurueckgeliefert.
 *)


(* Nicht Ansi-C: *)
PROCEDURE memfill ((* EIN/ -- *) dst : ADDRESS;
                   (* EIN/ -- *) val : UNSIGNEDLONG;
                   (* EIN/ -- *) len : sizeT        );

(* Diese Prozedur fuellt einen Speicherbereich von <len> Bytes beginnend bei
   Adresse <dst> mit dem <val>. Da <val> ein UNSIGNEDLONG-Wert ist, lassen
   sich Muster bis zu einer Laenge von vier Bytes benutzen. Soll das Muster
   alle zwei Bytes wiederholt werden, so werden als Muster zwei gleiche
   2-Byte-Sequenzen verwendet, soll es nur ein Byte Laenge haben, werden
   vier gleiche Bytes uebergeben (oder "memset()" verwendet...).

   Beispiel: 4-Byte-Muster  <val>   = 0FEDCBA98H
             2-Byte-Muster    "     =  12341234H
             1-Byte-Muster    "     =  5A5A5A5AH
 *)


(* Nicht Ansi-C: *)
PROCEDURE memswap ((* EIN/ -- *) blk1 : ADDRESS;
                   (* EIN/ -- *) blk2 : ADDRESS;
                   (* EIN/ -- *) len  : sizeT   );

(* Tauscht <len> Bytes ab Adresse <blk1> bzw. <blk2> gegeneinander aus.
   Die Speicherbereiche duerfen sich nicht ueberlappen.
 *)


(* Nicht Ansi-C: *)
PROCEDURE memalloc ((* EIN/ -- *)     size : sizeT;
                    (* -- /AUS *) VAR old  : ADDRESS;
                    (* -- /AUS *) VAR adr  : ADDRESS );

PROCEDURE memdealloc ((* EIN/ -- *) old : ADDRESS );

(* Mit "memalloc()" wird Speicherplatz auf dem Stack reserviert, der durch
   "memdealloc()" wieder freigegeben wird.
   <old> ist der Wert des Stackpointers vor Aufruf der Funktion. Dieser Wert
   wird bei "memdealloc()" angegeben, um den Stackpointer wieder
   zurueckzusetzen. Wenn mehrere Male "memalloc()" hintereinander aufgerufen
   wird, reicht es, sich den Wert des Stackpointers vor dem ersten der
   Aufrufe zu merken, und nur einmal "memdealloc()" mit diesem Wert
   aufzurufen.
   <adr> ist der neue Wert des Stackpointers und dient gleichzeitig als
   Anfangsadresse des freien Speichers, der <size> Bytes Platz bietet.
   "memalloc()" entspricht ungefaehr dem ``C''-alloca, nur wird zusaetzlich
   der alte Stackpointer zurueckgeliefert. "memdealloc()" entspricht dem
   ``C''-setstack. Die Aufteilung in zwei Funktionen gegenueber der
   alleinigen Verwendung von 'alloca' in ``C'' ist notwendig, da die
   meisten M2-Compiler ihre Register NACH dem LINK retten und VOR dem
   UNLK zurueckschreiben, weshalb der Stackpointer am Ende der Funktion
   den Wert nach dem Registerretten haben muss.
   Der reservierte Speicher muss unbedingt explizit mit "memdealloc()"
   wieder freigegeben werden bevor die Funktion verlassen wird, vor einem
   "longjmp()" ist das allerdings nicht noetig.

   Die Funkionen sollten auf der gleichen Stackebene aufgerufen werden, also
   z.B. nicht "memalloc()" innerhalb einer WITH- oder FOR-Anweisung und
   "memdealloc()" ausserhalb!
 *)

END blk.
