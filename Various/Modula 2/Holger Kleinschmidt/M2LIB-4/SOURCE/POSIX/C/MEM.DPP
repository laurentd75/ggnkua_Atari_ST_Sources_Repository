DEFINITION MODULE mem;
__DEF_SWITCHES__
#ifdef HM2
#ifdef __LONG_WHOLE__
(*$!i+: Modul muss mit $i- uebersetzt werden! *)
(*$!w+: Modul muss mit $w- uebersetzt werden! *)
#else
(*$!i-: Modul muss mit $i+ uebersetzt werden! *)
(*$!w-: Modul muss mit $w+ uebersetzt werden! *)
#endif
#endif
(*****************************************************************************)
(* Dynamische Speicherverwaltung.                                            *)
(*                                                                           *)
(* Diese Speicherverwaltung fordert bei Bedarf Speicher vom Betriebssystem   *)
(* an und gibt ihn bei Gelegenheit auch wieder an das Betriebssystem zurueck.*)
(* Fuer alle Prozeduren gilt: Wenn intern ein Defekt der Verwaltungsstruktu- *)
(* ren festgestellt wird, schlaegt die entsprechende Prozedur fehl und       *)
(* 'errno' wird auf EINVAL gesetzt. Wenn Speicher fehlt, wird 'errno' auf    *)
(* ENOMEM gesetzt.                                                           *)
(*                                                                           *)
(* Falls beim Praeprozessieren des Implementationsmoduls das Makro __CHECKS__*)
(* gesetzt war, gilt folgendes:                                              *)
(*                                                                           *)
(* Alle Prozeduren fuehren ein paar Plausibilitaetstests der ihnen ueber-    *)
(* gebenen Adressen durch. Der Verwaltungsoverhead wird dadurch geringfuegig *)
(* groesser.                                                                 *)
(*                                                                           *)
(* Falls beim Praeprozessieren des Implementationsmoduls das Makro           *)
(* __THREADSAFE__ gesetzt war, gilt folgendes:                               *)
(*                                                                           *)
(* Die Speicheranforderungen gleichzeitig aktiver Prozesse (Threads) werden  *)
(* korrekt behandelt.                                                        *)
(*                                                                           *)
(* Prozesse, die die Speicherverwaltung benutzen wollen, muessen sich        *)
(* explizit an- und abmelden. Dies gilt nicht fuer den bei Programmstart     *)
(* aktiven Prozess. Wenn ein Prozess, der sich nicht mit "Register*()"       *)
(* angemeldet hat, eine Prozedur aufruft, schlaegt die Prozedur fehl und     *)
(* 'errno' wird auf ESRCH gesetzt.                                           *)
(*                                                                           *)
(* Falls beim Praeprozessieren des Implementationsmoduls das Makro _DEBUG    *)
(* gesetzt war, wird bei jeder Prozedur ein relativ aufwendiger Test der     *)
(* internen Verwaltungsstruktur durchgefuehrt.                               *)
(* --------------------------------------------------------------------------*)
(* 04-Jul-96, Holger Kleinschmidt                                            *)
(*****************************************************************************)

FROM SYSTEM IMPORT
(* TYPE *) ADDRESS;

FROM PORTAB IMPORT
(* TYPE *) UNSIGNEDLONG;

FROM types IMPORT
(* TYPE *) sizeT, pidT, StrPtr;

(*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*)

(* Die folgenden vier Prozeduren haben nur dann eine Funktion, wenn
 * beim Praeprozessieren des Implementationsmoduls das Makro __THREADSAFE__
 * gesetzt war. Sie sind nicht ANSI-C.
 *)

PROCEDURE RegisterMe ( ): BOOLEAN;

PROCEDURE RegisterThread ((* EIN/ -- *) pid : pidT ): BOOLEAN;

(* Hiermit wird der aufrufende Prozess bzw. der Prozess <pid> bei
   der Speicherverwaltung angemeldet, so dass die weiteren Prozeduren
   benutzt werden koennen. Geschieht dies nicht, kann kein Speicher
   angefordert werden. Wenn der Prozess bereits registriert ist oder
   kein Platz mehr frei ist, da die Anzahl gleichzeitig aktiver
   Prozesse begrenzt ist, wird FALSE zurueckgeliefert.

   Der bei Programmstart aktive Prozess wird automatisch angemeldet.
 *)

PROCEDURE UnregisterMe;

PROCEDURE UnregisterThread ((* EIN/ -- *) pid : pidT );

(* Damit wird der aufrufende Prozess bzw. der Prozess <pid> bei der
   Speicherverwaltung abgemeldet, wenn sicher ist, dass diese nicht
   mehr benoetigt wird. Evtl. noch vorhandener vom Betriebssystem
   angeforderter Speicher steht damit nicht mehr unter Verwaltung
   und wird erst bei Prozessende wieder freigegeben.
   Wenn ein Prozess nicht abgemeldet wird, passiert zwar nichts,
   aber da nur eine begrenzte Anzahl gleichzeitig aktiver Prozesse
   unterstuetzt wird, koennen mit jedem nicht abgemeldeten Prozess
   entsprechend weniger neue Prozesse angemeldet werden.
   Wenn der Prozess nicht angemeldet war, passiert nichts.
 *)


PROCEDURE malloc ((* EIN/ -- *) size : sizeT ): ADDRESS;

(* Liefert die Adresse eines Speicherbereichs, der mindestens <size> Bytes
   gross ist und beliebig vom Programm verwendet werden kann, oder NULL,
   wenn kein Speicher mehr frei ist. Bei Bedarf wird beim Betriebssystem neuer
   Speicher angefordert. Der Speicher ist nicht initialisiert (also auch
   nicht geloescht) und es duerfen ab der gelieferten Adresse auch nur <size>
   Bytes benutzt werden. Der Speicherbereich beginnt an einer geraden Adresse.

   Es wird ebenfalls NULL geliefert, wenn ein nicht angemeldeter Prozess
   diese Prozedur aufruft.
 *)


PROCEDURE calloc ((* EIN/ -- *) cnt  : sizeT;
                  (* EIN/ -- *) size : sizeT ): ADDRESS;

(* Fordert einen Speicherbereich fuer <cnt> Elemente der Groesse <size>
   an und entspricht malloc(cnt * size). Der Speicherbereich wird
   jedoch geloescht.
 *)


PROCEDURE free ((* EIN/ -- *) adr : ADDRESS );

(* Gibt den Speicherbereich, der ab Adresse <adr> beginnt, frei, so dass
   er wieder fuer andere Speicheranforderungen zur Verfuegung steht. Der
   Speicherbereich muss von "malloc()" oder "realloc()" angefordert
   worden sein. Wenn moeglich, wird Speicher auch wieder an das
   Betriebssystem zurueckgegeben.
   Wenn bei der Freigabe ein Fehler festgestellt wird (z.B. nicht durch
   "malloc()" reserviert), wird 'errno' gesetzt.
 *)


PROCEDURE realloc ((* EIN/ -- *) adr  : ADDRESS;
                   (* EIN/ -- *) size : sizeT   ): ADDRESS;

(* Aendert die Groesse des Speicherbereichs, auf den <adr> zeigt, auf
   <size> Bytes. Bis zur kleineren der neuen und alten Groesse bleibt
   der Inhalt des Speicherbereichs erhalten. Wenn der Bereich groesser
   wird, ist der zusaetzliche Speicher nicht initialisiert. Als
   Funktionswert wird die neue Adresse des Speicherbereichs
   geliefert, oder NULL, wenn kein Speicher mehr frei ist. In diesem
   Fall wird der Speicherbereich nicht veraendert.
   Ansonsten gilt das bei "malloc()" und "free()" Geschriebene.
 *)


(* Nicht ANSI-C: *)
PROCEDURE NewHeap ((* EIN/ -- *) size : UNSIGNEDLONG;
                   (* EIN/ -- *) perm : BOOLEAN      ): BOOLEAN;

(* Fordert einen neuen Speicherbereich mit mindestens <size> freien Bytes
   beim Betriebssystem an und fuegt diesen in die Freispeicherverwaltung ein.
   Intern wird <size> auf eine Minimalgroesse aufgerundet, falls noetig.
   Mit <perm> kann das Verhalten des Speicherbereichs festgelegt werden,
   wenn der letzte belegte Bereich mit "*free()" freigegeben wird: Ist
   <perm> = FALSE, wird der Block an das Betriebssystem zurueckgegeben,
   sonst nicht. <perm> = TRUE kann verwendet werden, wenn verhindert
   werden soll, dass oefter Speicher beim Betriebssystem angefordert
   wird. In diesem Fall wird zu Beginn des Programms ein ausreichend
   grosser Bereich angefordert, der fuer alle nachfolgenden "malloc()"s
   ausreicht und auch nach "free()" erhalten bleibt. Das kann z.B.
   fuer ACCs verwendet werden.
   Wenn das Betriebssystem nicht mehr genuegend Speicher zur Verfuegung
   stellen kann, oder ein nicht angemeldeter Prozess der Aufrufer ist,
   liefert die Funktion FALSE.
 *)


(* Nicht ANSI-C: *)
PROCEDURE AddHeap ((* EIN/ -- *) adr  : ADDRESS;
                   (* EIN/ -- *) size : UNSIGNEDLONG ): BOOLEAN;

(* Fuegt den Block, der an der Adresse <adr> beginnt und <size> Bytes
   gross ist, permanent in die Freispeicherverwaltung ein. Der Block darf
   danach nicht mehr vom Programm manipuliert werden! Dieser Block
   wird nicht an das Betriebssystem zurueckgegeben und kann daher auch
   eine globale Variable (ein Feld) sein. Auf diese Weise ist es
   moeglich, einen statischen Heap einzurichten, ohne dass jemals vom
   Betriebssystem Speicher angefordert wird. Voraussetzung ist natuerlich,
   dass der Block ausreichend gross ist. Die Funktion ist z.B. fuer ACCs
   geeignet.
   Wenn der Block nicht in die Verwaltung aufgenommen werden konnte
   (z.B. wegen zu geringer Groesse), wird FALSE zurueckgeliefert.
 *)


PROCEDURE strdup ((* EIN/ -- *) s : StrPtr ): StrPtr;

(* Erzeugt eine Kopie von s^ und liefert deren Adresse zurueck oder NULL,
   wenn kein Speicher mehr frei ist. Der Speicher kann spaeter mit
   "free()" wieder zurueckgegeben werden.
 *)

END mem.
