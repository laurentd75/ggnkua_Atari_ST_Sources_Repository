DEFINITION MODULE args;
__DEF_SWITCHES__
#ifdef HM2
#ifdef __LONG_WHOLE__
(*$!i+: Modul muss mit $i- uebersetzt werden! *)
(*$!w+: Modul muss mit $w- uebersetzt werden! *)
#else
(*$!i-: Modul muss mit $i+ uebersetzt werden! *)
(*$!w-: Modul muss mit $w+ uebersetzt werden! *)
#endif
#endif
(*****************************************************************************)
(* Durch dieses Modul soll zur Kommandozeile und zum Environment eine aehn-  *)
(* liche Schnittstelle bereitgestellt werden, wie sie fuer C-Programme exi-  *)
(* stiert.                                                                   *)
(* Das Modul sollte als allererstes im Hauptmodul importiert werden, und es  *)
(* sollte kein anderes (System)modul, das sich mit Kommandozeile oder Envi-  *)
(* ronment beschaeftigt, importiert werden (auch auf versteckte Importe aus  *)
(* tieferliegenden Modulen achten). Es kann trotzdem nicht garantiert werden,*)
(* dass dieses Modul mit allen M2-Systemen arbeitet.                         *)
(*                                                                           *)
(* Es wird auf mehrere Arten nach Argumenten der Kommandozeile gesucht, wobei*)
(* die angegebene Reihenfolge eingehalten wird; nur wenn nach einem Verfahren*)
(* keine Argumente uebergeben wurden, wird nach der naechsten Moeglichkeit   *)
(* der Argumentuebergabe gesucht:                                            *)
(*                                                                           *)
(* 1) ARGV im Environment (neuer Atari-Standard bzw. MWC), einschliesslich   *)
(*    Erweiterung fuer leere Argumente.                                      *)
(* 2) argv[0] := Programmname ueber 'Fcntl(PLOADINFO)'.                      *)
(* 3) argv[0] := Programmname ueber AES.shell_read, falls die Kommandopara-  *)
(*               meter mit denen aus der Basepage uebereinstimmen (auch fuer *)
(*               TOS-Programme).                                             *)
(*    (Diese Funktion existiert nur, wenn beim Praeprozessieren des Imple-   *)
(*     mentationsmoduls das entsprechende Makro definiert war.)              *)
(* 4) Kommandozeile in der BasePage (Atari-Standard)                         *)
(*                                                                           *)
(*                                                                           *)
(* Ist 'MWCStyle' = TRUE, wird das Laengenbyte der Kommandozeile, das mit    *)
(* dem normalerweise ungueltigen Wert von 127 anzeigt, dass per ARGV Argumen-*)
(* te uebergeben werden, ignoriert. Hierdurch koennen auch aeltere Programme,*)
(* wie z.B. die Shell 'Gulaam' (mit: 'set env_style mw'), die das sehr aehn- *)
(* liche Mark Williams-Verfahren fuer erweiterte Kommandozeile benutzen,     *)
(* Argumente uebergeben.                                                     *)
(*                                                                           *)
(* Die DTA wird auf einen internen Puffer gesetzt, so dass die Kommandozeile *)
(* in der Basepage nicht dafuer benutzt wird.                                *)
(*                                                                           *)
(* Environment-Variablen duerfen sowohl im ueblichen "UNIX" bzw. "PCDOS"-    *)
(* Format, als auch im "TOS"-Format (Nullbyte zwischen '=' und Variablenwert,*)
(* auch in Gulaam, mit: 'set env_style bm' erreichbar) vorkommen, sie werden,*)
(* falls noetig, auf das "UNIX"-Format korrigiert.                           *)
(* --------------------------------------------------------------------------*)
(* 10-Aug-96, Holger Kleinschmidt & Ulrich Kaiser                            *)
(*****************************************************************************)

FROM types IMPORT
(* TYPE *) int, StrPtr, StrArray, ArrayRange;

(*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*)

TYPE
  ARGVstyle = (noARGV, simpleARGV, nullARGV);

#ifdef __GEMDOS__
CONST
  MWCStyle = TRUE;
#endif

VAR
  environ : StrArray;

(* environ^[i] liefert einen Zeiger auf die i-te Environmentvariable.
   Das Ende des Environments wird durch einen NULL-Zeiger (NICHT NIL!)
   gekennzeichnet.

   ACHTUNG: Die Adressen zeigen direkt in die entsprechenden Strukturen und
            duerfen nicht dazu verwendet werden, diese zu veraendern!
            Ueberhaupt sollte stattdessen "getenv()" oder "GetEnvVar()"
            benutzt werden.

            Es ist NICHT garantiert, dass die einzelnen Environment-
            Strings direkt hintereinander im Speicher abgelegt sind;
            lediglich die Adressen der Strings stehen hintereinander im Feld.

            Der Wert von 'environ' muss waehrend des Programmlaufes nicht
            konstant bleiben!
 *)

(*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*)

PROCEDURE main ((* -- /AUS *) VAR argc : ArrayRange;
                (* -- /AUS *) VAR argv : StrArray   );

(* Nach dem Aufruf enthaelt <argc> die Anzahl der Programmargumente
   einschliesslich des Programmnamens; <argv>^[i] liefert einen Zeiger
   auf das i-te Argument (Programmname: 0-tes Argument). Um das Ende des
   Zeigerfeldes zu kennzeichnen, ist der Zeiger nach dem letzten gueltigen
   ein NULL-Zeiger (nicht: NIL); damit gilt: <argv>^[argc] = NULL.
   Fuer das Abspeichern der Zeigerfelder (einschliesslich des Feldes fuer
   die Environmentvariablen) wird bei Programmstart Speicher vom
   Betriebssystem angefordert; nur wenn kein Speicher mehr frei ist,
   liefert <argc> gleich Null, sonst ist <argc> mindestens = Eins, wenn
   auch der Programmname nicht immer einwandfrei festgestellt werden kann
   (dann ist <argv>^[0]^ = "").

   Die Prozedur kann beliebig oft und an beliebiger Stelle aufgerufen
   werden, da saemtliche Initialisierungen schon beim Programmstart
   vorgenommen werden.

   Achtung: Die Adressen zeigen direkt in die entsprechenden Strukturen und
            duerfen nicht dazu verwendet werden, diese zu veraendern!
            Die einzelnen Environmentstrings liegen nicht unbedingt
            hintereinander, lediglich ihre Anfangsadressen!
 *)


PROCEDURE getenv ((* EIN/ -- *) REF var : ARRAY OF CHAR ): StrPtr;

(* Falls die Environmentvariable <var> existiert, wird als Funktionswert die
   Adresse des Wertes der Variablen nach dem '=' geliefert, ansonsten ein
   NULL-Pointer.

   Achtung: Die Adresse zeigt direkt ins Environment und darf nicht dazu
            benutzt werden, dieses zu veraendern!
 *)


(* Nicht POSIX: *)
PROCEDURE putenv ((* EIN/ -- *) var : StrPtr ): int;

(* <var>^ ist ein String der Form: variable=value. Wenn eine
   Environmentvariable variable existiert, wird value ihr neuer Wert.
   Wenn sie noch nicht existierte, wird eine neue Variable mit dem
   Wert von <var>^ abgelegt.

   <var>^ wird ein Teil des Environments, deshalb muss <var> auf einen
   globalen String zeigen, der seinen Wert behaelt, solange auf das
   Environment zugegriffen werden kann, oder bis ein erneuter Aufruf
   der Prozedur fuer dieselbe Environmentvariable ausgefuehrt wird!
   Durch diesen Aufruf kann der Wert von 'environ' veraendert werden!

   Falls die Prozedur wegen Speichermangels nicht ausgefuehrt werden
   konnte, wird -1 zurueckgeliefert, sonst Null.
 *)


(* Nicht POSIX: *)
(*===========================================================================*)
(* Die folgenden Prozeduren sind bequemer als "main()" und "getenv()", haben *)
(* aber den Nachteil, dass die Ergebnisstrings <arg> und <val> in der Laenge *)
(* durch den jeweiligen Parameter begrenzt sind.                             *)
(*===========================================================================*)


PROCEDURE ArgCount ( ): CARDINAL;

(* Liefert die Anzahl der Kommandozeilenargumente (> 0) *)


PROCEDURE GetArg ((* EIN/ -- *)     i   : CARDINAL;
                  (* -- /AUS *) VAR arg : ARRAY OF CHAR );

(* Liefert in <arg> das evtl. gekuerzte <i>-te Kommandozeilenargument oder
   einen Leerstring, falls <i> zu gross ist.
 *)


PROCEDURE GetEnvVar ((* EIN/ -- *) REF var : ARRAY OF CHAR;
                     (* -- /AUS *) VAR val : ARRAY OF CHAR ): BOOLEAN;

(* Falls die Environmentvariable <var> existiert, wird TRUE als
   Funktionswert zurueckgegeben und in <val> der Wert der Variable
   nach dem '=' geliefert.
 *)


PROCEDURE ARGVused ( ): ARGVstyle;

(* Testet, ob das ARGV-Verfahren beim Aufruf des Programms verwendet wurde,
   und wenn ja, ob das erweiterte Verfahren fuer leere Argumente verwendet
   wurde.
   Die Funktion ist fuer den Benutzer eher uninteressant.
 *)

END args.
