DEFINITION MODULE StringsX;
__DEF_SWITCHES__
#ifdef HM2
#ifdef __LONG_WHOLE__
(*$!i+: Modul muss mit $i- uebersetzt werden! *)
(*$!w+: Modul muss mit $w- uebersetzt werden! *)
#else
(*$!i-: Modul muss mit $i+ uebersetzt werden! *)
(*$!w-: Modul muss mit $w+ uebersetzt werden! *)
#endif
#endif
(*****************************************************************************)
(* Weitere Operationen fuer M2-Strings.                                      *)
(* --------------------------------------------------------------------------*)
(* Dieses Modul ist nicht Teil des ISO-Standards.                            *)
(* --------------------------------------------------------------------------*)
(* 11-Aug-96, Holger Kleinschmidt                                            *)
(*****************************************************************************)

FROM ISOStrings IMPORT
(* TYPE *) CompareResults;

(*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*)

PROCEDURE ExtractTail ((* EIN/ -- *)     source          : ARRAY OF CHAR;
                       (* EIN/ -- *)     numberToExtract : CARDINAL;
                       (* -- /AUS *) VAR destination     : ARRAY OF CHAR );

(* Kopiert maximal die letzten <numberToExtract> Zeichen von <source>
   nach <destination>.
 *)


TYPE
  CharConvert = PROCEDURE(CHAR): CHAR;

PROCEDURE Convert ((* EIN/ -- *) REF source      : ARRAY OF CHAR;
                   (* EIN/ -- *)     convert     : CharConvert;
                   (* -- /AUS *) VAR destination : ARRAY OF CHAR );

(* Konvertiert <source> zeichenweise mittels <convert> und weist das
   Ergebnis <destination> zu.
 *)


PROCEDURE Revert ((* EIN/ -- *)     source      : ARRAY OF CHAR;
                  (* -- /AUS *) VAR destination : ARRAY OF CHAR );

(* Weist <destination> den zeichenweise umgedrehten String <source> zu. *)


PROCEDURE Trim ((* EIN/AUS *) VAR string : ARRAY OF CHAR );

(* Entfernt fuehrende und abschliessende Leerzeichen in <string>. *)


TYPE
  Alignment = (left, middle, right);

PROCEDURE Align ((* EIN/ -- *)     width   : CARDINAL;
                 (* EIN/ -- *)     aligned : Alignment;
                 (* EIN/AUS *) VAR string  : ARRAY OF CHAR );

(* Richtet den String <string> in einem Feld der Breite <width> gemaess
   <aligned> linksbuendig, rechtsbuendig oder mittig aus. Wenn <string>
   kleiner als <width> ist, wird entsprechend mit Leerzeichen aufgefuellt,
   sonst geschieht nichts.
 *)


PROCEDURE CanConvertAll
  ((* EIN/ -- *)     sourceLength : CARDINAL;
   (* EIN/ -- *) VAR destination  : ARRAY OF CHAR ): BOOLEAN;

(* Testet, ob <destination> <sourceLength> Zeichen aufnehmen kann. *)


PROCEDURE CanRevertAll
  ((* EIN/ -- *)     sourceLength : CARDINAL;
   (* EIN/ -- *) VAR destination  : ARRAY OF CHAR ): BOOLEAN;

(* Testet, ob <destination> <sourceLength> Zeichen aufnehmen kann. *)


PROCEDURE CanExtractTailAll
  ((* EIN/ -- *)     sourceLength    : CARDINAL;
   (* EIN/ -- *)     numberToExtract : CARDINAL;
   (* EIN/ -- *) VAR destination     : ARRAY OF CHAR ): BOOLEAN;

(* Testet, ob es <numberToExtract> Zeichen in einem String der Laenge
   <sourceLength> gibt, und ob <destination> <numberToExtract> Zeichen
   aufnehmen kann.
 *)


PROCEDURE CanAlignAll ((* EIN/ -- *)     width  : CARDINAL;
                       (* EIN/ -- *) VAR string : ARRAY OF CHAR ): BOOLEAN;

(* Testet, ob <string> nicht bereits mehr als <width> Zeichen hat und ob
   <string> insgesamt <width> Zeichen aufnehmen kann.
 *)


PROCEDURE EqualPrefix ((* EIN/ -- *)     prefixLen  : CARDINAL;
                       (* EIN/ -- *) REF stringVal1 : ARRAY OF CHAR;
                       (* EIN/ -- *) REF stringVal2 : ARRAY OF CHAR ): BOOLEAN;

(* Testet, ob die maximal <prefixLen> ersten Zeichen von <stringVal1>
   und <stringVal2> gleich sind.
 *)


TYPE
  CharClassTest = PROCEDURE(CHAR): BOOLEAN;

PROCEDURE FindNextInClass ((* EIN/ -- *)     inClass        : CharClassTest;
                           (* EIN/ -- *) REF stringToSearch : ARRAY OF CHAR;
                           (* EIN/ -- *)     startIndex     : CARDINAL;
                           (* -- /AUS *) VAR charFound      : BOOLEAN;
                           (* -- /AUS *) VAR posOfChar      : CARDINAL );

(* Ab dem Index <startIndex> wird der naechste Zeichen im String
   <stringToSearch> gesucht, fuer das die Funktion <inClass> TRUE liefert.
   Die Suche erfolgt zum Ende des Strings hin.
   Falls <startIndex> < LENGTH(stringToSearch) und ein solches Zeichen
   gefunden wurde, ist <patternFound> = TRUE und in <posOfPattern>
   steht der Index des Zeichens in <stringToSearch>; andernfalls ist
   <patternFound> = FALSE, und <posOfPattern> wird nicht veraendert.
 *)


PROCEDURE FindPrevInClass ((* EIN/ -- *)     inClass        : CharClassTest;
                           (* EIN/ -- *) REF stringToSearch : ARRAY OF CHAR;
                           (* EIN/ -- *)     startIndex     : CARDINAL;
                           (* -- /AUS *) VAR charFound      : BOOLEAN;
                           (* -- /AUS *) VAR posOfChar      : CARDINAL );

(* Ab dem Index <startIndex> wird das vorige Zeichen im String
   <stringToSearch> gesucht, fuer das die Funktion <inClass> TRUE liefert.
   Die Suche erfolgt zum Anfang des Strings hin.
   Falls <startIndex> >= LENGTH(stringToSearch), wird vom Ende von
   <stringToSearch> aus gesucht. Falls ein solches Zeichen gefunden
   wurde, ist <patternFound> = TRUE und in <posOfPattern> steht der Index
   des Zeichens in <stringToSearch>; andernfalls ist <patternFound> = FALSE,
   und <posOfPattern> wird nicht veraendert.
 *)

END StringsX.
