DEFINITION MODULE DosSystem;
__DEF_SWITCHES__
#ifdef HM2
#ifdef __LONG_WHOLE__
(*$!i+: Modul muss mit $i- uebersetzt werden! *)
(*$!w+: Modul muss mit $w- uebersetzt werden! *)
#else
(*$!i-: Modul muss mit $i+ uebersetzt werden! *)
(*$!w-: Modul muss mit $w+ uebersetzt werden! *)
#endif
#endif
(*****************************************************************************)
(* 27-Aug-96, Holger Kleinschmidt & Ulrich Kaiser                            *)
(*****************************************************************************)

FROM SYSTEM IMPORT
(* TYPE *) ADDRESS;

FROM PORTAB IMPORT
(* TYPE *) ANYBYTE, UNSIGNEDBYTE, UNSIGNEDWORD, UNSIGNEDLONG, WORDSET,
           SIGNEDLONG;

FROM types IMPORT
(* TYPE *) StrPtr, int;

(*===================== "exit()", "Exit()" ==================================*)

CONST
  ExitSuccess = 0;
  ExitFailure = 1;

(*======================= "Set/GetException()" ==============================*)

TYPE
  ExcVector = [2..263];

(*======================= "*Cookie*()" ======================================*)

TYPE
  CookieVal = RECORD
    CASE TAG_COLON UNSIGNEDWORD OF
      0: ul   : UNSIGNEDLONG;
     |1: uwh  : UNSIGNEDWORD;
         uwl  : UNSIGNEDWORD;
     |2: wsh  : WORDSET;
         wsl  : WORDSET;
     |3: ubhh : UNSIGNEDBYTE;
         ubhl : UNSIGNEDBYTE;
         ublh : UNSIGNEDBYTE;
         ubll : UNSIGNEDBYTE;
    ELSE ptr  : ADDRESS;
    END;
  END;

TYPE
  Cookie = RECORD
    id  : UNSIGNEDLONG;
    val : CookieVal;
  END;

TYPE
  CookieRange = [0..1000]; (* beliebig *)
  CookiePtr   = POINTER TO ARRAY CookieRange OF Cookie;

(* Die wichtigsten von Atari benutzten Cookies (ab TOS 1.6): *)
CONST
  MiNTCk = 4D694E54H; (* MiNT *) (* MiNT vorhanden *)

(* Ein Cookie-Jar mit den folgenden Cookies wird ab TOS 1.06
 * automatisch angelegt:
 *)

  CPUCk  = 5F435055H; (* _CPU *) (* Prozessor *)
  FPUCk  = 5F465055H; (* _FPU *) (* Mathe-Coprozessor *)
  VDOCk  = 5F56444FH; (* _VDO *) (* Video-Hardware *)
  SNDCk  = 5F534E44H; (* _SND *) (* Sound-Hardware *)
  MCHCk  = 5F4D4348H; (* _MCH *) (* Rechnertyp *)
  SWICk  = 5F535749H; (* _SWI *) (* Konfigurationsschalter *)
  FRBCk  = 5F465242H; (* _FRB *) (* Fast-RAM-Puffer *)

(* Zusaetzlich ab TOS 2.06/3.06: *)

  FDCCk  = 5F464443H; (* _FDC *) (* Floppy-Controller-Hardware *)
  NETCK  = 5F4E4554H; (* _NET *) (* Netzwerk vorhanden *)
  FLKCk  = 5F464C4BH; (* _FLK *) (* File-Locking vorhanden *)

(* Zusaetzlich ab TOS 4.00: (Aufbau siehe ST-Computer 4/93, 6/93) *)

  AKPCk  = 5F414B50H; (* _AKP *) (* Landessprache, Tastaturlayout *)
  IDTCk  = 5F494454H; (* _IDT *) (* Datumsformat *)

(* Zusaetzlich ab ??: (siehe ST-Computer 1/95) *)

  MNAMCk = 4D4E414DH; (* MNAM *) (* Zeiger auf Name des Rechnertyps *)


(*======================= "Language()" ======================================*)

TYPE
  PrefLanguage = (
    lUSA, (* Amerikanisches Englisch *)
    lFRG, (* Deutsch *)
    lFRA, (* Franzoesisch *)
    lUK,  (* Englisch *)
    lSPA, (* Spanisch *)
    lITA, (* Italienisch *)
    lSWE, (* Schwedisch *)
    lSWF, (* Franzoesisch, Schweiz *)
    lSWG, (* Deutsch, Schweiz *)
    lTUR, (* Tuerkisch *)
    lFIN, (* Finnisch *)
    lNOR, (* Norwegisch *)
    lDEN, (* Daenisch *)
    lAUS, (* Arabisch *)
    lHOL, (* Hollaendisch *)
    lCZE, (* Tschechisch *)
    lHUN, (* Ungarisch *)
    UnknownLanguage
  );

(*======================= "Machine()" =======================================*)

TYPE
  MachineType = (
    atariST,       (* ST, Mega ST *)
    atariSTE,
    atariTT,
    atariF030,     (* Falcon *)
    atariSTBOOK,   (* ST-Book *)
    atariSTEIDE,   (* STE + IDE *)
    atariMSTE,     (* Mega STE *)
    atariSPARROW,  (* Sparrow *)
    NoAtari,
    UnknownMachine
  );

(*========================== "GetCPU()" =====================================*)

TYPE
  CPUType = (
    CPU68000,
    CPU68010,
    CPU68020,
    CPU68030,
    CPU68040,
    CPU68060,
    UnknownCPU
  );

(*======================= "ExecuteSuper()" ==================================*)

TYPE
  SuperProc = PROCEDURE ( ): SIGNEDLONG;

(*======================= "CurrentCPUMode()" ================================*)

TYPE
  CPUMode = (USER, SUPERVISOR);

(*================ "CurrentIRLevel()", "SetIRLevel()" =======================*)

TYPE
  IRLevel = (IPL0, IPL1, IPL2, IPL3, IPL4, IPL5, IPL6, IPL7);

(*========================== "GetFPU()" =====================================*)

TYPE
  FPUFlag = (
    sfp004, (* SFP 004 oder kompatible FPU-Peripheriekarte *)
    fpu1,   (* Bitmaske, siehe FPU* *)
    fpu2,   (* -""- *)
    m68040  (* 68040-Prozessor mit integrierter FPU *)
  );

  FPUType = SET OF FPUFlag;

CONST
  FPUMask = FPUType{fpu1,fpu2};

  FPU81or82 = FPUType{fpu1};      (* 68881 oder 68882 *)
  FPU81     = FPUType{fpu2};      (* eindeutig 68881 *)
  FPU82     = FPUType{fpu1,fpu2}; (* eindeutig 68882 *)

TYPE
  FPUInfo = RECORD
    fpu   : FPUType;
    linef : UNSIGNEDWORD; (* <> 0: Line-F-Softwareemulation *)
  END;

(*========================= "GetIEEEfpState()" ==============================*)

TYPE
#if reverse_set
  IEEEfpFlag = (
    fp15,fp14,fp13,fp12,fp11,fp10,fp9,
    fpIOP,  (* Invalid Operation *)
    fpOVFL, (* Overflow *)
    fpUNFL, (* Underflow *)
    fpDZ,   (* Divide by Zero *)
    fpINEX, (* Inexact *)
    fp2,fp1,fp0
  );
#else
  IEEEfpFlag = (
    fp0, fp1, fp2,
    fpINEX, (* Inexact *)
    fpDZ,   (* Divide by Zero *)
    fpUNFL, (* Underflow *)
    fpOVFL, (* Overflow *)
    fpIOP,  (* Invalid Operation *)
    fp9,fp10,fp11,fp12,fp13,fp14,fp15
  );
#endif

  IEEEfpState = PACKEDSET OF IEEEfpFlag;

(*======================= "ShellInstalled()" ================================*)

TYPE
  Shell = (Mupfel, Gemini, Gulam, Master, Thing, NoShell, UnknownShell);

(*================== "GetOsHeader()", "*Basepage()" =========================*)

TYPE
  CmdLine = ARRAY [0..127] OF CHAR;

  BasePtr  = POINTER TO BasePage;
  BasePPtr = POINTER TO BasePtr;
  BasePage = RECORD
    pLowtpa  : ADDRESS;
    pHitpa   : ADDRESS;
    pTbase   : ADDRESS;
    pTlen    : UNSIGNEDLONG;
    pDbase   : ADDRESS;
    pDlen    : UNSIGNEDLONG;
    pBbase   : ADDRESS;
    pBlen    : UNSIGNEDLONG;
    pDta     : ADDRESS;
    pParent  : BasePtr;
    pResrvd0 : UNSIGNEDLONG;
    pEnv     : ADDRESS;
    pResrvd1 : ARRAY [0..79] OF CHAR;
    pCmdlin  : CmdLine;
  END;

TYPE
  OsPtr = POINTER TO OsHeader;
  OsHeader = RECORD
    osEntry   : UNSIGNEDWORD;
    osVersion : UNSIGNEDWORD;
    reseth    : ADDRESS;
    osBeg     : OsPtr;
    osEnd     : ADDRESS;
    osRsv1    : UNSIGNEDLONG;
    osMagic   : ADDRESS;
    osDate    : UNSIGNEDLONG;
    osConf    : WORDSET;
    osDosdate : WORDSET;
    (* die folgenden Variablen ab TOS 1.02 *)
    pRoot     : ADDRESS;
    pkbshift  : ADDRESS;
    pRun      : BasePPtr;
    pRsv2     : ADDRESS;
  END;

(*======================= "MetaDOS()" =======================================*)

TYPE
  MetaInfo = RECORD
    drivemap : UNSIGNEDLONG;
    version  : StrPtr;
    reserved : ARRAY [0..1] OF UNSIGNEDLONG;
  END;

(*======================= "*SysMem()" =======================================*)

CONST (* Adressen der Systemvariablen *)
  procLives   = 380H;      procDregs   = 384H;
  procAregs   = 3A4H;      procPc      = 3C4H;
  procUsp     = 3C8H;      procStk     = 3CCH;

  etvTimer    = 400H;      etvCritic   = 404H;
  etvTerm     = 408H;

  memvalid    = 420H;      memcntrl    = 424H;
  resvalid    = 426H;      resvector   = 42AH;
  phystop     = 42EH;      Membot      = 432H;
  Memtop      = 436H;      memval2     = 43AH;

  flock       = 43EH;      seekrate    = 440H;
  TimerMs     = 442H;      Fverify     = 444H;
  Bootdev     = 446H;

  palmode     = 448H;      defshiftmd  = 44AH;
  sshiftmd    = 44CH;      VBasAd      = 44EH;

  vblsem      = 452H;      nvbls       = 454H;
  Vblqueue    = 456H;      colorptr    = 45AH;
  screenpt    = 45EH;      Vbclock     = 462H;
  Frclock     = 466H;

  hdvInit     = 46AH;

  swvVec      = 46EH;

  hdvBpb      = 472H;      hdvRw       = 476H;
  hdvBoot     = 47AH;      hdvMediach  = 47EH;

  Cmdload     = 482H;

  conterm     = 484H;

  trp14ret    = 486H;      criticret   = 48AH;

  themd       = 48EH;      Md          = 49EH;

  savptr      = 4A2H;

  Nflops      = 4A6H;

  conState    = 4A8H;      savRow      = 4ACH;

  savContext  = 4AEH;

  Bufl        = 4B2H;

  Hz200       = 4BAH;

  theEnv      = 4BEH;

  Drvbits     = 4C2H;

  Dskbufp     = 4C6H;

  Autopath    = 4CAH;

  VblList     = 4CEH;

  PrtCnt      = 4EEH;      Prtabt      = 4F0H;

  Sysbase     = 4F2H;      ShellP      = 4F6H;
  endOs       = 4FAH;      execOs      = 4FEH;

  scrDump     = 502H;      prvLsto     = 506H;
  prvLst      = 50AH;      prvAuxo     = 50EH;
  prvAux      = 512H;

  punPtr      = 516H;

  memval3     = 51AH;

  xconstat    = 51EH;
  IsPRT       = 51EH;      IsAUX       = 522H;
  IsCON       = 526H;      IsMIDI      = 52AH;
  IsIKBD      = 52EH;      IsRAWCON    = 532H;
  IsDEV6      = 536H;      IsDEV7      = 53AH;

  xconin      = 53EH;
  IPRT        = 53EH;      IAUX        = 542H;
  ICON        = 546H;      IMIDI       = 54AH;
  IIKBD       = 54EH;      IRAWCON     = 552H;
  IDEV6       = 556H;      IDEV7       = 55AH;

  xcostat     = 55EH;
  OsPRT       = 55EH;      OsAUX       = 562H;
  OsCON       = 566H;      OsMIDI      = 56AH;
  OsIKBD      = 56EH;      OsRAWCON    = 572H;
  OsDEV6      = 576H;      OsDEV7      = 57AH;

  xconout     = 57EH;
  OPRT        = 57EH;      OAUX        = 582H;
  OCON        = 586H;      OMIDI       = 58AH;
  OIKBD       = 58EH;      ORAWCON     = 592H;
  ODEV6       = 596H;      ODEV7       = 59AH;

  Longframe   = 59EH;      PCookies    = 5A0H;

  ramtop      = 5A4H;      ramvalid    = 5A8H;

  bellHook    = 5ACH;      kclHook     = 5B0H;


(*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*)

PROCEDURE GetOsHeader ((* -- /AUS *) VAR osp : ADDRESS );

(* Liefert einen Zeiger auf die OSHEADER-Systemstruktur oder NULL,
   falls der Cookie SVAR gesetzt ist.
 *)


PROCEDURE DosVersion ( ): CARDINAL;

(* Liefert die kodierte DOS-Version *)


PROCEDURE SysClock ( ): UNSIGNEDLONG;

(* Liefert zurueck, wie oft die Systemvariable '_hz_200' seit Programmstart
   erhoeht wurde, oder Null, falls der Cookie SVAR gesetzt ist.
 *)


PROCEDURE ShellInstalled ( ): Shell;

(* Versucht festzustellen, ob ueber die Systemvariable '_shell_p' eine
   Kommandoshell installiert ist.
 *)


PROCEDURE CallShell ((* EIN/ -- *) cmd : StrPtr ): INTEGER;

(* Versucht ein Shell-Kommando ueber die Systemvariable '_shell_p'
   abzusetzen. Vorher wird mit "ShellInstalled()" ueberprueft, ob eine
   Shell installiert ist; wenn allerdings nach einem Reset oder nach
   Beendigung einer Shell (-> Gulam) diese Variable nicht wieder auf
   NULL gesetzt wird, gibts mit ziemlicher Sicherheit einen Systemabsturz!
   Als Funktionswert wird -1 zurueckgeliefert, falls keine Shell installiert
   ist, ansonsten der Rueckgabewert der Shell.
 *)


PROCEDURE ProcessDomain ((* EIN/ -- *) dom : INTEGER ): INTEGER;

(* Beeinflusst das Verhalten bestimmter Systemaufrufe.

   <dom> < 0: Keine Aenderung, nur Abfrage
   <dom> = 0: TOS-Domain
   <dom> = 1: MiNT-Domain

   Der alte ``Domain''-Wert wird zurueckgeliefert. Die Funktion hat nur
   unter MiNT eine Auswirkung.

   Bei Programmstart wird automatisch versucht die MiNT-Domain einzustellen.

   Fuer ein ACC, das unter einem Nicht-Multitasking-Desktop laeuft, sollte
   die TOS-Domain eingestellt werden, da sonst der Desktop auch in der MiNT-
   Domain laeuft und z.B. die Dateinamen klein sind. Wird Ulrich Kaisers
   'crystal'- bzw. 'M2GEM'-Bibliothek ab Version 1.03 verwendet, geschieht
   dies automatisch.
 *)



(* Routinen zur Manipulation des Cookie-Jars.
 * Die Routinen koennen keinen neuen Cookie-Jar einrichten, bzw. einen
 * bestehenden erweitern. Hierzu muss der benoetigte Speicher resident
 * bleiben, i.allg. muss dafuer also ein residentes Programm benutzt
 * werden. Auch das Erweitern erfordert einen residenten Speicher, da ALLE
 * Cookies, also nicht nur der neu einzutragende, der den vorhandenen Jar
 * gesprengt haette, in den neuen Speicherbereich kopiert werden muessen.
 *)

PROCEDURE GetCookieBase ((* -- /AUS *) VAR pcookies : CookiePtr );

(* Es wird ein Zeiger auf den Cookie Jar geliefert, falls vorhanden;
   ansonsten ist <pcookies> gleich NULL.
   Der Cookie Jar ist ein Feld von Eintraegen des Typs 'Cookie'. Der letzte
   Cookie hat die ID '0H' und als Wert die Anzahl der moeglichen Eintraege
   im Cookie Jar. Hierbei ist zu beachten, dass dieser End-Cookie selbst
   einen Eintrag belegt.
 *)


PROCEDURE GetCookie ((* EIN/ -- *)     cookie : UNSIGNEDLONG;
                     (* -- /AUS *) VAR value  : CookieVal    ): BOOLEAN;

(* Der Cookie mit der ID <cookie> wird gesucht. Ist der Cookie nicht
   vorhanden oder kein Cookie Jar installiert, ist der Funktionswert FALSE,
   und <value> ist Null;sonst wird in <value> der Wert des Cookies geliefert
 *)


PROCEDURE SetCookie ((* EIN/ -- *)     cookie : UNSIGNEDLONG;
                     (* EIN/ -- *)     value  : CookieVal;
                     (* -- /AUS *) VAR done   : BOOLEAN      );

(* Der Cookie mit der ID <cookie> wird gesucht. Wird der Cookie gefunden,
   erhaelt er den neuen Wert <value>. Wird der Cookie nicht gefunden, so
   wird er neu eingetragen mit <cookie> und <value>. Ist im Cookie Jar nicht
   mehr genuegend Platz fuer den neuen Cookie, wird nichts geaendert, und
   <done> ist gleich FALSE.
 *)


PROCEDURE RemoveCookie ((* EIN/ -- *)     cookie : UNSIGNEDLONG;
                        (* -- /AUS *) VAR found  : BOOLEAN      );

(* Der Cookie mit der ID <cookie> wird gesucht und aus dem Cookie Jar
   entfernt. Wird er nicht gefunden, passiert nichts, und <found> ist
   gleich FALSE.
 *)


PROCEDURE CookieJarSize( ): CARDINAL;

PROCEDURE FreeCookieEntries( ): CARDINAL;

(* Es wird die Anzahl der moeglichen Eintraege im Cookie Jar einschliesslich
   des End-Cookies, bzw. die Anzahl der noch freien Eintraege geliefert
 *)


(* Die folgenden Funktionen liefern ihren Wert anhand eines Cookie-Jar-
 * Eintrags, der aber nur beim Programmstart untersucht wird, da davon
 * ausgegangen wird, das sich der Wert dieser Cookies waehrend des
 * Programmlaufs nicht aendert.
 *)

PROCEDURE Machine ( ): MachineType;

(* Versucht, den Typ des Rechners durch den '_MCH'-Cookie festzustellen *)


PROCEDURE GetCPU ( ): CPUType;

(* Versucht, den Typ der CPU durch den '_CPU'-Cookie festzustellen *)


PROCEDURE GetFPU ((* -- /AUS *) VAR info : FPUInfo );

(* Versucht, den Typ der FPU durch den '_FPU'-Cookie festzustellen *)


PROCEDURE MiNTVersion ( ): CARDINAL;

(* Liefert die kodierte MiNT-Version (= 0, falls MiNT nicht aktiv) *)


PROCEDURE MagiCVersion ( ): INTEGER;

(* Liefert die BCD-kodierte MagiC-Version (= 0, falls MagiC im Autoordner)
   oder -1, wenn MagiC nicht installiert ist.
 *)


PROCEDURE FileLocking ( ): BOOLEAN;

(* Testet, ob das Betriebssystem ``File locking'' unterstuetzt *)


PROCEDURE Language ( ): PrefLanguage;

(* Ermittelt die vorzugsweise verwendete ``Sprache'' des Desktops aus dem
   '_AKP'-Cookie, bzw. aus dem 'OsHeader', falls der Cookie nicht existiert.
   Unter MultiTOS hat die durch 'appl_getinfo' erhaltene Information
   (aus der Konfigurationsvariable AE_LANG, erscheint nicht im Environment)
   Vorrang vor "Language()".
 *)


PROCEDURE GetIEEEfpState ( ): IEEEfpState;

PROCEDURE ResetIEEEfpState;

(* Diese Prozeduren duerfen nur ausgefuehrt werden, wenn eine FPU
   vorhanden ist. Es wird das "Accrued Exception Byte" des FPU-Registers
   FPSR abgefragt bzw. geloescht. Dies kann dazu benutzt werden, nach
   einer Folge von FPU-Befehlen zu testen, ob ein Fehler aufgetreten
   ist, wenn die Exceptions deaktiviert sind. Evtl. auftretende Fehler
   bei FPU-Befehlen werden in diesem Byte akkumuliert, bis es wieder
   geloescht wird.
 *)


PROCEDURE ActBasepage ((* -- /AUS *) VAR base : ADDRESS );

(* Liefert die Adresse der Basepage des aufrufenden Prozesses oder
   NULL, falls die Basepage nicht festgestellt werden kann (sollte
   eigtl. nicht passieren).

   ACHTUNG: Beim Aufruf von 'Pfork' oder 'Pvfork' wird zwar eine neue
            Prozesskennung aber keine neue Basepage erzeugt!
 *)


PROCEDURE CurrentCPUMode ( ): CPUMode;

(* Liefert den momentanen CPU-Modus *)


PROCEDURE SuperOn;

PROCEDURE SuperOff;

(* Schalten den Supervisormodus ein bzw. aus.
   Die beiden Prozeduren duerfen nur auf einer Ebene als 'Klammer' benutzt
   werden, d.h. innerhalb einer Prozedur: "SuperOn"..."SuperOff". Innerhalb
   dieses priviligierten Abschnitts duerfen also auch keine Prozeduren
   aufgerufen werden, die selber den Modus aendern, denn mit dem ersten
   auftretenden "SuperOff" ist wieder der Usermodus eingeschaltet.
   Ausserdem sollte der Aufenthalt im Supervisor-Modus auf das wirklich
   noetige beschraenkt bleiben.
 *)


PROCEDURE ExecuteSuper ((* EIN/ -- *) proc : SuperProc ): SIGNEDLONG;

(* Die Prozedur <proc> wird im Supervisormodus ausgefuehrt; evtl. Parameter
   muessen ueber globale Variablen weitergegeben werden. Es ist egal, in
   welchem Modus die CPU ist.
   Als Funktionswert wird das Ergebnis von <proc> geliefert.
   <proc> darf nicht mit Stacktest uebersetzt worden sein, da ein
   Systemstack fuer die Ausfuehrung der Prozedur verwendet wird, der
   ausserdem knapp bemessen ist. <proc> sollte moeglichst wenig Zeit
   beanspruchen.
 *)


PROCEDURE CurrentIRLevel ( ): IRLevel;

PROCEDURE SetIRLevel ((* EIN/ -- *) ir : IRLevel ): IRLevel;

(* Fragt die aktuelle Prioritaetsebene der CPU ab, bzw. setzt sie.
   Mit IPL6 bzw. IPL7 koennen z.B. saemtliche Interrupts unterbunden
   werden: wird der IR-Level allerdings nachher nicht wieder auf IPL3 bzw.
   IPL0 runtergesetzt, kann man sich auch aus dem System ausblenden - auf
   den Tastatur-IR wird dann naemlich auch nicht mehr reagiert...
   Mit IPL1 koennen die Horizantalblank-IRs des Videochips zugelassen
   werden - da hierdurch vor allem bei Schwarzweiss-Monitor ein erheblicher
   Teil der CPU-Kapazitaet beansprucht wird, laeuft alles im Schneckentempo
   ab.
   Bei "SetIRLevel" wird die bisherige Interruptprioritaet als Funktionswert
   zurueckgeliefert.
   Beide Prozeduren arbeiten unabhaengig vom CPU-Modus.
 *)


PROCEDURE MetaDOS ((* -- /AUS *) VAR info : MetaInfo ): BOOLEAN;

(* Testet, ob MetaDOS vorhanden ist. Wenn ja, ist <info> gueltig
   und 'drivemap' liefert einen Bitvektor der von MetaDOS bearbeiteten
   physikalischen Laufwerke, und 'version' ist ein ``C''-String, der u.a.
   die Versionsnummer enthaelt.
 *)



(* Mithilfe der folgenden Prozeduren kann auf RAM-Bereiche zugegriffen
 * werden, die nur im Supervisormodus der CPU zugaenglich sind, also der
 * Bereich der Systemvariablen und die Hardwareregister, und unter MiNT-
 * Memory-Protection die im Supervisormodus zugaenglichen Bereiche.
 * <adr> darf nur bei den Prozeduren ungerade sein, die eine beliebige Anzahl
 * Bytes kopieren ("ReadSysMem()", "WriteSysMem()"). Es ist egal, in welchem
 * Modus die CPU beim Aufruf dieser Prozeduren ist. Die Prozeduren sind
 * nicht reentrant.
 *
 * Wenn der Cookie SVAR gesetzt ist, existieren weder die Systemvariablen
 * eines Atari, ausser PCookies, noch dessen Hardwareregister!
 *)

PROCEDURE ReadWordSysMem ((* EIN/ -- *) adr : UNSIGNEDLONG ): UNSIGNEDWORD;

PROCEDURE ReadLongSysMem ((* EIN/ -- *) adr : UNSIGNEDLONG ): UNSIGNEDLONG;

PROCEDURE ReadSysMem ((* EIN/ -- *)     adr : UNSIGNEDLONG;
                      (* -- /AUS *) VAR val : ARRAY OF ANYBYTE );

PROCEDURE WriteWordSysMem ((* EIN/ -- *) adr : UNSIGNEDLONG;
                           (* EIN/ -- *) val : UNSIGNEDWORD );

PROCEDURE WriteLongSysMem ((* EIN/ -- *) adr : UNSIGNEDLONG;
                           (* EIN/ -- *) val : UNSIGNEDLONG );

PROCEDURE WriteSysMem ((* EIN/ -- *)     adr : UNSIGNEDLONG;
                       (* EIN/ -- *) VAR val : ARRAY OF ANYBYTE );


(* Auf die Vektoren, die normalerweise im Adressbereich $8 bis $41c liegen,
 * darf nur mittels der Vektornummer (Standardadresse geteilt durch Vier)
 * zugegriffen werden, da die Adressen nicht feststehen!
 * Hierfuer gibt es die folgenden Prozeduren:
 *)

PROCEDURE SetException ((* EIN/ -- *)     vec : ExcVector;
                        (* EIN/ -- *)     new : ADDRESS;
                        (* -- /AUS *) VAR old : ADDRESS   );

PROCEDURE GetException ((* EIN/ -- *) vec : ExcVector ): ADDRESS;


PROCEDURE AvailableDrives ( ): UNSIGNEDLONG;

(* Liefert einen Bitvektor der vorhandenen (Gemdos-)Laufwerke, also
   Bit 0 = A: usw.
 *)


(*==========================================================================*)
(* Prozessterminierung                                                      *)
(*==========================================================================*)

(* Nicht POSIX, aber ANSI-C: *)
PROCEDURE atexit ((* EIN/ -- *) term : PROC ): int;

(* Installiert <term> als Terminierungsroutine, die bei einer ``normalen''
   Beendigung des laufenden Prozesses ausgefuehrt wird. Wenn <term> nicht
   installiert werden konnte, wird ein von Null verschiedener Wert als
   Funktionsergebnis geliefert.
 *)


PROCEDURE exit ((* EIN/ - *) status : int );

PROCEDURE Exit ((* EIN/ -- *) status : int );

(* Weder POSIX, noch ANSI-C: *)
PROCEDURE ExitSys ((* EIN/ -- *) status : int );

(* Die Funktionen beenden den laufenden Prozess und liefern <status> an die
   Umgebung zurueck. <status> sollte im Bereich [-128..127] liegen, da im
   Typ 'WaitVal' nur 8 Bit des Returncodes untergebracht werden koennen.

   Nicht POSIX:
   "exit()":    Wenn fuer den aufrufenden Prozess gilt:
                  "IsMain()" = TRUE,
                werden sowohl die vom System installierten
                Terminierungsroutinen als auch die mit "atexit()"
                installierten in umgekehrter Reihenfolge der Installation
                ausgefuehrt bevor der Prozess beendet wird.
   "Exit()":    Wenn fuer den aufrufenden Prozess gilt:
                  "IsMain()" = TRUE,
                werden die vom System installierten Terminierungsroutinen,
                nicht jedoch die mit "atexit()" installierten,in umgekehrter
                Reihenfolge der Installation ausgefuehrt bevor der Prozess
                beendet wird.
                Die Prozedur heisst im Original "_exit()".
   "ExitSys()": Es werden keinerlei Terminierungsroutinen ausgefuehrt. Der
                aufrufende Prozess wird sofort beendet. Diese Prozedur ist
                nur fuer die Beendigung des Hauptprozesses bei
                Hintergrundprozessen (Daemon) von Bedeutung.

   GEMDOS/MiNT:
   Generell sollen Prozesse niemals mit 'Pterm' direkt, sondern immer mit
   einem dieser Aufrufe (oder dem Ende des Hauptmoduls) beendet werden!
   Vor Anwendung dieser Prozeduren unbedingt die entsprechenden Abschnitte
   in THREADS.TXT und MAGICLIB.TXT lesen!

   Mit TDIM2, SPCM2 und MM2 wird <status> moeglicherweise ignoriert, wenn
   die Prozeduren vom Hauptprozess aufgerufen werden.
 *)


(*==========================================================================*)
(* Interne Variablen und Funktionen!                                        *)
(*==========================================================================*)

VAR
  (* Fuer TOS: Zeiger auf die aktuelle Basepage.
   * Wird in "proc.tfork()" bei der TOS-Emulation neu gesetzt.
   *)
  BASEP : BasePtr;


CONST
  MINSIG = 0;
  MAXSIG = 30; (* MiNT kennt nur 31, nicht 32 Signale! *)

TYPE
  DosHandler = ARRAY [MINSIG..MAXSIG] OF
                 RECORD
                   HANDLER : SIGNEDLONG;
                   MASK    : UNSIGNEDLONG;
                   FLAGS   : WORDSET;
                 END;

VAR
  SIGMASK    : UNSIGNEDLONG;
  SIGPENDING : UNSIGNEDLONG;
  SIGHANDLER : DosHandler;


PROCEDURE DosPid ((* EIN/ -- *) bp : ADDRESS ): INTEGER;

(* Berechnet aus der Adresse der Basepage eine (hoffentlich) eindeutige
   Prozesskennung.
 *)


PROCEDURE ActPid ( ): INTEGER;

(* Liefert eine eindeutige Kennung des aktuellen Prozesses (= getpid) *)


PROCEDURE IsMain ( ): BOOLEAN;

PROCEDURE SetMain;

(* "IsMain()" testet, ob die systeminternen Terminierungsroutinen
   ausgefuehrt werden, wenn der aufrufende Prozess durch "lib.exit()",
   "lib.Exit()" oder das Ende des Hauptmoduls beendet wird. Dies ist
   normalerweise bei dem zu Programmstart aktiven Prozess der Fall.
   Soll ein Hintergrundprozess die Rolle des Hauptprogramms uebernehmen,
   muss "SetMain()" aufgerufen werden, um den Prozess entsprechend zu
   kennzeichnen.
   Vor Anwendung dieser Prozeduren unbedingt den entsprechenden Abschnitt
   in THREADS.TXT lesen!
 *)


PROCEDURE GetPageSize ( ): SIGNEDLONG;

(* Liefert die Groesse der Einheit, in der das System Speicher vergibt.
   Der Wert wird, wenn moeglich, ueber Dfree(u:\proc) ermittelt,
   ansonsten wird eine Konstante geliefert.
 *)

END DosSystem.
