DEFINITION MODULE ISOStrings;

(* standard library module *)

__DEF_SWITCHES__
#ifdef HM2
#ifdef __LONG_WHOLE__
(*$!i+: Modul muss mit $i- uebersetzt werden! *)
(*$!w+: Modul muss mit $w- uebersetzt werden! *)
#else
(*$!i-: Modul muss mit $i+ uebersetzt werden! *)
(*$!w-: Modul muss mit $w+ uebersetzt werden! *)
#endif
#endif
(*****************************************************************************)
(* ISO-Strings                                                               *)
(* --------------------------------------------------------------------------*)
(* Allg. Operationen fuer M2-Strings.                                        *)
(* --------------------------------------------------------------------------*)
(* 27-Aug-96, Holger Kleinschmidt                                            *)
(*****************************************************************************)

(*============== IMPLEMENTIERUNGSHINWEIS ====================================*)
(* Fuer diese Implementierung gilt:                                          *)
(* Der Modulname wurde etwas geaendert, um nicht mit einem evtl. vorhandenen *)
(* gleichnamigen Modul der Systembibliothek zu kollidieren.                  *)
(* Einschraenkung: HIGH(stringVal) < 32767                                   *)
(*===========================================================================*)

TYPE
  String1 = ARRAY [0..0] OF CHAR;
  (* Dieser Typ kann dazu benutzt werden, Variablen vom Typ CHAR mittels
     Array-Konstruktor (String1{ch}) an die Stringprozeduren zu uebergeben.
   *)

(*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*)

PROCEDURE Length ((* EIN/ -- *) REF stringVal : ARRAY OF CHAR): CARDINAL;

(* Liefert die Laenge von <stringVal>; aequivalent zu LENGTH(.) *)



(* Bei den folgenden Prozeduren wird der Ergebnisstring ``im stillen''
   gekuerzt, falls der Ergebnis-Parameter nicht genuegend Platz hat.
   Ist der Ergebnisstring kuerzer, wird ein Stringendezeichen
   angefuegt.
 *)

PROCEDURE Assign ((* EIN/ -- *) REF source      : ARRAY OF CHAR;
                  (* -- /AUS *) VAR destination : ARRAY OF CHAR );

(* Zuweisung: <destination> := <source> *)


PROCEDURE Extract ((* EIN/ -- *) REF source          : ARRAY OF CHAR;
                   (* EIN/ -- *)     startIndex      : CARDINAL;
                   (* EIN/ -- *)     numberToExtract : CARDINAL;
                   (* -- /AUS *) VAR destination     : ARRAY OF CHAR );

(* Kopiert maximal <numberToExtract> Zeichen beginnend mit Index
   <startIndex> nach <destination>. Falls <startIndex> >= LENGTH(source),
   wird <destination> zum Leerstring.
 *)


PROCEDURE Delete ((* EIN/AUS *) VAR stringVar      : ARRAY OF CHAR;
                  (* EIN/ -- *)     startIndex     : CARDINAL;
                  (* EIN/ -- *)     numberToDelete : CARDINAL      );

(* Loescht maximal <numberToDelete> Zeichen beginnend mit Index
   <startIndex> aus <stringVar>. Falls <startIndex> >= LENGTH(stringVar>,
   wird <stringVar> nicht veraendert.
 *)


PROCEDURE Insert ((* EIN/ -- *)     source      : ARRAY OF CHAR;
                  (* EIN/ -- *)     startIndex  : CARDINAL;
                  (* EIN/AUS *) VAR destination : ARRAY OF CHAR );

(* Fuegt <source> ab dem Index <startIndex> in <destination> ein.
   Falls <startIndex> >= LENGTH(destination>, wird <destination> nicht
   veraendert.
 *)


PROCEDURE Replace ((* EIN/ -- *)     source      : ARRAY OF CHAR;
                   (* EIN/ -- *)     startIndex  : CARDINAL;
                   (* EIN/AUS *) VAR destination : ARRAY OF CHAR );

(* Ersetzt ab dem Index <startIndex> den Inhalt von <destination> durch
   <source>. Es wird maximal bis zum Ende von <destination> ersetzt.
   Falls <startIndex> >= LENGTH(destination), wird <destination> nicht
   veraendert.
 *)


PROCEDURE Append ((* EIN/ -- *)     source      : ARRAY OF CHAR;
                  (* EIN/AUS *) VAR destination : ARRAY OF CHAR );

(* Konkatenation: <destination> := <destination> ++ <source> *)


PROCEDURE Concat ((* EIN/ -- *) REF source1     : ARRAY OF CHAR;
                  (* EIN/ -- *)     source2     : ARRAY OF CHAR;
                  (* -- /AUS *) VAR destination : ARRAY OF CHAR );

(* Konkatenation: <destination> := <source1> ++ <source2>. *)



(* Die folgenden Prozeduren koennen dazu benutzt werden, zu testen,
   ob die obigen Prozeduren erfolgreich abgeschlossen werden koennen,
   d.h. ob die Ergebnisparameter den vollstaendigen Ergebnisstring
   aufnehmen koennen.
 *)


PROCEDURE CanAssignAll
  ((* EIN/ -- *)     sourceLength : CARDINAL;
   (* EIN/ -- *) VAR destination  : ARRAY OF CHAR ): BOOLEAN;

(* Testet, ob <destination> <sourceLength> Zeichen aufnehmen kann. *)


PROCEDURE CanExtractAll
  ((* EIN/ -- *)     sourceLength    : CARDINAL;
   (* EIN/ -- *)     startIndex      : CARDINAL;
   (* EIN/ -- *)     numberToExtract : CARDINAL;
   (* EIN/ -- *) VAR destination     : ARRAY OF CHAR ): BOOLEAN;

(* Testet, ob es ab Index <startIndex> <numberToExtract> Zeichen in einem
   String der Laenge <sourceLength> gibt, und ob <destination>
   <numberToExtract> Zeichen aufnehmen kann.
 *)


PROCEDURE CanDeleteAll ((* EIN/ -- *) sourceLength   : CARDINAL;
                        (* EIN/ -- *) startIndex     : CARDINAL;
                        (* EIN/ -- *) numberToDelete : CARDINAL ): BOOLEAN;

(* Testet, ob es ab Index <startIndex> <numberToDelete> Zeichen in einem
   String der Laenge <sourceLength> gibt.
 *)


PROCEDURE CanInsertAll
  ((* EIN/ -- *)     sourceLength : CARDINAL;
   (* EIN/ -- *)     startIndex   : CARDINAL;
   (* EIN/ -- *) VAR destination  : ARRAY OF CHAR ): BOOLEAN;

(* Testet, ob in <destination> ab Index <startIndex> Platz fuer
   <sourceLength> Zeichen ist.
 *)


PROCEDURE CanReplaceAll
  ((* EIN/ -- *)     sourceLength : CARDINAL;
   (* EIN/ -- *)     startIndex   : CARDINAL;
   (* EIN/ -- *) VAR destination  : ARRAY OF CHAR ): BOOLEAN;

(* Testet, ob in <destination> ab Index <startIndex> <sourceLength> Zeichen
   ersetzt werden koennen.
 *)


PROCEDURE CanAppendAll
  ((* EIN/ -- *)     sourceLength : CARDINAL;
   (* EIN/ -- *) VAR destination  : ARRAY OF CHAR ): BOOLEAN;

(* Testet, ob in <destination> Platz genug ist, um <sourceLength> Zeichen
   anzuhaengen.
 *)


PROCEDURE CanConcatAll
  ((* EIN/ -- *)     source1Length : CARDINAL;
   (* EIN/ -- *)     source2Length : CARDINAL;
   (* EIN/ -- *) VAR destination   : ARRAY OF CHAR ): BOOLEAN;

(* Testet, ob in <destination> Platz genug fuer einen String der Laenge
   <source1Length> + <source2Length> ist.
 *)




(* Die folgenden Prozeduren und Typen dienen dem Vergleichen von Strings
   und dem Suchen von Teilstrings.
 *)


TYPE
  CompareResults  = (less, equal, greater);

PROCEDURE Compare
  ((* EIN/ -- *) REF stringVal1 : ARRAY OF CHAR;
   (* EIN/ -- *) REF stringVal2 : ARRAY OF CHAR ): CompareResults;

(* Testet, ob <stringVal1> lexikografisch kleiner, gleich oder groesser
   als <stringVal2> ist.
   Das Ergebnis haengt von der internen Ordnung der CHAR-Werte ab.
 *)


PROCEDURE Equal ((* EIN/ -- *) REF stringVal1 : ARRAY OF CHAR;
                 (* EIN/ -- *) REF stringVal2 : ARRAY OF CHAR ): BOOLEAN;

(* Aequivalent zu "Compare(stringVal1, stringVal2) = equal" *)


PROCEDURE FindNext ((* EIN/ -- *) REF pattern        : ARRAY OF CHAR;
                    (* EIN/ -- *) REF stringToSearch : ARRAY OF CHAR;
                    (* EIN/ -- *)     startIndex     : CARDINAL;
                    (* -- /AUS *) VAR patternFound   : BOOLEAN;
                    (* -- /AUS *) VAR posOfPattern   : CARDINAL      );

(* Ab dem Index <startIndex> wird der naechste Teilstring <pattern> im
   String <stringToSearch> gesucht. Die Suche erfolgt zum Ende des Strings
   hin.
   Falls <startIndex> < LENGTH(stringToSearch) und der Teilstring
   gefunden wurde, ist <patternFound> = TRUE, und in <posOfPattern>
   steht der Index des ersten Zeichens von <pattern> in <stringToSearch>;
   andernfalls ist <patternFound> = FALSE, und <posOfPattern> wird nicht
   veraendert.
 *)


PROCEDURE FindPrev ((* EIN/ -- *) REF pattern        : ARRAY OF CHAR;
                    (* EIN/ -- *) REF stringToSearch : ARRAY OF CHAR;
                    (* EIN/ -- *)     startIndex     : CARDINAL;
                    (* -- /AUS *) VAR patternFound   : BOOLEAN;
                    (* -- /AUS *) VAR posOfPattern   : CARDINAL      );

(* Ab dem Index <startIndex> wird der vorige Teilstring <pattern> im String
   <stringToSearch> gesucht. Die Suche erfolgt zum Anfang des Strings hin.
   Falls <startIndex> > LENGTH(stringToSearch) - LENGTH(pattern), wird vom
   Ende von <stringToSearch> aus gesucht. Falls der Teilstring gefunden
   wurde, ist <patternFound> = TRUE, und in <posOfPattern> steht der Index
   des ersten Zeichens von <pattern> in <stringToSearch>; andernfalls ist
   <patternFound> = FALSE, und <posOfPattern> wird nicht veraendert.
 *)


PROCEDURE FindDiff ((* EIN/ -- *) REF stringVal1      : ARRAY OF CHAR;
                    (* EIN/ -- *) REF stringVal2      : ARRAY OF CHAR;
                    (* -- /AUS *) VAR differenceFound : BOOLEAN;
                    (* -- /AUS *) VAR posOfDifference : CARDINAL      );

(* Testet, ob <stringVal1> und <stringVal2> unterschiedlich sind. Falls
   ja, ist <differenceFound> = TRUE, und in <posOfDifference> steht
   der Index des ersten unterschiedlichen Zeichens; sonst ist
   <differenceFound> = FALSE, und <posOfDifference> wird nicht veraendert.
 *)


PROCEDURE Capitalize ((* EIN/AUS *) VAR stringVar : ARRAY OF CHAR );

(* Wendet die Standardfunktion CAP auf jedes Zeichen von <stringVar> an. *)

END ISOStrings.
