DEFINITION MODULE pLONGSET;
__DEF_SWITCHES__
#ifdef HM2
#ifdef __LONG_WHOLE__
(*$!i+: Modul muss mit $i- uebersetzt werden! *)
(*$!w+: Modul muss mit $w- uebersetzt werden! *)
#else
(*$!i-: Modul muss mit $i+ uebersetzt werden! *)
(*$!w-: Modul muss mit $w+ uebersetzt werden! *)
#endif
#endif
(*****************************************************************************)
(* Das Modul enthaelt Mengenoperationen fuer Mengen mit 32 Elementen, die    *)
(* durch ein Langwort repraesentiert werden. Die Anordnung der Elemente      *)
(* entspricht der Anordnung der Bits in einem Langwort. Deshalb koennen diese*)
(* Mengen zur Kommunikation mit dem Betriebssystem benutzt werden.           *)
(* Es finden keine Abfragen statt, ob ein Element groesser als 31 ist, darauf*)
(* ist selbst zu achten!                                                     *)
(* --------------------------------------------------------------------------*)
(* 18-Mae-95, Holger Kleinschmidt                                            *)
(*****************************************************************************)

FROM PORTAB IMPORT
(* TYPE *) UNSIGNEDWORD, UNSIGNEDLONG;

(*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*)

PROCEDURE LONGMASK ((* EIN/ -- *)     nElems : UNSIGNEDWORD;
                    (* EIN/AUS *) VAR set    : UNSIGNEDLONG );

(* Loescht alle Elemente von <set>, bis auf die ersten <nElems> *)


PROCEDURE LONGUNION ((* EIN/ -- *) set1 : UNSIGNEDLONG;
                     (* EIN/ -- *) set2 : UNSIGNEDLONG ): UNSIGNEDLONG;

(* Liefert die Vereinigungsmenge von <set1> und <set2>.
   Das entspricht der logischen Operation:   <set1> OR <set2>
 *)


PROCEDURE LONGINTERSECT ((* EIN/ -- *) set1 : UNSIGNEDLONG;
                         (* EIN/ -- *) set2 : UNSIGNEDLONG ): UNSIGNEDLONG;

(* Liefert die Schnittmenge von <set1> und <set2>.
   Das entspricht der logischen Operation:   <set1> AND <set2>
 *)


PROCEDURE LONGDIFF ((* EIN/ -- *) set1 : UNSIGNEDLONG;
                    (* EIN/ -- *) set2 : UNSIGNEDLONG ): UNSIGNEDLONG;

(* Liefert die Differenzmenge von <set1> und <set2>.
   Das entspricht der logischen Operation:   <set1> AND NOT <set2>
 *)


PROCEDURE LONGSYMDIFF ((* EIN/ -- *) set1 : UNSIGNEDLONG;
                       (* EIN/ -- *) set2 : UNSIGNEDLONG ): UNSIGNEDLONG;

(* Liefert die symmetrische Differenzmenge von <set1> und <set2>.
   Das entspricht der logischen Operation:   <set1> XOR <set2>
 *)


PROCEDURE LONGINCL ((* EIN/AUS *) VAR set  : UNSIGNEDLONG;
                    (* EIN/ -- *)     elem : UNSIGNEDWORD );

PROCEDURE LONGEXCL ((* EIN/AUS *) VAR set  : UNSIGNEDLONG;
                    (* EIN/ -- *)     elem : UNSIGNEDWORD );

(* Fuegt das Element <elem> der Menge <set> hinzu, bzw. entfernt es *)


PROCEDURE LONGELEM ((* EIN/ -- *) elem : UNSIGNEDWORD;
                    (* EIN/ -- *) set  : UNSIGNEDLONG ): BOOLEAN;

(* Testet, ob das Element <elem> in der Menge <set> enthalten ist *)


PROCEDURE LONGSUBSET ((* EIN/ -- *) sub : UNSIGNEDLONG;
                      (* EIN/ -- *) set : UNSIGNEDLONG ): BOOLEAN;

(* Testet, ob <sub> eine Teilmenge von <set> ist.
   Das entspricht der logischen Operation:   (<sub> AND NOT <set>) = 0
 *)


PROCEDURE LONGSHIFT ((* EIN/ -- *) set   : UNSIGNEDLONG;
                     (* EIN/ -- *) shift : INTEGER      ): UNSIGNEDLONG;

(* Schiebt die Bits der Menge <set> um <shift> Positionen nach links
   (<shift> > 0) bzw. rechts (<shift> < 0).
 *)

END pLONGSET.
