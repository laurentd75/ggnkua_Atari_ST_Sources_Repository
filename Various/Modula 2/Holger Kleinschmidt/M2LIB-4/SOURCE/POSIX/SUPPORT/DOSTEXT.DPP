DEFINITION MODULE DosText;
__DEF_SWITCHES__
#ifdef HM2
#ifdef __LONG_WHOLE__
(*$!i+: Modul muss mit $i- uebersetzt werden! *)
(*$!w+: Modul muss mit $w- uebersetzt werden! *)
#else
(*$!i-: Modul muss mit $i+ uebersetzt werden! *)
(*$!w-: Modul muss mit $w+ uebersetzt werden! *)
#endif
#endif
(*****************************************************************************)
(* Mit den diesen Prozeduren lassen sich ASCII-Dateien mit einer Zeilen-     *)
(* struktur auf einfache und effiziente Art durch Low-Level-IO (reine GEMDOS-*)
(* Funktionen) einlesen. Die Zeilen koennen sowohl durch einfaches LF (UNIX) *)
(* als auch durch CR+LF (DOS) abgeschlossen sein.                            *)
(* Dies ist vor allem fuer Konfigurationsdateien wie /etc/passwd nuetzlich.  *)
(* --------------------------------------------------------------------------*)
(* 06-Jan-96, Holger Kleinschmidt                                            *)
(*****************************************************************************)

FROM PORTAB IMPORT
(* TYPE *) UNSIGNEDWORD;

FROM types IMPORT
(* TYPE *) StrPtr;

(*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*)

CONST
  TBUFSIZE = 1024;

TYPE
  TextFile = RECORD
    open     : BOOLEAN;
    buf      : ARRAY [0..TBUFSIZE-1] OF CHAR;
    readSize : UNSIGNEDWORD; (* Anzahl der in den Puffer gelesenen Bytes *)
    readPos  : UNSIGNEDWORD; (* Naechste Leseposition in 'buf' *)
    handle   : INTEGER;      (* Dateikennung *)
  END;

(*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*)

PROCEDURE OpenTextFile ((* EIN/ -- *)     name : StrPtr;
                        (* -- /AUS *) VAR file : TextFile  );

(* <name> ist der GEMDOS-konforme Name einer Datei, die geoeffnet werden
   soll. Falls das Oeffnen erfolgreich war, ist <file>.open gleich TRUE und
   <file>.handle enthaelt die Dateikennung. Die anderen Elemente von <file>
   werden initialisiert und duerfen nicht veraendert werden, da sie von
   "NextTextLine()" verwendet und aktualisiert werden. Falls die Datei nicht
   geoeffnet werden konnte, ist <file>.open gleich FALSE und <file>.handle
   enthaelt den Fehlercode.
 *)


PROCEDURE CloseTextFile ((* EIN/AUS *) VAR file : TextFile );

(* Schliesst eine durch "OpenTextFile()" geoeffnete Datei *)


PROCEDURE RewindTextFile ((* EIN/AUS *) VAR file : TextFile );

(* Spult eine durch "OpenTextFile()" geoeffnete Datei an den Anfang zurueck *)


PROCEDURE NextLine ((* EIN/AUS *) VAR file : TextFile;
                    (* EIN/ -- *)     size : UNSIGNEDWORD;
                    (* EIN/ -- *)     line : StrPtr;
                    (* -- /AUS *) VAR len  : UNSIGNEDWORD ): BOOLEAN;

(* Liefert in <line>^ die naechste Zeile der durch <file> spezifizierten
   Datenbasis; das Zeilenende wird dabei entfernt. Die letzte Zeile kann
   auch durch das Dateiende statt durch ein Zeilenende abgeschlossen sein.
   Wenn keine Zeile mehr vorhanden ist, wird als Funktionswert FALSE
   geliefert. <size> gibt den Platz in <line>^ einschliesslich Nullbyte an.
   Wenn <size> gleich Null ist, wird die naechste Zeile nur ueberlesen, aber
   nicht abgespeichert; wenn <size> zu klein fuer die Zeile ist, wird nur
   soviel abgespeichert wie Platz ist, der String ist auf jeden Fall mit
   einem Nullbyte abgeschlossen. <len> enthaelt die tatsaechliche Laenge der
   gelesenen Zeile ohne Zeilenende und Nullbyte. Wenn <len> groesser als
   <size> - 1 ist, wurde <line>^ gekuerzt.
 *)

END DosText.
