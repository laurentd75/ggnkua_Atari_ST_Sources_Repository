DEFINITION MODULE LCTypes;
__DEF_SWITCHES__
#ifdef HM2
#ifdef __LONG_WHOLE__
(*$!i+: Modul muss mit $i- uebersetzt werden! *)
(*$!w+: Modul muss mit $w- uebersetzt werden! *)
#else
(*$!i-: Modul muss mit $i+ uebersetzt werden! *)
(*$!w-: Modul muss mit $w+ uebersetzt werden! *)
#endif
#endif
(****************************************************************************)
(* 05-Dez-95, Holger Kleinschmidt                                           *)
(****************************************************************************)

FROM PORTAB IMPORT
(* CONST*) MINCHAR, MAXCHAR,
(* TYPE *) SIGNEDWORD;

FROM types IMPORT
(* TYPE *) StrPtr;

IMPORT er;

(*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*)

CONST
  MAXLCID = 16;

CONST
  IDSEP = ':';
  IDSEPLEN = 1;

TYPE
  LCIdent = ARRAY [0..MAXLCID] OF CHAR;

TYPE
  LCIdents = ARRAY [0..5] OF LCIdent;


TYPE
  LCTimeP = POINTER TO LCTime;

  (* Datentyp fuer LC_TIME-Locale *)
  LCTime = RECORD
    abday    : ARRAY [0..6] OF StrPtr;
      (* Abgekuerzter Wochentag *)
    day      : ARRAY [0..6] OF StrPtr;
      (* Wochentag *)
    abmon    : ARRAY [0..11] OF StrPtr;
      (* Abgekuerzter Monat *)
    mon      : ARRAY [0..11] OF StrPtr;
      (* Monat *)
    ampm     : ARRAY [0..1] OF StrPtr;
      (* Aequivalent zu A.M/P.M.; leer, falls keine 12-Stunden-Zeit *)
    dtfmt    : StrPtr;
      (* %c-Format *)
    dfmt     : StrPtr;
      (* %x-Format *)
    tfmt     : StrPtr;
      (* %X-Format *)
    tfmtampm : StrPtr;
      (* %r-Format *)
  END;

TYPE
  LCNumericP = POINTER TO LCNumeric;

  (* Datentyp fuer LC_NUMERIC-Locale. Erklaerung der Komponenten siehe 'loc' *)
  LCNumeric = RECORD
    decimalpoint : StrPtr;
    thousandssep : StrPtr;
    grouping     : StrPtr;
  END;

TYPE
  LCMonetaryP = POINTER TO LCMonetary;

  (* Datentyp fuer LC_MONETARY-Locale. Erklaerung der Komponenten siehe 'loc'*)
  LCMonetary = RECORD
    intcurrsymbol   : StrPtr;
    currencysymbol  : StrPtr;
    mondecimalpoint : StrPtr;
    monthousandssep : StrPtr;
    mongrouping     : StrPtr;
    positivesign    : StrPtr;
    negativesign    : StrPtr;
    intfracdigits   : SIGNEDWORD;
    fracdigits      : SIGNEDWORD;
    pcsprecedes     : SIGNEDWORD;
    psepbyspace     : SIGNEDWORD;
    ncsprecedes     : SIGNEDWORD;
    nsepbyspace     : SIGNEDWORD;
    psignposn       : SIGNEDWORD;
    nsignposn       : SIGNEDWORD;
  END;

TYPE
  (* Datentypen fuer LC_CTYPE-Locale *)
  CType = (
    IScntrl,
    ISspace,
    ISblank,
    ISpunct,
    ISdigit,
    ISupper,
    ISlower,
    ISalpha,
    ISalnum,
    ISxdigit,
    ISgraph,
    ISprint,
    ISodigit
  );
  CClass = PACKEDSET OF CType;

#if only_subrange_index
  CClasses = ARRAY [MINCHAR..MAXCHAR] OF CClass;
  CTrans   = ARRAY [MINCHAR..MAXCHAR] OF CHAR;
#else
  CClasses = ARRAY CHAR OF CClass;
  CTrans   = ARRAY CHAR OF CHAR;
#endif

  LCCtypeP = POINTER TO LCCtype;

  LCCtype = RECORD
    class   : CClasses;
      (* Klassifizierung von Zeichen *)
    toupper : CTrans;
      (* Wandlung: Kleinbuchstaben -> Grossbuchstaben *)
    tolower : CTrans;
      (* Wandlung: Grossbuchstaben -> Kleinbuchstaben *)
  END;

TYPE
  LCMessagesP = POINTER TO LCMessages;

  (* Datentyp fuer LC_MESSAGES-Locale (Nicht Standard) *)
  LCMessages = RECORD
    bioserr    : ARRAY [0..er.NeBIOS-1] OF StrPtr;
      (* BIOS-Fehlermeldungen *)
    gemdoserr  : ARRAY [0..er.NeGEMDOS-1] OF StrPtr;
      (* GEMDOS-Fehlermeldungen *)
    minterr    : ARRAY [0..er.NeMiNT-1] OF StrPtr;
      (* MiNT-Fehlermeldungen *)
    socketerr  : ARRAY [0..er.NeSOCKET-1] OF StrPtr;
      (* Socket-Fehlermeldungen *)
    posixerr   : ARRAY [0..er.NePOSIX-1] OF StrPtr;
      (* POSIX-Fehlermeldungen *)
    signalstr  : ARRAY [0..30] OF StrPtr;
      (* Signalbeschreibungen *)
    unknownstr : ARRAY [0..1] OF StrPtr;
      (* Unbekannter/s Fehler/Signal *)
  END;

END LCTypes.
