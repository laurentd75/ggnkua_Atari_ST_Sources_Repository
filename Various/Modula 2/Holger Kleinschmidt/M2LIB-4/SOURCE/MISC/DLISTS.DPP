DEFINITION MODULE DLists;
__DEF_SWITCHES__
#ifdef HM2
#ifdef __LONG_WHOLE__
(*$!i+: Modul muss mit $i- uebersetzt werden! *)
(*$!w+: Modul muss mit $w- uebersetzt werden! *)
#else
(*$!i-: Modul muss mit $i+ uebersetzt werden! *)
(*$!w-: Modul muss mit $w+ uebersetzt werden! *)
#endif
#endif
(*****************************************************************************)
(* Dieses Modul enthaelt Prozeduren zur Erzeugung und Verwaltung von doppelt-*)
(* verketteten, zirkulaeren Listen. Die Operationen sind nicht an einen      *)
(* bestimmten Datentyp gebunden, d.h. aber auch, dass keine Typueberpruefung,*)
(* weder zur Uebersetzungszeit noch zur Laufzeit, vorgenommen wird.          *)
(*                                                                           *)
(* Falls beim Praeprozessieren des Implementationsmoduls das Makro __CHECKS__*)
(* gesetzt war, gilt folgendes:                                              *)
(*                                                                           *)
(* Wird zur Laufzeit ein Objekt mit anderem Speicherbedarf benutzt als bei   *)
(* der Listendefinition angegeben wurde, gibt es eine Ausnahme               *)
(* (--> wrongElemSize).                                                      *)
(*                                                                           *)
(* Alle Prozeduren pruefen, ob die Liste, die ihnen uebergeben wird, einen   *)
(* definierten Wert hat. Ist dies nicht der Fall, gibt es eine Ausnahme      *)
(* (--> notAnADT).                                                           *)
(*                                                                           *)
(* Falls beim Praeprozessieren des Implementationsmoduls das Makro _DEBUG    *)
(* gesetzt war, haben die beiden Funktionen am Ende des Moduls eine Funktion,*)
(* sonst sind sie leer.                                                      *)
(* --------------------------------------------------------------------------*)
(* 03-Jan-96, Holger Kleinschmidt                                            *)
(*****************************************************************************)

FROM SYSTEM IMPORT
(* TYPE *) ADDRESS;

FROM PORTAB IMPORT
(* TYPE *) ANYTYPE;

FROM ADTBase IMPORT
(* TYPE *) CompareProc;

(*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*)

TYPE
  List;

  ListEntry = ADDRESS; (* Verweis auf einen Eintrag in der Liste *)

  VisitProc = PROCEDURE ((* EIN/ -- *) List,
                         (* EIN/ -- *) ListEntry ): BOOLEAN;

(*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*)

PROCEDURE Create ((* EIN/ -- *)     eSize   : CARDINAL;
                  (* EIN/ -- *)     bSize   : CARDINAL;
                  (* EIN/ -- *)     compare : CompareProc;
                  (* -- /AUS *) VAR list    : List;
                  (* -- /AUS *) VAR done    : BOOLEAN );

(* Erzeugt eine leere, doppelt verkettete, zirkulaere Liste, die in <list>
   zurueckgeliefert wird. <eSize> ist die Groesse der Elemente, die in
   <list> abgelegt werden sollen. <bSize> ist die Anzahl der Elemente, fuer
   die jeweils ein neuer Speicherblock angefordert wird. Ein grosser Wert
   fuer <bSize> fuehrt zu geringerem Verwaltungsaufwand, vergroessert aber
   den Anteil des Speichers, der die meiste Zeit nicht genutzt wird.
   <compare> ist die vom Benutzer bereitzustellende Vergleichsprozedur fuer
   die Suche nach Elementen.
   "Create()" muss genau einmal vor allen anderen Operationen mit <list>
   aufgerufen werden.
   <list> ist nur fuer Elemente der angegebenen Groesse zu benutzen.

   Die Prozedur kann aus folgenden Gruenden fehlschlagen:
   <eSize> oder <bSize> sind gleich Null, <eSize> ist groesser als
   MAXSIGNEDWORD, <bSize> ist groesser als MAXUNSIGNEDWORD oder es ist nicht
   mehr genuegend Speicher frei.

   Aufwand        : O(1).
   Stackbelastung : O(1)
 *)


PROCEDURE Delete ((* EIN/AUS *) VAR list : List );

(* <list> wird aus der Verwaltung entfernt und der belegte Speicherplatz
   freigegeben. Weitere Operationen mit <list> sind danach nicht mehr
   moeglich. Die Prozedur sollte nach Abschluss der Operationen mit <list>
   aufgerufen werden. <list> hat nach Ausfuehrung den Wert NIL.

   Aufwand             : O(1)
   Stackbelastung      : O(1)
   Moegliche Ausnahmen : notAnADT
 *)


PROCEDURE Clear ((* EIN/ -- *) list : List );

(* Entfernt saemtliche Elemente in <list> und gibt deren Speicherplatz frei;
   <list> selber bleibt aber erhalten.

   Aufwand             : O(1)
   Stackbelastung      : O(1)
   Moegliche Ausnahmen : notAnADT
 *)


PROCEDURE IsEmpty ((* EIN/ -- *) list : List ): BOOLEAN;

PROCEDURE Size ((* EIN/ -- *) list : List ): CARDINAL;

(* Testet, ob <list> leer ist, bzw. liefert die Anzahl der Elemente.

   Aufwand             : O(1)
   Stackbelastung      : O(1)
   Moegliche Ausnahmen : notAnADT
 *)



PROCEDURE GetInfo ((* EIN/ -- *)     list : List;
                   (* EIN/ -- *)     item : ListEntry;
                   (* -- /AUS *) VAR val  : ARRAY OF ANYTYPE );

PROCEDURE SetInfo ((* EIN/ -- *)     list : List;
                   (* EIN/ -- *) VAR val  : ARRAY OF ANYTYPE;
                   (* EIN/ -- *)     item : ListEntry );

(* <item> muss ein gueltiger Eintrag sein.
   Die Prozeduren sind als schneller Zugriff auf die relevanten Teile eines
   Listeneintrags gedacht, ohne dass dafuer die Struktur des Eintrags
   offengelegt werden muss.

   Aufwand             : O(1).
   Stackbelastung      : O(1)
   Moegliche Ausnahmen : notAnADT, wrongElemSize
 *)


PROCEDURE Insert ((* EIN/ -- *)     list   : List;
                  (* EIN/ -- *) VAR val    : ARRAY OF ANYTYPE;
                  (* EIN/ -- *)     before : BOOLEAN;
                  (* EIN/ -- *)     item   : ListEntry ): ListEntry;

(* Traegt in <list> ein neues Element <val> vor (<before> = TRUE) oder
   hinter (<before> = FALSE) dem Element ein, auf das <item> verweist.
   Zurueckgeliefert wird ein Verweis auf das neue Element oder NIL, falls
   kein Speicher mehr frei ist.
   <item> muss ein gueltiger Verweis auf ein Element in <list> sein.

   Aufwand             : O(1)
   Stackbelastung      : O(1)
   Moegliche Ausnahmen : notAnADT, wrongElemSize
 *)


PROCEDURE Push ((* EIN/ -- *)     list : List;
                (* EIN/ -- *) VAR val  : ARRAY OF ANYTYPE ): ListEntry;

PROCEDURE Append ((* EIN/ -- *)     list : List;
                  (* EIN/ -- *) VAR val  : ARRAY OF ANYTYPE ): ListEntry;

(* Tragen in <list> ein neues Element <val> am Anfang ("Push()") oder Ende
   ("Append()") von <list> ein.
   Zurueckgeliefert wird ein Verweis auf das neue Element oder NIL, falls
   kein Speicher mehr frei ist.

   Aufwand             : O(1)
   Stackbelastung      : O(1)
   Moegliche Ausnahmen : notAnADT, wrongElemSize
 *)


PROCEDURE Remove ((* EIN/ -- *)     list : List;
                  (* EIN/ -- *) VAR val  : ARRAY OF ANYTYPE );

(* Loescht in <list> das erste Element mit dem Wert <val> und gibt dessen
   Speicherplatz frei.
   Falls kein solches Element existiert, passiert nichts.

   Aufwand             : O(n).
   Stackbelastung      : O(1)
   Moegliche Ausnahmen : notAnADT, wrongElemSize
 *)


PROCEDURE RemoveItem ((* EIN/ -- *)     list : List;
                      (* EIN/AUS *) VAR item : ListEntry );

(* Loescht in <list> den Eintrag, auf den <item> verweist und gibt dessen
   Speicherplatz frei.
   <item> muss auf einen gueltigen Eintrag verweisen und wird nach
   Beendigung der Operation auf NIL gesetzt.

   Aufwand             : O(1).
   Stackbelastung      : O(1)
   Moegliche Ausnahmen : notAnADT
 *)


PROCEDURE Min ((* EIN/ -- *) list : List ): ListEntry;

PROCEDURE Max ((* EIN/ -- *) list : List ): ListEntry;

(* Liefern einen Verweis auf das kleinste bzw. groesste Element in <list>.
   Falls <list> leer ist, wird NIL geliefert.

   Aufwand             : O(n).
   Stackbelastung      : O(1)
   Moegliche Ausnahmen : notAnADT
 *)


PROCEDURE Succ ((* EIN/ -- *) list : List;
                (* EIN/ -- *) item : ListEntry ): ListEntry;

PROCEDURE Pred ((* EIN/ -- *) list : List;
                (* EIN/ -- *) item : ListEntry ): ListEntry;

PROCEDURE CyclicSucc ((* EIN/ -- *) list : List;
                      (* EIN/ -- *) item : ListEntry ): ListEntry;

PROCEDURE CyclicPred ((* EIN/ -- *) list : List;
                      (* EIN/ -- *) item : ListEntry ): ListEntry;

(* Liefern einen Verweis auf das naechste bzw. vorhergehende Element von
   <item> in <list>. Falls <item> bereits auf das letzte bzw. erste Element
   verweist, wird von "Succ()" und "Pred()" NIL geliefert, waehrend
   "CyclicPred()" und "CyclicSucc()" dann das letzte bzw. erste Element
   liefern.

   <item> muss auf einen gueltigen Eintrag verweisen!

   Aufwand             : O(1).
   Stackbelastung      : O(1)
   Moegliche Ausnahmen : notAnADT
 *)


PROCEDURE First ((* EIN/ -- *) list : List ): ListEntry;

PROCEDURE Last ((* EIN/ -- *) list : List ): ListEntry;

(* Liefern einen Verweis auf das erste bzw. letzte Element in <list>.
   Wenn <list> leer ist, wird NIL zurueckgeliefert. Hat die Liste nur ein
   Element, liefern beide Prozeduren einen Verweis auf dieses Element.

   Aufwand             : O(1).
   Stackbelastung      : O(1)
   Moegliche Ausnahmen : notAnADT
 *)


PROCEDURE Head ((* EIN/ -- *)     list : List;
                (* -- /AUS *) VAR val  : ARRAY OF ANYTYPE );

PROCEDURE Tail ((* EIN/ -- *)     list : List;
                (* -- /AUS *) VAR val  : ARRAY OF ANYTYPE );

(* Liefern das erste bzw. letzte Element von <list> in <val>. Hat die Liste
   nur ein Element, liefern beide Prozeduren dieses Element.
   <list> darf nicht leer sein.

   Aufwand             : O(1)
   Stackbelastung      : O(1)
   Moegliche Ausnahmen : notAnADT, noEntry, wrongElemSize
 *)


PROCEDURE Pop ((* EIN/ -- *)     list : List;
               (* -- /AUS *) VAR val  : ARRAY OF ANYTYPE );

PROCEDURE PopLast ((* EIN/ -- *)     list : List;
                   (* -- /AUS *) VAR val  : ARRAY OF ANYTYPE );

(* Liefern das erste bzw. letzte Element von <list> in <val>. Das Element
   wird ausserdem aus <list> entfernt und der benutzte Speicherplatz
   freigegeben. Hat die Liste nur ein ELement, liefern beide Prozeduren
   dieses Element und die Liste ist danach leer.
   <list> darf vor Anwendung der Prozeduren nicht leer sein.

   Aufwand             : O(1)
   Stackbelastung      : O(1)
   Moegliche Ausnahmen : notAnADT, noEntry, wrongElemSize
 *)


PROCEDURE Search ((* EIN/ -- *)     list : List;
                  (* EIN/ -- *) VAR val  : ARRAY OF ANYTYPE ): ListEntry;

(* Sucht in der Liste <list> das erste Element mit dem Wert <val> und
   liefert einen Verweis darauf zurueck. Wenn ein solches Element nicht
   gefunden wurde, wird NIL zurueckgeliefert.

   Aufwand             : O(n).
   Stackbelastung      : O(1)
   Moegliche Ausnahmen : notAnADT, wrongElemSize
 *)


PROCEDURE Select ((* EIN/ -- *) list : List;
                  (* EIN/ -- *) i    : CARDINAL ): ListEntry;

PROCEDURE Rank ((* EIN/ -- *)     list : List;
                (* EIN/ -- *) VAR val  : ARRAY OF ANYTYPE ): CARDINAL;

(* "Select()" liefert einen Verweis auf das <i>-kleinste Element oder NIL,
   falls <i> groesser als die Anzahl der Elemente oder Null ist oder <list>
   leer ist.
   "Rank()" macht das Gegenteil, es wird die Position des ersten Elements
   mit dem Wert <val> bestimmt. Wenn ein solches Element nicht existiert,
   wird Null geliefert.

   Die Positionen der Elemente beginnen mit Eins!

   Aufwand             : O(n).
   Stackbelastung      : O(1)
   Moegliche Ausnahmen : notAnADT, wrongElemSize
 *)


PROCEDURE Map ((* EIN/ -- *) list  : List;
               (* EIN/ -- *) visit : VisitProc );

(* Die Prozedur <visit> wird auf die Elemente der Liste <list> angewendet,
   bis entweder alle Elemente besucht wurden oder <visit> als Funktionswert
   FALSE zurueckliefert. Als Parameter erhaelt die Prozedur einen Verweis
   auf das jeweilige Element und kann dadurch mit "GetInfo()" und
   und "SetInfo()" auf das Element zugreifen.

   Aufwand             : O(n).
   Stackbelastung      : O(1)
   Moegliche Ausnahmen : notAnADT
 *)


(*===========================================================================*)
(* Die folgenden Prozeduren sind fuer Testzwecke gedacht.                    *)
(* Um sie zu aktivieren, muss beim Praeprozessieren des Implementations-     *)
(* moduls das Makro _DEBUG definiert werden, sonst sind es bloss ``leere''   *)
(* Prozeduren.                                                               *)
(*===========================================================================*)

PROCEDURE CheckList ((* EIN/ -- *) list  : List;
                     (* EIN/ -- *) print : VisitProc );

PROCEDURE PrintList ((* EIN/ -- *) list  : List;
                     (* EIN/ -- *) print : VisitProc );

END DLists.
