DEFINITION MODULE Queues;
__DEF_SWITCHES__
#ifdef HM2
#ifdef __LONG_WHOLE__
(*$!i+: Modul muss mit $i- uebersetzt werden! *)
(*$!w+: Modul muss mit $w- uebersetzt werden! *)
#else
(*$!i-: Modul muss mit $i+ uebersetzt werden! *)
(*$!w-: Modul muss mit $w+ uebersetzt werden! *)
#endif
#endif
(*****************************************************************************)
(* Dieses Modul enthaelt Prozeduren zur Erzeugung und Verwaltung von Queues  *)
(* (FIFO - Warteschlangen). Die Queueoperationen sind nicht an einen bestimm-*)
(* ten Datentyp gebunden, d.h. aber auch, dass keine Typueberpruefung -- we- *)
(* der zur Uebersetzungszeit noch zur Laufzeit -- vorgenommen wird.          *)
(*                                                                           *)
(* Falls beim Praeprozessieren des Implementationsmoduls das Makro __CHECKS__*)
(* gesetzt war, gilt folgendes:                                              *)
(*                                                                           *)
(* Wird zur Laufzeit ein Objekt mit anderem Speicherbedarf benutzt als bei   *)
(* der Queuedefinition angegeben wurde, gibt es eine Ausnahme                *)
(* (--> wrongElemSize).                                                      *)
(*                                                                           *)
(* Alle Prozeduren pruefen, ob die Queue, die ihnen uebergeben wird, einen   *)
(* definierten Wert hat. Ist dies nicht der Fall, gibt es eine Ausnahme      *)
(* (--> notAnADT).                                                           *)
(* --------------------------------------------------------------------------*)
(* Okt-91 / 16-Dez-95, Holger Kleinschmidt                                   *)
(*****************************************************************************)

FROM PORTAB IMPORT
(* TYPE *) ANYTYPE;

(*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*)

TYPE
  Queue;

(*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*)

PROCEDURE Create ((* EIN/ -- *)     eSize : CARDINAL;
                  (* EIN/ -- *)     bSize : CARDINAL;
                  (* -- /AUS *) VAR queue : Queue;
                  (* -- /AUS *) VAR done  : BOOLEAN );

(* Richtet eine Queue und ihre Verwaltung ein. <eSize> ist die Groesse
   der Elemente, die in <queue> abgelegt werden sollen. <bSize> ist die
   Anzahl der Elemente, fuer die jeweils ein neuer Speicherblock
   angefordert wird. Ein grosser Wert fuer <bSize> fuehrt zu geringerem
   Verwaltungsaufwand, vergroessert aber den Anteil des Speichers, der die
   meiste Zeit nicht genutzt wird.
   Die Prozedur muss vor allen anderen Queueoperationen ausgefuehrt werden;
   <queue> ist nur fuer Elemente der angegebenen Groesse zu benutzen.

   Die Prozedur kann aus folgenden Gruenden fehlschlagen:
   <eSize> oder <bSize> sind gleich Null, <eSize> ist groesser als
   MAXSIGNEDWORD, <bSize> ist groesser als MAXUNSIGNEDWORD oder es ist nicht
   mehr genuegend Speicher frei.

   Aufwand        : O(1)
   Stackbelastung : O(1)
 *)


PROCEDURE Delete ((* EIN/AUS *) VAR queue : Queue );

(* <queue> wird aus der Verwaltung entfernt und der belegte Speicherplatz
   freigegeben. Weitere Operationen mit <queue> sind danach nicht mehr
   moeglich. Die Prozedur sollte nach Abschluss der Operationen mit <queue>
   aufgerufen werden. <queue> hat nach Ausfuehrung den Wert NIL.

   Aufwand             : O(n)
   Stackbelastung      : O(1)
   Moegliche Ausnahmen : notAnADT
 *)


PROCEDURE Clear ((* EIN/ -- *) queue : Queue );

(* Entfernt saemtliche Elemente aus <queue> und gibt deren Speicherplatz
   frei; <queue> selber bleibt erhalten.

   Aufwand             : O(n)
   Stackbelastung      : O(1)
   Moegliche Ausnahmen : notAnADT
 *)


PROCEDURE IsEmpty ((* EIN/ -- *) queue : Queue ): BOOLEAN;

PROCEDURE Size ((* EIN/ -- *) queue : Queue ): CARDINAL;

(* Testet, ob <queue> leer ist, bzw. liefert die Anzahl der Elemente.

   Aufwand             : O(1)
   Stackbelastung      : O(1)
   Moegliche Ausnahmen : notAnADT
 *)


PROCEDURE Insert ((* EIN/ -- *)     queue : Queue;
                  (* EIN/ -- *) VAR val   : ARRAY OF ANYTYPE );

(* <val> wird ans Ende von <queue> angefuegt.

   Aufwand             : O(1)
   Stackbelastung      : O(1)
   Moegliche Ausnahmen : notAnADT, wrongElemSize, noMem
 *)


PROCEDURE Remove ((* EIN/ -- *)     queue : Queue;
                  (* -- /AUS *) VAR val   : ARRAY OF ANYTYPE );

(* Entfernt das erste Element von <queue>, und liefert es in <val>.
   <queue> darf nicht leer sein, sonst wird eine Ausnahme ausgeloest.

   Aufwand             : O(1)
   Stackbelastung      : O(1)
   Moegliche Ausnahmen : notAnADT, wrongElemSize, noEntry
 *)


PROCEDURE Look ((* EIN/ -- *)     queue : Queue;
                (* -- /AUS *) VAR val   : ARRAY OF ANYTYPE );

(* Liefert das erste Element von <queue> in <val>. <queue> wird nicht
   veraendert.
   <queue> darf nicht leer sein, sonst wird eine Ausnahme ausgeloest.

   Aufwand             : O(1)
   Stackbelastung      : O(1)
   Moegliche Ausnahmen : notAnADT, wrongElemSize, noEntry
 *)

END Queues.
