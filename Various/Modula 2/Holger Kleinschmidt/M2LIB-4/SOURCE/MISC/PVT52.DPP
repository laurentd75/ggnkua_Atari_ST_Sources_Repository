DEFINITION MODULE pVT52;
__DEF_SWITCHES__
#ifdef HM2
#ifdef __LONG_WHOLE__
(*$!i+: Modul muss mit $i- uebersetzt werden! *)
(*$!w+: Modul muss mit $w- uebersetzt werden! *)
#else
(*$!i-: Modul muss mit $i+ uebersetzt werden! *)
(*$!w-: Modul muss mit $w+ uebersetzt werden! *)
#endif
#endif
(*****************************************************************************)
(* Mit den Funktionen aus diesem Modul koennen die Steuerzeichen fuer eine   *)
(* VT52-Emulation ausgegeben werden. Dies geschieht ueber eine mit           *)
(* "AssignWrite" zu definierende Ausgabefunktion fuer Einzelzeichen, so dass *)
(* die Funktionen fuer jedes Ausgabegeraet genutzt werden koennen, das diese *)
(* Steuerzeichen ``versteht''.                                               *)
(* --------------------------------------------------------------------------*)
(* Sep-91 / 04-Feb-95, Holger Kleinschmidt                                   *)
(*****************************************************************************)

FROM SYSTEM IMPORT
(* TYPE *) ADDRESS;

(*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*)

TYPE
  WriteProc = PROCEDURE ((* EIN/ -- par *) ADDRESS,
                         (* EIN/ -- ch  *) CHAR    );

(*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*)

PROCEDURE AssignWrite ((* EIN/ -- *) write : WriteProc;
                       (* EIN/ -- *) par   : ADDRESS   );

PROCEDURE UnAssignWrite;

PROCEDURE GetWrite ((* -- /AUS *) VAR write : WriteProc;
                    (* -- /AUS *) VAR par   : ADDRESS   );

(* Mit "AssignWrite()" wird die Funktion festgelegt, die fuer die
   Zeichenausgabe verantwortlich ist; mit "GetWrite()" kann diese
   Ausgabefunktion in einer Variable zwischengespeichert werden, falls
   z.B. kurzzeitig eine andere Funktion benutzt werden soll. Durch
   "UnAssignWrite()" wird die Ausgabefunktion wieder entfernt; nach
   "UnAssignWrite()" oder direkt nach Programmstart ist keine
   Ausgabefunktion definiert, und saemtliche Aufrufe der vt52-Funktionen
   werden ignoriert.
 *)



PROCEDURE CursorUp;

PROCEDURE CursorUpScroll;

PROCEDURE CursorDown;

PROCEDURE CursorRight;

PROCEDURE CursorLeft;

(* Die Prozeduren bewegen den Cursor in die jeweils angegeben Richtung;
   stand der Cursor bereits am jeweiligen Rand, passiert nichts, bei
   "CursorUpScroll()" wird der Bildschirm jedoch um eine Zeile nach unten
   verschoben.
 *)


PROCEDURE CursorHome;

PROCEDURE ClearScreen;

(* Der Cursor wird in die linke obere Ecke gesetzt;"ClearScreen()" loescht
   zusaetzlich den Bildschirm.
 *)


PROCEDURE EraseToEndOfPage;

PROCEDURE EraseToEndOfLine;

PROCEDURE EraseLine;

PROCEDURE EraseToStartOfPage;

PROCEDURE EraseToStartOfLine;

(* Loescht den jeweils angegebenen Bereich zwischen Cursor und
   Zeilenbzw. Seitenrand. Der Cursor bleibt an der bisherigen Position.
   Bei "EraseLine()" wird die gesamte Zeile geloescht und der Cursor an
   den linken Bildschirmrand gesetzt.
 *)


PROCEDURE InsertLine;

PROCEDURE DeleteLine;

(* Loescht eine Zeile bzw. fuegt an der Cursorposition eine Leerzeile ein.
   Der Cursor bleibt in der bisherigen Zeile und wird an den linken Rand
   gesetzt. Der Bereich zwischen Cursor und unterem Bildschirmrand wird
   entsprechend um eine Zeile nach oben bzw. unten verschoben.
 *)


PROCEDURE AutoWrapOn;

PROCEDURE AutoWrapOff;

(* Ist der Autowrap-Modus eingeschaltet, wird bei Erreichen des
   Zeilenendes automatisch eine neue Zeile begonnen, sonst wird nicht
   ueber den Zeilenrand hinausgeschrieben, es muss ein explizites EOL
   ausgegeben werden (WriteLn).
 *)


PROCEDURE GotoXY ((* EIN/ -- *) col  : CARDINAL;
                  (* EIN/ -- *) line : CARDINAL );

(* Setzt den Cursor auf Zeile <line> und Spalte <col>.
   Die erlaubten Wertebereiche fuer <line> und <col> haengen vom
   jeweiligen Ausgabegeraet ab.
 *)


PROCEDURE SaveCursorPos;

PROCEDURE RestoreCursorPos;

(* Speichert intern die momentane Cursorposition bzw. setzt den Cursor
   auf den gespeicherten Wert.
 *)


PROCEDURE InverseOn;

PROCEDURE InverseOff;

(* Hintergrund- und Vordergrundfarbe werden ausgetauscht bzw. wieder auf
   den Ursprungswert gesetzt.
 *)


PROCEDURE SetForegroundColor ((* EIN/ -- *) col : CARDINAL );

PROCEDURE SetBackgroundColor ((* EIN/ -- *) col : CARDINAL );

(* Setzt die Schrift- bzw. Hintergrundfarbe. Die moeglichen Werte haengen
   vom Ausgabegeraet ab.
 *)

END pVT52.
