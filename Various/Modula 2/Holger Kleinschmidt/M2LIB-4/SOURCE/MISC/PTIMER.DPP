DEFINITION MODULE pTIMER;
__DEF_SWITCHES__
#ifdef HM2
#ifdef __LONG_WHOLE__
(*$!i+: Modul muss mit $i- uebersetzt werden! *)
(*$!w+: Modul muss mit $w- uebersetzt werden! *)
#else
(*$!i-: Modul muss mit $i+ uebersetzt werden! *)
(*$!w-: Modul muss mit $w+ uebersetzt werden! *)
#endif
#endif
(*****************************************************************************)
(* Mit diesen Prozeduren lassen sich innerhalb von Programmen Zeiten messen. *)
(*                                                                           *)
(* Der mit "Start()" in 'startzeit' zurueckgelieferte Wert hat nur interne   *)
(* Bedeutung, darf jedoch nicht veraendert werden. Wird er bei Aufruf von    *)
(* "Stop()" als Parameter wieder uebergeben, so liefert diese Prozedur die   *)
(* Zeit, die seit dem Aufruf von "Start()" mit dieser Variablen vergangen    *)
(* ist; da der uebergebene Wert dabei nicht veraendert wird, kann zu einem   *)
(* spaeteren Zeitpunkt erneut die Zeit ausgelesen werden. Einmal durch       *)
(* "Start()" gestartet, laeuft die Stoppuhr also ununterbrochen weiter.      *)
(* Die Einheit der Stoppuhr ist 'types.ClkTck' / Sekunde, d.h. die Anzahl der*)
(* Sekunden erhaelt man durch Teilen des Funktionswertes von "Stop()" durch  *)
(* 'types.ClkTck'.                                                           *)
(* Durch Verwendung unterschiedlicher Variablen fuer 'startzeit' kann eine   *)
(* beliebige Anzahl Stoppuhren parallel laufen.                              *)
(*                                                                           *)
(* "Wait()" kehrt erst nach der angegebenen Anzahl von Sekunden zurueck oder *)
(* wenn ein Interrupt aufgetreten ist. Wenn vom Betriebssystem unterstuetzt, *)
(* wird der ausfuehrende Prozess waehrend dieser Zeit suspendiert, sonst wird*)
(* ``busy waiting'' verwendet.                                               *)
(* --------------------------------------------------------------------------*)
(* Okt-90 / 20-Mae-95, Holger Kleinschmidt                                   *)
(*****************************************************************************)

FROM types IMPORT
(* TYPE *) clockT;

(*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*)

PROCEDURE Start ((* -- /AUS *) VAR starttime : clockT );

PROCEDURE Stop ((* EIN/ -- *) starttime : clockT ): clockT;

PROCEDURE Wait ((* EIN/ -- *) secs : CARDINAL );

END pTIMER.
