DEFINITION MODULE RBTrees;
__DEF_SWITCHES__
#ifdef HM2
#ifdef __LONG_WHOLE__
(*$!i+: Modul muss mit $i- uebersetzt werden! *)
(*$!w+: Modul muss mit $w- uebersetzt werden! *)
#else
(*$!i-: Modul muss mit $i+ uebersetzt werden! *)
(*$!w-: Modul muss mit $w+ uebersetzt werden! *)
#endif
#endif
(*****************************************************************************)
(* Dieses Modul enthaelt Operationen zum Einrichten und Bearbeiten sog.      *)
(* Rot-Schwarz-Baeume. Das sind binaere Suchbaeume mit logarithmischem       *)
(* Suchaufwand, deren Ausgleichskriterium auf der Schwarz- bzw. Rotfaerbung  *)
(* der Knoten beruht (mit anderen Worten: Es gibt zwei Typen von Knoten...). *)
(* Das Ausgleichskriterium ist zwar nicht ganz so ``streng'' wie beispiels-  *)
(* weise bei AVL-Baeumen, aber dafuer ist das Einfuegen und Loeschen auch    *)
(* nicht so aufwendig. Insgesamt bieten Rot-Schwarz-Baeume einen guten Kom-  *)
(* promiss zwischen dem Suchaufwand, der von der Ausgeglichenheit abhaengt,  *)
(* und dem Aufwand des Ausgleichens.                                         *)
(*                                                                           *)
(* Die Hauptsache bilden die ueblichen ``Woerterbuchfunktionen'': Suchen,    *)
(* Eintragen und Loeschen von Informationen, auf die ueber einen Schluessel- *)
(* wert zugegriffen wird.                                                    *)
(*                                                                           *)
(* Jeder Schluessel im Baum ist eindeutig. Zusaetzlich zum Schluesseleintrag *)
(* besitzt jedes Element noch einen Infoeintrag, so dass im Schluessel nur   *)
(* die wirklich noetigen Informationen gespeichert zu werden brauchen.       *)
(*                                                                           *)
(* Ein Verweis auf ein Element bleibt auch dann gueltig, wenn mit dem Baum   *)
(* Loesch- und Einfuegeoperationen vorgenommen werden (natuerlich nur solange*)
(* das Element selbst nicht geloescht wird ...).                             *)
(*                                                                           *)
(* Falls beim Praeprozessieren des Implementationsmoduls das Makro __CHECKS__*)
(* gesetzt war, gilt folgendes:                                              *)
(*                                                                           *)
(* Bei allen Prozeduren wird ein Objekt vom Typ RBTree uebergeben; dabei wird*)
(* geprueft, ob das Objekt definiert ist. Ist dies nicht der Fall, gibt es   *)
(* eine Ausnahme (--> notAnADT).                                             *)
(* Weiterhin wird ueberprueft, ob die zu schreibenden oder zu lesenden Werte *)
(* denselben Speicherbedarf haben wie bei der Baumerzeugung angegeben.       *)
(* Stimmt die Groesse nicht, wird ebenfalls eine Ausnahme ausgeloest         *)
(* (--> wrongElemSize).                                                      *)
(*                                                                           *)
(* Falls beim Praeprozessieren des Implementationsmoduls das Makro _DEBUG    *)
(* gesetzt war, haben die beiden Funktionen am Ende des Moduls eine Funktion,*)
(* sonst sind sie leer.                                                      *)
(* --------------------------------------------------------------------------*)
(* Okt-91 / 03-Jan-96, Holger Kleinschmidt                                   *)
(*****************************************************************************)

FROM SYSTEM IMPORT
(* TYPE *) ADDRESS;

FROM PORTAB IMPORT
(* TYPE *) ANYTYPE;

FROM ADTBase IMPORT
(* TYPE *) CompareProc;

(*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*)

TYPE
  RBTree; (* Rot-Schwarz-Baum *)

  RBEntry = ADDRESS; (* Verweis auf einen Eintrag im Baum *)

  VisitProc = PROCEDURE ((* EIN/ -- *) RBTree,
                         (* EIN/ -- *) RBEntry );

(*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*)

PROCEDURE Create ((* EIN/ -- *)     keySize   : CARDINAL;
                  (* EIN/ -- *)     infoSize  : CARDINAL;
                  (* EIN/ -- *)     blockSize : CARDINAL;
                  (* EIN/ -- *)     compare   : CompareProc;
                  (* -- /AUS *) VAR tree      : RBTree;
                  (* -- /AUS *) VAR done      : BOOLEAN );

(* Erzeugt einen leeren Rot-Schwarz-Baum, der in <tree> zurueckgeliefert wird.
   <keySize> und <infoSize> sind die Speicherplatzgroessen, die fuer
   Schluessel- und Informationseintrag benutzt werden.
   <blockSize> betrifft die Speicherverwaltung, und gibt an, fuer wieviele
   Elemente jeweils ein neuer Speicherblock angefordert wird (siehe Modul
   'ADTBase').
   <compare> ist die vom Benutzer bereitzustellende Vergleichsprozedur fuer
   die Schluesselwerte.
   "Create()" muss genau einmal vor allen anderen Operationen mit <tree>
   aufgerufen werden.
   <tree> ist nur fuer Elemente der angegebenen Groesse zu benutzen.

   Die Prozedur kann aus folgenden Gruenden fehlschlagen:
   <keySize>, <infoSize> oder <blockSize> sind gleich Null, <keySize> oder
   <infoSize> sind groesser als MAXSIGNEDWORD, <blockSize> ist groesser als
   MAXUNSIGNEDWORD oder es ist nicht mehr genuegend Speicher frei.

   Aufwand        : O(1).
   Stackbelastung : O(1)
 *)


PROCEDURE Delete ((* EIN/AUS *) VAR tree : RBTree );

(* <tree> wird aus der Verwaltung entfernt und der belegte Speicherplatz
   freigegeben. Weitere Operationen mit <tree> sind danach nicht mehr
   moeglich. Die Prozedur sollte nach Abschluss der Operationen mit <tree>
   aufgerufen werden. <tree> hat nach Ausfuehrung den Wert NIL.

   Aufwand             : O(1)
   Stackbelastung      : O(1)
   Moegliche Ausnahmen : notAnADT
 *)


PROCEDURE Clear ((* EIN/ -- *) tree : RBTree );

(* Entfernt saemtliche Elemente in <tree> und gibt deren Speicherplatz frei;
   <tree> selber bleibt aber erhalten.

   Aufwand             : O(1)
   Stackbelastung      : O(1)
   Moegliche Ausnahmen : notAnADT
 *)


PROCEDURE IsEmpty ((* EIN/ -- *) tree : RBTree ): BOOLEAN;

PROCEDURE Size ((* EIN/ -- *) tree : RBTree ): CARDINAL;

(* Testet, ob <tree> leer ist, bzw. liefert die Anzahl der Elemente.

   Aufwand             : O(1)
   Stackbelastung      : O(1)
   Moegliche Ausnahmen : notAnADT
 *)


PROCEDURE BlackHeight ((* EIN/ -- *) tree : RBTree ): CARDINAL;

(* Die sog. ``Schwarzhoehe'' ist ein Mass fuer die Hoehe des Baums und damit
   auch fuer den Suchaufwand: der laengste Weg von der Wurzel bis zu einem
   Knoten betraegt maximal zweimal die Schwarzhoehe.

   Aufwand             : O(log n).
   Stackbelastung      : O(1)
   Moegliche Ausnahmen : notAnADT
 *)


PROCEDURE PreOrder ((* EIN/ -- *) tree  : RBTree;
                    (* EIN/ -- *) visit : VisitProc );

PROCEDURE InOrder ((* EIN/ -- *) tree  : RBTree;
                   (* EIN/ -- *) visit : VisitProc );

PROCEDURE PostOrder ((* EIN/ -- *) tree  : RBTree;
                     (* EIN/ -- *) visit : VisitProc );

(* Die Prozeduren durchlaufen den gesamten Baum <tree> in Pre-, In- oder
   Postordnung. Die Prozedur <visit> wird fuer jedes Element mit einem
   Parameter vom Typ 'RBEntry' aufgerufen. Zugriff auf das Element kann
   innerhalb von <visit> mit "GetKey()", "GetInfo()" und "SetInfo()"
   erfolgen.
   Hinweis: "InOrder()" besucht die Elemente in <tree> in sortierter
   Reihenfolge.

   Aufwand             : O(n).
   Stackbelastung      : O(log n)
   Moegliche Ausnahmen : notAnADT
 *)


PROCEDURE GetKey ((* EIN/ -- *)     tree : RBTree;
                  (* EIN/ -- *)     item : RBEntry;
                  (* -- /AUS *) VAR key  : ARRAY OF ANYTYPE );

PROCEDURE GetInfo ((* EIN/ -- *)     tree : RBTree;
                   (* EIN/ -- *)     item : RBEntry;
                   (* -- /AUS *) VAR info : ARRAY OF ANYTYPE );

PROCEDURE SetInfo ((* EIN/ -- *)     tree : RBTree;
                   (* EIN/ -- *) VAR info : ARRAY OF ANYTYPE;
                   (* EIN/ -- *)     item : RBEntry );

(* <item> muss ein gueltiger Verweis auf ein Element eines Baums sein.
   Die Prozeduren sind als schneller Zugriff auf die relevanten Teile
   eines Elements gedacht, ohne dass dafuer die Struktur des Baumknotens
   offengelegt werden muss.

   Aufwand             : O(1).
   Stackbelastung      : O(1)
   Moegliche Ausnahmen : notAnADT, wrongElemSize
 *)


PROCEDURE Lookup ((* EIN/ -- *)     tree : RBTree;
                  (* EIN/ -- *) VAR key  : ARRAY OF ANYTYPE ): RBEntry;

(* Sucht in <tree> das Element mit dem Schluesselwert <key>.
   Zurueckgeliefert wird ein Verweis auf das Element oder NIL, falls keins
   mit diesem Schluessel existiert.

   Aufwand             : O(log n).
   Stackbelastung      : O(1)
   Moegliche Ausnahmen : notAnADT, wrongElemSize
 *)


PROCEDURE Access ((* EIN/ -- *)     tree : RBTree;
                  (* EIN/ -- *) VAR key  : ARRAY OF ANYTYPE;
                  (* -- /AUS *) VAR info : ARRAY OF ANYTYPE );

(* Sucht in <tree> den Eintrag mit dem Schluesselwert <key>.
   Zurueckgeliefert wird in <info> die dazugehoerige Information.
   Ein Eintrag mit diesem Schluessel muss existieren.

   Aufwand             : O(log n).
   Stackbelastung      : O(1)
   Moegliche Ausnahmen : notAnADT, wrongElemSize, noEntry
 *)


PROCEDURE Insert ((* EIN/ -- *)     tree : RBTree;
                  (* EIN/ -- *) VAR key  : ARRAY OF ANYTYPE;
                  (* EIN/ -- *) VAR info : ARRAY OF ANYTYPE ): RBEntry;

(* Traegt in <tree> ein neues Element mit dem Schluessel <key> und der
   Information <info> ein. Zurueckgeliefert wird ein Verweis auf das Element
   oder NIL, falls kein Speicher mehr frei ist. Falls bereits ein Element
   mit dem gleichen Schluessel existiert, wird nur die alte Information
   durch <info> ersetzt und ein Verweis auf dieses Element geliefert.

   Aufwand             : O(log n).
   Stackbelastung      : O(1)
   Moegliche Ausnahmen : notAnADT, wrongElemSize
 *)


PROCEDURE Remove ((* EIN/ -- *)     tree : RBTree;
                  (* EIN/ -- *) VAR key  : ARRAY OF ANYTYPE );

(* Loescht in <tree> das Element mit dem Schluessel <key> und gibt dessen
   Speicherplatz frei. Falls kein solches Element existiert, passiert nichts.

   Aufwand             : O(log n).
   Stackbelastung      : O(1)
   Moegliche Ausnahmen : notAnADT, wrongElemSize
 *)


PROCEDURE RemoveItem ((* EIN/ -- *)     tree : RBTree;
                      (* EIN/AUS *) VAR item : RBEntry );

(* Loescht in <tree> das Element, auf das <item> verweist und gibt dessen
   Speicherplatz frei.
   <item> muss auf ein gueltiges Element verweisen und wird nach Beendigung
   der Operation auf NIL gesetzt.

   Aufwand             : O(1).
   Stackbelastung      : O(1)
   Moegliche Ausnahmen : notAnADT
 *)


PROCEDURE Min ((* EIN/ -- *) tree : RBTree ): RBEntry;

PROCEDURE Max ((* EIN/ -- *) tree : RBTree ): RBEntry;

(* Liefert einen Verweis auf das Element mit dem kleinsten bzw. groessten
   Schluessel, oder NIL, falls <tree> leer ist.

   Aufwand             : O(log n).
   Stackbelastung      : O(1)
   Moegliche Ausnahmen : notAnADT
 *)


PROCEDURE Succ ((* EIN/ -- *) tree : RBTree;
                (* EIN/ -- *) item : RBEntry ): RBEntry;

PROCEDURE Pred ((* EIN/ -- *) tree : RBTree;
                (* EIN/ -- *) item : RBEntry ): RBEntry;

(* Liefert einen Verweis auf das Element mit dem naechstkleineren bzw.
   naechstgroesseren Schluessel bzgl. dem Schluessel von <item> oder
   NIL, falls <item> bereits auf das groesste bzw. kleinste Element verweist
   oder <tree> leer ist. <item> muss auf ein gueltiges Element verweisen!

   Aufwand             : O(log n).
   Stackbelastung      : O(1)
   Moegliche Ausnahmen : notAnADT
 *)


PROCEDURE Select ((* EIN/ -- *) tree : RBTree;
                  (* EIN/ -- *) i    : CARDINAL ): RBEntry;

PROCEDURE Rank ((* EIN/ -- *)     tree : RBTree;
                (* EIN/ -- *) VAR key  : ARRAY OF ANYTYPE ): CARDINAL;

(* "Select()" liefert einen Verweis auf das Element mit dem <i>-kleinsten
   Schluessel oder NIL, falls <i> groesser als die Anzahl der Elemente oder
   Null ist oder <tree> leer ist.
   "Rank()" macht das Gegenteil, es wird die Position des Elements mit dem
   Schluessel <key> bestimmt. Wenn ein solches Element nicht existiert, wird
   Null geliefert.

   Die Positionen der Elemente beginnen mit Eins!

   Aufwand             : O(log n).
   Stackbelastung      : O(1)
   Moegliche Ausnahmen : notAnADT
 *)


(*===========================================================================*)
(* Die folgenden Prozeduren sind fuer Testzwecke gedacht.                    *)
(* Um sie zu aktivieren, muss beim Praeprozessieren des Implementations-     *)
(* moduls das Makro _DEBUG definiert werden, sonst sind es bloss ``leere''   *)
(* Prozeduren.                                                               *)
(*===========================================================================*)

PROCEDURE CheckTree ((* EIN/ -- *) tree  : RBTree;
                     (* EIN/ -- *) print : VisitProc );

PROCEDURE PrintTree ((* EIN/ -- *) tree  : RBTree;
                     (* EIN/ -- *) verb  : BOOLEAN;
                     (* EIN/ -- *) print : VisitProc );

END RBTrees.
