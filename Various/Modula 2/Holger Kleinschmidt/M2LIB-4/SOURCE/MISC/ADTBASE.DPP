DEFINITION MODULE ADTBase;
__DEF_SWITCHES__
#ifdef HM2
#ifdef __LONG_WHOLE__
(*$!i+: Modul muss mit $i- uebersetzt werden! *)
(*$!w+: Modul muss mit $w- uebersetzt werden! *)
#else
(*$!i-: Modul muss mit $i+ uebersetzt werden! *)
(*$!w-: Modul muss mit $w+ uebersetzt werden! *)
#endif
#endif
(*****************************************************************************)
(* Hier finden sich Konstanten, Typen und Prozeduren, die allgemein fuer     *)
(* ``Abstrakte Datentypen'' Verwendung finden koennen.                       *)
(* --------------------------------------------------------------------------*)
(* Okt-91 / 16-Dez-95, Holger Kleinschmidt                                   *)
(*****************************************************************************)

FROM SYSTEM IMPORT
(* TYPE *) ADDRESS;

(*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*)

TYPE
  ADTExceptions = (
    notAnADT,
      (* Objekt ist nicht identifizierbar *)
    wrongElemSize,
      (* Falsche Elementgroesse *)
    noEntry,
      (* Kein solches oder weiteres Element vorhanden *)
    noMem
      (* Wegen Speichermangel kann kein neues Element angelegt werden *)
  );


  CompareProc = PROCEDURE ((* par1 *) ADDRESS,
                           (* par2 *) ADDRESS ): INTEGER;

  (* par1^  <  par2^  ==>  < 0
   * par1^  =  par2^  ==>  = 0
   * par1^  >  par2^  ==>  > 0
   *)

TYPE
  ADTHeap;

(*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*)

(* Bei abstrakten Datentypen wie Listen usw. kommt es sehr haeufig vor,
   dass viele kleine Speicherbereiche gleicher Groesse verwaltet werden
   muessen. Da dies fuer die Verwaltung der normalen Speicherverwaltung
   ('Storage') eine grosse Belastung darstellt, sollten stattdessen
   die folgenden Prozeduren benutzt werden.
   Die Speicherbloecke, die immer gleich gross sein muessen, und deren
   Groesse bei "InstallADTHeap()" angegeben werden muss, werden aus einem
   sog. ``Heap'' angefordert; das ist ein Speicherblock, dessen Groesse ein
   Vielfaches der Groesse der anforderbaren Speicherbloecke ist (die genaue
   Groesse wird auch bei "InstallADTHeap()" festgelegt). Die einzelnen
   Speicherbloecke werden stackartig verwaltet, was sehr schnell geht und
   keinen Verwaltungsoverhead benoetigt. Ist ein Heap vollstaendig belegt,
   wird intern automatisch ein weiterer angefordert, diese Speicherverwaltung
   ist also tatsaechlich dynamisch. Mit "DEALLOC()" koennen Speicherbloecke
   auch wieder freigegeben werden, so dass sie der Heapverwaltung wieder zur
   Verfuegung stehen; ein einmal angeforderter Heap wird allerdings nicht
   wieder an das System zurueckgegeben.

   Achtung: Es wird keinerlei Fehlerueberpruefung vorgenommen! Mit einer
   falschen Adresse bei "DEALLOC()" kann leicht irgendwas im Speicher
   zerstoert werden! Dafuer ist diese Speicherverwaltung sehr schnell.
 *)


PROCEDURE InstallADTHeap ((* EIN/ -- *)     elemsize : CARDINAL;
                          (* EIN/ -- *)     blksize  : CARDINAL;
                          (* -- /AUS *) VAR heap     : ADTHeap;
                          (* -- /AUS *) VAR done     : BOOLEAN );

(* Richtet eine Heapverwaltung <heap> ein fuer Elemente der Groesse
   <elemsize>. Es wird fuer jeweils <blksize> Elemente ein neuer
   Speicherblock angefordert. Ist kein Speicher mehr frei, ist <heap>
   gleich NIL und <done> gleich FALSE.
   <done> ist ebenfalls FALSE, wenn <elemsize> oder <blksize> gleich Null
   sind oder <elemsize> groesser als MAXSIGNEDWORD ist oder <blksize>
   groesser als MAXUNSIGNEDWORD ist.
 *)


PROCEDURE FreeADTHeap ((* EIN/ -- *) heap : ADTHeap );

PROCEDURE DeInstallADTHeap ((* EIN/AUS *) VAR heap : ADTHeap );

(* "FreeADTHeap()" gibt die von <heap> angeforderten Speicherbereiche frei,
   <heap> selber kann aber weiterbenutzt werden.
   "DeInstallADTHeap()" gibt zusaetzlich <heap> selbst frei, eine weitere
   Benutzung ist danach nicht mehr moeglich.
 *)


PROCEDURE ALLOC ((* -- /AUS *) VAR mem  : ADDRESS;
                 (* EIN/ -- *)     heap : ADTHeap );

PROCEDURE DEALLOC ((* EIN/AUS *) VAR mem  : ADDRESS;
                   (* EIN/ -- *)     heap : ADTHeap );

(* Die beiden Prozeduren werden statt "ALLOCATE()" und "DEALLOCATE()" aus
   'Storage' benutzt. Es wird lediglich statt des ueblichen 'size'-
   Parameters der benutzte ADTHeap angegeben. Wie bei "ALLOCATE()" wird
   <mem> auf NIL gesetzt, wenn kein Speicher mehr frei ist. Bei "DEALLOC()"
   wird <mem> auf NIL gesetzt.
 *)


PROCEDURE RaiseADTException ((* EIN/ -- *) exc : ADTExceptions;
                             (* EIN/ -- *) msg : ARRAY OF CHAR  );

(* Hiermit kann in einem ADT-Modul eine Ausnahme vom Typ 'ADTExeptions'
   ausgeloest werden.
 *)


PROCEDURE IsADTException ( ): BOOLEAN;

(* Testet, ob die ausfuehrende Koroutine in einer Ausnahmebehandlung
   ist, weil eine Ausnahme vom Typ 'ADTExceptions' ausgeloest wurde.
 *)


PROCEDURE ADTException ( ): ADTExceptions;

(* Falls die ausfuehrende Koroutine in einer Ausnahmebehandlung ist,
   weil eine Ausnahme vom Typ 'ADTExceptions' ausgeloest wurde,
   wird der entsprechende Wert zurueckgeliefert, ansonsten wird eine
   Ausnahme ausgeloest.
 *)

END ADTBase.
