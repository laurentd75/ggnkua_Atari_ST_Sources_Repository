DEFINITION MODULE Stacks;
__DEF_SWITCHES__
#ifdef HM2
#ifdef __LONG_WHOLE__
(*$!i+: Modul muss mit $i- uebersetzt werden! *)
(*$!w+: Modul muss mit $w- uebersetzt werden! *)
#else
(*$!i-: Modul muss mit $i+ uebersetzt werden! *)
(*$!w-: Modul muss mit $w+ uebersetzt werden! *)
#endif
#endif
(*****************************************************************************)
(* Dieses Modul enthaelt Prozeduren zur Erzeugung und Verwaltung von Stacks  *)
(* (LIFO - Listen). Die Stackoperationen sind nicht an einen bestimmten      *)
(* Datentyp gebunden, d.h. aber auch, dass keine Typueberpruefung -- weder   *)
(* zur Uebersetzungszeit noch zur Laufzeit -- vorgenommen wird.              *)
(*                                                                           *)
(* Falls beim Praeprozessieren des Implementationsmoduls das Makro __CHECKS__*)
(* gesetzt war, gilt folgendes:                                              *)
(*                                                                           *)
(* Wird zur Laufzeit ein Objekt mit anderem Speicherbedarf benutzt als bei   *)
(* der Stackdefinition angegeben wurde, gibt es eine Ausnahme                *)
(* (--> wrongElemSize).                                                      *)
(*                                                                           *)
(* Alle Prozeduren pruefen, ob der Stack, der ihnen uebergeben wird, einen   *)
(* definierten Wert hat. Ist dies nicht der Fall, gibt es eine Ausnahme      *)
(* (--> notAnADT).                                                           *)
(* --------------------------------------------------------------------------*)
(* Okt-91 / 16-Dez-95, Holger Kleinschmidt                                   *)
(*****************************************************************************)

FROM PORTAB IMPORT
(* TYPE *) ANYTYPE;

(*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*)

TYPE
  Stack;

(*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*)

PROCEDURE Create ((* EIN/ -- *)     eSize : CARDINAL;
                  (* EIN/ -- *)     bSize : CARDINAL;
                  (* -- /AUS *) VAR stack : Stack;
                  (* -- /AUS *) VAR done  : BOOLEAN );

(* Richtet einen <stack> und seine Verwaltung ein. <eSize> ist die
   Groesse der Elemente, die auf dem Stack abgelegt werden sollen.
   <bSize> ist die Anzahl der Elemente, fuer die jeweils, wenn noetig,
   ein neuer Speicherblock angefordert wird; ein grosser Wert fuer
   <bSize> fuehrt zu geringerem Verwaltungsaufwand, vergroessert aber den
   Anteil des Speichers, der die meiste Zeit nicht genutzt wird.
   Die Prozedur muss vor allen anderen Stackoperationen ausgefuehrt werden;
   <stack> ist nur fuer Elemente der angegebenen Groesse zu benutzen.

   Die Prozedur kann aus folgenden Gruenden fehlschlagen:
   <eSize> oder <bSize> sind gleich Null, <eSize> ist groesser als
   MAXSIGNEDWORD, <bSize> ist groesser als MAXUNSIGNEDWORD oder es ist
   nicht mehr genuegend Speicher frei.

   Aufwand        : O(1)
   Stackbelastung : O(1)
 *)


PROCEDURE Delete ((* EIN/AUS *) VAR stack : Stack );

(* <stack> wird aus der Verwaltung entfernt und der belegte Speicherplatz
   freigegeben. Weitere Operationen mit <stack> sind danach nicht mehr
   moeglich. Die Prozedur sollte nach Abschluss der Operationen mit <stack>
   aufgerufen werden. <stack> hat nach Ausfuehrung den Wert NIL.

   Aufwand             : O(n)
   Stackbelastung      : O(1)
   Moegliche Ausnahmen : notAnADT
 *)


PROCEDURE Clear ((* EIN/ -- *) stack : Stack );

(* Entfernt saemtliche Elemente von <stack> und gibt deren Speicherplatz
   frei; <stack> selber bleibt erhalten.

   Aufwand             : O(n)
   Stackbelastung      : O(1)
   Moegliche Ausnahmen : notAnADT
 *)


PROCEDURE IsEmpty ((* EIN/ -- *) stack : Stack ): BOOLEAN;

PROCEDURE Size ((* EIN/ -- *) stack : Stack ): CARDINAL;

(* Testet, ob <stack> leer ist, bzw. liefert die Anzahl der Elemente.

   Aufwand             : O(1)
   Stackbelastung      : O(1)
   Moegliche Ausnahmen : notAnADT
 *)


PROCEDURE Push ((* EIN/ -- *)     stack : Stack;
                (* EIN/ -- *) VAR val   : ARRAY OF ANYTYPE );

(* <val> wird zum obersten Element von <stack>.

   Aufwand             : O(1)
   Stackbelastung      : O(1)
   Moegliche Ausnahmen : notAnADT, wrongElemSize, noMem
 *)


PROCEDURE Top ((* EIN/ -- *)     stack : Stack;
               (* -- /AUS *) VAR val   : ARRAY OF ANYTYPE );

(* Liefert das oberste Element von <stack> in <val>. <stack> wird nicht
   veraendert.
   <stack> darf nicht leer sein, sonst wird eine Ausnahme ausgeloest.

   Aufwand             : O(1)
   Stackbelastung      : O(1)
   Moegliche Ausnahmen : notAnADT, wrongElemSize, noEntry
 *)


PROCEDURE Pop ((* EIN/ -- *)     stack : Stack;
               (* -- /AUS *) VAR val   : ARRAY OF ANYTYPE );

(* Liefert das oberste Element von <stack> in <val> und entfernt es aus
   <stack>.
   <stack> darf nicht leer sein, sonst wird eine Ausnahme ausgeloest.

   Aufwand             : O(1)
   Stackbelastung      : O(1)
   Moegliche Ausnahmen : notAnADT, wrongElemSize, noEntry
 *)

END Stacks.
