DEFINITION MODULE DateLib;
__DEF_SWITCHES__
#ifdef HM2
#ifdef __LONG_WHOLE__
(*$!i+: Modul muss mit $i- uebersetzt werden! *)
(*$!w+: Modul muss mit $w- uebersetzt werden! *)
#else
(*$!i-: Modul muss mit $i+ uebersetzt werden! *)
(*$!w-: Modul muss mit $w+ uebersetzt werden! *)
#endif
#endif
(*****************************************************************************)
(* In diesem Modul gibt es mehrere allgemeine Funktionen fuer die Bearbeitung*)
(* von Kalenderdaten.                                                        *)
(*                                                                           *)
(* Bis zum 4.10.1582 galt der Julianische Kalender mit einem Schaltjahr alle *)
(* vier Jahre; da die hieraus resultierende Jahreslaenge von 365.25 mittleren*)
(* Sonnentagen etwas laenger als das tatsaechliche Jahr (tropisches Jahr mit *)
(* 365.2422 Tagen) ist, folgte auf den 4.10 der 15.10.1582 (obwohl ich beim  *)
(* Nachrechnen immer auf zwoelf statt zehn Tage Unterschied komme...), mit   *)
(* dem der Gregorianische Kalender begann, den wir heute benutzen (Ein       *)
(* Schaltjahr alle vier Jahre, wenns kein Jahrhundert ist, oder wenn die Jah-*)
(* reszahl ohne Rest durch vierhundert teilbar ist). Die daraus resultieren- *)
(* de Jahreslaenge von 365.2425 Tagen entspricht zwar immer noch nicht exakt *)
(* dem tropischen Jahr, aber der Unterschied summiert sich erst in mehreren  *)
(* tausend Jahren zu einem Tag.                                              *)
(* Das Julianische Datum schliesslich ist die Anzahl von Tagen, die seit dem *)
(* 1.1.4713 v.Chr. 12:00:00 vergangen sind. Der Einfachheit halber bleibt in *)
(* diesem Modul die Zeitkomponente des Julianischen Datums unberuecksichtigt.*)
(*                                                                           *)
(* Jahreszahlen vor Christus werden negativ gezaehlt. Da es kein Jahr Null   *)
(* gab (Die Null ist nur ein ZeitPUNKT, kein ZeitABSCHNITT wie die Jahre -   *)
(* auf den 31.12.1 v.Chr. folgte der 1.1.1 n.Chr.), die Jahreszahlen aber    *)
(* ohne Unterbrechnung durchnummeriert werden sollen,zaehlt das Jahr 1 v.Chr.*)
(* als das Jahr Null, das Jahr 2 v.Chr als Jahr -1 usw. bis zum Jahr -4712   *)
(* (4713 v.Chr) (astronomische Jahreszahlen).                                *)
(*                                                                           *)
(* Achtung: Die Prozeduren pruefen nicht auf ein gueltiges Datum, so dass man*)
(* ein zu bearbeitendes Datum gegebenenfalls vorher mit "CheckDate" ueber-   *)
(* pruefen sollte.                                                           *)
(* --------------------------------------------------------------------------*)
(* Mai-91 / 06-Jan-96, Holger Kleinschmidt                                   *)
(*****************************************************************************)

FROM PORTAB IMPORT
(* TYPE *) UNSIGNEDLONG, SIGNEDLONG;

(*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*)

TYPE
  Weekday = (Mon, Tue, Wed, Thu, Fri, Sat, Sun);

  Date = RECORD
    day   : CARDINAL; (* [1..31] *)
    month : CARDINAL; (* [0..11] *)
    year  : INTEGER;
  END;

  Calendar = (
    noDate,   (* kein gueltiges Datum *)
    julDate,  (* Datum zwischen 1.1.-4712 und 4.10.1582 *)
    gregDate  (* Datum ab 15.10.1582 *)
  );

  DateRelation = (dEarlier, dEqual, dLater);

(*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*)

PROCEDURE CheckDate ((* EIN/ -- *) date : Date ): Calendar;

(* Prueft, ob <date> ein gueltiges Datum ist, d.h. ob der Tag im angegebenen
   Monat existiert, der Monat im gueltigen Breich liegt, die Jahreszahl nicht
   kleiner als -4712 ist, und kein Datum zwischen dem 4.10.1582 und dem
   15.10.1582 (beide ausschliesslich) angegeben wurde.
 *)


PROCEDURE CompareDate ((* EIN/ -- *) date1 : Date;
                       (* EIN/ -- *) date2 : Date ): DateRelation;

(* Vergleicht beide Daten bzgl. ihres zeitlichen Abstandes:

   <date1>  frueher als  <date2> : "CompareDate" =  'dEarlier'
   <date1>  gleich       <date2> : "CompareDate" =  'dEqual'
   <date1>  spaeter als  <date2> : "CompareDate" =  'dLater'
 *)


PROCEDURE FirstJulCal  ((* -- /AUS *) VAR first : Date );

PROCEDURE LastJulCal   ((* -- /AUS *) VAR last : Date );

PROCEDURE FirstGregCal ((* -- /AUS *) VAR first : Date );

(* Die Prozeduren liefern die Anfangs- bzw. Enddaten der beiden Kalender:

   "FirstJulCal"  :  <first> =  1.Jan.-4712  (1.Jan.4713 v.Chr.)
   "LastJulCal"   :  <last>  =  4.Oct. 1582
   "FirstGregCal" :  <first> = 15.Oct. 1582
 *)


PROCEDURE IsLeapyear ((* EIN/ -- *) year : INTEGER ): BOOLEAN;

(* Prueft, ob <year> ein Schaltjahr ist. Die unterschiedlichen
   Schaltjahrregeln zwischen Jul. und Greg. Kalender werden beruecksichtigt.
 *)


PROCEDURE JulianDate ((* EIN/ -- *) date : Date ): UNSIGNEDLONG;

(* Berechnet die Anzahl der mittleren Sonnentage seit dem 1.1.4713 v.Chr.
   Zum vollstaendigen Julianischen Datum fehlt noch die Beruecksichtigung
   der Zeit, die sonst in Form von Nachkommastellen angegeben wird. Deshalb
   wird auch nicht beruecksichtigt, dass der Tageswechsel beim julianischen
   Datum erst zur Mittagszeit (12:00:00) stattfindet.

   Das vollstaendige Jul. Datum erhaelt man z.B. mit:
      LFLOAT(JulianDate(date) - 0.5) + time  ,  0.0 <= time < 1.0

   Fuer Sekundengenauigkeit muss aber das verwendete Gleitkommaformat
   mindestens 13 gueltige Stellen haben.
 *)


PROCEDURE CalendarDate ((* EIN/ -- *)     julian : UNSIGNEDLONG;
                        (* -- /AUS *) VAR date   : Date         );

(* Berechnet aus der Anzahl der mittl. Sonnentage seit dem 1.1.4713 v.Chr.
   (Julianisches Datum ohne Zeitangabe) das Kalenderdatum.
 *)


PROCEDURE DayOfWeek ((* EIN/ -- *) date : Date ): Weekday;

(* Liefert den Wochentag des Datums <date> *)


PROCEDURE DayOfYear ((* EIN/ -- *) date : Date ): CARDINAL;

(* Liefert den Tag im laufenden Jahr [1..366] von <date> *)


PROCEDURE DaysInMonth ((* EIN/ -- *) date : Date ): CARDINAL;

(* Liefert die Anzahl von Tagen im angegebenen Monat und Jahr *)


PROCEDURE DateDiff ((* EIN/ -- *) date1 : Date;
                    (* EIN/ -- *) date2 : Date ): SIGNEDLONG;

(* Berechnet die zeitliche Differenz in Tagen zwischen <date1> und <date2>.
   Liegt <date1> zeitlich vor <date2>, ist das Ergebnis negativ.
 *)


PROCEDURE DateAdd ((* EIN/ -- *)     date : Date;
                   (* EIN/ -- *)     days : SIGNEDLONG;
                   (* -- /AUS *) VAR new  : Date       );

(* Addiert zu <date> eine Anzahl von Tagen <days> und liefert das neue Datum
   <new>. <days> kann auch negativ sein (Subtraktion von Tagen).
 *)

END DateLib.
