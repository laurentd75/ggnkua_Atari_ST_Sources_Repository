DEFINITION MODULE BigSets;
__DEF_SWITCHES__
#ifdef HM2
#ifdef __LONG_WHOLE__
(*$!i+: Modul muss mit $i- uebersetzt werden! *)
(*$!w+: Modul muss mit $w- uebersetzt werden! *)
#else
(*$!i-: Modul muss mit $i+ uebersetzt werden! *)
(*$!w-: Modul muss mit $w+ uebersetzt werden! *)
#endif
#endif
(*****************************************************************************)
(* Operationen fuer typenlose Mengen.                                        *)
(*                                                                           *)
(* Die Mengen sind aus einzelnen WORDSETs zusammengesetzt. Sind bei einer    *)
(* Operation zwei oder mehr Mengen beteiligt, die eine unterschiedliche      *)
(* Groesse besitzen, wird nach folgendem Schema verfahren:                   *)
(*                                                                           *)
(* o Besteht bei Eingabeparametern ein Groessenunterschied, wird die kleinere*)
(*   Menge virtuell auf die groessere erweitert, wobei angenommen wird, dass *)
(*   zusaetzliche Elemente alle geloescht, also nicht in der Menge enthalten *)
(*   sind.                                                                   *)
(*                                                                           *)
(* o Ist der Ausgabeparameter kleiner als die Eingabeparameter, wird die     *)
(*   Operation nur bis zur Groesse des Ausgabeparameters ausgefuehrt.        *)
(*                                                                           *)
(* o Ist der Ausgabeparameter groesser als die Eingabeparameter, werden die  *)
(*   Eingabeparameter virtuell auf die Groesse des Ausgabeparameters         *)
(*   erweitert, wobei angenommen wird, dass zusaetzliche Elemente nicht in   *)
(*   den Eingabeparametern enthalten sind.                                   *)
(*                                                                           *)
(* Es wird angenommen, dass die Groesse der Mengen immer ein Vielfaches von  *)
(* WORDSET betraegt, soll einmal eine ``ungerade'' Anzahl von Elementen      *)
(* verwendet werden, kann "Mask()" benutzt werden, um unbenutzte Elemente zu *)
(* loeschen.                                                                 *)
(* Wird als Parameter ein Element angegeben, das ausserhalb der angegebenen  *)
(* Menge liegt, wird es beim Setzen/Loeschen nicht beachtet, beim Testen als *)
(* nicht vorhanden angesehen. Elemente werden von Null an als Index in einer *)
(* Menge angegeben.                                                          *)
(* Zu beachten ist, dass Mengen immer als VAR-Parameter uebergeben werden,   *)
(* um bei grossen Mengen Zeit und Stackplatz zu sparen, deshalb koennen auch *)
(* Eingabeparameter veraendert werden, wenn sie zusaetzlich als              *)
(* Ausgabeparameter auftauchen! Dies betrifft folgende Funktionen:           *)
(* "Complement()", "Union()", "Intersection()", "Difference()" und           *)
(* "SymmetricDiff()".                                                        *)
(* Ebenfalls zu beachten ist, dass die Repraesentation der Mengen nur        *)
(* innerhalb einer WORDSET der unterliegenden Bitrepraesentation entspricht. *)
(* So sind z.B. die ersten 32 Elemente einer Menge NICHT mit der Verteilung  *)
(* der Bits in einem 32-Bit-Langwort identisch!!                             *)
(* --------------------------------------------------------------------------*)
(* Jun-90 / 17-Dez-94, Holger Kleinschmidt                                   *)
(*****************************************************************************)

FROM PORTAB IMPORT
(* TYPE *) UNSIGNEDWORD, WORDSET;

(*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*)

TYPE
  WriteChar = PROCEDURE(CHAR);

(*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*)

PROCEDURE Assign ((* EIN/ -- *) VAR src : ARRAY OF WORDSET;
                  (* -- /AUS *) VAR dst : ARRAY OF WORDSET );

(* Zuweisung: <dst> := <src> *)


PROCEDURE Mask ((* EIN/ -- *)     nElems : CARDINAL;
                (* EIN/AUS *) VAR set    : ARRAY OF WORDSET );

(* Loescht alle Elemente von <set>, bis auf die ersten <nElems> *)


PROCEDURE Clear ((* -- /AUS *) VAR set : ARRAY OF WORDSET );

PROCEDURE Fill ((* -- /AUS *) VAR set : ARRAY OF WORDSET );

(* Loescht, bzw. setzt alle Elemente von <set> *)


PROCEDURE IsEmpty ((* EIN/ -- *) VAR set : ARRAY OF WORDSET ): BOOLEAN;

PROCEDURE IsFull ((* EIN/ -- *) VAR set : ARRAY OF WORDSET ): BOOLEAN;

(* Prueft, ob <set> leer ist, bzw. alle moeglichen Elemente enthalten sind *)


PROCEDURE Complement ((* EIN/ -- *) VAR set  : ARRAY OF WORDSET;
                      (* -- /AUS *) VAR cset : ARRAY OF WORDSET  );

(* <cset> enthaelt die Komplementaermenge von <set>, d.h. in <cset> sind
   genau die Elemente enthalten, die in <set> nicht enthalten sind.

   Das entspricht der logischen Operation:   <cset> := NOT <set>
 *)


PROCEDURE Card ((* EIN/ -- *) VAR set : ARRAY OF WORDSET ): CARDINAL;

(* Liefert die Kardinalitaet, d.h. die Anzahl der Elemente von <set> *)


PROCEDURE IsElement ((* EIN/ -- *)     elem : CARDINAL;
                     (* EIN/ -- *) VAR set  : ARRAY OF WORDSET ): BOOLEAN;

(* Testet, ob das Element <elem> in der Menge <set> enthalten ist *)


PROCEDURE Include ((* EIN/ -- *)     elem  : CARDINAL;
                   (* EIN/AUS *) VAR set   : ARRAY OF WORDSET );

PROCEDURE Exclude ((* EIN/ -- *)     elem  : CARDINAL;
                   (* EIN/AUS *) VAR set   : ARRAY OF WORDSET );

(* Fuegt das Element <elem> der Menge <set> hinzu, bzw. entfernt es.

   - Falls <elem> bei Aufruf von "Include" bereits in der Menge enthalten
     ist, wird <set> nicht veraendert
   - Falls <elem> bei Aufruf von "Exclude" nicht in der Menge enthalten
     ist, wird <set> nicht veraendert
 *)


PROCEDURE IncludeRange ((* EIN/ -- *)     from : CARDINAL;
                        (* EIN/ -- *)     to   : CARDINAL;
                        (* EIN/AUS *) VAR set  : ARRAY OF WORDSET );

PROCEDURE ExcludeRange ((* EIN/ -- *)     from : CARDINAL;
                        (* EIN/ -- *)     to   : CARDINAL;
                        (* EIN/AUS *) VAR set  : ARRAY OF WORDSET );

(* Der Bereich von Elementen zwischen <from> und <to> (einschliesslich)
   wird <set> hinzugefuegt, bzw. aus <set> entfernt.

   - Liegt <from> vor <to>, passiert nichts.
   - Liegt <to> ausserhalb von <set>, werden nur die Elemente bis zum
     Mengenende beruecksichtigt.
 *)


PROCEDURE Union ((* EIN/ -- *) VAR set1 : ARRAY OF WORDSET;
                 (* EIN/ -- *) VAR set2 : ARRAY OF WORDSET;
                 (* -- /AUS *) VAR uset : ARRAY OF WORDSET );

(* Bildet die Vereinigungsmenge. D.h. <uset> enthaelt alle Elemente von
   <set1> und <set2>. In beiden Mengen auftretende Elemente sind in <cset>
   nur einmal enthalten.

   Das entspricht der logischen Operation:   <uset> := <set1> OR <set2>
 *)


PROCEDURE Intersection ((* EIN/ -- *) VAR set1 : ARRAY OF WORDSET;
                        (* EIN/ -- *) VAR set2 : ARRAY OF WORDSET;
                        (* -- /AUS *) VAR iset : ARRAY OF WORDSET );

(* Bildet die Schnittmenge. D.h. <iset> enthaelt die Elemente, die sowohl
   in <set1> als auch in <set2> enthalten sind.

   Das entspricht der logischen Operation:   <iset> := <set1> AND <set2>
 *)


PROCEDURE Difference ((* EIN/ -- *) VAR set1 : ARRAY OF WORDSET;
                      (* EIN/ -- *) VAR set2 : ARRAY OF WORDSET;
                      (* -- /AUS *) VAR dset : ARRAY OF WORDSET );

(* Bildet die Differenzmenge. D.h. in <dset> sind alle Elemente von <set1>
   enthalten, die nicht auch in <set2> enthalten sind.

   Das entspricht der logischen Operation: <dset> := <set1> AND NOT <set2>
 *)


PROCEDURE SymmetricDiff ((* EIN/ -- *) VAR set1  : ARRAY OF WORDSET;
                         (* EIN/ -- *) VAR set2  : ARRAY OF WORDSET;
                         (* -- /AUS *) VAR sdset : ARRAY OF WORDSET );

(* Bildet die symmetrische Differenz. D.h. in <sdset> sind alle Elemente
   enthalten, die entweder in <set1> oder in <set2> enthalten sind, nicht
   aber in beiden. Die symmetrische Differenz ist die Differenzmenge von
   Vereinigungs - und Schnittmenge.

   Das enspricht der logischen Operation:  <sdset> := <set1> XOR <set2>
 *)


PROCEDURE Equal ((* EIN/ -- *) VAR set1 : ARRAY OF WORDSET;
                 (* EIN/ -- *) VAR set2 : ARRAY OF WORDSET ): BOOLEAN;

(* Testet, ob <set1> und <set2> die gleichen Elemente haben *)


PROCEDURE IsSubset ((* EIN/ -- *) VAR set1 : ARRAY OF WORDSET;
                    (* EIN/ -- *) VAR set2 : ARRAY OF WORDSET ): BOOLEAN;

PROCEDURE IsProperSubset ((* EIN/ -- *) VAR set1 : ARRAY OF WORDSET;
                          (* EIN/ -- *) VAR set2 : ARRAY OF WORDSET ): BOOLEAN;

(* "IsSubset()" testet, ob <set1> eine (echte) Teilmenge von <set2> ist,
   d.h. ob alle Elemente von <set1> auch in <set2> enthalten sind.
   "IsProperSubset()" verlangt zusaetzlich noch, dass die beiden Mengen
   nicht gleich sind.

   Das entspricht der logischen Operation:   (<set1> AND NOT <set2>) = 0
 *)


PROCEDURE WriteSet ((* EIN/ -- *) VAR set   : ARRAY OF WORDSET;
                    (* EIN/ -- *)     write : WriteChar        );

(* Gibt eine Repraesentation von <set> aus. Die Elemente werden ihrer
   Ordnungszahl entsprechend von links nach rechts ausgegeben, wobei ein
   enthaltenes Element als '1', ein nicht enthaltenes Element als '0'
   gekennzeichnet wird. jede WORDSET wird durch ein '' abgetrennt und
   nach vier WORDSETs erfolgt ein Zeilenumbruch. Die einzelnen Zeichen
   werden der Prozedur <write> uebergeben, die fuer eine geeignete Ausgabe
   sorgen muss. Der Zeilenumbruch wird durch <write(15C)> + <write(12C)>
   erzeugt.
 *)

END BigSets.
