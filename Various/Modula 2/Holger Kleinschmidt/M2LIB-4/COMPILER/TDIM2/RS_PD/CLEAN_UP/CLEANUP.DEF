DEFINITION MODULE CleanUp;           (* Automatik fÅr Modul-Terminierungen.*)
(* Ω 1993-95 ROLF SCHRADER * 11.11.93 ~ 16.2.94 *)

PROCEDURE Install (Closer: PROC);                               (* # <= 49.*)
       (* Diese Closer werden bei Programm-Ende in umgekehrter Reihenfolge *)
       (*  der Installation aufgerufen und kînnen so zum AufrÑumen dienen. *)
       (* So kann jeder Modul bei der Init. selber fÅr sein Ende vorsorgen.*)
       (* Bsp.: MODULE MyRsc; .. BEGIN Install(RscFree); RscLoad END MyRsc.*)

PROCEDURE ModTerm;
       (* Muû normal nicht aufgerufen werden. Aber z.B. nach Abfang von ^C *)
       (* kann man (nach RÅckfrage beim User) durch diese FalltÅr fleuchen.*)
       (* Dabei wird auch der in Closer/PreTerm installierte Putz erledigt.*)
       (* In FÑllen, wo TOS selber ^C abfÑngt, muû man etv_term verbiegen! *)

VAR ExValue: INTEGER;                                   (* Vorbelegt mit 0.*)
       (* Wird bei Prg.-Ende an die aufrufende Shell Åber deren PExec-Call *)
       (* zurÅckgegeben, falls nicht TOS oder ErrorProc anders entscheiden.*)
       (* 1..127 fÅr M2-Errors reserviert; TOS meldet Fehler mit Werten <0.*)
       (* Bsp.: ... IF (InKey = CTLC) THEN ExValue := -32; ModTerm END ... *)

(* Interna: *)
VAR PreTerm: PROC;
       (* Dieser Vektor hÑlt die Prozedur, wohinein die Closer installiert *)
       (* werden. Er erlaubt, die Reihenfolge der Closer zu umgehen. Bsp.: *)
       (* MODULE MyPrg; .. IMPORT Z; PROCEDURE nT; BEGIN oT; Z.Fin END nT; *)
       (*  ... VAR oT: PROC; BEGIN oT := PreTerm; PreTerm := nT END MyPrg. *)
       (* So schlieût Z erst nach allen andern, obwohl zuletzt importiert! *)
       (* Aber das brauchen meistens nur Trapper, Spurenleser und Indianer.*)

(* Bem: *)
(* Accessories enden nicht, d.h. sie rufen normalerweise den M2-Terminator *)
(* nie auf (also auch keine Closer) - es sei denn im Fehlerfall! Spezielle *)
(* Konstruktion von GEMX, ErrorProcessor etc. kann dafÅr Vorsorge treffen. *)
END CleanUp.
