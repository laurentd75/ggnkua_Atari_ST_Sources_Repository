DEFINITION MODULE M2Syms;
__DEF_SWITCHES__
#ifdef HM2
#ifdef __LONG_WHOLE__
(*$!i+: Modul muss mit $i- uebersetzt werden! *)
(*$!w+: Modul muss mit $w- uebersetzt werden! *)
#else
(*$!i-: Modul muss mit $i+ uebersetzt werden! *)
(*$!w-: Modul muss mit $w+ uebersetzt werden! *)
#endif
#endif
(*****************************************************************************)
(* 16-Dez-95, Holger Kleinschmidt                                            *)
(*****************************************************************************)

(* Folgende lexikalische Einheiten (Token) koennen in einem ISO-M2-Programm
 * auftreten:
 *
 * Festgelegte Symbole:
 *
 *    :           ,           ..          =           .
 *    ;           (           )           <>          #
 *    +           -           *           /           :=
 *    <           >           <=          >=          &
 *    Apostroph   Hochkomma
 *
 * Symbole mit Alternativen:
 *
 *    |           !
 *    ^           @
 *    [           (!
 *    ]           !)
 *    {           (:
 *    }           :)
 *
 * Schluesselwoerter:
 *
 *    AND         ARRAY       BEGIN       BY          CASE
 *    CONST       DEFINITION  DIV         DO          ELSE
 *    ELSIF       END         EXIT        EXCEPT      EXPORT
 *    FINALLY     FOR         FORWARD     FROM        IF
 *    IMPLEMENTATION          IMPORT      IN          LOOP
 *    MOD         MODULE      NOT         OF          OR
 *    PACKEDSET   POINTER     PROCEDURE   QUALIFIED   RECORD
 *    REM         RETRY       REPEAT      RETURN      SET
 *    THEN        TO          TYPE        UNTIL       VAR
 *    WHILE       WITH
 *
 * Hinzu kommen noch die vordefinierten Typen und Standardfunktionen,
 * die Zahlenkonstanten und anderen Bezeichner.
 *
 *
 * Die Token koennen durch folgende Objekte begrenzt werden:
 *
 * o Leerzeichen und andere Kontrollzeichen
 * o (geschachtelte) Kommentare, die durch die Symbole (* und *)
 *   eingeschlossen sind.
 * o Compileranweisungen, die durch die Symbole <* und *>
 *   eingeschlossen sind.
 * o Symbole stellen ebenfalls Begrenzer dar, ohne dass zusaetzlich
 *   eine der obigen Begrenzungen vorhanden ist.
 *)

FROM PORTAB IMPORT
(* TYPE *) WORDSET;

TYPE
  Symbols = (
    ColonSym,             (* ":" *)
    CommaSym,             (* "," *)
    EllipsisSym,          (* ".." *)
    EqualsSym,            (* "=" *)
    PeriodSym,            (* "." *)
    SemicolonSym,         (* ";" *)
    LeftParenSym,         (* "(" *)
    RightParenSym,        (* ")" *)
    NotEqualsSym,         (* "<>", "#" *)
    PlusSym,              (* "+" *)
    MinusSym,             (* "-" *)
    MulSym,               (* "*" *)
    DivisionSym,          (* "/" *)
    AssignSym,            (* ":=" *)
    LessSym,              (* "<" *)
    GreaterSym,           (* ">" *)
    LessOrEqualSym,       (* "<=" *)
    GreaterOrEqualSym,    (* ">=" *)
    SingleQuoteSym,       (* "'" *)
    DoubleQuoteSym,       (* '"' *)
    CaseOpSym,            (* "|", "!" *)
    DerefSym,             (* "^", "@" *)
    LeftBracketSym,       (* "[", "(!" *)
    RightBracketSym,      (* "]", "!)" *)
    LeftBraceSym,         (* "{", "(:" *)
    RightBraceSym,        (* "}", ":)" *)

(* Ab hier stehen die Symbole in der Repraesentationstabelle *)
    AndSym,               (* "AND", "&" *)
    ArraySym,             (* "ARRAY" *)
    BeginSym,             (* "BEGIN" *)
    BySym,                (* "BY" *)
    CaseSym,              (* "CASE" *)
    ConstSym,             (* "CONST" *)
    DefinitionSym,        (* "DEFINITION" *)
    DivSym,               (* "DIV" *)
    DoSym,                (* "DO" *)
    ElseSym,              (* "ELSE" *)
    ElsifSym,             (* "ELSIF" *)
    EndSym,               (* "END" *)
    ExitSym,              (* "EXIT" *)
    ExceptSym,            (* "EXCEPT" *)
    ExportSym,            (* "EXPORT" *)
    FinallySym,           (* "FINALLY" *)
    ForSym,               (* "FOR" *)
    ForwardSym,           (* "FORWARD" *)
    FromSym,              (* "FROM" *)
    IfSym,                (* "IF" *)
    ImplementationSym,    (* "IMPLEMENTATION" *)
    ImportSym,            (* "IMPORT" *)
    InSym,                (* "IN" *)
    LoopSym,              (* "LOOP" *)
    ModSym,               (* "MOD" *)
    ModuleSym,            (* "MODULE" *)
    NotSym,               (* "NOT", "~" *)
    OfSym,                (* "OF" *)
    OrSym,                (* "OR" *)
    PackedsetSym,         (* "PACKEDSET" *)
    PointerSym,           (* "POINTER" *)
    ProcedureSym,         (* "PROCEDURE" *)
    QualifiedSym,         (* "QUALIFIED" *)
    RecordSym,            (* "RECORD" *)
    RemSym,               (* "REM" *)
    RetrySym,             (* "RETRY" *)
    RepeatSym,            (* "REPEAT" *)
    ReturnSym,            (* "RETURN" *)
    SetSym,               (* "SET" *)
    ThenSym,              (* "THEN" *)
    ToSym,                (* "TO" *)
    TypeSym,              (* "TYPE" *)
    UntilSym,             (* "UNTIL" *)
    VarSym,               (* "VAR" *)
    WhileSym,             (* "WHILE" *)
    WithSym,              (* "WITH" *)

    NumberSym,
    StringSym,
    IdentSym,

(* Ab hier stehen die Symbole nicht mehr in der Repraesentationstabelle *)

(* Diese Symbole werden innerhalb des Scanners ueberlesen *)
    CtrlCh,
    Option,
    Comment,

(* Ab hier Fehler oder Dateiende *)
    ErrorSym,
    UnexpectedEol,

(* Ab hier Dateiende *)
    UnexpectedEof,
    EofSym
  );

CONST
  NSymbols = 82; (* ORD(MAX(Symbols)) + 1 *)
  NWSets   = 6;  (* (NSymbols + 15) DIV 16 *)

TYPE
  SymbolSet = ARRAY [0..NWSets-1] OF WORDSET;

(*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*)

 PROCEDURE GetSymStr ((* EIN/ -- *)     sym  : Symbols;
                      (* -- /AUS *) VAR str  : ARRAY OF CHAR;
                      (* -- /AUS *) VAR done : BOOLEAN       );
 (* Liefert zum Symbol <sym> die zugehoerige Stringrepraesentation in <str>.
  * Falls <str> gross genug war, ist <done> gleich TRUE.
  *)


 PROCEDURE Clear ((* -- /AUS *) VAR set : SymbolSet );
 (* Loescht die Menge <set> *)

 PROCEDURE IsElem ((* EIN/ -- *)     sym : Symbols;
                   (* EIN/ -- *) VAR set : SymbolSet ): BOOLEAN;
 (* Testet, ob <sym> Element der Menge <set> ist *)

 PROCEDURE Incl ((* EIN/ -- *)     sym : Symbols;
                 (* EIN/AUS *) VAR set : SymbolSet );
 (* Fuegt <sym> der Menge <set> als Element hinzu *)

END M2Syms.
