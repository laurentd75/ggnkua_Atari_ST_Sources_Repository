MODULE PrintTokens;
__IMP_SWITCHES__
__DEBUG__
#ifdef HM2
#ifdef __LONG_WHOLE__
(*$!i+: Modul muss mit $i- uebersetzt werden! *)
(*$!w+: Modul muss mit $w- uebersetzt werden! *)
#else
(*$!i-: Modul muss mit $i+ uebersetzt werden! *)
(*$!w-: Modul muss mit $w+ uebersetzt werden! *)
#endif
#endif

(* Listet alle lexikalischen Einheiten (Symbole) eines ISO-M2-Moduls
 * zusammen mit deren Anfangspositionen auf
 *
 * Aufruf: printtok [infile [outfile]]
 *
 * Wenn 'infile' und/oder 'outfile' nicht angegeben sind oder nicht
 * geoeffnet/angelegt werden k”nnen, werden Standardeingabe und Standard-
 * ausgabe verwendet.
 *
 * 03-Jan-96; Holger Kleinschmidt
 *)
#if (defined MM2)
(*$E MTP *)
#if (defined __DEBUG_CODE__)
IMPORT TOSDebug;
#endif
#endif

VAL_INTRINSIC


FROM PORTAB IMPORT
(* TYPE *) UNSIGNED;

FROM ProgramArgs IMPORT
(* PROC *) ArgChan, IsArgPresent, NextArg;

FROM StreamFile IMPORT
(* CONST*) write, old,
(* TYPE *) ChanId, OpenResults,
(* PROC *) Open, Close;

FROM StdChans IMPORT
(* PROC *) OutChan, ErrChan;

FROM IOChan IMPORT
(* PROC *) Flush;

FROM TextIO IMPORT
(* PROC *) ReadString, WriteString, WriteChar, WriteLn;

FROM WholeIO IMPORT
(* PROC *) WriteCard;

FROM M2Input IMPORT
(* TYPE *) InputPos,
(* PROC *) OpenInput, CloseInput, InitInput, NextToken;

FROM M2Syms IMPORT
(* TYPE *) Symbols, SymbolSet,
(* PROC *) GetSymStr;

FROM M2StrTable IMPORT
(* TYPE *) StrRepr,
(* PROC *) GetStrRepr;

(*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*)

VAR
  FileName : ARRAY [0..255] OF CHAR;
  FileRes  : OpenResults;
  OutFile  : ChanId;
  OutOpen  : BOOLEAN;

  done     : BOOLEAN;
  str      : ARRAY [0..79] OF CHAR;
  sym      : Symbols;
  esym     : Symbols;
  pos      : InputPos;
  repr     : StrRepr;

(*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*)

BEGIN
 OutOpen := FALSE;
 IF IsArgPresent() THEN
   NextArg; (* Programmnamen ueberlesen *)
   IF IsArgPresent() THEN
     ReadString(ArgChan(), FileName);
     IF ~OpenInput(FileName) THEN
       WriteString(ErrChan(), "Using StdIn, could not open input file: ");
       WriteString(ErrChan(), FileName);
       WriteLn(ErrChan());
     END;
     NextArg;
     IF IsArgPresent() THEN
       ReadString(ArgChan(), FileName);
       Open(OutFile, FileName, write+old, FileRes);
       IF FileRes = opened THEN
         OutOpen := TRUE;
       ELSE
         WriteString(ErrChan(), "Using StdOut, could not open output file: ");
         WriteString(ErrChan(), FileName);
         WriteLn(ErrChan());
       END;
     END;
   END;
 END;
 IF ~OutOpen THEN
   OutFile := OutChan();
 END;

 InitInput;

 REPEAT
   NextToken(sym, esym, pos, repr);

   WriteChar(OutFile, "[");
   WriteCard(OutFile, VAL(UNSIGNED,pos.line), 4);
   WriteChar(OutFile, ',');
   WriteCard(OutFile, VAL(UNSIGNED,pos.col), 4);
   WriteString(OutFile, "] : ");
   GetSymStr(sym, str, done);
   WriteString(OutFile, str);
   IF (sym >= ErrorSym) & (sym <= UnexpectedEof) THEN
     sym := esym;
     GetSymStr(sym, str, done);
     WriteString(OutFile, " [");
     WriteString(OutFile, str);
     WriteChar(OutFile, "]");
   END;
   IF (sym >= NumberSym) & (sym <= IdentSym) THEN
     WriteString(OutFile, " : ");
     GetStrRepr(repr, str, done);
     WriteString(OutFile, str);
   END;
   WriteLn(OutFile);
 UNTIL sym >= UnexpectedEof;

 CloseInput;
 IF OutOpen THEN
   Close(OutFile);
 END;
END PrintTokens.
