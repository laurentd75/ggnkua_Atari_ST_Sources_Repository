DEFINITION MODULE M2Input;
__DEF_SWITCHES__
#ifdef HM2
#ifdef __LONG_WHOLE__
(*$!i+: Modul muss mit $i- uebersetzt werden! *)
(*$!w+: Modul muss mit $w- uebersetzt werden! *)
#else
(*$!i-: Modul muss mit $i+ uebersetzt werden! *)
(*$!w-: Modul muss mit $w+ uebersetzt werden! *)
#endif
#endif
(*****************************************************************************)
(* Universeller Modula-2-Scanner. Erkennt alle lexikalischen Einheiten eines *)
(* ISO-M2-Programms.                                                         *)
(* --------------------------------------------------------------------------*)
(* 03-Jan-96, Holger Kleinschmidt                                            *)
(*****************************************************************************)

FROM PORTAB IMPORT
(* TYPE *) UNSIGNEDWORD;

FROM M2Syms IMPORT
(* TYPE *) Symbols, SymbolSet;

FROM M2StrTable IMPORT
(* TYPE *) StrRepr;

(*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*)

CONST
  (* Bei einem Tabulatorzeichen in der Eingabe wird die Spaltenposition
   * auf das naechste Vielfache dieses Wertes gesetzt.
   *)
  TabSize = 8;


TYPE
  (* Position eines Zeichens innerhalb der Eingabe *)
  InputPos = RECORD
    line : UNSIGNEDWORD; (* 1.. *)
    col  : UNSIGNEDWORD; (* 0.. *)
  END;

(*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*)

 PROCEDURE OpenInput ((* EIN/ -- *) REF file : ARRAY OF CHAR ): BOOLEAN;
 (* Oeffnet einen Eingabestrom zur Datei <file>. Falls erfolgreich,
  * wird TRUE als Funktionswert geliefert.
  * Wenn der Aufruf fehlschlaegt oder gar nicht verwendet wird,
  * wird die Standardeingabe bei den Leseoperationen verwendet.
  *)

 PROCEDURE InitInput;
 (* Muss vor dem ersten "NextToken()" auf dem aktuellen Eingabestrom
  * aufgerufen werden, egal ob "OpenInput()" erfolgreich aufgerufen
  * wurde oder nicht.
  *)

 PROCEDURE CloseInput;
 (* Falls "OpenInput()" erfolgreich war, wird die Datei <file> wieder
  * geschlossen.
  * Nach dieser Operation wird die Standardeingabe fuer die
  * Leseoperationen verwendet.
  *)

 PROCEDURE NextToken ((* -- /AUS *) VAR sym  : Symbols;
                      (* -- /AUS *) VAR esym : Symbols;
                      (* -- /AUS *) VAR pos  : InputPos;
                      (* -- /AUS *) VAR repr : StrRepr );
 (* Das ist der Scanner. Bei jedem Aufruf wird das naechste M2-Symbol
  * in <sym> geliefert und aus der Eingabe entfernt. <pos> enthaelt
  * die Anfangsposition des Symbols in der Eingabe. Kommentare,
  * ISO-Compileroptionen und Kontrollzeichen werden ueberlesen.
  * Falls es sich um eine Zahl, einen String oder einen Bezeichner
  * handelt, der kein Schluesselwort ist, kann ueber <repr> auf die
  * Stringrepraesentation zugegriffen werden, deren Laenge nicht begrenzt
  * ist. Zahlen werden ebenfalls als String abgelegt, die Gueltigkeit wird
  * nicht ueberprueft.
  * Falls ein Fehler erkannt wird (<sym> >= 'ErrorSym'), steht, falls
  * moeglich, in <esym> das Symbol, bei dessen Bearbeitung der Fehler
  * aufgetreten ist.
  *)

 PROCEDURE SkipUntil ((* EIN/ -- *) VAR stopset : SymbolSet;
                      (* -- /AUS *) VAR sym     : Symbols;
                      (* -- /AUS *) VAR esym    : Symbols;
                      (* -- /AUS *) VAR pos     : InputPos;
                      (* -- /AUS *) VAR repr    : StrRepr );
 (* Ueberliest solange Symbole, bis eins aus <stopset> auftritt oder
  * die Eingabe zuende ist. Das beendende Symbol wird in <sym>
  * zurueckgeliefert und aus der Eingabe entfernt.
  *)

END M2Input.
