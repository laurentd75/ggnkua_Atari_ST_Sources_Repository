MODULE showloc;
__IMP_SWITCHES__
__DEBUG__
#ifdef HM2
#ifdef __LONG_WHOLE__
(*$!i+: Modul muss mit $i- uebersetzt werden! *)
(*$!w+: Modul muss mit $w- uebersetzt werden! *)
#else
(*$!i-: Modul muss mit $i+ uebersetzt werden! *)
(*$!w-: Modul muss mit $w+ uebersetzt werden! *)
#endif
#endif

(* Zeigt die wichtigsten Teile eines Locales.
 * Aufruf: showloc [<locale>]
 *
 * <locale> ist der Name eines unterstuetzten Locales. Falls das
 * angegebene Locale nicht unterstuetzt wird, wird das POSIX-Locale
 * verwendet; falls kein Locale angegeben ist, wird versucht,
 * ein geeignetes Locale zu ermitteln.
 *
 * 30-Apr-96, Holger Kleinschmidt
 *)

#if (defined MM2)
(*$E MTP *)
#if (defined __DEBUG_CODE__)
IMPORT TOSDebug;
#endif
#endif

VAL_INTRINSIC
CAST_IMPORT

FROM SYSTEM IMPORT
(* PROC *) ADR;

FROM PORTAB IMPORT
(* CONST*) MINCHAR, MAXCHAR, NULL,
(* TYPE *) SIGNEDLONG;

FROM types IMPORT
(* TYPE *) sizeT, StrPtr, StrArray, ArrayRange;

FROM er IMPORT
(* CONST*) MAXeBIOS, MINeBIOS, MAXeGEMDOS, MINeGEMDOS, MAXeMiNT, MINeMiNT,
           MAXeSOCKET, MINeSOCKET, MAXePOSIX, MINePOSIX;

FROM ctype IMPORT
(* TYPE *) CharClassTest, CharConvert,
(* PROC *) isalnum, isalpha, islower, isupper, isdigit, isxdigit, isspace,
           isblank, isprint, isgraph, iscntrl, ispunct,
           tolower, toupper;

FROM str IMPORT
(* PROC *) strerror, strsignal, AssignCToM2;

FROM args IMPORT
(* PROC *) main;

FROM loc IMPORT
(* TYPE *) LcType,
(* PROC *) setlocale;

FROM tim IMPORT
(* TYPE *) TmPtr, TmRec,
(* PROC *) strftime;

FROM LCTypes IMPORT LCTime, LCNumeric, LCMonetary, LCCtype, LCMessages;

FROM DosIO IMPORT
(* PROC *) WriteString, Write, WriteLn, WriteInt;

(*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*)

VAR i      : INTEGER;
    c      : CHAR;
    argc   : ArrayRange;
    argv   : StrArray;
    locale : StrPtr;
    msg    : ARRAY [0..100] OF CHAR;

(*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*)

PROCEDURE WriteWeekdays;

VAR fmt : ARRAY [0..9] OF CHAR;
    tm  : TmRec;
    i   : CARDINAL;

BEGIN
 fmt := "%a, %A";
 FOR i := 0 TO 6 DO
   tm.tmWDay := i;
   IF strftime(ADR(msg), VAL(sizeT,SIZE(msg)), ADR(fmt), ADR(tm)) > VAL(sizeT,0) THEN
     WriteString(msg);
   ELSE
     WriteString("Fehler");
   END;
   WriteLn;
 END;
END WriteWeekdays;

(*---------------------------------------------------------------------------*)

PROCEDURE WriteMonths;

VAR fmt : ARRAY [0..9] OF CHAR;
    tm  : TmRec;
    i   : CARDINAL;

BEGIN
 fmt := "%b, %B";
 FOR i := 0 TO 11 DO
   tm.tmMon := i;
   IF strftime(ADR(msg), VAL(sizeT,SIZE(msg)), ADR(fmt), ADR(tm)) > VAL(sizeT,0) THEN
     WriteString(msg);
   ELSE
     WriteString("Fehler");
   END;
   WriteLn;
 END;
END WriteMonths;

(*---------------------------------------------------------------------------*)

PROCEDURE WriteMsg ((* EIN/ -- *) REF err : ARRAY OF CHAR;
                    (* EIN/ -- *)     max : INTEGER;
                    (* EIN/ -- *)     min : INTEGER       );

VAR i : INTEGER;

BEGIN
 WriteString(err); WriteLn;
 FOR i := max TO min BY -1 DO
   WriteInt(VAL(SIGNEDLONG,i), 4); WriteString(' : "');
   AssignCToM2(strerror(i), 0, msg);
   WriteString(msg);
   Write('"');
   WriteLn;
 END;
 WriteLn;
END WriteMsg;

(*---------------------------------------------------------------------------*)

PROCEDURE WriteClass ((* EIN/ -- *) REF proc : ARRAY OF CHAR;
                      (* EIN/ -- *)     test : CharClassTest );

VAR ch : CHAR;

BEGIN
 WriteString(proc); WriteLn;
 WriteString("      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5");WriteLn;
 WriteString("      ===============================");
 FOR ch := MINCHAR TO MAXCHAR DO
   IF ORD(ch) MOD 16 = 0 THEN
     WriteLn;
     WriteInt(VAL(SIGNEDLONG,ORD(ch)), 3); WriteString(" | ");
   END;

   IF test(ch) THEN
     IF ch < ' ' THEN
       Write('*');
     ELSE
       Write(ch);
     END;
   ELSE
     Write('_');
   END;
   Write(' ');
 END;
 WriteLn;WriteLn;
END WriteClass;

(*---------------------------------------------------------------------------*)

PROCEDURE WriteConvert ((* EIN/ -- *) REF proc : ARRAY OF CHAR;
                        (* EIN/ -- *)     conv : CharConvert   );

VAR c, ch : CHAR;
    i     : CARDINAL;

BEGIN
 WriteString(proc);
 i := 0;
 FOR ch := MINCHAR TO MAXCHAR DO
   c := conv(ch);
   IF c # ch THEN
     IF i MOD 8 = 0 THEN
       WriteLn;
     END;
     Write('('); Write(ch); Write(','); Write(c); Write(')'); Write(' ');
     INC(i);
   END;
 END;
 WriteLn;WriteLn;
END WriteConvert;

(*===========================================================================*)

BEGIN
 main(argc, argv);
 IF argc > 1 THEN
   locale := setlocale(LcAll, argv^[1]);
 ELSE
   msg    := "";
   locale := setlocale(LcAll, ADR(msg));
 END;
 WriteString("**********************************"); WriteLn;
 IF locale = NULL THEN
   WriteString("* Locale wird nicht unterstÅtzt!"); WriteLn;
 ELSE
   WriteString("Verwendetes Locale: ");
   AssignCToM2(locale, 0, msg);
   WriteString(msg);
   WriteLn;
 END;
 WriteString("**********************************"); WriteLn;
 WriteLn;

 WriteString("LC_CTYPE:"); WriteLn;
 WriteString("========="); WriteLn;
 WriteClass("iscntrl", iscntrl);
 WriteClass("isblank", isblank);
 WriteClass("isspace", isspace);
 WriteClass("islower", islower);
 WriteClass("isupper", isupper);
 WriteClass("isalpha", isalpha);
 WriteClass("isdigit", isdigit);
 WriteClass("isxdigit", isxdigit);
 WriteClass("isalnum", isalnum);
 WriteClass("isprint", isprint);
 WriteClass("isgraph", isgraph);
 WriteClass("ispunct", ispunct);

 WriteConvert("toupper", toupper);
 WriteConvert("tolower", tolower);
 WriteLn;

 WriteString("LC_TIME:"); WriteLn;
 WriteString("========"); WriteLn;
 WriteString("Wochentage:"); WriteLn;
 WriteString("-----------"); WriteLn;
 WriteWeekdays;
 WriteString("Monate:"); WriteLn;
 WriteString("-------"); WriteLn;
 WriteMonths;
 WriteLn;

 WriteString("LC_MESSAGES:"); WriteLn;
 WriteString("============"); WriteLn;
 WriteMsg("BIOS", MAXeBIOS, MINeBIOS);
 WriteMsg("GEMDOS", MAXeGEMDOS, MINeGEMDOS);
 WriteMsg("MiNT", MAXeMiNT, MINeMiNT);
 WriteMsg("Socket", MAXeSOCKET, MINeSOCKET);
 WriteMsg("POSIX", MAXePOSIX, MINePOSIX);
 WriteLn;

 WriteString("Signale"); WriteLn;
 FOR i := 0 TO 31 DO
   WriteInt(VAL(SIGNEDLONG,i), 4); WriteString(' : "');
   AssignCToM2(strsignal(i), 0, msg);
   WriteString(msg);
   Write('"');
   WriteLn;
 END;
 WriteLn;
END showloc.
