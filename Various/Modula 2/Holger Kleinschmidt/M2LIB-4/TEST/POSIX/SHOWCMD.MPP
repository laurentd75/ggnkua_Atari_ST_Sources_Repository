MODULE ShowCMD;
__IMP_SWITCHES__
__DEBUG__
#ifdef HM2
#ifdef __LONG_WHOLE__
(*$!i+: Modul muss mit $i- uebersetzt werden! *)
(*$!w+: Modul muss mit $w- uebersetzt werden! *)
#else
(*$!i-: Modul muss mit $i+ uebersetzt werden! *)
(*$!w-: Modul muss mit $w+ uebersetzt werden! *)
#endif
#endif
(* Test und Anwendungsbeispiel fuer Modul 'args'.
 *
 * 27-Aug-96, Holger Kleinschmidt
 *)

#if (defined MM2)
(*$E MTP *)
#if (defined __DEBUG_CODE__)
IMPORT TOSDebug;
#endif
#endif

FROM PORTAB IMPORT
(* CONST*) NULL;

FROM types IMPORT
(* TYPE *) StrPtr, StrArray, StrRange, ArrayRange;

FROM str IMPORT
(* PROC *) AssignCToM2;

FROM DosSystem IMPORT
(* VAR  *) BASEP,
(* TYPE *) BasePage, BasePtr;

FROM args IMPORT
(* VAR  *) environ,
(* TYPE *) ARGVstyle,
(* PROC *) main, ARGVused;

FROM DosIO IMPORT
(* PROC *) WriteString, WriteLn, Write;

VAR argc : ArrayRange;
    argv : StrArray;
    s    : ARRAY[0..255] OF CHAR;
    i    : ArrayRange;
    c    : CHAR;
    max  : CARDINAL;
    idx  : CARDINAL;
    BASE : BasePtr;

BEGIN
 WriteString("ARGV: ");
 CASE ARGVused() OF
   simpleARGV: WriteString("Standard");
  |nullARGV  : WriteString("Erweitert");
 ELSE          WriteString("Nein");
 END;
 WriteLn;
 WriteLn;

 WriteString("Basepage-Kommandozeile:"); WriteLn;
 WriteString("-----------------------"); WriteLn;
 WITH BASEP^ DO
   max := ORD(pCmdlin[0]);
   IF max > 127 THEN
     max := 127;
   END;
   idx := 0;
   Write('"');
   WHILE (idx < max) & (pCmdlin[idx+1] >= ' ') DO
     Write(pCmdlin[idx+1]);
     INC(idx);
   END;
   Write('"');
   WriteLn;
 END;
 WriteLn;

 main(argc, argv);

 IF argc = 0 THEN
   WriteString("Kein Speicher frei!"); WriteLn;
 ELSE
   WriteString("Programmname:"); WriteLn;
   WriteString("-------------"); WriteLn;
   AssignCToM2(argv^[0], 0, s);
   Write('"'); WriteString(s); Write('"'); WriteLn;
   WriteLn;

   WriteString("Programmargumente:"); WriteLn;
   WriteString("------------------"); WriteLn;
   i := 1;
   WHILE argv^[i] # NULL DO
     AssignCToM2(argv^[i], 0, s);
     Write('"'); WriteString(s); Write('"'); WriteLn;
     INC(i);
   END;
   WriteLn;

   WriteString("Environment:"); WriteLn;
   WriteString("------------"); WriteLn;
   i:=0;
   WHILE environ^[i] # NULL DO
     AssignCToM2(environ^[i], 0, s);
     Write('"'); WriteString(s); Write('"'); WriteLn;
     INC(i);
   END;
 END;
END ShowCMD.
