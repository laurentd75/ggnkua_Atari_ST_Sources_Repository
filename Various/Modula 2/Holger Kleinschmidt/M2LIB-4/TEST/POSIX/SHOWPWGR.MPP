MODULE showpwgr;
__IMP_SWITCHES__
__DEBUG__
#ifdef HM2
#ifdef __LONG_WHOLE__
(*$!i+: Modul muss mit $i- uebersetzt werden! *)
(*$!w+: Modul muss mit $w- uebersetzt werden! *)
#else
(*$!i-: Modul muss mit $i+ uebersetzt werden! *)
(*$!w-: Modul muss mit $w+ uebersetzt werden! *)
#endif
#endif
(* Zeigt den Inhalt von /etc/passwd und /etc/group.
 *
 * 30-Apr-96, Holger Kleinschmidt
 *)

#if (defined MM2)
(*$E MOS *)
#if (defined __DEBUG_CODE__)
IMPORT TOSDebug;
#endif
#endif

VAL_INTRINSIC

FROM PORTAB IMPORT
(* CONST*) NULL,
(* TYPE *) UNSIGNEDWORD, SIGNEDLONG, UNSIGNEDLONG;

FROM types IMPORT
(* TYPE *) long, sizeT, uidT, gidT, StrPtr, StrArray;

FROM str IMPORT
(* PROC *) AssignCToM2;

FROM sys IMPORT
(* TYPE *) PasswdRec, PasswdPtr, GroupRec, GroupPtr,
(* PROC *) setpwent, endpwent, getpwent, setgrent, endgrent, getgrent;

FROM DosIO IMPORT
(* PROC *) WriteString, Write, WriteLn, WriteCard;

(*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*)

VAR
  buf   : ARRAY [0..100] OF CHAR;
  ch    : CHAR;
  pwent : PasswdPtr;
  grent : GroupPtr;

(*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*)

PROCEDURE WritePw ((* EIN/ -- *) pw : PasswdPtr );
BEGIN
 IF pw = NULL THEN
   WriteString("Fehler!"); WriteLn;
   RETURN;
 END;
 WITH pw^ DO
   WriteString("pw_name   : ");
   AssignCToM2(pwName, 0, buf);
   Write('"'); WriteString(buf); Write('"'); WriteLn;
   WriteString("pw_passwd : ");
   AssignCToM2(pwPasswd, 0, buf);
   Write('"'); WriteString(buf); Write('"'); WriteLn;
   WriteString("pw_uid    : ");
   WriteCard(VAL(UNSIGNEDLONG,pwUid), 1); WriteLn;
   WriteString("pw_gid    : ");
   WriteCard(VAL(UNSIGNEDLONG,pwGid), 1); WriteLn;
   WriteString("pw_gecos  : ");
   AssignCToM2(pwGecos, 0, buf);
   Write('"'); WriteString(buf); Write('"'); WriteLn;
   WriteString("pw_dir    : ");
   AssignCToM2(pwDir, 0, buf);
   Write('"'); WriteString(buf); Write('"'); WriteLn;
   WriteString("pw_shell  : ");
   AssignCToM2(pwShell, 0, buf);
   Write('"'); WriteString(buf); Write('"'); WriteLn;
 END;
END WritePw;

(*---------------------------------------------------------------------------*)

PROCEDURE WriteGr ((* EIN/ -- *) gr : GroupPtr );

VAR i : UNSIGNEDWORD;

BEGIN
 IF gr = NULL THEN
   WriteString("Fehler!"); WriteLn;
   RETURN;
 END;
 WITH gr^ DO
   WriteString("gr_name   : ");
   AssignCToM2(grName, 0, buf);
   Write('"'); WriteString(buf); Write('"'); WriteLn;
   WriteString("gr_passwd : ");
   AssignCToM2(grPasswd, 0, buf);
   Write('"'); WriteString(buf); Write('"'); WriteLn;
   WriteString("gr_gid    : ");
   WriteCard(VAL(UNSIGNEDLONG,grGid), 1); WriteLn;
   WriteString("gr_mem    : "); WriteLn;
   i := 0;
   WHILE grMem^[i] # NULL DO
     AssignCToM2(grMem^[i], 0, buf);
     WriteString('  "'); WriteString(buf); Write('"'); WriteLn;
     INC(i);
   END;
 END;
END WriteGr;

(*===========================================================================*)

BEGIN
 WriteString("/etc/passwd:"); WriteLn;
 WriteString("============"); WriteLn;
 setpwent;
 pwent := getpwent();
 WHILE pwent # NULL DO
   WritePw(pwent);
   WriteString("------------------------------");
   WriteLn;
   WriteLn;
   pwent := getpwent();
 END;
 WriteLn;

 WriteString("/etc/group:"); WriteLn;
 WriteString("==========="); WriteLn;
 setgrent;
 grent := getgrent();
 WHILE grent # NULL DO
   WriteGr(grent);
   WriteString("------------------------------");
   WriteLn;
   WriteLn;
   grent := getgrent();
 END;
 endgrent;
END showpwgr.
