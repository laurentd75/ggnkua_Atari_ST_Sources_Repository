MODULE tthread;
__IMP_SWITCHES__
__DEBUG__
#ifdef HM2
(*$E+ Prozeduren als Parameter moeglich *)
#ifdef __LONG_WHOLE__
(*$!i+: Modul muss mit $i- uebersetzt werden! *)
(*$!w+: Modul muss mit $w- uebersetzt werden! *)
#else
(*$!i-: Modul muss mit $i+ uebersetzt werden! *)
(*$!w-: Modul muss mit $w+ uebersetzt werden! *)
#endif
#endif

(* 23-Dez-95, Holger Kleinschmidt *)

#if (defined MM2)
(*$E MOS *)
#if (defined __DEBUG_CODE__)
IMPORT TOSDebug;
#endif
#endif

VAL_INTRINSIC
CAST_IMPORT

FROM PORTAB IMPORT
(* TYPE *) UNSIGNEDLONG, UNSIGNEDWORD, ANYLONG, SIGNEDLONG;

FROM proc IMPORT
(* TYPE *) WaitVal,
(* PROC *) tfork, wait, WEXITSTATUS;

FROM sig IMPORT
(* CONST*) SIGCHLD, SigDfl,
(* TYPE *) SignalHandler,
(* PROC *) signal;

FROM DosIO IMPORT
(* PROC *) Read, WriteString, WriteInt, WriteLn;

FROM DosSystem IMPORT
(* CONST*) ExitSuccess,
(* PROC *) Exit, exit, atexit;

(*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*)

VAR
  pid, pid1, pid2 : INTEGER;
  globalvar       : INTEGER;
  ch              : CHAR;
  state           : WaitVal;
  old             : SignalHandler;

(*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*)

PROCEDURE idle;
VAR i : UNSIGNEDWORD;
BEGIN
 i := 0;
 WHILE i < MAX(UNSIGNEDWORD) DO
   INC(i);
 END;
END idle;

(*---------------------------------------------------------------------------*)

PROCEDURE thread1 (arg : ANYLONG): INTEGER;
VAR i : INTEGER;
BEGIN
  globalvar := 42;
  FOR i:=1 TO 3 DO
    idle;
    WriteString("``thread1'': "); WriteInt(CAST(SIGNEDLONG,arg), 1);
    WriteLn;
  END;
  RETURN(11);
END thread1;

(*---------------------------------------------------------------------------*)

PROCEDURE thread2 (arg : ANYLONG): INTEGER;
VAR i : INTEGER;
BEGIN
  FOR i:=1 TO 3 DO
    idle;
    WriteString("``thread2'': "); WriteInt(CAST(SIGNEDLONG,arg), 1);
    WriteLn;
  END;
  RETURN(22);
END thread2;

(*---------------------------------------------------------------------------*)

#ifdef HM2
(*$K+**)
#endif
PROCEDURE handler ((* EIN/ -- *) sig : UNSIGNEDLONG );
BEGIN
 WriteLn;
 WriteString("<<<<<<<<<<<<<<<<<<<<<<<<<"); WriteLn;
 WriteString("``main'': SIGCHLD handled"); WriteLn;
 WriteString(">>>>>>>>>>>>>>>>>>>>>>>>>"); WriteLn;
END handler;
#ifdef HM2
(*$K-*)
#endif

(*---------------------------------------------------------------------------*)

PROCEDURE ex;
BEGIN
 WriteString("Taste..."); WriteLn; Read(ch);
END ex;

(*===========================================================================*)

BEGIN (* tthread *)
 IF atexit(ex) # 0 THEN
   WriteString("*** Keine Modulterminierung"); WriteLn;
 END;

 pid := signal(SIGCHLD, handler, old);

 globalvar := 0;
 WriteString("``main'': globalvar: "); WriteInt(VAL(SIGNEDLONG,globalvar), 1); WriteLn;

 (* Die Terminierung darf hierbei nicht ausgefuehrt werden *)
 pid1 := tfork(thread1, 111);
 pid2 := tfork(thread2, 222);

 idle;

 WriteString("``main'': thread1-pid: "); WriteInt(VAL(SIGNEDLONG,pid1), 1); WriteLn;
 WriteString("``main'': thread2-pid: "); WriteInt(VAL(SIGNEDLONG,pid2), 1); WriteLn;

 LOOP
   pid := wait(state);
   IF pid < 0 THEN EXIT; END;
   WriteString("``main'': pid "); WriteInt(VAL(SIGNEDLONG,pid), 1);
   WriteString(" returned: "); WriteInt(VAL(SIGNEDLONG,WEXITSTATUS(state)), 1);
   WriteLn;
 END;
 (* Waere eigentlich nicht noetig, aber fuer Systeme, die das Load-Time-
  * Linking am Betriebssystem vorbei machen.
  *)
 pid := signal(SIGCHLD, SigDfl, old);

 WriteString("``main'': globalvar: "); WriteInt(VAL(SIGNEDLONG,globalvar), 1); WriteLn;

 WriteString("E)xit, e)xit oder normal? ");
 Read(ch);
 WriteLn;
 CASE ch OF
   'E': Exit(ExitSuccess); (* Programm sofort beenden, Terminierung nicht ausfuehren *)
  |'e': exit(ExitSuccess); (* Programm sofort beenden, Terminierung ausfuehren *)
 ELSE                      (* Terminierung ausfuehren *)
 END;
 WriteString("Jetzt ist das Programm gleich zuende"); WriteLn;
END tthread.
