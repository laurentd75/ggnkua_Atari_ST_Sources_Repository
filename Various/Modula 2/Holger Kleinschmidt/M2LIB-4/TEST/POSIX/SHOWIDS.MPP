MODULE ShowIDs;
__IMP_SWITCHES__
__DEBUG__
#ifdef HM2
#ifdef __LONG_WHOLE__
(*$!i+: Modul muss mit $i- uebersetzt werden! *)
(*$!w+: Modul muss mit $w- uebersetzt werden! *)
#else
(*$!i-: Modul muss mit $i+ uebersetzt werden! *)
(*$!w-: Modul muss mit $w+ uebersetzt werden! *)
#endif
#endif
(* Programm zum Anzeigen diverser Kennungen.
 *
 * Falls ein Argument beim Aufruf angegeben wird, wird dieses als
 * Benutzername interpretiert, ansonsten wird der Benutzer aus der
 * realen Prozesskennung ermittelt.
 * Anhand des Benutzernamens werden die zusaetzlichen Gruppenkennungen
 * (``supplementary group IDs'') aus der Datei /etc/group ermittelt,
 * mit "initgroups()" gesetzt und dann ausgegeben. Da "initgroups()"
 * nur vom Superuser ausgefuehrt werden darf, sollte das Programm auf
 * ein entsprechendes Dateisystem, z.B. MinixFS, kopiert und
 * das ``set user ID''-Bit gesetzt werden (chmod u+s showids.ttp).
 * Besitzer der Datei muss der Superuser sein. Hierdurch wird bei Ausfuehren
 * des Programms automatisch die effektive Kennung des Prozesses auf
 * Superuser gesetzt, egal welche reale Kennung der Benutzer hat (z.B.
 * durch init(8) von S. Usher erhalten).
 *
 * 30-Apr-96, Holger Kleinschmidt
 *)


#if (defined MM2)
(*$E MOS *)
#if (defined __DEBUG_CODE__)
IMPORT TOSDebug;
#endif
#endif

VAL_INTRINSIC

FROM SYSTEM IMPORT ADR;
FROM PORTAB IMPORT UNSIGNEDWORD, SIGNEDLONG, NULL;
FROM types  IMPORT StrPtr, gidT;
FROM er     IMPORT errno;
FROM args   IMPORT ArgCount, GetArg;
FROM str    IMPORT strerror, AssignCToM2;
FROM sys    IMPORT PasswdRec, PasswdPtr, getpwuid;
FROM proc   IMPORT getpid, getppid, getpgrp, getuid, geteuid, getgid, getegid,
                   getgroups, initgroups;
FROM DosIO IMPORT WriteInt, WriteString, WriteLn, Write;

(*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*)

CONST
  MAXGROUPS = 100;

VAR
  basegid : gidT;
  user    : ARRAY [0..20] OF CHAR;
  errstr  : ARRAY [0..60] OF CHAR;
  passwd  : PasswdPtr;
  i       : INTEGER;
  gidset  : ARRAY [0..MAXGROUPS-1] OF gidT;

(*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*)

BEGIN
 passwd := getpwuid(getuid());
 IF passwd = NULL THEN
   basegid := getgid();
 ELSE
   basegid := passwd^.pwGid;
 END;
 IF ArgCount() >= 2 THEN
   GetArg(1, user);
 ELSIF passwd # NULL THEN
   AssignCToM2(passwd^.pwName, 0, user);
 ELSE
   user := "root";
 END;

 IF initgroups(user, basegid) < 0 THEN
   WriteString("*** initgroups: ");
   AssignCToM2(strerror(errno), 0, errstr);
   WriteString(errstr);
   WriteLn;
 END;

 WriteString("     parent process ID : "); WriteInt(VAL(SIGNEDLONG,getppid()),1);WriteLn;
 WriteString("        own process ID : "); WriteInt(VAL(SIGNEDLONG,getpid()),1);WriteLn;
 WriteString("      process group ID : "); WriteInt(VAL(SIGNEDLONG,getpgrp()),1);WriteLn;
 WriteString("          real user ID : "); WriteInt(VAL(SIGNEDLONG,getuid()),1);WriteLn;
 WriteString("         real group ID : "); WriteInt(VAL(SIGNEDLONG,getgid()),1);WriteLn;
 WriteString("     effective user ID : "); WriteInt(VAL(SIGNEDLONG,geteuid()),1);WriteLn;
 WriteString("    effective group ID : "); WriteInt(VAL(SIGNEDLONG,getegid()),1);WriteLn;
 WriteString("supplementary group IDs: ");

 FOR i := 0 TO getgroups(MAXGROUPS, ADR(gidset)) - 1 DO
   WriteInt(VAL(SIGNEDLONG,gidset[VAL(UNSIGNEDWORD,i)]),1); Write(',');
 END;
 WriteLn;
END ShowIDs.
