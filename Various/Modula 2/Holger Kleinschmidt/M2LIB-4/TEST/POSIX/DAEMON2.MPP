MODULE Daemon2;
__IMP_SWITCHES__
__DEBUG__
#ifdef HM2
#ifdef __LONG_WHOLE__
(*$!i+: Modul muss mit $i- uebersetzt werden! *)
(*$!w+: Modul muss mit $w- uebersetzt werden! *)
#else
(*$!i-: Modul muss mit $i+ uebersetzt werden! *)
(*$!w-: Modul muss mit $w+ uebersetzt werden! *)
#endif
#endif

#if (defined MM2)
(*$E MOS*)
#if (defined __DEBUG_CODE__)
IMPORT TOSDebug;
#endif
#endif

VAL_INTRINSIC
CAST_IMPORT

(* Programm zur Demonstration der Anwendung von "Exit()" und
 * "SetMain()" bei Hintergrundprozessen.
 *
 * Das Programm tut nichts, ausser zu existieren und Speicher zu
 * verschwenden. Rechenzeit benoetigt es praktisch keine.
 *
 * Starten kann man es nur als gelinktes Programm unter MiNT/MultiTOS,
 * entweder aus einer Kommandoshell heraus oder gleich im MINT.CNF
 * (z.B.: exec c:\daemon2.tos).
 *
 * 30-Apr-96, Holger Kleinschmidt
 *)

FROM PORTAB IMPORT
(* CONST*) NULL,
(* TYPE *) UNSIGNEDLONG, ANYLONG;

FROM DosSystem IMPORT
(* PROC *) Exit, exit, atexit, MiNTVersion, SetMain;

FROM lib IMPORT
(* PROC *) void, ptr;

FROM sig IMPORT
(* CONST*) SIGKILL, SIGTERM, SigIgn,
(* TYPE *) SaFlags, SigactionRec, SignalHandler, SigBlockType, sigsetT,
(* PROC *) sigemptyset, sigfillset, sigdelset, sigprocmask, sigaction,
           kill, pause, sleep;

FROM proc IMPORT
(* PROC *) getppid, vfork;

FROM DosIO IMPORT WriteString, WriteLn, Write;

(*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*)

VAR
  new  : SigactionRec;
  quit : BOOLEAN;
  mask : sigsetT;
  pid  : INTEGER;

(*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*)
#ifdef HM2
(*$E+*)
#endif
PROCEDURE ex;
BEGIN
 (* Kann auch von Hintergrundprozess ausgegeben werden, da SIGTTOU
  * blockiert ist.
  *)
 WriteString("Daemon2 beendet"); WriteLn;
END ex;

#ifdef HM2
(*$K+*)
#endif
PROCEDURE sighandler ( which : UNSIGNEDLONG );
(* Flag setzen: Programm beenden *)
BEGIN
 quit := TRUE;
END sighandler;
#ifdef HM2
(*$E=,$K=*)
#endif

PROCEDURE action;
END action;

BEGIN
 IF MiNTVersion() = 0 THEN
   exit(1);
 END;
 IF atexit(ex) # 0 THEN
   WriteString("*** Keine Modulterminierung"); WriteLn;
 END;

 quit := FALSE;

 (* Alle Signale blockieren bis nach dem "SetMain" *)
 sigfillset(mask);
 void(sigprocmask(SigSetMask, ptr(mask), NULL));

 pid := vfork();
 IF pid = 0 THEN
   (* Unterprozess: Hauptprozess beenden; SIGKILL kann nicht blockiert werden *)
   IF kill(getppid(), SIGKILL) < 0 THEN
     (* Falls das Beenden nicht geklappt hat, selbst beenden, ohne
      * Terminierung auszufuehren, und Flag fuer den Hauptprozess setzen.
      * Anwendung von "ExitSys()" ist nicht noetig, da erkannt werden kann,
      * dass dies nicht der Hauptprozess ist.
      *)
     quit := TRUE;
     Exit(1);
   END;
 ELSIF pid < 0 THEN
   (* Hauptprozess: Unterprozess konnte nicht erzeugt werden *)
   exit(2);
 ELSE
   (* Hauptprozess *)
   IF quit THEN
     (* Hat nicht geklappt. Beenden mit Modulterminierung. Es koennte
      * auch "Exit()" verwendet werden, da erkannt werden kann, dass dies
      * der Hauptprozess ist, und die Systemterminierungen, so vorhanden,
      * trotzdem ausgefuehrt wuerden.
      *)
     exit(3);
   END;
   LOOP pause END;
 END;

 (* Dieser Prozess ist jetzt der Hauptprozess, mit dessen Ende auch das
  * Programm beendet wird. "SetMain()" ist notwendig, da dies nicht
  * automatisch erkannt werden kann.
  *)
 SetMain;

 WITH new DO
   saHandler := sighandler;
   saFlags   := SaFlags{};
   sigemptyset(saMask);
 END;
 void(sigaction(SIGTERM, ptr(new), NULL));

 (* Jetzt kann SIGTERM wieder zugelassen werden *)
 void(sigdelset(mask, SIGTERM));
 void(sigprocmask(SigSetMask, ptr(mask), NULL));

 (* Ab jetzt kann der Hintergrundprozess seine eigentliche Arbeit erledigen.
  * Hier wird er z.B. jede Sekunde aktiviert, um "action()" auszufuehren.
  * Dies geschieht solange, bis er durch ein entsprechendes Signal
  * aufgefordert wird, sich zu beenden.
  *)
 WHILE ~quit DO
   action;
   void(sleep(1));
 END;
END Daemon2.
