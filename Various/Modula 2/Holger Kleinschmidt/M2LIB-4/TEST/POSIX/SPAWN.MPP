MODULE Spawn;
__IMP_SWITCHES__
__DEBUG__
#ifdef HM2
#ifdef __LONG_WHOLE__
(*$!i+: Modul muss mit $i- uebersetzt werden! *)
(*$!w+: Modul muss mit $w- uebersetzt werden! *)
#else
(*$!i-: Modul muss mit $i+ uebersetzt werden! *)
(*$!w-: Modul muss mit $w+ uebersetzt werden! *)
#endif
#endif
(* Test und Anwendungsbeispiel fuer Modul 'proc'
 *
 * Das Programm 'showcmd' muss sich in einem Verzeichnis befinden,
 * das in der Environmentvariablen PATH steht.
 *
 * 30-Apr-96, Holger Kleinschmidt
 *)

#if (defined MM2)
(*$E MOS *)
#if (defined __DEBUG_CODE__)
IMPORT TOSDebug;
#endif
#endif

VAL_INTRINSIC
CAST_IMPORT

FROM SYSTEM IMPORT
(* PROC *) ADR;

FROM PORTAB IMPORT
(* CONST*) NULL,
(* TYPE *) UNSIGNEDWORD, UNSIGNEDLONG, SIGNEDLONG;

FROM types IMPORT
(* TYPE *) StrRange, StrPtr, StrArray;

FROM er IMPORT
(* VAR  *) errno;

FROM proc IMPORT
(* TYPE *) WaitVal, SpawnMode,
(* PROC *) getpid, getppid, WEXITSTATUS, WIFSIGNALED, WTERMSIG, spawnvp;

FROM sig IMPORT
(* CONST*) SIGCHLD, SigDfl,
(* TYPE *) SignalHandler,
(* PROC *) signal;

FROM str IMPORT
(* PROC *) strsignal, strerror, AssignCToM2;

FROM DosIO IMPORT
(* PROC *) Write, WriteInt, WriteString, WriteLn;

(*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*)

CONST
  MaxArgv = 15;

TYPE
  String = ARRAY [0..10] OF CHAR;

VAR
  ret    : INTEGER;
  pid    : INTEGER;
  old    : SignalHandler;
  ch     : CHAR;
  state  : WaitVal;
  errstr : ARRAY [0..60] OF CHAR;

  idx    : StrRange;
  prg    : String;
  null   : String;
  space  : String;
  arg2   : String;
  arg3   : String;
  arg13  : String;
  argv   : ARRAY [0..MaxArgv] OF StrPtr;

(*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*)

#ifdef HM2
(*$E+,$K+**)
#endif
PROCEDURE handler ((* EIN/ -- *) sig : UNSIGNEDLONG );
BEGIN
 WriteLn;
 WriteString("<<<<<<<<<<<<<<<<<<<<<<<"); WriteLn;
 WriteString("PARENT: SIGCHLD handled"); WriteLn;
 WriteString(">>>>>>>>>>>>>>>>>>>>>>>"); WriteLn;
END handler;
#ifdef HM2
(*$E=,$K-*)
#endif

(*===========================================================================*)

BEGIN (* Spawn *)
 ret := signal(SIGCHLD, handler, old);

 WriteString("PARENT(pid = "); WriteInt(VAL(SIGNEDLONG,getpid()), 1);
 WriteString(")"); WriteLn;

 prg   := "showcmd";
 null  := "";
 space := " ";
 arg2  := "-2-";
 arg3  := "-3-";
 arg13 := "-13-";

 argv[0] := CAST(StrPtr,ADR(prg));
 FOR idx := 1 TO MaxArgv DO
   argv[idx] := CAST(StrPtr,ADR(null));
 END;
 argv[2]       := CAST(StrPtr,ADR(arg2));
 argv[3]       := CAST(StrPtr,ADR(arg3));
 argv[4]       := CAST(StrPtr,ADR(space));
 argv[13]      := CAST(StrPtr,ADR(arg13));
 argv[MaxArgv] := NULL;

 ret := spawnvp(pWAIT, ADR(prg), ADR(argv));
 (* Wenn "spawn*()" erfolgreich war, wird 'errno' auf Null gesetzt! *)

 WriteLn;
 WriteString("PARENT(pid = "); WriteInt(VAL(SIGNEDLONG,getpid()), 1);
 IF errno < 0 THEN
   WriteString("): error: ");
   AssignCToM2(strerror(errno), 0, errstr);
   WriteString(errstr);
   WriteLn;
 ELSE
   WriteString("): child-returncode = "); WriteInt(VAL(SIGNEDLONG,ret), 1); WriteLn;

   state := CAST(WaitVal,VAL(UNSIGNEDWORD,ret));
   IF WIFSIGNALED(state) THEN
     WriteString("Child terminated by Signal: ");
     AssignCToM2(strsignal(WTERMSIG(state)), 0, errstr);
     WriteString(errstr);
     WriteLn;
   ELSE
     (* "WIFSTOPPED()" braucht nicht abgefragt zu werden, da "wait()"
      * keine gestopten Unterprozesse beruecksichtigt.
      *)
     WriteString("Child exit status: "); WriteInt(VAL(SIGNEDLONG,WEXITSTATUS(state)), 1);
   END;
 END;
 WriteLn;
 ret := signal(SIGCHLD, SigDfl, old);
END Spawn.


