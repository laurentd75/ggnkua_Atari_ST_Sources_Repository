MODULE tvfork;
__IMP_SWITCHES__
__DEBUG__
#ifdef HM2
(*$E+*)
#ifdef __LONG_WHOLE__
(*$!i+: Modul muss mit $i- uebersetzt werden! *)
(*$!w+: Modul muss mit $w- uebersetzt werden! *)
#else
(*$!i-: Modul muss mit $i+ uebersetzt werden! *)
(*$!w-: Modul muss mit $w+ uebersetzt werden! *)
#endif
#endif

(* 23-Dez-95, Holger Kleinschmidt *)

(* Wenn der 'Pvfork'-Aufruf verwendet wurde, gibt es keine Stackdifferenz,
 * nur bei der Emulation.
 *)

#if (defined MM2)
(*$E MOS *)
#if (defined __DEBUG_CODE__)
IMPORT TOSDebug;
#endif
#endif

VAL_INTRINSIC
CAST_IMPORT
REGISTER_IMPORT

FROM SYSTEM IMPORT
(* TYPE *) ADDRESS,
(* PROC *) ADR;

FROM PORTAB IMPORT
(* TYPE *) SIGNEDLONG;

FROM er IMPORT
(* VAR  *) errno;

FROM DosIO IMPORT
(* PROC *) WriteString, Write, Read, WriteLn, WriteInt, WriteHex;

FROM proc IMPORT
(* PROC *) vfork;

FROM DosSystem IMPORT
(* CONST*) ExitSuccess,
(* PROC *) Exit, exit, atexit;

(*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*)

VAR
  ch       : CHAR;
  i1, i2   : INTEGER;
  pid      : INTEGER;
  spChild  : LONGCARD;
  spParent : LONGCARD;

(*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*)

PROCEDURE ex;
BEGIN
 WriteString("Taste..."); WriteLn; Read(ch);
END ex;

(*===========================================================================*)

BEGIN
 IF atexit(ex) # 0 THEN
   WriteString("*** Keine Modulterminierung"); WriteLn;
 END;

 i1  := 0; i2 := 0;
 pid := vfork();
 IF pid < 0 THEN
   WriteString("Parent: vfork failed:");
   WriteInt(VAL(SIGNEDLONG,errno), 1);
   WriteLn;
 ELSIF pid > 0 THEN
   i1 := 33;
   WriteString("Parent: vfork pid: ");
   WriteInt(VAL(SIGNEDLONG,pid), 1); WriteLn;
   GETLREG(15, spParent);
   WriteString("Parent Stack: "); WriteHex(spParent, 1); WriteLn;
   WriteLn;
 ELSE
   i2 := 44;
   WriteString("Child"); WriteLn;
   GETLREG(15, spChild);
   WriteString("Child Stack : "); WriteHex(spChild, 1); WriteLn;
   Exit(0); (* Die Terminierung darf hierbei nicht ausgefuehrt werden *)
 END;
 WriteString("Parent"); WriteLn;
 WriteString("i1: "); WriteInt(VAL(SIGNEDLONG,i1), 1); WriteLn;
 WriteString("i2: "); WriteInt(VAL(SIGNEDLONG,i2), 1); WriteLn;
 WriteString("Stackdifferenz: ");
 WriteInt(CAST(SIGNEDLONG,spChild - spParent), 1); WriteLn;

 WriteString("E)xit, e)xit oder normal? ");
 Read(ch);
 WriteLn;
 CASE ch OF
   'E': Exit(ExitSuccess); (* Programm sofort beenden, Terminierung nicht ausfuehren *)
  |'e': exit(ExitSuccess); (* Programm sofort beenden, Terminierung ausfuehren *)
 ELSE                      (* Terminierung ausfuehren *)
 END;
 WriteString("Jetzt ist das Programm gleich zuende"); WriteLn;
END tvfork.
