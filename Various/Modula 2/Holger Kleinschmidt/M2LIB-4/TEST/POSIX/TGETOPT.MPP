MODULE tgetopt;
__IMP_SWITCHES__
__DEBUG__
#ifdef HM2
#ifdef __LONG_WHOLE__
(*$!i+: Modul muss mit $i- uebersetzt werden! *)
(*$!w+: Modul muss mit $w- uebersetzt werden! *)
#else
(*$!i-: Modul muss mit $i+ uebersetzt werden! *)
(*$!w-: Modul muss mit $w+ uebersetzt werden! *)
#endif
#endif

(* Test und Demonstration der Funktion "getopt()". Entspricht im
 * wesentlichen dem glibc-getopt-Test.
 *
 * Aufruf: tgetopt [Optionen...] [weitere Parameter...]
 *
 * Beispiel: tgetopt -abc hallo -09 -dhalli -3 -- -a file
 *
 * Ausgabe:
 *
 *  Programmoptionen:
 *  Option: a
 *  Option: b
 *  Option: c mit Argument: hallo
 *  Option: 0
 *  Option: 9
 *  Option: d mit Argument: halli
 *  Ziffern in unterschiedlichen Argumenten
 *  Option: 3
 *
 *  Weitere Programmargumente:
 *  -a
 *  file
 *
 *
 * 26-Mai-96, Holger Kleinschmidt
 *)

#if (defined MM2)
(*$E MTP *)
#if (defined __DEBUG_CODE__)
IMPORT TOSDebug;
#endif
#endif

VAL_INTRINSIC
CAST_IMPORT

FROM PORTAB IMPORT
(* CONST*) NULL;

FROM types IMPORT
(* TYPE *) int, StrRange, ArrayRange, StrPtr, StrArray;

FROM str IMPORT
(* PROC *) strcmp, AssignCToM2;

FROM args IMPORT
(* PROC *) main;

FROM POSIX2 IMPORT
(* VAR  *) optopt, optind, optarg,
(* PROC *) getopt;

FROM DosIO IMPORT
(* PROC *) WriteString, WriteLn, Write;

(*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*)

VAR
 ch    : CHAR;
 c     : INTEGER;
 digit : INTEGER;
 this  : INTEGER;
 argc  : ArrayRange;
 argv  : StrArray;
 arg   : ARRAY [0..100] OF CHAR;

BEGIN
 main(argc, argv);
 digit := 0;
 WriteString("Programmoptionen:"); WriteLn;
 LOOP
   this := optind;
   c    := getopt(argc, argv, ":abc:d:0123456789");
   IF c = -1 THEN
     EXIT;
   END;
   CASE CHR(c) OF
     '0'..'9': IF (digit # 0) & (digit # this) THEN
                 WriteString("Ziffern in unterschiedlichen Argumenten");
                 WriteLn;
               END;
               digit := this;
               WriteString("Option: "); Write(CHR(c)); WriteLn;
    |'a','b' : WriteString("Option: "); Write(CHR(c)); WriteLn;
    |'c','d' : WriteString("Option: "); Write(CHR(c));
               WriteString(" mit Argument: ");
               AssignCToM2(optarg, 0, arg);
               WriteString(arg); WriteLn;
    |'?'     : WriteString("Falsche Option: "); Write(CHR(optopt)); WriteLn;
    |':'     : WriteString("Argument der Option fehlt: ");
               Write(CHR(optopt)); WriteLn;
   ELSE        WriteString("?? Zeichen: "); Write(CHR(c)); WriteLn;
   END;
 END;
 WriteLn;
 IF optind < INT(argc) THEN
   WriteString("Weitere Programmargumente:"); WriteLn;
   WHILE optind < INT(argc) DO
     AssignCToM2(argv^[VAL(ArrayRange,optind)], 0, arg);
     WriteString(arg); WriteLn;
     INC(optind);
   END;
 END;
END tgetopt.
