MODULE TADT;
__IMP_SWITCHES__
__DEBUG__
#ifdef HM2
(*$E+*)
#ifdef __LONG_WHOLE__
(*$!i+: Modul muss mit $i- uebersetzt werden! *)
(*$!w+: Modul muss mit $w- uebersetzt werden! *)
#else
(*$!i-: Modul muss mit $i+ uebersetzt werden! *)
(*$!w-: Modul muss mit $w+ uebersetzt werden! *)
#endif
#endif

#ifdef MM2
(*$J-*)
(*$E MOS *)
#if (defined __DEBUG_CODE__)
IMPORT TOSDebug;
#endif
#endif

(* Tests fuer die Module 'Queues', 'Stacks' und 'RBTrees'.
 *
 * 05-Aug-96, Holger Kleinschmidt
 *)

VAL_INTRINSIC


FROM SYSTEM IMPORT ADR, ADDRESS, TSIZE;

FROM PORTAB IMPORT SIGNEDLONG;

IMPORT Stacks, Queues, RBTrees;

FROM types IMPORT
(* TYPE *) sizeT;

FROM lib IMPORT
(* PROC *) rand, qsort;

FROM DosIO IMPORT WriteLn, WriteString, WriteInt, Write;

(*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*)

VAR
 done  : BOOLEAN;
 tree  : RBTrees.RBTree;
 stack : Stacks.Stack;
 queue : Queues.Queue;
 array : ARRAY [1..100] OF INTEGER;
 max   : CARDINAL;

(*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*)

PROCEDURE PrintKey ((* EIN/ -- *) tree : RBTrees.RBTree;
                    (* EIN/ -- *) node : RBTrees.RBEntry );
VAR key : INTEGER;

BEGIN
 RBTrees.GetKey(tree, node, key);
 WriteInt(VAL(SIGNEDLONG,key), 1);
END PrintKey;

PROCEDURE PrintInfo ((* EIN/ -- *) tree : RBTrees.RBTree;
                     (* EIN/ -- *) node : RBTrees.RBEntry );

VAR info : INTEGER;

BEGIN
 RBTrees.GetInfo(tree, node, info);
 WriteInt(VAL(SIGNEDLONG,info), 1);
END PrintInfo;

PROCEDURE PrintNode ((* EIN/ -- *) tree : RBTrees.RBTree;
                     (* EIN/ -- *) node : RBTrees.RBEntry );

BEGIN
 PrintKey(tree, node);
 WriteString("->");
 PrintInfo(tree, node);
END PrintNode;

PROCEDURE compare ((* EIN/ -- *) node1 : ADDRESS;
                   (* EIN/ -- *) node2 : ADDRESS ): INTEGER;

VAR p1, p2 : POINTER TO INTEGER;

BEGIN
 p1 := node1;
 p2 := node2;
 RETURN(p1^ - p2^);
END compare;

PROCEDURE WrongSize ((* EIN/ -- *) expected : INTEGER;
                     (* EIN/ -- *) computed : INTEGER );

BEGIN
 WriteString("*** Wrong size: ");
 WriteInt(VAL(SIGNEDLONG,expected), 1);
 WriteString(" <-> ");
 WriteInt(VAL(SIGNEDLONG,computed), 1);
 WriteLn;
END WrongSize;

PROCEDURE WrongElem ((* EIN/ -- *) proc     : ARRAY OF CHAR;
                     (* EIN/ -- *) expected : INTEGER;
                     (* EIN/ -- *) computed : INTEGER );

BEGIN
 WriteString("*** ");
 WriteString(proc);
 WriteString(": Wrong element: ");
 WriteInt(VAL(SIGNEDLONG,expected), 1);
 WriteString(" <-> ");
 WriteInt(VAL(SIGNEDLONG,computed), 1);
 WriteLn;
END WrongElem;

PROCEDURE tstack1 ((* EIN/ -- *) msg   : ARRAY OF CHAR;
                   (* EIN/ -- *) bsize : CARDINAL;
                   (* EIN/ -- *) cnt   : CARDINAL );

VAR i, j : CARDINAL;

BEGIN
 WriteString(msg);
 Stacks.Create(TSIZE(INTEGER), bsize, stack, done);
 IF ~done THEN
   WriteString("*** Cannot create stack"); WriteLn;
   RETURN;
 END;
 IF ~Stacks.IsEmpty(stack) OR (Stacks.Size(stack) > 0) THEN
   WrongSize(0, Stacks.Size(stack));
   RETURN;
 END;
 FOR i := 1 TO cnt DO
   Stacks.Push(stack, i);
   IF (Stacks.Size(stack) # i) OR Stacks.IsEmpty(stack) THEN
     WrongSize(i, Stacks.Size(stack));
     RETURN;
   END;
 END;
 FOR i := cnt TO 1 BY -1 DO
   IF (Stacks.Size(stack) # i) OR Stacks.IsEmpty(stack) THEN
     WrongSize(i, Stacks.Size(stack));
     RETURN;
   END;
   Stacks.Top(stack, j);
   IF i # j THEN
     WrongElem("Top", i, j);
     RETURN;
   END;
   Stacks.Pop(stack, j);
   IF i # j THEN
     WrongElem("Pop", i, j);
     RETURN;
   END;
 END;
 IF ~Stacks.IsEmpty(stack) OR (Stacks.Size(stack) > 0) THEN
   WrongSize(0, Stacks.Size(stack));
   RETURN;
 END;
 WriteString("OK"); WriteLn;
END tstack1;


PROCEDURE tqueue1 ((* EIN/ -- *) msg   : ARRAY OF CHAR;
                   (* EIN/ -- *) bsize : CARDINAL;
                   (* EIN/ -- *) cnt   : CARDINAL );

VAR i, j : CARDINAL;

BEGIN
 WriteString(msg);
 Queues.Create(TSIZE(INTEGER), bsize, queue, done);
 IF ~done THEN
   WriteString("*** Cannot create queue"); WriteLn;
   RETURN;
 END;
 IF ~Queues.IsEmpty(queue) OR (Queues.Size(queue) > 0) THEN
   WrongSize(0, Queues.Size(queue));
   RETURN;
 END;
 FOR i := 1 TO cnt DO
   Queues.Insert(queue, i);
   IF (Queues.Size(queue) # i) OR Queues.IsEmpty(queue) THEN
     WrongSize(i, Queues.Size(queue));
     RETURN;
   END;
 END;
 FOR i := 1 TO cnt DO
   IF (Queues.Size(queue) # (cnt - i + 1)) OR Queues.IsEmpty(queue) THEN
     WrongSize(cnt - i + 1, Queues.Size(queue));
     RETURN;
   END;
   Queues.Look(queue, j);
   IF i # j THEN
     WrongElem("Look", i, j);
     RETURN;
   END;
   Queues.Remove(queue, j);
   IF i # j THEN
     WrongElem("Remove", i, j);
     RETURN;
   END;
 END;
 IF ~Queues.IsEmpty(queue) OR (Queues.Size(queue) > 0) THEN
   WrongSize(0, Queues.Size(queue));
   RETURN;
 END;
 WriteString("OK"); WriteLn;
END tqueue1;

PROCEDURE trbtree ((* EIN/ -- *) msg   : ARRAY OF CHAR;
                   (* EIN/ -- *) bsize : CARDINAL;
                   (* EIN/ -- *) cnt   : CARDINAL );


VAR i, j : CARDINAL;
    key  : INTEGER;
    info : INTEGER;
    item : RBTrees.RBEntry;
    node : RBTrees.RBEntry;

BEGIN
 WriteString(msg);
 RBTrees.Create(TSIZE(INTEGER), TSIZE(INTEGER), bsize, compare, tree, done);
 IF ~done THEN
   WriteString("*** Cannot create tree"); WriteLn;
   RETURN;
 END;
 (* Baum erstellen mit zufaelligen Schluesseln. Voraussetzung:
  * Es werden nur unterschiedliche Schluessel ungleich Null erzeugt.
  * Das muss bei Bedarf sichergestellt werden.
  *)
 FOR i := 1 TO cnt DO
   key  := rand();
   j    := i + 10;
   item := RBTrees.Insert(tree, key, j);
   IF item = NIL THEN
     WriteString("*** no mem"); WriteLn;
     RETURN;
   END;
   IF (RBTrees.Size(tree) # i) OR RBTrees.IsEmpty(tree) THEN
     WrongSize(i, RBTrees.Size(tree));
     RETURN;
   END;
   RBTrees.GetKey(tree, item, info);
   IF key # info THEN
     WrongElem("GetKey", key, info);
     RETURN;
   END;
   RBTrees.GetInfo(tree, item, j);
   IF i + 10 # j THEN
     WrongElem("GetInfo", i + 10, j);
     RETURN;
   END;
   RBTrees.SetInfo(tree, i, item);
   RBTrees.GetInfo(tree, item, j);
   IF i # j THEN
     WrongElem("Set/GetInfo", i, j);
     RETURN;
   END;
   (* Schluessel auch in separatem Feld speichern fuer spaetere Tests *)
   array[i] := key;
   RBTrees.CheckTree(tree, PrintNode);
 END;
 max := cnt;

 (* Schluessel im separatem Feld sortieren *)
 qsort(ADR(array[1]), VAL(sizeT,max), VAL(sizeT,TSIZE(INTEGER)), compare);

 (* Auf alle Elemente ueber ihren Schluessel zugreifen *)
 FOR i := 1 TO cnt DO
   item := RBTrees.Lookup(tree, array[i]);
   node := RBTrees.Select(tree, i);
   IF item = NIL THEN
     WriteString("*** Lookup: element not found: ");
     WriteInt(VAL(SIGNEDLONG,array[i]), 1);
     WriteLn;
     RETURN;
   ELSIF item # node THEN
     WriteString("*** Lookup # Select");
     RETURN;
   END;
   IF RBTrees.Rank(tree, array[i]) # i THEN
     WrongElem("Rank", i, RBTrees.Rank(tree, array[i]));
   END;
   RBTrees.Access(tree, array[i], key);
   RBTrees.GetInfo(tree, item, info);
   IF key # info THEN
     WrongElem("Access", info, key);
     RETURN;
   END;
 END;

 (* Die Information vorhandener Elemente ersetzen *)
 FOR i := 1 TO cnt DO
   j    := i + 10;
   item := RBTrees.Insert(tree, array[i], j);
   IF item = NIL THEN
     WriteString("*** Insert/change info"); WriteLn;
     RETURN;
   END;
   IF RBTrees.Size(tree) # cnt THEN
     WrongSize(cnt, RBTrees.Size(tree));
     RETURN;
   END;
 END;
 FOR i := 1 TO cnt DO
   RBTrees.Access(tree, array[i], j);
   IF j # i + 10 THEN
     WrongElem("Change info/Access", info, key);
     RETURN;
   END;
 END;

 (* Alle Elemente ueber die Vorgaenger/Nachfolgeroperation durchgehen *)
 item := RBTrees.Min(tree);
 IF item = NIL THEN
   key := 0;
 ELSE
   RBTrees.GetKey(tree, item, key);
 END;
 IF key # array[1] THEN
   WrongElem("Min", array[1], key);
   RETURN;
 END;
 FOR i := 2 TO cnt DO
   item := RBTrees.Succ(tree, item);
   IF item = NIL THEN
     key:= 0;
   ELSE
     RBTrees.GetKey(tree, item, key);
   END;
   IF key # array[i] THEN
     WrongElem("Succ", array[i], key);
     RETURN;
   END;
 END;
 IF RBTrees.Succ(tree, item) # NIL THEN
   WriteString("*** Wrong succ"); WriteLn;
 END;

 item := RBTrees.Max(tree);
 IF item = NIL THEN
   key := 0;
 ELSE
   RBTrees.GetKey(tree, item, key);
 END;
 IF key # array[cnt] THEN
   WrongElem("Max", array[1], key);
   RETURN;
 END;
 FOR i := cnt - 1 TO 1 BY -1 DO
   item := RBTrees.Pred(tree, item);
   IF item = NIL THEN
     key := 0;
   ELSE
     RBTrees.GetKey(tree, item, key);
   END;
   IF key # array[i] THEN
     WrongElem("Pred", array[i], key);
     RETURN;
   END;
 END;
 IF RBTrees.Pred(tree, item) # NIL THEN
   WriteString("*** Wrong pred"); WriteLn;
 END;

(*
 RBTrees.PrintTree(tree, FALSE, PrintNode);
 FOR i := 1 TO max DO
   WriteInt(VAL(SIGNEDLONG,array[i]), 1); WriteLn;
 END;
*)

 (* Elemente loeschen *)
 FOR i := 1 TO cnt DIV 2 DO
   RBTrees.Remove(tree, array[i]);
   IF (RBTrees.Lookup(tree, array[i]) # NIL) OR (RBTrees.Size(tree) # cnt - i) THEN
     WriteString("*** Remove: ");
     WriteInt(VAL(SIGNEDLONG,array[i]), 1);
     WriteString(", ");
     WriteInt(VAL(SIGNEDLONG,i), 1);
     WriteLn;
     RETURN;
   END;
   RBTrees.CheckTree(tree, PrintNode);
 END;
 FOR i := cnt DIV 2 + 1 TO cnt DO
   item := RBTrees.Lookup(tree, array[i]);
   RBTrees.RemoveItem(tree, item);
   IF (RBTrees.Lookup(tree, array[i]) # NIL) OR (RBTrees.Size(tree) # cnt - i) THEN
     WriteString("*** RemoveItem: ");
     WriteInt(VAL(SIGNEDLONG,array[i]), 1);
     WriteString(", ");
     WriteInt(VAL(SIGNEDLONG,i), 1);
     WriteLn;
     RETURN;
   END;
   RBTrees.CheckTree(tree, PrintNode);
 END;

 IF (RBTrees.Size(tree) # 0) OR ~RBTrees.IsEmpty(tree) THEN
   WrongSize(RBTrees.Size(tree), 0);
   RETURN;
 END;

 WriteString("OK"); WriteLn;
END trbtree;


BEGIN
 (* Fuer jedes Element ein Speicherblock *)
 tstack1("tstack1[1, 10] ", 1, 10);
 IF done THEN
   Stacks.Delete(stack);
 END;
 (* Mehrere Elemente pro Speicherblock, mehrere Speicherbloecke *)
 tstack1("tstack1[4, 10] ", 4, 10);
 IF done THEN
   Stacks.Delete(stack);
 END;
 (* Nur ein Speicherblock *)
 tstack1("tstack1[10, 10] ", 10, 10);
 IF done THEN
   Stacks.Delete(stack);
 END;
 tqueue1("tqueue1[1, 10] ", 1, 10);
 IF done THEN
   Queues.Delete(queue);
 END;
 tqueue1("tqueue1[4, 10] ", 4, 10);
 IF done THEN
   Queues.Delete(queue);
 END;
 tqueue1("tqueue1[10, 10] ", 10, 10);
 IF done THEN
   Queues.Delete(queue);
 END;
 trbtree("trbtree[2, 20] ", 2, 20);
 IF done THEN
   RBTrees.Delete(tree);
 END;
END TADT.
