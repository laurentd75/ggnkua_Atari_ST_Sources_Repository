MODULE tfconv;
__IMP_SWITCHES__
__DEBUG__
#ifdef HM2
#ifdef __LONG_WHOLE__
(*$!i+: Modul muss mit $i- uebersetzt werden! *)
(*$!w+: Modul muss mit $w- uebersetzt werden! *)
#else
(*$!i-: Modul muss mit $i+ uebersetzt werden! *)
(*$!w-: Modul muss mit $w+ uebersetzt werden! *)
#endif
#endif

(* 10-Aug-96, Holger Kleinschmidt *)

VAL_INTRINSIC
CAST_IMPORT

#if (defined MM2)
IMPORT GEMDOSIO; (*$E MOS *)
#if (defined __DEBUG_CODE__)
IMPORT TOSDebug;
#endif
#endif

FROM SYSTEM IMPORT
(* PROC *) ADR;

FROM ISOStrings IMPORT
(* PROC *) Length;

FROM ConvTypes IMPORT
(* TYPE *) ConvResults, ScanClass;

FROM LongStr IMPORT
(* PROC *) StrToReal, RealToFloat, RealToEng, RealToFixed, RealToStr;

FROM LongConv IMPORT
(* PROC *) FormatReal, LengthFloatReal, LengthFixedReal, LengthEngReal,
           ScanReal;

FROM TLMathUtil IMPORT
(* PROC *) WriteErr;

FROM TConvUtil IMPORT
(* PROC *) PutRes, WriteStrErr, TestScan;

IMPORT LowLong;

FROM InOut IMPORT
(* PROC *) Write, WriteCard, WriteInt, WriteString, WriteLn, Read;
FROM pOUT IMPORT PutLReal, PutLRealHex;

(*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*)

#if LONGREAL_var
TYPE
  lrc = RECORD
    CASE : BOOLEAN OF
      FALSE : lr  : LONGREAL;
     |TRUE  : lc1 : LONGCARD;
              lc2 : LONGCARD;
    END;
  END;

VAR
  cast : lrc;

VAR
 null : LONGREAL;

 tFixed1 : LONGREAL;
 tFixed2 : LONGREAL;
 tFixed3 : LONGREAL;
 tFixed4 : LONGREAL;
 tFixed5 : LONGREAL;
 tFixed6 : LONGREAL;
 tFixed7 : LONGREAL;

 tFloat1 : LONGREAL;
 tFloat2 : LONGREAL;
 tFloat3 : LONGREAL;

 tEng1 : LONGREAL;
 tEng2 : LONGREAL;
 tEng3 : LONGREAL;
 tEng4 : LONGREAL;
 tEng5 : LONGREAL;
 tEng6 : LONGREAL;
 tEng7 : LONGREAL;
 tEng8 : LONGREAL;

 tRealStr1 : LONGREAL;

 tStrToReal1 : LONGREAL;
 tStrToReal2 : LONGREAL;
 tStrToReal3 : LONGREAL;
 tStrToReal4 : LONGREAL;
 tStrToReal5 : LONGREAL;
#else
CONST
 null = LRC(0.0,0);

 tFixed1 = LRC(7777.77,0);
 tFixed2 = LRC(4777.77,0);
 tFixed3 = LRC(9999.99,0);
 tFixed4 = LRC(7377.77,0);
 tFixed5 = LRC(7377.47,0);
 tFixed6 = LRC(0.00777,0);
 tFixed7 = LRC(0.00377,0);

 tFloat1 = LRC(777.7,0);
 tFloat2 = LRC(9.9,0);
 tFloat3 = LRC(0.99,0);

 tEng1 = LRC(0.00099,0);
 tEng2 = LRC(0.0099,0);
 tEng3 = LRC(0.099,0);
 tEng4 = LRC(0.99,0);
 tEng5 = LRC(9.999,0);
 tEng6 = LRC(99.99,0);
 tEng7 = LRC(999.9,0);
 tEng8 = LRC(9999.9,0);

 tRealStr1 = LRC(9.9999,6);

 tStrToReal1 = LRC(1.0,0);
 tStrToReal2 = LRC(1.0,-1);
 tStrToReal3 = LRC(0.0,0);
 tStrToReal4 = LRC(0.0,0);
 tStrToReal5 = LRC(0.0,0);
#endif

VAR
  s1  : ARRAY [0..0] OF CHAR;
  s2  : ARRAY [0..1] OF CHAR;
  s3  : ARRAY [0..2] OF CHAR;
  s4  : ARRAY [0..3] OF CHAR;
  s5  : ARRAY [0..4] OF CHAR;
  s6  : ARRAY [0..5] OF CHAR;
  s7  : ARRAY [0..6] OF CHAR;
  s8  : ARRAY [0..7] OF CHAR;
  s9  : ARRAY [0..8] OF CHAR;
  s10 : ARRAY [0..9] OF CHAR;

(*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*)

PROCEDURE TestFloat ((* EIN/ -- *)     arg  : LONGREAL;
                     (* EIN/ -- *)     sig  : CARDINAL;
                     (* EIN/ -- *) REF repr : ARRAY OF CHAR );

VAR s : ARRAY [0..100] OF CHAR;

BEGIN
 WriteString("RealToFloat(");
 PutLReal(arg, 16);
 Write(",");
 WriteCard(sig, 1);
 WriteString("):");
 RealToFloat(arg, sig, s);
 WriteStrErr(s, LengthFloatReal(arg, sig), repr);
END TestFloat;

PROCEDURE TestEng ((* EIN/ -- *)     arg  : LONGREAL;
                   (* EIN/ -- *)     sig  : CARDINAL;
                   (* EIN/ -- *) REF repr : ARRAY OF CHAR );

VAR s : ARRAY [0..100] OF CHAR;

BEGIN
 WriteString("RealToEng(");
 PutLReal(arg, 16);
 Write(",");
 WriteCard(sig, 1);
 WriteString("):");
 RealToEng(arg, sig, s);
 WriteStrErr(s, LengthEngReal(arg, sig), repr);
END TestEng;

PROCEDURE TestFixed ((* EIN/ -- *)     arg    : LONGREAL;
                     (* EIN/ -- *)     places : INTEGER;
                     (* EIN/ -- *) REF repr   : ARRAY OF CHAR );

VAR s : ARRAY [0..100] OF CHAR;

BEGIN
 WriteString("RealToFixed(");
 PutLReal(arg, 16);
 Write(",");
 WriteInt(places, 1);
 WriteString("):");
 RealToFixed(arg, places, s);
 WriteStrErr(s, LengthFixedReal(arg, places), repr);
END TestFixed;

PROCEDURE TestRealStr ((* EIN/ -- *)     arg    : LONGREAL;
                       (* EIN/ -- *)     s      : ARRAY OF CHAR;
                       (* EIN/ -- *) REF repr   : ARRAY OF CHAR );

BEGIN
 WriteString("RealToStr(");
 PutLReal(arg, 16);
 WriteString(",|");
 WriteCard(HIGH(s)+1, 1);
 WriteString("|):");
 RealToStr(arg, s);
 WriteStrErr(s, Length(s), repr);
END TestRealStr;

PROCEDURE TestScanReal ((* EIN/ -- *) REF repr  : ARRAY OF CHAR;
                        (* EIN/ -- *)     first : CARDINAL;
                        (* EIN/ -- *)     next  : CARDINAL;
                        (* EIN/ -- *)     term  : ScanClass     );

BEGIN
 WriteString('ScanReal("');
 WriteString(repr);
 WriteString('"):');
 TestScan(repr, ScanReal, first, next, term);
END TestScanReal;

PROCEDURE TestStrToReal ((* EIN/ -- *) REF repr : ARRAY OF CHAR;
                         (* EIN/ -- *)     rval : LONGREAL;
                         (* EIN/ -- *)     cres : ConvResults   );

VAR val  : LONGREAL;
    res1 : ConvResults;
    res2 : ConvResults;
    err  : BOOLEAN;

BEGIN
 WriteString('StrToReal("');
 WriteString(repr);
 WriteString('"):');
 StrToReal(repr, val, res1);
 res2 := FormatReal(repr);
 err  := (res1 # res2) OR (cres # res1) OR (cres = strAllRight) & (val # rval);
 IF ~err & (cres = strOutOfRange) THEN
     err := (   (rval < null) & (val # -LowLong.large)
             OR (rval > null) & (val # LowLong.large));
 END;
 IF ~err THEN
   WriteString(" OK");
 ELSE
   WriteErr(val, rval);
   WriteString("*** berechnet: "); WriteLn;
   WriteString("***    res: "); PutRes(res1); WriteLn;
   WriteString("*** Format: "); PutRes(res2); WriteLn;
   WriteString("***  value: "); PutLRealHex(val, 20); WriteLn;
   WriteString("+++ erwartet: "); WriteLn;
   WriteString("+++  res: "); PutRes(cres); WriteLn;
   WriteString("+++value: "); PutLRealHex(rval, 20); WriteLn;
 END;
 WriteLn;
END TestStrToReal;

#if LONGREAL_var
PROCEDURE init;
BEGIN
 WITH cast DO
   lc1 := 0H;         lc2 := 0H;         null := lr; (* 0.0000000000000E+0 *)
   lc1 := 03FF00000H; (* wie oben *)     tStrToReal1 := lr; (* 1.0000000000000E+0 *)
   lc1 := 0416312C3H; lc2 := 080000000H; tRealStr1 := lr; (* 9.9999000000000E+6 *)
   lc1 := 040BE61C5H; lc2 := 01EB851ECH; tFixed1 := lr; (* 7.7777700000000E+3 *)
   lc1 := 040B2A9C5H; (* wie oben *)     tFixed2 := lr; (* 4.7777700000000E+3 *)
   lc1 := 040BCD1C5H; (* wie oben *)     tFixed4 := lr; (* 7.3777700000000E+3 *)
   lc1 := 040C387FEH; lc2 := 0B851EB85H; tFixed3 := lr; (* 9.9999900000000E+3 *)
   lc1 := 040BCD178H; lc2 := 051EB851FH; tFixed5 := lr; (* 7.3774700000000E+3 *)
   lc1 := 03F7FD36FH; lc2 := 07E3D1CC2H; tFixed6 := lr; (* 7.7700000000000E-3 *)
   lc1 := 03F6EE243H; lc2 := 05696E58BH; tFixed7 := lr; (* 3.7700000000000E-3 *)
   lc1 := 040884D99H; lc2 := 09999999AH; tFloat1 := lr; (* 7.7770000000000E+2 *)
   lc1 := 04023CCCCH; lc2 := 0CCCCCCCDH; tFloat2 := lr; (* 9.9000000000000E+0 *)
   lc1 := 03FEFAE14H; lc2 := 07AE147AEH; tFloat3 := lr; (* 9.9000000000000E-1 *)
   lc1 := 03FEFAE14H; (* wie oben *)     tEng4 := lr; (* 9.9000000000000E-1 *)
   lc1 := 03F50385CH; lc2 := 067DFE32AH; tEng1 := lr; (* 9.9000000000000E-4 *)
   lc1 := 03F844673H; lc2 := 081D7DBF5H; tEng2 := lr; (* 9.9000000000000E-3 *)
   lc1 := 03FB95810H; lc2 := 0624DD2F2H; tEng3 := lr; (* 9.9000000000000E-2 *)
   lc1 := 04023FF7CH; lc2 := 0ED916873H; tEng5 := lr; (* 9.9990000000000E+0 *)
   lc1 := 04058FF5CH; lc2 := 028F5C290H; tEng6 := lr; (* 9.9990000000000E+1 *)
   lc1 := 0408F3F33H; lc2 := 033333334H; tEng7 := lr; (* 9.9990000000000E+2 *)
   lc1 := 040C387F3H; (* wie oben *)     tEng8 := lr; (* 9.9999000000000E+3 *)
   lc1 := 03FB99999H; lc2 := 09999999AH; tStrToReal2 := lr; (* 1.0000000000000E-1 *)
 END;
END init;
#endif

BEGIN
#if LONGREAL_var
 init;
#endif

 TestFixed(null, -2, "0");
 TestFixed(null, -1, "0");
 TestFixed(null, 0, "0.");
 TestFixed(null, 1, "0.0");
 TestFixed(-tFixed1, -6, "-0");
 TestFixed(-tFixed1, -5, "-10000");
 TestFixed(-tFixed2, -5, "-0");
 TestFixed(-tFixed3, -4, "-10000");
 TestFixed(-tFixed3, -3, "-10000");
 TestFixed(-tFixed3,  0, "-10000.");
 TestFixed(-tFixed3,  1, "-10000.0");
 TestFixed(-tFixed3,  3, "-9999.990");
 TestFixed(-tFixed1, -4, "-8000");
 TestFixed(-tFixed4, -4, "-7000");
 TestFixed(-tFixed4, -1, "-7378");
 TestFixed(-tFixed5, -1, "-7377");
 TestFixed(-tFixed4,  0, "-7378.");
 TestFixed(-tFixed5,  0, "-7377.");
 TestFixed(-tFixed6,  1, "-0.0");
 TestFixed(-tFixed6,  2, "-0.01");
 TestFixed(-tFixed7,  2, "-0.00");
 TestFixed(-tFixed7,  3, "-0.004");
 TestFixed(-tFixed7,  16, "-0.0037700000000000");
 WriteLn;

 TestFloat(null,  0, "0.000000");
 TestFloat(null,  1, "0");
 TestFloat(null,  2, "0.0");
 TestFloat(-tFloat1,  1, "-8E+2");
 TestFloat(-tFloat1,  2, "-7.8E+2");
 TestFloat(-tFloat2,  1, "-1E+1");
 TestFloat(-tFloat2,  2, "-9.9");
 TestFloat(-tFloat3,  1, "-1");
 TestFloat(-tFloat3,  2, "-9.9E-1");
 WriteLn;

 TestEng(null,  0, "0.000000");
 TestEng(null,  1, "0");
 TestEng(null,  2, "0.0");
 TestEng(-tEng1,  1, "-1E-3");
 TestEng(-tEng1,  2, "-990E-6");
 TestEng(-tEng2,  1, "-10E-3");
 TestEng(-tEng2,  2, "-9.9E-3");
 TestEng(-tEng3,  1, "-100E-3");
 TestEng(-tEng3,  2, "-99E-3");
 TestEng(-tEng4,  1, "-1");
 TestEng(-tEng4,  2, "-990E-3");
 TestEng(-tEng5,  1, "-10");
 TestEng(-tEng5,  2, "-10");
 TestEng(-tEng6,  1, "-100");
 TestEng(-tEng6,  2, "-100");
 TestEng(-tEng7,  1, "-1E+3");
 TestEng(-tEng7,  2, "-1.0E+3");
 TestEng(-tEng8,  1, "-10E+3");
 TestEng(-tEng8,  2, "-10E+3");
 WriteLn;

 TestRealStr(tRealStr1, s1, "1");
 TestRealStr(tRealStr1, s2, "1E");
 TestRealStr(tRealStr1, s3, "1E+");
 TestRealStr(tRealStr1, s4, "1E+7");
 TestRealStr(tRealStr1, s5, "1E+7");
 TestRealStr(tRealStr1, s6, "1.0E+7");
 TestRealStr(tRealStr1, s7, "9999900");
 TestRealStr(tRealStr1, s8, "9999900.");
 TestRealStr(tRealStr1, s9, "9999900.0");
 TestRealStr(tRealStr1, s10, "9999900.00");
 WriteLn;

 TestStrToReal("0", null, strAllRight);
 TestStrToReal("1.", tStrToReal1, strAllRight);
 TestStrToReal("-1.0", -tStrToReal1, strAllRight);
 TestStrToReal("+1.E0", tStrToReal1, strAllRight);
 TestStrToReal("+1.e-1", tStrToReal2, strAllRight);
 TestStrToReal("-1.0e-1", -tStrToReal2, strAllRight);
 WriteLn;

 TestStrToReal("", null, strEmpty);
 TestStrToReal("      ", null, strEmpty);
 TestStrToReal("1.0E99999", LowLong.large, strOutOfRange);
 TestStrToReal("    -1.0E99999", -LowLong.large, strOutOfRange);
 WriteLn;

 TestScanReal("0", 0, 1, terminator);
 TestScanReal("1.", 0, 2, terminator);
 TestScanReal("  -1.0", 2, 6, terminator);
 TestScanReal("+1.E0", 0, 5, terminator);
 TestScanReal("    -12345678.901234E234", 4, 24, terminator);
 TestScanReal("    -.E3", 4, 5, invalid);
 TestScanReal("-.12345678901234", 0, 1, invalid);

 (*            012345678901234567890123456789 *)
END tfconv.

