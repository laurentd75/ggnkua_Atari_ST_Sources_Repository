MODULE twconv;
__IMP_SWITCHES__
__DEBUG__
#ifdef HM2
#ifdef __LONG_WHOLE__
(*$!i+: Modul muss mit $i- uebersetzt werden! *)
(*$!w+: Modul muss mit $w- uebersetzt werden! *)
#else
(*$!i-: Modul muss mit $i+ uebersetzt werden! *)
(*$!w-: Modul muss mit $w+ uebersetzt werden! *)
#endif
#endif

(* 03-Jan-96, Holger Kleinschmidt *)

VAL_INTRINSIC
CAST_IMPORT

#if (defined MM2)
IMPORT GEMDOSIO; (*$E MOS *)
#if (defined __DEBUG_CODE__)
IMPORT TOSDebug;
#endif
#endif

FROM PORTAB IMPORT
(* TYPE *) UNSIGNED, SIGNED;

FROM ConvTypes IMPORT
(* TYPE *) ConvResults, ScanClass;

FROM WholeConv IMPORT
(* PROC *) ScanInt, FormatInt, LengthInt, ScanCard, FormatCard, LengthCard;

FROM WholeStr IMPORT
(* PROC *) CardToStr, IntToStr, StrToCard, StrToInt;

FROM TConvUtil IMPORT
(* PROC *) PutRes, WriteStrErr, TestScan;

FROM InOut IMPORT Write, WriteString, WriteLn;

FROM pOUT IMPORT PutCard, PutInt;

(*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*)

PROCEDURE TestCardToStr ((* EIN/ -- *)     arg  : UNSIGNED;
                         (* EIN/ -- *) REF repr : ARRAY OF CHAR );

VAR s : ARRAY [0..100] OF CHAR;

BEGIN
 WriteString("CardToStr(");
 PutCard(arg, 1);
 WriteString("):");
 CardToStr(arg, s);
 WriteStrErr(s, LengthCard(arg), repr);
END TestCardToStr;

PROCEDURE TestIntToStr ((* EIN/ -- *)     arg  : SIGNED;
                        (* EIN/ -- *) REF repr : ARRAY OF CHAR );

VAR s : ARRAY [0..100] OF CHAR;

BEGIN
 WriteString("CardToStr(");
 PutInt(arg, 1);
 WriteString("):");
 IntToStr(arg, s);
 WriteStrErr(s, LengthInt(arg), repr);
END TestIntToStr;

PROCEDURE TestStrToCard ((* EIN/ -- *) REF repr : ARRAY OF CHAR;
                         (* EIN/ -- *)     rval : UNSIGNED;
                         (* EIN/ -- *)     cres : ConvResults   );

VAR val  : UNSIGNED;
    res1 : ConvResults;
    res2 : ConvResults;
    err  : BOOLEAN;

BEGIN
 WriteString('StrToCard("');
 WriteString(repr);
 WriteString('"):');
 StrToCard(repr,val, res1);
 res2 := FormatCard(repr);
 err  :=    (res1 # res2)
         OR (cres # res1)
         OR (cres = strAllRight) & (val # rval)
         OR (cres = strOutOfRange) & (val # MAX(UNSIGNED));
 IF ~err THEN
   WriteString(" OK");
 ELSE
   WriteLn;
   WriteString("*** berechnet: "); WriteLn;
   WriteString("***    res: "); PutRes(res1); WriteLn;
   WriteString("*** Format: "); PutRes(res2); WriteLn;
   WriteString("***   Wert: "); PutCard(val, 1); WriteLn;
   WriteString("+++ erwartet: "); WriteLn;
   WriteString("+++  res: "); PutRes(cres); WriteLn;
   WriteString("+++ Wert: "); PutCard(rval, 1);
 END;
 WriteLn;
END TestStrToCard;

PROCEDURE TestStrToInt ((* EIN/ -- *) REF repr : ARRAY OF CHAR;
                        (* EIN/ -- *)     rval : SIGNED;
                        (* EIN/ -- *)     cres : ConvResults   );

VAR val  : SIGNED;
    res1 : ConvResults;
    res2 : ConvResults;
    err  : BOOLEAN;

BEGIN
 WriteString('StrToInt("');
 WriteString(repr);
 WriteString('"):');
 StrToInt(repr, val, res1);
 res2 := FormatInt(repr);
 err  :=    (res1 # res2)
         OR (cres # res1)
         OR (cres = strAllRight) & (val # rval)
         OR (cres = strOutOfRange) & (   (rval < LIC(0)) & (val # MIN(SIGNED))
                                      OR (rval > LIC(0)) & (val # MAX(SIGNED)));
 IF ~err THEN
   WriteString(" OK");
 ELSE
   WriteLn;
   WriteString("*** berechnet: "); WriteLn;
   WriteString("***    res: "); PutRes(res1); WriteLn;
   WriteString("*** Format: "); PutRes(res2); WriteLn;
   WriteString("***   Wert: "); PutInt(val, 1); WriteLn;
   WriteString("+++ erwartet: "); WriteLn;
   WriteString("+++  res: "); PutRes(cres); WriteLn;
   WriteString("+++ Wert: "); PutInt(rval, 1);
 END;
 WriteLn;
END TestStrToInt;

PROCEDURE TestScanCard ((* EIN/ -- *) REF repr  : ARRAY OF CHAR;
                        (* EIN/ -- *)     first : CARDINAL;
                        (* EIN/ -- *)     next  : CARDINAL;
                        (* EIN/ -- *)     term  : ScanClass     );

BEGIN
 WriteString('ScanCard("');
 WriteString(repr);
 WriteString('"):');
 TestScan(repr, ScanCard, first, next, term);
END TestScanCard;

PROCEDURE TestScanInt ((* EIN/ -- *) REF repr  : ARRAY OF CHAR;
                       (* EIN/ -- *)     first : CARDINAL;
                       (* EIN/ -- *)     next  : CARDINAL;
                       (* EIN/ -- *)     term  : ScanClass     );

BEGIN
 WriteString('ScanInt("');
 WriteString(repr);
 WriteString('"):');
 TestScan(repr, ScanInt, first, next, term);
END TestScanInt;

BEGIN (* twconv *)
 TestCardToStr(LC(0), "0");
 TestCardToStr(LC(1), "1");
 TestCardToStr(LC(12), "12");
 TestCardToStr(LC(123456789), "123456789");
 WriteLn;

 TestIntToStr(LIC(0), "0");
 TestIntToStr(LIC(-1), "-1");
 TestIntToStr(LIC(-12), "-12");
 TestIntToStr(LIC(-123456789), "-123456789");
 WriteLn;

 TestStrToCard("0", LC(0), strAllRight);
 TestStrToCard("      1", LC(1), strAllRight);
 TestStrToCard("1", LC(1), strAllRight);
 TestStrToCard("12", LC(12), strAllRight);
 TestStrToCard("123456789", LC(123456789), strAllRight);
 TestStrToCard("                   4294967295", LC(4294967295), strAllRight);
 WriteLn;

 TestStrToInt("0", LIC(0), strAllRight);
 TestStrToInt("      -1", LIC(-1), strAllRight);
 TestStrToInt("-1", LIC(-1), strAllRight);
 TestStrToInt("-12", LIC(-12), strAllRight);
 TestStrToInt("-123456789", LIC(-123456789), strAllRight);
 TestStrToInt("                 -2147483648", MIN(SIGNED), strAllRight);
 TestStrToInt("      2147483647", LIC(2147483647), strAllRight);
 WriteLn;

 TestStrToCard("", LC(0), strEmpty);
 TestStrToCard("      ", LC(0), strEmpty);
 TestStrToCard("4294967296", MAX(UNSIGNED), strOutOfRange);
 TestStrToCard("10000000000", MAX(UNSIGNED), strOutOfRange);
 TestStrToCard("-12", LC(0), strWrongFormat);
 TestStrToCard("        A", LC(0), strWrongFormat);
 TestStrToCard("     123A", LC(0), strWrongFormat);
 TestStrToInt("", LIC(0), strEmpty);
 TestStrToInt("      ", LIC(0), strEmpty);
 TestStrToInt("2147483648", MAX(SIGNED), strOutOfRange);
 TestStrToInt("-2147483649", MIN(SIGNED), strOutOfRange);
 TestStrToInt("-10000000000", MIN(SIGNED), strOutOfRange);
 TestStrToInt("-", LC(0), strWrongFormat);
 TestStrToInt("-A", LC(0), strWrongFormat);
 TestStrToInt("        A", LC(0), strWrongFormat);
 TestStrToInt("     123A", LC(0), strWrongFormat);
 WriteLn;

 TestScanInt("0", 0, 1, terminator);
 TestScanInt("+1234", 0, 5, terminator);
 TestScanInt("    -12345678901234", 4, 19, terminator);
 TestScanInt("-12345678901234   +", 0, 15, terminator);
 TestScanInt("+1234A", 0, 5, terminator);
 TestScanInt("    --12345678901234", 4, 5, invalid);

 (*           012345678901234567890123456789 *)

 TestScanCard("0", 0, 1, terminator);
 TestScanCard("    12345678901234", 4, 18, terminator);
 TestScanCard("12345678901234   +", 0, 14, terminator);
 TestScanCard("1234A", 0, 4, terminator);
 TestScanCard("+1234", 0, 0, invalid);
 TestScanCard("    -12345678901234", 4, 4, invalid);

 (*            012345678901234567890123456789 *)
END twconv.
