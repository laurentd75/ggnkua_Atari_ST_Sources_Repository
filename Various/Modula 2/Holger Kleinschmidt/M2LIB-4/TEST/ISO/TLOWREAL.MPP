MODULE TLowReal;
__IMP_SWITCHES__
__DEBUG__
#ifdef HM2
#define REAL SHORTREAL
#ifdef __LONG_WHOLE__
(*$!i+: Modul muss mit $i- uebersetzt werden! *)
(*$!w+: Modul muss mit $w- uebersetzt werden! *)
#else
(*$!i-: Modul muss mit $i+ uebersetzt werden! *)
(*$!w-: Modul muss mit $w+ uebersetzt werden! *)
#endif
#endif

(* Tests fuer ISO-LowReal.
 * Die Tests gelten nur fuer diese Implementierung. Insbesondere wird
 * 'radix' = 2 vorausgesetzt.
 *
 * 24-Jul-96, Holger Kleinschmidt
 *)

#if (defined MM2)
IMPORT GEMDOSIO; (*$E MOS *)
#if (defined __DEBUG_CODE__)
IMPORT TOSDebug;
#endif
#endif

FROM LowReal IMPORT
(* TYPE *) Modes,
(* CONST*) radix, places, expoMin, expoMax, large, small, IEC559, LIA1, rounds,
           gUnderflow, exception, extend, nModes,
           fpcrBSUN, fpcrSNAN, fpcrOPERR, fpcrOVFL, fpcrUNFL, fpcrDZ,
           fpcrINEX2, fpcrINEX1, fpcrPREC1, fpcrPREC0, fpcrMODE1, fpcrMODE0,
           PrecMask, PrecExtended, PrecSingle, PrecDouble,
           ModeMask, ModeNearest, ModeZero, ModeNegInf, ModePosInf,
(* PROC *) exponent, fraction, sign, succ, ulp, pred, intpart, fractpart,
           scale, trunc, round, synthesize, currentMode;

FROM InOut IMPORT
(* PROC *) Write, WriteCard, WriteInt, WriteString, WriteLn;

FROM pOUT IMPORT
(* PROC *) PutReal, PutRealHex;

(*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*)

CONST
  WIDTH  = 25;
  HWIDTH = 10;

VAR
  ERROR  : BOOLEAN;
  ERR    : BOOLEAN;
  x      : REAL;
  fract  : REAL;
  rnd    : REAL;
  last   : REAL;
  rest   : REAL;
  int    : REAL;
  basemant : REAL;
  baseexpo : INTEGER;
  expo   : INTEGER;
  dummy1 : LONGCARD;
  y      : REAL;
  dummy2 : LONGCARD;
  i, e   : INTEGER;
  place  : CARDINAL;
  p, s   : CARDINAL;

(*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*)

PROCEDURE PutBool (REF val : ARRAY OF CHAR; x : BOOLEAN);
BEGIN
 WriteString(val);
 IF x THEN
   WriteString(": TRUE");
 ELSE
   WriteString(": FALSE");
 END;
 WriteLn;
END PutBool;

PROCEDURE PutMode (m : Modes);
BEGIN
 WriteString("Rundungsgenauigkeit: ");
 IF m * PrecMask = PrecExtended THEN
   WriteString("Erweiterte Genauigkeit");
 ELSIF m * PrecMask = PrecSingle THEN
   WriteString("Einfache Genauigkeit");
 ELSIF m * PrecMask = PrecDouble THEN
   WriteString("Doppelte Genauigkeit");
 ELSE
   WriteString("*** Unknown Precision ***");
 END;
 WriteLn;
 WriteString("Rundungsmodus: ");
 IF m * ModeMask = ModeNearest THEN
   WriteString("zur naechsten, geraden Zahl");
 ELSIF m * ModeMask = ModeZero THEN
   WriteString("nach Null");
 ELSIF m * ModeMask = ModeNegInf THEN
   WriteString("nach Minus Unendlich");
 ELSIF m * ModeMask = ModePosInf THEN
   WriteString("nach Plus Unendlich");
 END;
 WriteLn;
 WriteString("Exceptions: ");
 IF fpcrBSUN IN m THEN
   WriteString("BSUN,");
 END;
 IF fpcrSNAN IN m THEN
   WriteString("SNAN,");
 END;
 IF fpcrOPERR IN m THEN
   WriteString("OPERR,");
 END;
 IF fpcrOVFL IN m THEN
   WriteString("OVFL,");
 END;
 IF fpcrUNFL IN m THEN
   WriteString("UNFL,");
 END;
 IF fpcrDZ IN m THEN
   WriteString("DZ,");
 END;
 IF fpcrINEX2 IN m THEN
   WriteString("INEX2,");
 END;
 IF fpcrINEX1 IN m THEN
   WriteString("INEX1,");
 END;
 WriteLn;
END PutMode;

PROCEDURE unit (x : REAL; place : INTEGER): REAL;
BEGIN
 RETURN(scale(basemant, exponent(x) - place + 1));
END unit;

PROCEDURE oddplace (x : REAL; place : INTEGER): BOOLEAN;
BEGIN
 RETURN(trunc(x, place) # trunc(x, place - 1));
END oddplace;

(*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*)

BEGIN
 basemant := fraction(1.0);
 baseexpo := exponent(1.0);

 WriteString("     radix: "); WriteInt(radix, 1); WriteLn;
 WriteString("    places: "); WriteInt(places, 1); WriteLn;
 WriteString("   expoMin: "); WriteInt(expoMin, 1); WriteLn;
 WriteString("   expoMax: "); WriteInt(expoMax, 1); WriteLn;
 PutBool("    IEC559", IEC559);
 PutBool("      LIA1", LIA1);
 PutBool("    rounds", rounds);
 PutBool("gUnderflow", gUnderflow);
 PutBool(" exception", exception);
 PutBool("    extend", extend);
 WriteString("    nModes: "); WriteInt(nModes, 1); WriteLn;
 PutMode(currentMode());

 WriteLn;
 WriteString("            0.0:"); PutRealHex(0.0, HWIDTH); WriteLn;
 WriteString("           -0.0:"); PutRealHex(-0.0, HWIDTH); WriteLn;
 WriteString("          small:"); PutRealHex(small, HWIDTH); WriteLn;
 WriteString("         -small:"); PutRealHex(-small, HWIDTH); WriteLn;
 WriteString("          large:"); PutRealHex(large, HWIDTH); WriteLn;
 WriteString("         -large:"); PutRealHex(-large, HWIDTH); WriteLn;
 WriteString("      succ(0.0):"); PutRealHex(succ(0.0), HWIDTH); WriteLn;
 WriteString("   succ(-small):"); PutRealHex(succ(-small), HWIDTH); WriteLn;
 WriteString("    succ(large):"); PutRealHex(succ(large), HWIDTH); WriteLn;
 WriteString("      pred(0.0):"); PutRealHex(pred(0.0), HWIDTH); WriteLn;
 WriteString("    pred(small):"); PutRealHex(pred(small), HWIDTH); WriteLn;
 WriteString("   pred(-large):"); PutRealHex(pred(-large), HWIDTH); WriteLn;
 WriteString("   scale(0.0,1):"); PutRealHex(scale(0.0,1), HWIDTH); WriteLn;
 WriteString("  scale(0.0,-1):"); PutRealHex(scale(0.0,-1), HWIDTH); WriteLn;
 WriteString(" scale(large,1):"); PutRealHex(scale(large,1), HWIDTH); WriteLn;
 WriteString("scale(small,-1):"); PutRealHex(scale(small,-1), HWIDTH); WriteLn;
 WriteString("      sign(0.0):"); PutReal(sign(0.0), WIDTH); WriteLn;
 WriteString("     sign(-0.0):"); PutReal(sign(-0.0), WIDTH); WriteLn;
 WriteString("    sign(small):"); PutReal(sign(small), WIDTH); WriteLn;
 WriteString("   sign(-small):"); PutReal(sign(-small), WIDTH); WriteLn;
 WriteString("    sign(large):"); PutReal(sign(large), WIDTH); WriteLn;
 WriteString("   sign(-large):"); PutReal(sign(-large), WIDTH); WriteLn;
 WriteLn;

 WriteString("Test1: ");
#ifdef MM2
 x     := 0.98765432109876543210;
#else
 x     := 1.98765432109876543210;
#endif
 fract := fraction(x);
 expo  := exponent(x);
 ERR   := FALSE;
 ERROR := FALSE;
 FOR i := expoMin + places - 1 TO expoMax DO
   y := scale(x, i);
   ERR := ERR OR (exponent(y) # i);
   ERR := ERR OR (fraction(y) # fract);
   ERR := ERR OR (y # synthesize(exponent(y), fraction(y)));
   ERR := ERR OR (ulp(y) # unit(y, places));
   IF ERR THEN
     ERR   := FALSE;
     ERROR := TRUE;
     WriteString("         i: "); WriteInt(i, 1); WriteLn;
     WriteString("  exponent: "); WriteInt(exponent(y), 1); WriteLn;
     WriteString("  fraction: "); PutRealHex(fraction(y), HWIDTH); WriteLn;
     WriteString("         y: "); PutRealHex(y, HWIDTH); WriteLn;
     WriteString("       ulp: "); PutRealHex(ulp(y), HWIDTH); WriteLn;
     WriteString("      unit: "); PutRealHex(unit(y, places), HWIDTH); WriteLn;
     WriteString("synthesize: "); PutRealHex(synthesize(exponent(y), fraction(y)), HWIDTH); WriteLn;
   END;
 END;
 IF ERROR THEN
   WriteString("** error(s)");
 ELSE
   WriteString("OK");
 END;
 WriteLn;

 WriteString("Test2: ");
 x := trunc(pred(2.0), places - 8); (* 2^8 = 256 *)
 ERR   := FALSE;
 ERROR := FALSE;
 FOR i := 0 TO 500 DO
   ERR := ERR OR (ulp(x) # succ(x) - x) & (ulp(x) # x - pred(x));
   ERR := ERR OR (succ(x) # -pred(-x));
   IF ERR THEN
     ERR   := FALSE;
     ERROR := TRUE;
     WriteString("   x:"); PutRealHex(x, HWIDTH); WriteLn;
     WriteString(" ulp:"); PutRealHex(ulp(x), HWIDTH); WriteLn;
     WriteString("succ:"); PutRealHex(succ(x), HWIDTH); WriteLn;
     WriteString("pred:"); PutRealHex(pred(x), HWIDTH); WriteLn;
   END;
   x := succ(x);
 END;
 IF ERROR THEN
   WriteString("** error(s)");
 ELSE
   WriteString("OK");
 END;
 WriteLn;


 WriteString("Test3: ");
 x := pred(2.0);
 ERROR := FALSE;
 ERR   := FALSE;
 FOR i := 1 TO places - 1 DO
   ERR := ERR OR (trunc(x, i + 1) <  trunc(x, i));
   ERR := ERR OR (trunc(x, i + 1) # trunc(x, i) + unit(x, i + 1));
   IF ERR THEN
     ERR   := FALSE;
     ERROR := TRUE;
     WriteString("         i:"); WriteInt(i, 1); WriteLn;
     WriteString("         x:"); PutRealHex(x, HWIDTH); WriteLn;
     WriteString("     trunc:"); PutRealHex(trunc(x, i), HWIDTH); WriteLn;
     WriteString("trunc(i+1):"); PutRealHex(trunc(x, i+1), HWIDTH); WriteLn;
     WriteString(" unit(i+1):"); PutRealHex(unit(x, i+1), HWIDTH); WriteLn;
   END;
 END;
 IF ERROR THEN
   WriteString("** error(s)");
 ELSE
   WriteString("OK");
 END;
 WriteLn;


 WriteString("Test41: ");
 x := pred(2.0);
 ERROR := FALSE;
 ERR   := FALSE;
 FOR i := 1 TO places - 1 DO
   int  := trunc(x, i);
   rest := x - int;
   rnd  := unit(x, i + 1);
   last := unit(x, i);

   IF rest > rnd THEN
     y := int + last; Write('>');
   ELSIF (rest = rnd) & oddplace(x, i) THEN
     y := int + last; Write('*');
   ELSE
     y := int; Write('=');
   END;

   ERR := (y # round(x, i));
   IF ERR THEN
     ERR   := FALSE;
     ERROR := TRUE;
     WriteString("         i:"); WriteInt(i, 1); WriteLn;
     WriteString("         x:"); PutRealHex(x, HWIDTH); WriteLn;
     WriteString("      rest:"); PutRealHex(rest, HWIDTH); WriteLn;
     WriteString("       rnd:"); PutRealHex(rnd, HWIDTH); WriteLn;
     WriteString("         y:"); PutRealHex(y, HWIDTH); WriteLn;
     WriteString("     round:"); PutRealHex(round(x, i), HWIDTH); WriteLn;
     WriteString("     trunc:"); PutRealHex(trunc(x, i), HWIDTH); WriteLn;
     WriteString("trunc(i+1):"); PutRealHex(trunc(x, i+1), HWIDTH); WriteLn;
     WriteString(" unit(i+1):"); PutRealHex(unit(x, i+1), HWIDTH); WriteLn;
   END;
 END;
 IF ERROR THEN
   WriteString("** error(s)");
 ELSE
   WriteString("OK");
 END;
 WriteLn;

 WriteString("Test42: ");
 x := 0.111;
 ERROR := FALSE;
 ERR   := FALSE;
 FOR i := 1 TO places - 1 DO
   int  := trunc(x, i);
   rest := x - int;
   rnd  := unit(x, i + 1);
   last := unit(x, i);

   IF rest > rnd THEN
     y := int + last; Write('>');
   ELSIF (rest = rnd) & oddplace(x, i) THEN
     y := int + last; Write('*');
   ELSE
     y := int; Write('=');
   END;

   ERR := y # round(x, i);
   IF ERR THEN
     ERR   := FALSE;
     ERROR := TRUE;
     WriteString("         i:"); WriteInt(i, 1); WriteLn;
     WriteString("         x:"); PutRealHex(x, HWIDTH); WriteLn;
     WriteString("      rest:"); PutRealHex(rest, HWIDTH); WriteLn;
     WriteString("       rnd:"); PutRealHex(rnd, HWIDTH); WriteLn;
     WriteString("         y:"); PutRealHex(y, HWIDTH); WriteLn;
     WriteString("     round:"); PutRealHex(round(x, i), HWIDTH); WriteLn;
     WriteString("     trunc:"); PutRealHex(trunc(x, i), HWIDTH); WriteLn;
     WriteString("trunc(i+1):"); PutRealHex(trunc(x, i+1), HWIDTH); WriteLn;
     WriteString(" unit(i+1):"); PutRealHex(unit(x, i+1), HWIDTH); WriteLn;
   END;
 END;
 IF ERROR THEN
   WriteString("** error(s)");
 ELSE
   WriteString("OK");
 END;
 WriteLn;


 WriteString("Test5: ");
 x := 0.33333333333E-10;
 ERROR := FALSE;
 ERR   := FALSE;
 FOR i := 0 TO 500 DO
   ERR := ERR OR (intpart(x) # trunc(x, exponent(x) - baseexpo + 1));
   ERR := ERR OR (x - intpart(x) # fractpart(x));
   IF ERR THEN
     ERR   := FALSE;
     ERROR := TRUE;
     WriteString("        i:"); WriteInt(i, 1); WriteLn;
     WriteString("        x:"); PutRealHex(x, HWIDTH); WriteLn;
     WriteString("    trunc:"); PutRealHex(trunc(x, exponent(x)-baseexpo+1), HWIDTH); WriteLn;
     WriteString("  intpart:"); PutRealHex(intpart(x), HWIDTH); WriteLn;
     WriteString("fractpart:"); PutRealHex(fractpart(x), HWIDTH); WriteLn;
     WriteString("x-intpart:"); PutRealHex(x-intpart(x), HWIDTH); WriteLn;
   END;
   x := x * 1.1;
 END;
 IF ERROR THEN
   WriteString("** error(s)");
 ELSE
   WriteString("OK");
 END;
 WriteLn;
END TLowReal.
