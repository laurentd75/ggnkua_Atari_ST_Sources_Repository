MODULE TStrings;
__IMP_SWITCHES__
#ifdef HM2
#ifdef __LONG_WHOLE__
(*$!i+: Modul muss mit $i- uebersetzt werden! *)
(*$!w+: Modul muss mit $w- uebersetzt werden! *)
#else
(*$!i-: Modul muss mit $i+ uebersetzt werden! *)
(*$!w-: Modul muss mit $w+ uebersetzt werden! *)
#endif
#endif

(* Tests fuer ISO-Strings, dem Standard vom 12-Dez-92 entnommen.
 * Die Tests sind nicht gerade wasserdicht, aber sich Tests fuer Strings
 * auszudenken ist nicht das Wahre!
 *
 * 05-Aug-96, Holger Kleinschmidt
 *)

#if (defined MM2)
(*$E MOS *)
#if (defined __DEBUG_CODE__)
IMPORT TOSDebug;
#endif
#endif

FROM ISOStrings IMPORT
(* TYPE *) String1,
(* PROC *) Length, Assign, Extract, Delete, Insert, Replace, Append, Concat,
           CanAssignAll, CanExtractAll, CanDeleteAll, CanInsertAll,
           CanReplaceAll, CanAppendAll, CanConcatAll,
           CompareResults, Compare, Equal, FindNext, FindPrev, FindDiff,
           Capitalize;

FROM DosIO IMPORT
(* PROC *) Write, WriteString, WriteLn;

(*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*)

VAR
  small : ARRAY [0..4] OF CHAR;
  large : ARRAY [0..255] OF CHAR;
  alpha : ARRAY ['A'..'E'] OF CHAR;
  ch    : CHAR;
  found : BOOLEAN;
  areDiff : BOOLEAN;
  ERROR : BOOLEAN;
  pos   : CARDINAL;
#if !ISO_value_constructor
  str1  : String1;
#endif

(*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*)

PROCEDURE OK;
BEGIN
 IF ERROR THEN
   WriteString("*** errors");
 ELSE
   WriteString("OK");
 END;
 WriteLn;
END OK;

PROCEDURE tassign;
BEGIN
 WriteString("-- Assign: ");
 ch := 'X';
#if ISO_value_constructor
 Assign(String1{ch}, small);
#else
 str1[0] := ch;
 Assign(str1, small);
#endif
 ERROR := ~Equal(small, "X");
 Assign("pq", small);
 ERROR := ERROR OR ~Equal(small, "pq");
 Assign("", small);
 ERROR := ERROR OR ~Equal(small, "");
 Assign("Hello!", small);
 ERROR := ERROR OR ~Equal(small, "Hello");
 ERROR := ERROR OR CanAssignAll(6, small);
 Assign("Go", alpha);
 ERROR := ERROR OR ~Equal(alpha, "Go");
 small := "Hello"; large := "";
 ERROR := ERROR OR ~CanAssignAll(Length(small), large);
 Assign(small, large);
 ERROR := ERROR OR ~Equal(large, "Hello");
 OK;
END tassign;

PROCEDURE textract;
BEGIN
 WriteString("-- Extract: ");
 large := "ABCDE"; small := "";
 ERROR := ~CanExtractAll(Length(large), 2, 3, small);
 Extract(large, 2, 3, small);
 ERROR := ERROR OR ~Equal(small, "CDE");
 OK;
END textract;

PROCEDURE tdelete;
BEGIN
 WriteString("-- Delete: ");
 small := "ABCDE";
 ERROR := ~CanDeleteAll(Length(small), 2, 3);
 Delete(small, 2, 2);
 ERROR := ERROR OR ~Equal(small, "ABE");
 small := "ABC";
 ERROR := ERROR OR CanDeleteAll(3, 2, 3);
 small := "ABC";
 Delete(small, 2, 2);
 ERROR := ERROR OR ~Equal(small, "AB");
 OK;
END tdelete;

PROCEDURE tinsert;
BEGIN
 WriteString("-- Insert: ");
 small := "ABCD";
 ERROR := CanInsertAll(Length("XYZ"), 2, small);
 small := "ABCD";
 Insert("XYZ", 2, small);
 ERROR := ERROR OR ~Equal(small, "ABXYZ");
 large := "ABC";
 ERROR := ERROR OR ~CanInsertAll(3, 2, large);
 Insert("XYZ", 2, large);
 ERROR := ERROR OR ~Equal(large, "ABXYZC");
 large := "ABCD"; ch := 'X';
#if ISO_value_constructor
 Insert(String1{ch}, 2, large);
#else
 str1[0] := ch;
 Insert(str1, 2, large);
#endif
 ERROR := ERROR OR ~Equal(large, "ABXCD");
 OK;
END tinsert;

PROCEDURE treplace;
BEGIN
 WriteString("-- Replace: ");
 small := "ABC";
 ERROR := CanReplaceAll(Length("XY"), 2, small);
 small := "ABC";
 Replace("XY", 2, small);
 ERROR := ERROR OR ~Equal(small, "ABX");
 large := "ABCDEF";
 ERROR := ERROR OR ~CanReplaceAll(3, 2, large);
 Replace("XYZ", 2, large);
 ERROR := ERROR OR ~Equal(large, "ABXYZF");
 OK;
END treplace;

PROCEDURE tappend;
BEGIN
 WriteString("-- Append: ");
 small := "pqr";
 ERROR := CanAppendAll(Length("XYZ"), small);
 small := "pqr";
 Append("XYZ", small);
 ERROR := ERROR OR ~Equal(small, "pqrXY");
 small := "pqr"; ch := 's';
#if ISO_value_constructor
 Append(String1{ch}, small);
#else
 str1[0] := ch;
 Append(str1, small);
 ERROR := ERROR OR ~Equal(small, "pqrs");
#endif
 OK;
END tappend;

PROCEDURE tconcat;
BEGIN
 WriteString("-- Concat: ");
 small := "pqr";
 ERROR := CanConcatAll(4, Length(small), small);
 small := "pqr";
 Concat("WXYZ", small, small);
 ERROR := ERROR OR ~Equal(small, "WXYZp");
 small := "jk";
 large := "";
 ch    := 's';
#if ISO_value_constructor
 Concat(String1{ch}, small, large);
#else
 str1[0] := ch;
 Concat(str1, small, large);
#endif
 ERROR := ERROR OR ~Equal(large, "sjk");
 OK;
END tconcat;

PROCEDURE tcapitalize;
BEGIN
 WriteString("-- Capitalize: ");
 small := "pqr";
 Capitalize(small);
 ERROR := ~Equal(small, "PQR");
 OK;
END tcapitalize;

PROCEDURE tcompare;
BEGIN
 WriteString("-- Compare: ");
 ERROR := Compare("", "") # equal;
 ERROR := ERROR OR (Compare("", "abc") # less);
 ERROR := ERROR OR (Compare("abc", "") # greater);
 ERROR := ERROR OR (Compare("pqr", "pqr") # equal);
 ERROR := ERROR OR (Compare("pqr", "pqrstuv") # less);
 ERROR := ERROR OR (Compare("pqrstuv", "pqr") # greater);
 ERROR := ERROR OR (Compare("abc", "pqr") # less);
 ERROR := ERROR OR (Compare("pqr", "abc") # greater);
 ERROR := ERROR OR (Compare("abcdef", "p") # less);
 ERROR := ERROR OR (Compare("p", "abcdef") # greater);
 OK;
END tcompare;

PROCEDURE tfindnext;
BEGIN
 WriteString("-- FindNext: ");
 large := "Hello hello hello";
 FindNext("ll", large, 0, found, pos);
 ERROR := ~found OR (pos # 2);
 FindNext("ll", large, 0, found, pos);
 FindNext("ll", large, pos+1, found, pos);
 ERROR := ERROR OR ~found OR (pos # 8);
 large := "abcdefghijklmnopqrstuvwxyz";
 ch := 'x';
#if ISO_value_constructor
 FindNext(String1{ch}, large, 0, found, pos);
#else
 str1[0] := ch;
 FindNext(str1, large, 0, found, pos);
#endif
 ERROR := ERROR OR ~found OR (pos # 23);
 large := "abcdefghijklmnopqrstuvwxyz"; ch := 'x';
 pos := 42;
#if ISO_value_constructor
 FindNext(String1{ch}, large, 26, found, pos);
#else
 str1[0] := ch;
 FindNext(str1, large, 26, found, pos);
#endif
 ERROR := ERROR OR found OR (pos # 42);
 OK;
END tfindnext;

PROCEDURE tfindprev;
BEGIN
 WriteString("-- FindPrev: ");
 large := "aabbbcccc";
 FindPrev("cc", large, 200, found, pos);
 ERROR := ~found OR (pos # 7);
 large := "aabbbcccc";
 FindPrev("cc", large, 200, found, pos);
 FindPrev("cc", large, pos-1, found, pos);
 ERROR := ERROR OR ~found OR (pos # 6);
 large := "Maybe this makes sense";
 FindPrev("se", large, 200, found, pos);
 ERROR := ERROR OR ~found OR (pos # 20);
 large := "Maybe this makes sense";
 FindPrev("se", large, 20, found, pos);
 FindPrev("se", large, pos-1, found, pos);
 ERROR := ERROR OR ~found OR (pos # 17);
 OK;
END tfindprev;

PROCEDURE tfinddiff;
BEGIN
 pos := 42;
 WriteString("-- FindDiff: ");
 FindDiff("", "", areDiff, pos);
 ERROR := areDiff OR (pos # 42);
 FindDiff("abc", "", areDiff, pos);
 ERROR := ERROR OR ~areDiff OR (pos # 0);
 FindDiff("", "abc", areDiff, pos);
 ERROR := ERROR OR ~areDiff OR (pos # 0);
 FindDiff("pqr", "pqt", areDiff, pos);
 ERROR := ERROR OR ~areDiff OR (pos # 2);
 FindDiff("pqr", "pqrstuv", areDiff, pos);
 ERROR := ERROR OR ~areDiff OR (pos # 3);
 FindDiff("pqrstuv", "pqr", areDiff, pos);
 ERROR := ERROR OR ~areDiff OR (pos # 3);
 OK;
END tfinddiff;

(*===========================================================================*)

BEGIN (* TStrings *)
 tassign;
 textract;
 tdelete;
 tinsert;
 treplace;
 tappend;
 tconcat;
 tcapitalize;
 tcompare;
 tfindnext;
 tfindprev;
 tfinddiff;
END TStrings.
