MODULE TLongSupport;
__IMP_SWITCHES__
__DEBUG__
#ifdef HM2
#ifdef __LONG_WHOLE__
(*$!i+: Modul muss mit $i- uebersetzt werden! *)
(*$!w+: Modul muss mit $w- uebersetzt werden! *)
#else
(*$!i-: Modul muss mit $i+ uebersetzt werden! *)
(*$!w-: Modul muss mit $w+ uebersetzt werden! *)
#endif
#endif

(* 27-Aug-96, Holger Kleinschmidt *)

VAL_INTRINSIC
CAST_IMPORT

#if (defined MM2)
IMPORT GEMDOSIO; (*$E MOS *)
#if (defined __DEBUG_CODE__)
IMPORT TOSDebug;
#endif
#endif

FROM PORTAB IMPORT
(* TYPE *) SIGNED, UNSIGNED;

FROM LongSupport IMPORT fmod, floor, ceil, int, trunc, real, float, entier,
                        frexp, ldexp, modf;

FROM TLMathUtil IMPORT
(* VAR  *) MaxErr, Digs, procR2I, procR2C, procI2R, procC2R, procR2R,
           procRR2R, procname,
(* PROC *) TestR2I, TestR2C, TestI2R, TestC2R, TestR2R, TestRR2R, WriteErr;

FROM InOut IMPORT WriteString, Write, WriteLn, WriteInt;
FROM pOUT IMPORT PutInt, PutCard, PutLReal;

(*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*)

#if LONGREAL_var
TYPE
  lrc = RECORD
    CASE : BOOLEAN OF
      FALSE : lr  : LONGREAL;
     |TRUE  : lc1 : LONGCARD;
              lc2 : LONGCARD;
    END;
  END;

VAR
  cast : lrc;

VAR
  null      : LONGREAL;
  null5     : LONGREAL;
  one       : LONGREAL;
  one5      : LONGREAL;
  two       : LONGREAL;
  two5      : LONGREAL;
  fifteen   : LONGREAL;
  thirtytwo : LONGREAL;
  oneE5     : LONGREAL;
  maxerr    : LONGREAL;
  maxcard   : LONGREAL;
  maxint    : LONGREAL;
  minint    : LONGREAL;
  fmaxcard  : LONGREAL;
  fmaxint   : LONGREAL;
  fminint   : LONGREAL;
#else
CONST
  null      = LRC(0.0,0);
  null5     = LRC(0.5,0);
  one       = LRC(1.0,0);
  one5      = LRC(1.5,0);
  two       = LRC(2.0,0);
  two5      = LRC(2.5,0);
  fifteen   = LRC(15.0,0);
  thirtytwo = LRC(32.0,0);
  oneE5     = LRC(1.0,5);
  maxerr    = LRC(1.0,-14);
  maxcard   = LRC(4294967.295,3);
  maxint    = LRC(2147483.647,3);
  minint    = LRC(2147483.648,3);
  fmaxcard  = LRC(4294967.2959,3);
  fmaxint   = LRC(2147483.6479,3);
  fminint   = LRC(2147483.6489,3);
#endif

VAR
  x  : LONGREAL;
  e  : INTEGER;
  li : LONGINT;

(*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*)

#if LONGREAL_var
PROCEDURE init;
BEGIN
 WITH cast DO
   lc1 := 000000000H; lc2 := 000000000H; null := lr;
   lc1 := 03FE00000H; null5 := lr; (* 5.0000000000000E-1 *)
   lc1 := 03FF00000H; one := lr; (* 1.0000000000000E+0 *)
   lc1 := 03FF80000H; one5 := lr; (* 1.5000000000000E+0 *)
   lc1 := 040000000H; two := lr; (* 2.0000000000000E+0 *)
   lc1 := 040040000H; two5 := lr; (* 2.5000000000000E+0 *)
   lc1 := 0402E0000H; fifteen := lr; (* 1.5000000000000E+1 *)
   lc1 := 040400000H; thirtytwo := lr; (* 3.2000000000000E+1 *)
   lc1 := 040F86A00H; oneE5 := lr; (* 1.0000000000000E+5 *)
   lc1 := 041E00000H; minint := lr; (* 2.1474836480000E+9 *)
   lc1 := 03D06849BH; lc2 := 086A12B9BH; maxerr := lr; (* 1.0000000000000E-14 *)
   lc1 := 041EFFFFFH; lc2 := 0FFE00000H; maxcard := lr; (* 4.2949672950000E+9 *)
   lc1 := 041DFFFFFH; lc2 := 0FFC00000H; maxint := lr; (* 2.1474836470000E+9 *)
   lc1 := 041EFFFFFH; lc2 := 0FFFCCCCDH; fmaxcard := lr; (* 4.2949672959000E+9 *)
   lc1 := 041DFFFFFH; lc2 := 0FFF9999AH; fmaxint := lr; (* 2.1474836479000E+9 *)
   lc1 := 041E00000H; lc2 := 0001CCCCDH; fminint := lr; (* 2.1474836489000E+9 *)
 END;
END init;

(*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*)
#endif

BEGIN (* TLongSupport *)
#if LONGREAL_var
 init;
#endif
 MaxErr := maxerr;
 li := LIC(-2147483647);
 DEC(li);

 procname := "int";
 procR2I  := int;
 TestR2I(-fminint, li);
 TestR2I(-oneE5, LIC(-100000));
 TestR2I(-one, LIC(-1));
 TestR2I(one, LIC(1));
 TestR2I(oneE5, LIC(100000));
 TestR2I(fmaxint, LIC(2147483647));
 WriteLn;

 procname := "entier";
 procR2I  := entier;
 TestR2I(-minint, li);
 TestR2I(-oneE5, LIC(-100000));
 TestR2I(-one, LIC(-1));
 TestR2I(-one5, LIC(-2));
 TestR2I(one, LIC(1));
 TestR2I(one5, LIC(1));
 TestR2I(oneE5, LIC(100000));
 TestR2I(fmaxint, LIC(2147483647));
 WriteLn;

 procname := "trunc";
 procR2C  := trunc;
 TestR2C(oneE5, LC(100000));
 TestR2C(fmaxcard, LC(4294967295));
 WriteLn;

 procname := "real";
 procI2R  := real;
 TestI2R(li, -minint);
 TestI2R(LIC(-100000), -oneE5);
 TestI2R(LIC(-1), -one);
 TestI2R(LIC(0), null);
 TestI2R(LIC(1), one);
 TestI2R(LIC(100000), oneE5);
 TestI2R(LIC(2147483647), maxint);
 WriteLn;

 procname := "float";
 procC2R  := float;
 TestC2R(LC(0), null);
 TestC2R(LC(100000), oneE5);
 TestC2R(LC(4294967295), maxcard);
 WriteLn;

 procname := "floor";
 procR2R  := floor;
 TestR2R(one5, one);
 TestR2R(one, one);
 TestR2R(-one, -one);
 TestR2R(-one5, -two);
 WriteLn;

 procname := "ceil";
 procR2R  := ceil;
 TestR2R(one5, two);
 TestR2R(one, one);
 TestR2R(-one, -one);
 TestR2R(-one5, -one);
 WriteLn;

 PutLReal(frexp(two5, e), Digs); WriteString(" * 2^"); WriteInt(e, 1); WriteLn;
 PutLReal(ldexp(null5, 4), Digs); WriteLn;
 PutLReal(modf(two5, x), Digs); WriteString(" + "); PutLReal(x, Digs); WriteLn;

 procname := "fmod";
 procRR2R := fmod;
 TestRR2R(thirtytwo, fifteen, two);
 TestRR2R(-thirtytwo, fifteen, -two);
 TestRR2R(thirtytwo, -fifteen, two);
 TestRR2R(-thirtytwo, -fifteen, -two);
END TLongSupport.
