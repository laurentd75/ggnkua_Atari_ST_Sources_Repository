DEFINITION MODULE dir;
__DEF_SWITCHES__
#ifdef HM2
#ifdef __LONG_WHOLE__
(*$!i+: Modul muss mit $i- uebersetzt werden! *)
(*$!w+: Modul muss mit $w- uebersetzt werden! *)
#else
(*$!i-: Modul muss mit $i+ uebersetzt werden! *)
(*$!w-: Modul muss mit $w+ uebersetzt werden! *)
#endif
#endif
(*****************************************************************************)
(* Funktionen, die Verzeichnisse bearbeiten.                                 *)
(*                                                                           *)
(* Ein Fehler ist immer dann aufgetreten, wenn bei Funktionen mit Typ INTEGER*)
(* ein negativer Wert zurueckgegeben wird.                                   *)
(* Die genaue Fehlerursache kann bei Bedarf ueber "err.errno" und die ent-   *)
(* sprechenden Konstanten ermittelt werden. Die Funktionen veraendern "errno"*)
(* nur dann, wenn ein Fehler aufgetreten ist, bei erfolgreicher Ausfuehrung  *)
(* wird "errno" nicht veraendert.                                            *)
(*                                                                           *)
(* GEMDOS:                                                                   *)
(* Die Eigenschaften der Funktionen unter dem ``blanken'' GEMDOS sind z.T.   *)
(* stark eingeschraenkt; unter dem Stichwort GEMDOS ist deswegen immer       *)
(* angegeben, in wieweit die Funktion emuliert werden kann. Ist MiNT-Unter-  *)
(* stuetzung angegeben, so ist unter der Betriebssystemerweiterung MiNT      *)
(* eine bessere Unterstuetzung der Funktionen zu erwarten; wie weit diese    *)
(* geht, ist unter dem Stichwort MiNT angegeben.                             *)
(* --------------------------------------------------------------------------*)
(* 29-Mai-94, Holger Kleinschmidt                                            *)
(*****************************************************************************)

FROM SYSTEM IMPORT
(* TYPE *) ADDRESS;

FROM types IMPORT
(* TYPE *) int, offT, inoT, sizeT, StrPtr;

FROM file IMPORT
(* TYPE *) modeT;

(*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*)

TYPE
  (* Der folgende Typ ist nicht opak, sondern als ADDRESS deklariert, damit
     ein direkter Vergleich mit types.NULL moeglich ist.
   *)
  DIR = ADDRESS;

TYPE
  DirentPtr = POINTER TO DirentRec;

  (* Variablen vom Typ 'DirentRec' werden nicht vom Programm angelegt,
   * sondern es wird nur ueber das Ergebnis von "readdir()" auf eine
   * vom System angelegte Variable zugegriffen.
   *)
  DirentRec = RECORD
    dIno    : inoT;      (* Nicht POSIX: Inode der Datei *)
    dNamlen : sizeT;     (* Nicht POSIX: Laenge von dName^ *)
    dName   : StrPtr;    (* Name der Datei, keine Laengenbegrenzung *)
  END;

(*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*)

 PROCEDURE mkdir ((* EIN/ -- *) REF dir  : ARRAY OF CHAR;
                  (* EIN/ -- *)     mode : modeT         ): int;

(*--------------------------------------------------------------------------
 | Es wird ein neues Verzeichnis mit Namen <dir> und der Zugriffsberechti-  |
 | gung <mode> angelegt; die Dateierstellungsmaske wird beruecksichtigt.    |
 |                                                                          |
 | GEMDOS: Das <mode>-Argument wird ignoriert.                              |
 |   MiNT: Unterstuetzung von <mode> haengt vom Dateisystem ab.             |
  --------------------------------------------------------------------------*)


 PROCEDURE rmdir ((* EIN/ -- *) REF dir : ARRAY OF CHAR ): int;

(*--------------------------------------------------------------------------
 | Das leere Verzeichnis <dir> wird geloescht.                              |
 |                                                                          |
 | GEMDOS: Keine Besonderheiten.                                            |
 |   MiNT: -""-                                                             |
  --------------------------------------------------------------------------*)



 PROCEDURE link ((* EIN/ -- *) REF old : ARRAY OF CHAR;
                 (* EIN/ -- *) REF new : ARRAY OF CHAR ): int;

(*--------------------------------------------------------------------------
 | Es wird ein neuer Dateieintrag <new> fuer die Datei mit dem Eintrag <old>|
 | angelegt (Hard Link), sodass die entsprechende Datei ueber beide Namen   |
 | angesprochen werden kann. <old> und <new> muessen sich auf demselben     |
 | Dateisystem befinden.                                                    |
 |                                                                          |
 | GEMDOS: Liefert immer -1 (errno = 'ENOSYS').                             |
 |   MiNT: Unterstuetzung haengt vom Dateisystem ab.                        |
  --------------------------------------------------------------------------*)


 PROCEDURE unlink ((* EIN/ -- *) REF file : ARRAY OF CHAR ): int;

(*--------------------------------------------------------------------------
 | Der Dateieintrag <file> wird geloescht. Wenn keine weiteren Links auf die|
 | entsprechende Datei bestehen, wird die Datei komplett geloescht. Ist die |
 | Datei zur Zeit geoeffnet, wird die Datei erst nach dem Schliessen ge-    |
 | loescht.                                                                 |
 |                                                                          |
 | GEMDOS: Da es hier keine Links gibt, wird einfach die Datei geloescht.   |
 |         Die Datei darf nicht geoeffnet sein.                             |
 |   MiNT: Unterstuetzung haengt vom Dateisystem ab.                        |
  --------------------------------------------------------------------------*)


 PROCEDURE rename ((* EIN/ -- *) REF old : ARRAY OF CHAR;
                   (* EIN/ -- *) REF new : ARRAY OF CHAR ): int;

(*--------------------------------------------------------------------------
 | Benennt die Datei oder das Verzeichnis <old> in <new> um. Wenn <new>     |
 | existiert, wird es vorher geloescht. <old> und <new> muessen sich auf dem|
 | gleichen Dateisystem befinden.                                           |
 |                                                                          |
 | GEMDOS: Verzeichnisse koennen erst ab TOS 1.04 umbenannt werden.         |
 |         Als Dateisystem fungiert hier ein logisches Laufwerk.            |
 |         Die Datei darf nicht geoeffnet sein.                             |
 |   MiNT: -""-                                                             |
  --------------------------------------------------------------------------*)



 PROCEDURE opendir ((* EIN/ -- *) REF dir : ARRAY OF CHAR ): DIR;

 PROCEDURE readdir ((* EIN/ -- *) dirp : DIR ): DirentPtr;

 PROCEDURE rewinddir ((* EIN/ -- *) dirp : DIR );

 PROCEDURE closedir ((* EIN/AUS *) VAR dirp : DIR ): int;

(* Nicht POSIX: *)
 PROCEDURE telldir ((* EIN/ -- *) dirp : DIR ): offT;

(* Nicht POSIX: *)
 PROCEDURE seekdir ((* EIN/ -- *) dirp : DIR;
                    (* EIN/ -- *) loc  : offT );

(*--------------------------------------------------------------------------
 | "opendir()":                                                             |
 |     'oeffnet' das Verzeichnis <dirname>, d.h. trifft die Vorbereitungen  |
 |     fuer "readdir()". Der Funktionswert ist als Identifikation des Ver-  |
 |     zeichnisses fuer die anderen Verzeichnis-Prozeduren noetig. Konnte   |
 |     das Verzeichnis nicht geoeffnet werden, wird NULL zurueckgeliefert.  |
 | "readdir()":                                                             |
 |     Ein Verweis auf den physikalisch naechsten Eintrag des Verzeichnisses|
 |     <dirp> wird zurueckgeliefert, oder NULL, falls kein weiterer Eintrag |
 |     existiert.                                                           |
 |     ACHTUNG: Der Verweis bleibt nur solange gueltig, wie kein weiterer   |
 |     Aufruf von "readdir()" mit dem gleichen <dirp> erfolgt!              |
 | "rewinddir()":                                                           |
 |     Setzt das Verzeichnis <dirp> wieder auf den Anfang zurueck, sodass   |
 |     ein "readdir()" die physikalisch erste Datei (".") liefert.          |
 | "closedir()":                                                            |
 |     Nach dem Auslesen des Verzeichnisses muss dieses wieder geschlossen  |
 |     werden. Falls das Schliessen erfolgreich war, wird <dirp> auf NULL   |
 |     gesetzt.                                                             |
 | "telldir()":                                                             |
 |     Liefert die augenblickliche Position im Verzeichnis <dirp>.          |
 |     Diese Position wird mit jedem "readdir()" erhoeht, so wie "read" die |
 |     Lese/Schreibposition in einer ``normalen'' Datei erhoeht.            |
 |     Um wieviel sich die Position bei jedem "readdir()" erhoeht, ist      |
 |     systemabhaengig.                                                     |
 | "seekdir()":                                                             |
 |     Setzt die Position im Verzeichnis auf <loc>. <loc> MUSS(!) das       |
 |     Ergebnis eines "telldir()"-Aufrufs sein. Ein Aufruf von "readdir()"  |
 |     liefert nur dann dieselbe Datei wie zum Zeitpunkt des entsprechenden |
 |     "telldir()", wenn sich zwischendurch nichts am Verzeichnis geaendert |
 |     hat; insbesondere darf <dirp> zwischendurch nicht geschlossen werden.|
 |                                                                          |
 | GEMDOS: Es werden alle Dateien ausser dem Diskettennamen geliefert.      |
 |         Diese Routinen sind anstelle von "Fsfirst/Fsnext" zu benutzen.   |
 |   MiNT: -""-                                                             |
  --------------------------------------------------------------------------*)


(* Noch nicht POSIX: *)
 PROCEDURE symlink ((* EIN/ -- *) REF old : ARRAY OF CHAR;
                    (* EIN/ -- *) REF new : ARRAY OF CHAR ): int;

(*--------------------------------------------------------------------------
 | Es wird ein symbolischer Dateieintrag <new> fuer die Datei mit dem Datei-|
 | eintrag <old> angelegt (Symbolic Link), sodass die entsprechende Datei   |
 | ueber beide Namen angesprochen werden kann. <old> und <new> muessen sich |
 | nicht auf dem gleichen Dateisystem befinden.                             |
 |                                                                          |
 | GEMDOS: Liefert immer -1 (errno = 'ENOSYS').                             |
 |   MiNT: Unterstuetzung haengt vom Dateisystem ab.                        |
  --------------------------------------------------------------------------*)

(* Noch nicht POSIX: *)
 PROCEDURE readlink ((* EIN/ -- *) REF lname  : ARRAY OF CHAR;
                     (* EIN/ -- *)     buf    : StrPtr;
                     (* EIN/ -- *)     bufsiz : sizeT         ): int;

(*--------------------------------------------------------------------------
 | Wenn <lname> der Name eines ``Symbolischen Links'' ist, wird in <buf>^   |
 | der bei "symlink()" angegebene Name der zugehoerigen Zieldatei abgelegt; |
 | Der Name ist NICHT mit einem Nullbyte abgeschlossen, deshalb muss der    |
 | Rueckgabewert der Funktion verwendet werden, um den String mit einem     |
 | Nullbyte abzuschliessen (wenn der Platz dafuer noch ausreicht)!!!        |
 | Als Funktionswert wird die Laenge von <buf>^ oder -1 (fuer Fehler) zu-   |
 | rueckgegeben. <bufsiz> ist der Platz in <buf>^. Es wird KEIN Fehler      |
 | gemeldet, wenn <buf> nicht gross genug war, den gesamten Namen aufzuneh- |
 | men, es wird dann lediglich auf <bufsiz> gekuerzt! Die tatsaechliche     |
 | Laenge eines symbolischen Links kann lediglich ueber "lstat(lname, st)"  |
 | und 'st.stSize' ermittelt werden.                                        |
 |                                                                          |
 | GEMDOS: Liefert immer -1 (errno = 'ENOSYS').                             |
 |   MiNT: Unterstuetzung haengt vom Dateisystem ab.                        |
  --------------------------------------------------------------------------*)

END dir.
