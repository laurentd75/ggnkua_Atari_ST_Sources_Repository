DEFINITION MODULE BSD;
__DEF_SWITCHES__
#ifdef HM2
#ifdef __LONG_WHOLE__
(*$!i+: Modul muss mit $i- uebersetzt werden! *)
(*$!w+: Modul muss mit $w- uebersetzt werden! *)
#else
(*$!i-: Modul muss mit $i+ uebersetzt werden! *)
(*$!w-: Modul muss mit $w+ uebersetzt werden! *)
#endif
#endif
#if no_reexport
#  error *** compiler does not allow reexporting!
#endif
(****************************************************************************)
(* Das Modul fasst Aufrufe, Typen und Konstanten zusammen, die nicht zu     *)
(* POSIX.1 gehoeren. Der Name des Moduls wurde so gewaehlt, weil die meisten*)
(* dieser Objekte im BSD-Unix vorkommen, es kann aber auch sein, dass einige*)
(* aus anderen Unix-Systemen stammen, deshalb ist der Name des Moduls nicht *)
(* unbedingt als Programm zu verstehen.                                     *)
(* Fuer Leute, die lieber aus einem einzigen Modul importieren wollen, und  *)
(* deren Compiler den Reexport erlaubt.                                     *)
(* Fuer die Beschreibung der Funktionen sollten die entsprechenden Defini-  *)
(* tionsmodule konsultiert werden.                                          *)
(* -------------------------------------------------------------------------*)
(* 14-Mai-94, Holger Kleinschmidt                                           *)
(****************************************************************************)
#if !ISO_proc_const
FROM PORTAB IMPORT SIGNEDLONG,UNSIGNEDLONG;
FROM types  IMPORT int,signedlong,StrPtr,offT,pidT,uidT,gidT,sizeT;
FROM dir    IMPORT DIR;
FROM proc   IMPORT WaitVal,WaitOption;
#endif
IMPORT e,types,file,dir,proc,sys,sig;

(*===========================================================================*)
(* Modul: 'e'                                                                *)
(*===========================================================================*)

CONST
  ENOTSOCK        = e.ENOTSOCK;
  EDESTADDRREQ    = e.EDESTADDRREQ;
  EMSGSIZE        = e.EMSGSIZE;
  EPROTOTYPE      = e.EPROTOTYPE;
  ENOPROTOOPT     = e.ENOPROTOOPT;
  EPROTONOSUPPORT = e.EPROTONOSUPPORT;
  ESOCKTNOSUPPORT = e.ESOCKTNOSUPPORT;
  EOPNOTSUPP      = e.EOPNOTSUPP;
  EPFNOSUPPORT    = e.EPFNOSUPPORT;
  EAFNOSUPPORT    = e.EAFNOSUPPORT;
  EADDRINUSE      = e.EADDRINUSE;
  EADDRNOTAVAIL   = e.EADDRNOTAVAIL;
  ENETDOWN        = e.ENETDOWN;
  ENETUNREACH     = e.ENETUNREACH;
  ENETRESET       = e.ENETRESET;
  ECONNABORTED    = e.ECONNABORTED;
  ECONNRESET      = e.ECONNRESET;
  EISCONN         = e.EISCONN;
  ENOTCONN        = e.ENOTCONN;
  ESHUTDOWN       = e.ESHUTDOWN;
  ETIMEDOUT       = e.ETIMEDOUT;
  ECONNREFUSED    = e.ECONNREFUSED;
  EHOSTDOWN       = e.EHOSTDOWN;
  EHOSTUNREACH    = e.EHOSTUNREACH;
  EALREADY        = e.EALREADY;
  EINPROGRESS     = e.EINPROGRESS;
  EWOULDBLOCK     = e.EWOULDBLOCK;

(*===========================================================================*)
(* Modul: 'file'                                                             *)
(*===========================================================================*)

CONST
  sIFMT  = file.sIFMT;
  sIFCHR = file.sIFCHR;
  sIFDIR = file.sIFDIR;
  sIFBLK = file.sIFBLK;
  sIFREG = file.sIFREG;
  sIFIFO = file.sIFIFO;
  sIFLNK = file.sIFLNK;

(*===========================================================================*)
(* Modul: 'dir'                                                              *)
(*===========================================================================*)

#if ISO_proc_const
 telldir = dir.telldir;
 seekdir = dir.seekdir;
#else
VAR (* READ ONLY! *)
 telldir : PROCEDURE(DIR):offT;
 seekdir : PROCEDURE(DIR,offT);
#endif

(*===========================================================================*)
(* Modul: 'proc'                                                             *)
(*===========================================================================*)

CONST
  wRetcode  = proc.wRetcode;
  wTermsig  = proc.wTermsig;
  wCoredump = proc.wCoredump;
  wStopval  = proc.wStopval;
  wStopsig  = proc.wStopsig;
  WSTOPPED  = proc.WSTOPPED;

CONST
  FDSETSIZE = proc.FDSETSIZE;

TYPE
  fdSet    = proc.fdSet;
  FdSetPtr = proc.FdSetPtr;

TYPE
  TimevalRec = proc.TimevalRec;
  TimevalPtr = proc.TimevalPtr;

TYPE
  RusageRec = proc.RusageRec;

#if ISO_proc_const
CONST
  setreuid = proc.setreuid;
  setregid = proc.setregid;
  vfork    = proc.vfork;
  wait3    = proc.wait3;
  wait4    = proc.wait4;
  select   = proc.select;
  FDZERO   = proc.FDZERO;
  FDSET    = proc.FDSET;
  FDCLR    = proc.FDCLR;
  FDISSET  = proc.FDISSET;
#else
VAR (* READ ONLY! *)
  setreuid : PROCEDURE(uidT,uidT):int;
  setregid : PROCEDURE(gidT,gidT):int;
  vfork    : PROCEDURE():pidT;
  wait3    : PROCEDURE(VAR WaitVal,WaitOption,VAR RusageRec):pidT;
  wait4    : PROCEDURE(pidT,VAR WaitVal,WaitOption,VAR RusageRec):pidT;
  select   : PROCEDURE(int,FdSetPtr,FdSetPtr,FdSetPtr,TimevalPtr):int;
  FDZERO   : PROCEDURE(VAR fdSet);
  FDSET    : PROCEDURE(int,VAR fdSet);
  FDCLR    : PROCEDURE(int,VAR fdSet);
  FDISSET  : PROCEDURE(int,fdSet):BOOLEAN;
#endif

(*===========================================================================*)
(* Modul: 'sig'                                                              *)
(*===========================================================================*)

CONST
  SIGNULL   = sig.SIGNULL;
  SIGTRAP   = sig.SIGTRAP;
  SIGIOT    = sig.SIGIOT;
  SIGEMT    = sig.SIGEMT;
  SIGBUS    = sig.SIGBUS;
  SIGSYS    = sig.SIGSYS;
  SIGURG    = sig.SIGURG;
  SIGIO     = sig.SIGIO;
  SIGXCPU   = sig.SIGXCPU;
  SIGXFSZ   = sig.SIGXFSZ;
  SIGVTALRM = sig.SIGVTALRM;
  SIGPROF   = sig.SIGPROF;
  SIGWINCH  = sig.SIGWINCH;

CONST
  NSIG = sig.NSIG;

TYPE
  SigAtomicT = sig.SigAtomicT;

#if ISO_proc_const
CONST
  killpg     = sig.killpg;
  usleep     = sig.usleep;
  sigmask    = sig.sigmask;
  sigpause   = sig.sigpause;
  sigblock   = sig.sigblock;
  sigsetmask = sig.sigsetmask;
#else
VAR (* READ ONLY! *)
  killpg     : PROCEDURE(pidT,int):int;
  usleep     : PROCEDURE(signedlong):signedlong;
  sigmask    : PROCEDURE(int):UNSIGNEDLONG;
  sigpause   : PROCEDURE(UNSIGNEDLONG);
  sigblock   : PROCEDURE(UNSIGNEDLONG):UNSIGNEDLONG;
  sigsetmask : PROCEDURE(UNSIGNEDLONG):UNSIGNEDLONG;
#endif

(*===========================================================================*)
(* Modul: 'sys'                                                              *)
(*===========================================================================*)

CONST
  MAXHOSTNAMELEN = sys.MAXHOSTNAMELEN;

TYPE
  fsidT = sys.fsidT;

TYPE
  StatfsRec = sys.StatfsRec;

#if ISO_proc_const
CONST
  statfs      = sys.statfs;
  gethostname = sys.gethostname;
#else
VAR (* READ ONLY! *)
  statfs      : PROCEDURE(REF ARRAY OF CHAR,VAR StatfsRec):int;
  gethostname : PROCEDURE(StrPtr,sizeT):int;
#endif

END BSD.
