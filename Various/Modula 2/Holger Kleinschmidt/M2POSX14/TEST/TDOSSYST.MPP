MODULE TDosSystem;
__IMP_SWITCHES__
__DEBUG__
#ifdef HM2
#ifdef __LONG_WHOLE__
(*$!i+: Modul muss mit $i- uebersetzt werden! *)
(*$!w+: Modul muss mit $w- uebersetzt werden! *)
#else
(*$!i-: Modul muss mit $i+ uebersetzt werden! *)
(*$!w-: Modul muss mit $w+ uebersetzt werden! *)
#endif
#endif
(* Test und Anwendungsbeispiel fuer Modul 'DosSystem'
 *
 * 29-Mai-94, Holger Kleinschmidt
 *)

#if (defined MM2) && (defined __DEBUG_CODE__)
IMPORT Debug;
#endif

VAL_INTRINSIC

FROM SYSTEM IMPORT
  ADR;

FROM PORTAB IMPORT
  NULL, UNSIGNEDLONG;

FROM DosSystem IMPORT
  MiNTVersion, DosVersion, GetOsHeader, SysClock, MachineType, Machine,
  CallShell, ShellInstalled, Shell, BasePtr, BasePage, OsPtr, OsHeader,
  CmdLine, ProcessDomain, FileLocking, CPUType, CPU, FPU, Language,
  FPUFlags, FPUType, FPUInfo, FPUMask, FPU81or82, FPU81, FPU82, PrefLanguage,
  CookieJarSize, FreeEntries, GetCookieBase, Cookie, CookieVal, CookiePtr,
  CookieRange, MagiXVersion, FcntlAvail, DpathconfAvail, SysconfAvail,
  DgetcwdAvail;

FROM InOut IMPORT
(* PROC *) WriteInt, WriteCard, WriteHex, Read, WriteString, Write, WriteLn;

FROM pOUT IMPORT
(* PROC *) PutHex;

(*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*)

CONST
  NOTAVAILABLE = "Nicht vorhanden";

VAR
  os   : OsPtr;
  fpu  : FPUInfo;
  cmd  : CmdLine;
  c    : CHAR;
  ret  : INTEGER;
  time : UNSIGNEDLONG;
  pc   : CookiePtr;
  i    : CookieRange;
  cast : RECORD
    CASE : BOOLEAN OF
      FALSE: lc : LONGCARD;
     |TRUE : s  : ARRAY [0..3] OF CHAR;
    END;
  END;

(*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*)

PROCEDURE supported ((* EIN/ -- *) REF proc  : ARRAY OF CHAR;
                     (* EIN/ -- *)     avail : BOOLEAN       );
BEGIN
 WriteString(proc); WriteString(": Wird ");
 IF NOT avail THEN
   WriteString("nicht ");
 END;
 WriteString("unterstÅtzt");
 WriteLn;
END supported;

(*===========================================================================*)

BEGIN (* TDosSystem *)
 time := SysClock();
 GetOsHeader(os);

 WriteString("     Landessprache: ");
 CASE Language() OF
   lUSA: WriteString("Amerikanisches Englisch");
  |lFRG: WriteString("Deutsch");
  |lFRA: WriteString("Franzîsisch");
  |lUK : WriteString("Englisch");
  |lSPA: WriteString("Spanisch");
  |lITA: WriteString("Italienisch");
  |lSWE: WriteString("Schwedisch");
  |lSWF: WriteString("Franzîsisch, Schweiz");
  |lSWG: WriteString("Deutsch, Schweiz");
  |lTUR: WriteString("TÅrkisch");
  |lFIN: WriteString("Finnisch");
  |lNOR: WriteString("Norwegisch");
  |lDEN: WriteString("DÑnisch");
  |lAUS: WriteString("Arabisch");
  |lHOL: WriteString("HollÑndisch");
 END;
 WriteLn;
 WriteString("        Rechnertyp: ");
 CASE Machine() OF
   atariST   : WriteString("Atari ST");
  |atariSTE  : WriteString("Atari STE");
  |atariMSTE : WriteString("Atari MEGA/STE");
  |atariTT   : WriteString("Atari TT030");
  |atariF030 : WriteString("Atari Falcon030");
 ELSE
               WriteString("Atari");
 END;
 WriteLn;
 WriteString("               CPU: ");
 CASE CPU() OF
   CPU68000 : WriteString("68000");
  |CPU68010 : WriteString("68010");
  |CPU68020 : WriteString("68020");
  |CPU68030 : WriteString("68030");
  |CPU68040 : WriteString("68040");
 ELSE
              WriteString("68XXX");
 END;
 WriteLn;
 WriteString("               FPU: ");
 FPU(fpu);
 IF (fpu.linef = 0) AND (fpu.fpu = FPUType{}) THEN
   WriteString(NOTAVAILABLE);
 ELSE
   IF fpu.linef <> 0 THEN
     WriteString("Line-F-Emulation ");
   END;
   IF sfp004 IN fpu.fpu THEN
     WriteString("SFP004 ");
   END;
   IF m68040 IN fpu.fpu THEN
     WriteString("68040 ");
   END;
   IF fpu.fpu * FPUMask = FPU81or82 THEN
     WriteString("68881 oder 68882");
   ELSIF fpu.fpu * FPUMask = FPU81 THEN
     WriteString("68881");
   ELSIF fpu.fpu * FPUMask = FPU82 THEN
     WriteString("68882");
   END;
 END;
 WriteLn;
 supported("  ``File locking''", FileLocking());
 supported('         "Fcntl()"', FcntlAvail());
 supported('       "Dgetcwd()"', DgetcwdAvail());
 supported('     "Dpathconf()"', DpathconfAvail());
 supported('       "Sysconf()"', SysconfAvail());

 WriteString("       TOS-Version: ");
 WriteCard(VAL(CARDINAL,os^.osVersion DIV 256), 0);
 Write('.');
 IF os^.osVersion MOD 256 < 10 THEN
   Write('0');
 END;
 WriteCard(VAL(CARDINAL,os^.osVersion MOD 256), 0);
 WriteLn;

 WriteString("    GEMDOS-Version: ");
 WriteCard(DosVersion() MOD 256, 0);
 Write('.');
 WriteCard(DosVersion() DIV 256, 0);
 WriteLn;

 WriteString("      MiNT-Version: ");
 IF MiNTVersion() = 0 THEN
   WriteString(NOTAVAILABLE);
 ELSE
   WriteCard(MiNTVersion() DIV 256, 0);
   Write('.');
   IF MiNTVersion() MOD 256 < 10 THEN
     Write('0');
   END;
   WriteCard(MiNTVersion() MOD 256, 0);
 END;
 WriteLn;

 WriteString("     Mag!X-Version: ");
 IF MagiXVersion() = 0 THEN
   WriteString(NOTAVAILABLE);
 ELSE
   WriteCard(MagiXVersion() DIV 256, 0);
   Write('.');
   IF MagiXVersion() MOD 256 < 10 THEN
     Write('0');
   END;
   WriteCard(MagiXVersion() MOD 256, 0);
 END;
 WriteLn;

 WriteString("    Process-Domain: "); WriteInt(ProcessDomain(-1), 0);
 CASE ProcessDomain(-1) OF
   0 : WriteString(" (TOS)");
  |1 : WriteString(" (MiNT)");
 ELSE  WriteString(" (UNBEKANNT)");
 END;
 WriteLn;

 WriteString("Installierte Shell: ");
 CASE ShellInstalled() OF
   None:    WriteString("KEINE");
  |Gulam:   WriteString("GULéM");
  |Mupfel:  WriteString("MUPFEL");
  |Gemini:  WriteString("GEMINI");
  |Master:  WriteString("MASTER");
  |Unknown: WriteString("UNBEKANNT");
 ELSE
            WriteString("**FEHLER !");
 END;
 WriteLn;

 WriteString("Soll ein Shell-Call (ls) ausgefÅhrt werden (y/Y)?"); WriteLn;
 Read(c); WriteLn;
 IF CAP(c) = 'Y' THEN
   WriteString("Shell-Call:"); WriteLn;
   WriteString("-----------"); WriteLn;
   cmd := "ls";
   ret := CallShell(ADR(cmd));
   WriteString("-----------"); WriteLn;
   WriteString("Return-Code: "); WriteInt(ret, 0); WriteLn;
 END;

 WriteString("Cookie-Jar"); WriteLn;
 WriteString("=========="); WriteLn;
 WriteString("         Grîûe: "); WriteCard(CookieJarSize(), 0); WriteLn;
 WriteString("freie EintrÑge: "); WriteCard(FreeEntries(), 0); WriteLn;

 GetCookieBase(pc);
 IF pc <> NULL THEN
   WriteString("Liste der Cookies:"); WriteLn;
   WriteString("------------------"); WriteLn;
   i := 0;
   WHILE pc^[i].id <> VAL(UNSIGNEDLONG,0) DO
     WITH cast DO
       lc := pc^[i].id;
       IF (s[0] >= ' ') AND (s[0] < 177C) THEN
         (* Wenn das erste Zeichen ein druckbares ASCII-Zeichen ist, wird
          * die Cookie-ID als Name ausgedruckt.
          *)
         WriteString("     ");
         Write(s[0]); Write(s[1]); Write(s[2]); Write(s[3]);
       ELSE
         (* Cookie-ID entspricht nicht dem Standard, als sedezimale Zahl
          * ausgeben (z.B. fuer Maccel).
          *)
         PutHex(lc, 9);
       END;
     END;
     WriteString(": "); PutHex(pc^[i].val.ul, 9); WriteLn;
     INC(i);
   END;
   PutHex(0, 9); WriteString(": "); PutHex(pc^[i].val.ul, 9);
   WriteString(" (End-Cookie)"); WriteLn;
   WriteString("------------------"); WriteLn;
 END;

 time := SysClock() - time;
 WriteString("FÅr die AusfÅhrung des Moduls wurden ");
 WriteCard(VAL(CARDINAL,(time * LC(5)) DIV LC(1000)), 0);
 Write('.');
 WriteCard(VAL(CARDINAL,(time * LC(5)) MOD LC(1000)), 0);
 WriteString(" Sekunden benîtigt"); WriteLn;
 Read(c);
END TDosSystem.
