(*######################################################################

  MAGIC         Modula's  All purpose  GEM  Interface  Cadre
                ÿ         ÿ            ÿ    ÿ          ÿ
########################################################################

  XBIOS Extendend Basic Input Output System     Interface for Modula-2

########################################################################
  V1.0  (C) by Peter Hellinger
######################################################################*)

DEFINITION MODULE MagicXBIOS;

FROM SYSTEM IMPORT BYTE, WORD, ADDRESS;
IMPORT MagicSys;



CONST   DisableMouse =  0;
        RelativeMouse = 1;
        AbsoluteMouse = 2;
        KeycodeMouse =  4;

TYPE    PARAM =      RECORD
                         topMode:  BYTE;
                         buttons:  BYTE;
                         xparam:   BYTE;
                         yparam:   BYTE;
                         EXTRA:    RECORD
                                    xmax:     CARDINAL;
                                    ymax:     CARDINAL;
                                    xinitial: CARDINAL;
                                    yInitial: CARDINAL;
                                   END;
                        END;

PROCEDURE Initmouse (type: INTEGER; VAR param: PARAM; vec: PROC);
(*----------------------------------------------------------------------*)

PROCEDURE Physbase (): ADDRESS;
(*----------------------------------------------------------------------*)

PROCEDURE Logbase (): ADDRESS;
(*----------------------------------------------------------------------*)

PROCEDURE Getrez (): INTEGER;
(*----------------------------------------------------------------------*)

PROCEDURE Setscreen (logLoc, physLoc: ADDRESS; rez: INTEGER);
(*----------------------------------------------------------------------*)

TYPE    Palette =       ARRAY [0..15] OF CARDINAL;

PROCEDURE Setpalette (VAR palette: ARRAY OF WORD);
(*----------------------------------------------------------------------*)

PROCEDURE Setcolor (colourNum, colour: CARDINAL): CARDINAL;
(*----------------------------------------------------------------------*)

PROCEDURE Floprd (buf: ADDRESS; drv, sec, trck, side, count: INTEGER): INTEGER;
(*----------------------------------------------------------------------*)

PROCEDURE Flopwr (buf: ADDRESS; drv, sec, trck, side, count: INTEGER): INTEGER;
(*----------------------------------------------------------------------*)

PROCEDURE Flopfmt (buf: ADDRESS; drv, spt, trck, side, il, virg: INTEGER): INTEGER;
(*----------------------------------------------------------------------*)

PROCEDURE Midiws (VAR string: ARRAY OF BYTE; len: CARDINAL);
(*----------------------------------------------------------------------*)

PROCEDURE Mfpint (intNo: CARDINAL; vector: PROC);
(*----------------------------------------------------------------------*)

CONST   RS232 =         0;
        IKBD =          1;
        MIDI =          2;

TYPE    PtrIOREC =      POINTER TO IOREC;
        IOREC =         RECORD
                         ibuf:     ADDRESS;     (* pointer to buffer *)
                         ibufsize: CARDINAL;    (* buffer size *)
                         ibufhd:   CARDINAL;    (* head index *)
                         ibuftl:   CARDINAL;    (* tail index *)
                         ibuflow:  CARDINAL;    (* low water mark *)
                         ibufhi:   CARDINAL;    (* high water mark *)
                        END;

PROCEDURE Iorec (dev: INTEGER): PtrIOREC;
(*----------------------------------------------------------------------*)

CONST   Sp19200 =       0;
        Sp9600 =        1;
        Sp4800 =        2;
        Sp3600 =        3;
        Sp2400 =        4;
        Sp2000 =        5;
        Sp1800 =        6;
        Sp1200 =        7;
        Sp600 =         8;
        Sp300 =         9;
        Sp200 =         10;
        Sp150 =         11;
        Sp134 =         12;
        Sp110 =         13;
        Sp75 =          14;
        Sp50 =          15;

CONST   XONXOFF =       MagicSys.Bit0;
        RTSCTS =        MagicSys.Bit1;


PROCEDURE Rsconf (speed: INTEGER; flavor: BITSET;  u, r, t, s: INTEGER): INTEGER;
(*----------------------------------------------------------------------*)

TYPE    Keycode =       POINTER TO ARRAY [0..127] OF CHAR;

TYPE    PtrKEYTAB =     POINTER TO KEYTAB;
        KEYTAB =        RECORD
                         unshift:  Keycode;
                         shift:    Keycode;
                         capslock: Keycode;
                        END;

PROCEDURE Keytbl (VAR unshift, shift, capslock: Keycode): PtrKEYTAB;
(*----------------------------------------------------------------------*)

PROCEDURE Random (): LONGCARD;
(*----------------------------------------------------------------------*)

CONST   SameNumber =    -1;
        NewNumber =     01000000H;

CONST   SameType =      -1;
        SS180 =         0;
        DS360 =         1;
        SS360 =         2;
        DS720 =         3;

CONST   NoExecute =     0;
        Execute =       1;

PROCEDURE Protobt (buf: ADDRESS; num: LONGINT; typ, exec: INTEGER);
(*----------------------------------------------------------------------*)

PROCEDURE Flopver (buf: ADDRESS; drv, sec, trck, side, count: INTEGER): INTEGER;
(*----------------------------------------------------------------------*)

PROCEDURE Scrdmp;
(*----------------------------------------------------------------------*)

CONST   CURSHIDE =      0;
        CURSSHOW =      1;
        CURSBLINK =     2;
        CURSNOBLINK =   3;
        CURSSETRATE =   4;
        CURSGETRATE =   5;

PROCEDURE Cursconf (function, operand: INTEGER): INTEGER;
(*----------------------------------------------------------------------*)

PROCEDURE Settime (datetime: LONGCARD);
(*----------------------------------------------------------------------*)

PROCEDURE Gettime (): LONGCARD;
(*----------------------------------------------------------------------*)

PROCEDURE Bioskeys;
(*----------------------------------------------------------------------*)

PROCEDURE Ikbdws (VAR str: ARRAY OF BYTE; len: CARDINAL);
(*----------------------------------------------------------------------*)

PROCEDURE Jdisint (intNo: CARDINAL);
(*----------------------------------------------------------------------*)

PROCEDURE Jenabint (intNo: CARDINAL);
(*----------------------------------------------------------------------*)

PROCEDURE Giaccess (regno: CARDINAL; data: BYTE): CARDINAL;
(*----------------------------------------------------------------------*)

PROCEDURE Offgibit (bitno: CARDINAL);
(*----------------------------------------------------------------------*)

PROCEDURE Ongibit (bitno: CARDINAL);
(*----------------------------------------------------------------------*)

CONST   TimerA =  0;
        TimerB =  1;
        TimerC =  2;
        TimerD =  3;

PROCEDURE Xbtimer (timer, control, data: CARDINAL; vec: PROC);
(*----------------------------------------------------------------------*)

PROCEDURE Dosound (VAR data: ARRAY OF BYTE);
(*----------------------------------------------------------------------*)

CONST   DaisyWheel =    MagicSys.Bit0;
        Monochrome =    MagicSys.Bit1;
        EpsonPrinter =  MagicSys.Bit2;
        Final =         MagicSys.Bit3;
        RS232Port =     MagicSys.Bit4;
        SingleSheet =   MagicSys.Bit5;

PROCEDURE Setprt (config: BITSET): BITSET;
(*----------------------------------------------------------------------*)


TYPE    PtrKBVECS =     POINTER TO KBVECS;
        KBVECS =        RECORD
                         midivec:  ADDRESS;     (* MIDI input *)
                         vkbderr:  ADDRESS;     (* keyboard error *)
                         vmidierr: ADDRESS;     (* MIDI error *)
                         statvec:  ADDRESS;     (* ikdb status packet *)
                         mousevec: ADDRESS;     (* mouse packet *)
                         clockvec: ADDRESS;     (* clock packet *)
                         joyvec:   ADDRESS;     (* joystick packet *)
                         midisys:  ADDRESS;
                         ikbdsys:  ADDRESS;
                        END;

PROCEDURE Kbdvbase(): PtrKBVECS;
(*----------------------------------------------------------------------*)

PROCEDURE Kbrate (initial, repeat: INTEGER): CARDINAL;
(*----------------------------------------------------------------------*)

TYPE    PtrPBDEF =      POINTER TO PBDEF;
        PBDEF =         RECORD
                         pbScrptr:      ADDRESS;
                         pbOffset:      INTEGER;
                         pbWidth:       INTEGER;
                         pbHeight:      INTEGER;
                         pbLeft:        INTEGER;
                         pbRight:       INTEGER;
                         pbScrez:       INTEGER;
                         pbPrrez:       INTEGER;
                         pbColptr:      ADDRESS;
                         pbPrttype:     LONGCARD;
                         pbPrport:      INTEGER;
                         pbMask:        INTEGER;
                        END;

PROCEDURE Prtblk (block: PtrPBDEF);
(*----------------------------------------------------------------------*)

PROCEDURE Vsync;
(*----------------------------------------------------------------------*)

PROCEDURE Supexec (code: ADDRESS);
(*----------------------------------------------------------------------*)

PROCEDURE Puntaes;
(*----------------------------------------------------------------------*)

PROCEDURE Blitmode (flag: INTEGER): BITSET;
(*----------------------------------------------------------------------*)

END MagicXBIOS.

