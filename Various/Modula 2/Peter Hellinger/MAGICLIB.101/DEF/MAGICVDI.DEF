(*######################################################################

  MAGIC         Modula's  All purpose  GEM  Interface  Cadre
                ˇ         ˇ            ˇ    ˇ          ˇ
########################################################################

  VDI           Virtual Device Interface        Interface for Modula-2

########################################################################
  V1.01  18.06.90  Peter Hellinger      Konstanten ergÑnzt
  V1.00  (C) by    Peter Hellinger
######################################################################*)

DEFINITION MODULE MagicVDI;

FROM SYSTEM  IMPORT  ADDRESS, WORD, BYTE;
IMPORT MagicSys;

(*-- VDI-Parameter ---------------------------------------------------*)

TYPE    tWorkIn =        ARRAY [0..10]  OF INTEGER;
        tWorkOut =       ARRAY [0..57]  OF INTEGER;
        tPxyArray =      ARRAY [0..3]   OF INTEGER;
        tBigPxyArray =   ARRAY [0..7]   OF INTEGER;
        tMouseArray =    ARRAY [0..38]  OF INTEGER;
        tSmallArray =    ARRAY [0..1]   OF INTEGER;
        tRGBArray =      ARRAY [0..2]   OF INTEGER;
        tTextAttrArray = ARRAY [0..9]   OF INTEGER;
        tFontName =      ARRAY [0..31]  OF CHAR;
        tDistanceArray = ARRAY [0..4]   OF INTEGER;
        tFilmName =      ARRAY [0..124] OF CHAR;
        tFilmIndex =     ARRAY [0..7],[0..1] OF INTEGER;
        tCtrlArray =     ARRAY [0..127] OF INTEGER;

VAR     VDIControl:     ARRAY [0..11] OF INTEGER;
        VDIIntIn:       tCtrlArray;
        VDIPtsIn:       tCtrlArray;
        VDIIntOut:      tCtrlArray;
        VDIPtsOut:      tCtrlArray;

VAR     VDIPB:          RECORD
                         control: POINTER TO ARRAY [0..11] OF INTEGER;
                         intin:   POINTER TO tCtrlArray;
                         ptsin:   POINTER TO tCtrlArray;
                         intout:  POINTER TO tCtrlArray;
                         ptsout:  POINTER TO tCtrlArray;
                        END;

PROCEDURE VDICall (c0, c1, c3, c5, c6: INTEGER);
(*--------------------------------------------------------------------*)

PROCEDURE GDos(): BOOLEAN;
(*--------------------------------------------------------------------*)


(*-- VDI-Attrib ------------------------------------------------------*)


CONST   REPLACE =               1;      (* Schreibmodi *)
        TRANSPARENT =           2;
        XOR =                   3;
        REVTRANSPARENT =        4;

PROCEDURE SetWritemode (handle, mode: INTEGER): INTEGER;
(*--------------------------------------------------------------------*)

PROCEDURE SetColor (handle, index: INTEGER; VAR rgb: ARRAY OF WORD);
(*--------------------------------------------------------------------*)


CONST   Line =          1;      (* Linienstil *)
        LongDash =      2;
        Dot =           3;
        DashDot =       4;
        Dash =          5;
        DashDotDot =    6;
        User =          7;

PROCEDURE SetLinetype (handle, type: INTEGER): INTEGER;
(*--------------------------------------------------------------------*)

PROCEDURE SetUserlinestyle (handle: INTEGER; style: WORD);
(*--------------------------------------------------------------------*)

PROCEDURE SetLinewidth (handle, width: INTEGER): INTEGER;
(*--------------------------------------------------------------------*)

PROCEDURE SetLinecolor (handle, color: INTEGER): INTEGER;
(*--------------------------------------------------------------------*)

CONST   Cornerd =       0;      (* Linien-Endtypen *)
        Arrow =         1;
        Rounded =       2;

PROCEDURE SetLineEndstyles (handle, begin, end: INTEGER);
(*--------------------------------------------------------------------*)

CONST   Point =         1;      (* Markertypen *)
        Plus =          2;
        Star =          3;
        Square =        4;
        Cross =         5;
        Diamond =       6;

PROCEDURE SetMarkertype (handle, type: INTEGER): INTEGER;
(*--------------------------------------------------------------------*)

PROCEDURE SetMarkerheight (handle, height: INTEGER): INTEGER;
(*--------------------------------------------------------------------*)

PROCEDURE SetMarkercolor (handle, index: INTEGER): INTEGER;
(*--------------------------------------------------------------------*)

PROCEDURE SetCharheight (handle, h: INTEGER; VAR ch, cw, bh, bw: INTEGER);
(*--------------------------------------------------------------------*)

PROCEDURE SetCharpoints (handle, h: INTEGER; VAR ch, cw, bh, bw: INTEGER): INTEGER;
(*--------------------------------------------------------------------*)

PROCEDURE SetCharbaseline (handle, angle: INTEGER): INTEGER;
(*--------------------------------------------------------------------*)

PROCEDURE SetTextface (handle, font: INTEGER): INTEGER;
(*--------------------------------------------------------------------*)

PROCEDURE SetTextcolor (handle, index: INTEGER): INTEGER;
(*--------------------------------------------------------------------*)

CONST   Fat =           MagicSys.Bit0;      (* Text-Effekte *)
        Light =         MagicSys.Bit1;
        Italic =        MagicSys.Bit2;
        Underline =     MagicSys.Bit3;
        Outline =       MagicSys.Bit4;
        Shadowed =      MagicSys.Bit5;

PROCEDURE SetTexteffect (handle: INTEGER; effect: BITSET): BITSET;
(*--------------------------------------------------------------------*)

CONST   LeftJust =      0;
        Centerd =       1;
        RightJust =     2;

CONST   BaseJust =      0;
        HalfJust =      1;
        AscentJust =    2;
        BottomJust =    3;
        DescentJust =   4;
        TopJust =       5;

PROCEDURE SetTextalignment (handle, hin, vin: INTEGER; VAR hout, vout: INTEGER);
(*--------------------------------------------------------------------*)

CONST   None =          0;      (* FÅlltypen *)
        Full =          1;
        Pattern =       2;
        Hatch =         3;
        UserFill =      4;

PROCEDURE SetFillinterior (handle: INTEGER; index: INTEGER): INTEGER;
(*--------------------------------------------------------------------*)

PROCEDURE SetFillstyle (handle, style: INTEGER): INTEGER;
(*--------------------------------------------------------------------*)

PROCEDURE SetFillcolor (handle, index: INTEGER): INTEGER;
(*--------------------------------------------------------------------*)

PROCEDURE SetFillperimeter (handle: INTEGER; border: BOOLEAN): BOOLEAN;
(*--------------------------------------------------------------------*)

PROCEDURE SetUserfillpattern (handle: INTEGER; VAR pat: ARRAY OF WORD);
(*--------------------------------------------------------------------*)



(*-- VDI-Control -----------------------------------------------------*)

PROCEDURE OpenWorkstation (VAR in: ARRAY OF WORD; VAR handle: INTEGER;
                           VAR out: ARRAY OF WORD);
(*--------------------------------------------------------------------*)

PROCEDURE CloseWorkstation  (handle: INTEGER);
(*--------------------------------------------------------------------*)

PROCEDURE OpenVirtual (VAR in: ARRAY OF WORD;  VAR handle: INTEGER;
                       VAR out: ARRAY OF WORD);
(*--------------------------------------------------------------------*)

PROCEDURE CloseVirtual (handle: INTEGER);
(*--------------------------------------------------------------------*)

PROCEDURE ClearWorkstation (handle: INTEGER);
(*--------------------------------------------------------------------*)

PROCEDURE UpdateWorkstation (handle: INTEGER);
(*--------------------------------------------------------------------*)

PROCEDURE LoadFonts (handle, select: INTEGER): INTEGER;
(*--------------------------------------------------------------------*)

PROCEDURE UnloadFonts (handle, select: INTEGER);
(*--------------------------------------------------------------------*)

PROCEDURE SetClipping (handle: INTEGER; VAR rect: ARRAY OF WORD; do: BOOLEAN);
(*--------------------------------------------------------------------*)


(*-- VDI-Escape ------------------------------------------------------*)


PROCEDURE GetCharcells (handle: INTEGER; VAR rows, colums: INTEGER);
(*--------------------------------------------------------------------*)

PROCEDURE ExitAlphamode (handle: INTEGER);
(*--------------------------------------------------------------------*)

PROCEDURE EnterAlphamode (handle: INTEGER);
(*--------------------------------------------------------------------*)

PROCEDURE AlphacursorUp (handle: INTEGER);
(*--------------------------------------------------------------------*)

PROCEDURE AlphacursorDown (handle: INTEGER);
(*--------------------------------------------------------------------*)

PROCEDURE AlphacursorRight (handle : INTEGER);
(*--------------------------------------------------------------------*)

PROCEDURE AlphacursorLeft (handle: INTEGER);
(*--------------------------------------------------------------------*)

PROCEDURE HomeAlphacursor (handle: INTEGER);
(*--------------------------------------------------------------------*)

PROCEDURE EraseEOS (handle: INTEGER);
(* EOS = End of screen *)
(*--------------------------------------------------------------------*)

PROCEDURE EraseEOL (handle: INTEGER);
(* EOL = End of line *)
(*--------------------------------------------------------------------*)

PROCEDURE AlphacursorAddress (handle, row, column: INTEGER);
(*--------------------------------------------------------------------*)

PROCEDURE CursorText (handle: INTEGER; string: ARRAY OF CHAR);
(*--------------------------------------------------------------------*)

PROCEDURE ReverseVideoOn (handle: INTEGER);
(*--------------------------------------------------------------------*)

PROCEDURE ReverseVideoOff (handle: INTEGER);
(*--------------------------------------------------------------------*)

PROCEDURE InqCursoraddress (handle: INTEGER; VAR row, column: INTEGER);
(*--------------------------------------------------------------------*)

PROCEDURE InqTabletstatus (handle: INTEGER): INTEGER;
(*--------------------------------------------------------------------*)

PROCEDURE Hardcopy (handle: INTEGER);
(*--------------------------------------------------------------------*)

PROCEDURE DisplayCursor (handle, x, y: INTEGER);
(*--------------------------------------------------------------------*)

PROCEDURE RemoveCursor (handle: INTEGER);
(*--------------------------------------------------------------------*)

PROCEDURE FormAdvance (handle: INTEGER);
(*--------------------------------------------------------------------*)

PROCEDURE OutputWindow (handle: INTEGER; VAR pxy: ARRAY OF WORD);
(*--------------------------------------------------------------------*)

PROCEDURE ClearDisplaylist (handle: INTEGER);
(*--------------------------------------------------------------------*)

PROCEDURE OutputBitimagefile (handle: INTEGER; fileName: ARRAY OF CHAR;
                              aspect, scaling, numPts: INTEGER;
                              VAR pxy: ARRAY OF WORD);
(*--------------------------------------------------------------------*)

PROCEDURE GetPrinterscan(handle: INTEGER; VAR gSlice, gPage, size, page, div: INTEGER);
(*--------------------------------------------------------------------*)

PROCEDURE PrintText (handle: INTEGER; string: ARRAY OF CHAR);
(*--------------------------------------------------------------------*)

PROCEDURE SelectPalette (handle, palette: INTEGER): INTEGER;
(*--------------------------------------------------------------------*)

PROCEDURE GenerateTone (handle, freq, time: INTEGER);
(*--------------------------------------------------------------------*)

PROCEDURE ToneMultiflag (handle, action: INTEGER);
(*--------------------------------------------------------------------*)

PROCEDURE SetTabletaxisInch (handle, xres, yres: INTEGER;
                             VAR xset, yset: INTEGER);
(*--------------------------------------------------------------------*)

PROCEDURE SetTabletaxisLine (handle, xres, yres: INTEGER;
                             VAR xset, yset: INTEGER);
(*--------------------------------------------------------------------*)

PROCEDURE SetTabletorigin (handle, x, y: INTEGER);
(*--------------------------------------------------------------------*)

PROCEDURE GetTabletorigin (handle: INTEGER; VAR x, y: INTEGER);
(*--------------------------------------------------------------------*)

PROCEDURE SetTabletalignment (handle, x, y: INTEGER);
(*--------------------------------------------------------------------*)

PROCEDURE SetFilmtype (handle, index, light: INTEGER);
(*--------------------------------------------------------------------*)

PROCEDURE GetFilmname (handle: INTEGER; VAR filmName: ARRAY OF CHAR);
(*--------------------------------------------------------------------*)

PROCEDURE SetFilmexposure (handle, state: INTEGER);
(*--------------------------------------------------------------------*)

PROCEDURE UpdateMetafile (handle, minX, minY, maxX, maxY: INTEGER);
(*--------------------------------------------------------------------*)

PROCEDURE WriteMetafile (handle, numIntin: INTEGER;  VAR intIn: ARRAY OF WORD;
                         numPtsin: INTEGER;  VAR ptsIn: ARRAY OF WORD);
(*--------------------------------------------------------------------*)

PROCEDURE PhysicalPagesize (handle, width, height: INTEGER);
(*--------------------------------------------------------------------*)

PROCEDURE CoordinateWindow (handle, llx, lly, urx, ury: INTEGER);
(*--------------------------------------------------------------------*)

PROCEDURE ChangeVdiFilename (handle: INTEGER; fileName: ARRAY OF CHAR);
(*--------------------------------------------------------------------*)

PROCEDURE SetLineoffset (handle, offset: INTEGER);
(*--------------------------------------------------------------------*)

PROCEDURE InitSystemfont (handle: INTEGER; VAR header: ARRAY OF WORD);
(*--------------------------------------------------------------------*)


(*-- VDI-Input -------------------------------------------------------*)

CONST   Mouse =         1;      (* Device-Typen *)
        Cursor =        2;
        FKey =          3;
        Keyboard =      4;

CONST   Request =       1;      (* Input-Modus *)
        Sample =        2;


PROCEDURE SetInputmode (handle, device, mode: INTEGER): INTEGER;
(*--------------------------------------------------------------------*)

PROCEDURE InputLocatorRQ (handle, x, y: INTEGER; VAR xo, yo: INTEGER;
                          VAR term: CHAR);
(*--------------------------------------------------------------------*)

PROCEDURE InputLocatorSM (handle, x, y: INTEGER; VAR xo, yo: INTEGER;
                          VAR term: CHAR): BITSET;
(*--------------------------------------------------------------------*)

PROCEDURE InputValuatorRQ (handle, in: INTEGER; VAR out: INTEGER; VAR term: CHAR);
(*--------------------------------------------------------------------*)

PROCEDURE InputValuatorSM (handle, in: INTEGER; VAR out: INTEGER;
                           VAR term: CHAR): BITSET;
(*--------------------------------------------------------------------*)

PROCEDURE InputChoiceRQ (handle, in: INTEGER; VAR out: INTEGER);
(*--------------------------------------------------------------------*)

PROCEDURE InputChoiceSM (handle: INTEGER; VAR choice: INTEGER ): INTEGER;
(*--------------------------------------------------------------------*)

PROCEDURE InputStringRQ (handle, len: INTEGER; echo: BOOLEAN;
                         VAR xy: ARRAY OF WORD;
                         VAR string: ARRAY OF CHAR);
(*--------------------------------------------------------------------*)

PROCEDURE InputStringSM (handle, len: INTEGER; echo: BOOLEAN;
                         VAR xy: ARRAY OF WORD;
                         VAR string: ARRAY OF CHAR): INTEGER;
(*--------------------------------------------------------------------*)

PROCEDURE SetMouseform (handle: INTEGER; VAR form: ARRAY OF WORD);
(*--------------------------------------------------------------------*)

PROCEDURE ShowCursor (handle: INTEGER; reset: BOOLEAN);
(*--------------------------------------------------------------------*)

PROCEDURE HideCursor (handle: INTEGER);
(*--------------------------------------------------------------------*)

PROCEDURE SampleMouse (handle: INTEGER; VAR stat: BITSET; VAR x, y: INTEGER);
(*--------------------------------------------------------------------*)

PROCEDURE ExTimerVector (handle: INTEGER; new: ADDRESS; VAR intervall: INTEGER): ADDRESS;
(*--------------------------------------------------------------------*)

PROCEDURE ExButtonVector (handle: INTEGER; new: ADDRESS): ADDRESS;
(*--------------------------------------------------------------------*)

PROCEDURE ExMovementVector (handle: INTEGER; new: ADDRESS): ADDRESS;
(*--------------------------------------------------------------------*)

PROCEDURE ExCursorVector (handle: INTEGER; new: ADDRESS): ADDRESS;
(*--------------------------------------------------------------------*)

CONST   KRSHIFT =       MagicSys.Bit0;   (* Tastatur-Status *)
        KLSHIFT =       MagicSys.Bit1;
        KCTRL =         MagicSys.Bit2;
        KALT =          MagicSys.Bit3;
        KCAPS =         MagicSys.Bit4;   (* FÅr VDI undokumentiert *)

PROCEDURE SampleKeyboard (handle: INTEGER; VAR status: BITSET);
(*--------------------------------------------------------------------*)


(*-- VDI-Inquire -----------------------------------------------------*)

CONST   Workstation =   0;
        Extended =      1;


PROCEDURE ExtendedInquire (handle, wich: INTEGER; VAR out: ARRAY OF WORD);
(*--------------------------------------------------------------------*)

PROCEDURE InquireColor (handle, color: INTEGER; set: BOOLEAN; VAR rgb: ARRAY OF WORD);
(*--------------------------------------------------------------------*)

PROCEDURE InquireLine (handle: INTEGER; VAR attrib: ARRAY OF WORD);
(*--------------------------------------------------------------------*)

PROCEDURE InquireMarker (handle: INTEGER; VAR attrib: ARRAY OF WORD);
(*--------------------------------------------------------------------*)

PROCEDURE InquireFill (handle: INTEGER; VAR attrib: ARRAY OF WORD);
(*--------------------------------------------------------------------*)

PROCEDURE InquireText (handle: INTEGER; VAR attrib: ARRAY OF WORD);
(*--------------------------------------------------------------------*)

PROCEDURE InquireTextextent (handle: INTEGER; string: ARRAY OF CHAR;
                             VAR extent: ARRAY OF WORD);
(*--------------------------------------------------------------------*)

PROCEDURE InquireCharwidth (handle: INTEGER; ch: CHAR;
                            VAR width, left, right: INTEGER): INTEGER;
(*--------------------------------------------------------------------*)

PROCEDURE InquireFacename (handle, element: INTEGER;
                           VAR name: ARRAY OF CHAR): INTEGER;
(*--------------------------------------------------------------------*)

PROCEDURE InquireCellarray (handle: INTEGER; VAR pxy: ARRAY OF WORD;
                            len, rows: INTEGER;
                            VAR elUsed, rowsUsed, status: INTEGER;
                            VAR colArray: ARRAY OF WORD);
(*--------------------------------------------------------------------*)

PROCEDURE InquireInputmode (handle, device: INTEGER): INTEGER;
(*--------------------------------------------------------------------*)

PROCEDURE InquireFaceinfo (handle : INTEGER;
                           VAR minADE, maxADE, maxWidth: INTEGER;
                           VAR dist, effects: ARRAY OF WORD);
(*--------------------------------------------------------------------*)



(*-- VDI-Output ------------------------------------------------------*)

PROCEDURE Polyline (handle, count: INTEGER; VAR pxy: ARRAY OF WORD);
(*--------------------------------------------------------------------*)

PROCEDURE Polymarker (handle, count: INTEGER; VAR pxy: ARRAY OF WORD);
(*--------------------------------------------------------------------*)

PROCEDURE Text (handle, x, y: INTEGER; string: ARRAY OF CHAR);
(*--------------------------------------------------------------------*)

PROCEDURE FilledArea (handle, count: INTEGER; VAR pxy: ARRAY OF WORD);
(*--------------------------------------------------------------------*)

PROCEDURE CellArray (handle, len, used, rows, mode: INTEGER;
                     VAR pxy, color: ARRAY OF WORD);
(*--------------------------------------------------------------------*)

PROCEDURE ContourFill (handle, x, y, index: INTEGER);
(*--------------------------------------------------------------------*)

PROCEDURE FillRectangle (handle: INTEGER; VAR pxy: ARRAY OF WORD);
(*--------------------------------------------------------------------*)

PROCEDURE Bar (handle: INTEGER; VAR pxy: ARRAY OF WORD);
(*--------------------------------------------------------------------*)

PROCEDURE Arc (handle, x, y, rad, beg, end: INTEGER);
(*--------------------------------------------------------------------*)

PROCEDURE Pie (handle, x, y, rad, beg, end: INTEGER);
(*--------------------------------------------------------------------*)

PROCEDURE Circle (handle, x, y, rad: INTEGER);
(*--------------------------------------------------------------------*)

PROCEDURE Ellipse (handle, x, y, xrad, yrad: INTEGER);
(*--------------------------------------------------------------------*)

PROCEDURE EllipticalArc (handle, x, y, xrad, yrad, beg, end: INTEGER);
(*--------------------------------------------------------------------*)

PROCEDURE EllipticalPie (handle, x, y, xrad, yrad, beg, end: INTEGER);
(*--------------------------------------------------------------------*)

PROCEDURE RoundedRectangle (handle: INTEGER; VAR pxy: ARRAY OF WORD);
(*--------------------------------------------------------------------*)

PROCEDURE FilledRoundedRectangle (handle: INTEGER; VAR pxy: ARRAY OF WORD);
(*--------------------------------------------------------------------*)

PROCEDURE JustifiedText (handle, x, y, len, wspace, cspace: INTEGER;
                         string: ARRAY OF CHAR);
(*--------------------------------------------------------------------*)


(*-- VDI-Raster ------------------------------------------------------*)

TYPE MFDB =     RECORD
                 fdAddr:    ADDRESS;
                 fdW:       INTEGER;
                 fdH:       INTEGER;
                 fdWdwidth: INTEGER;
                 fdStand:   INTEGER;
                 fdNplanes: INTEGER;
                 fdR1:      INTEGER;
                 fdR2:      INTEGER;
                 fdR3:      INTEGER;
                END;

PROCEDURE CopyRasterOpaque (handle, mode: INTEGER;
                            VAR pxy, srcMFDB, destMFDB: ARRAY OF WORD);
(*--------------------------------------------------------------------*)

PROCEDURE CopyRasterTransparent (handle, mode, cSet, cNotset: INTEGER;
                                 VAR pxy, srcMFDB, destMFDB: ARRAY OF WORD);
(*--------------------------------------------------------------------*)

PROCEDURE TransformForm (handle: INTEGER; VAR srcMFDB, destMFDB: ARRAY OF WORD);
(*--------------------------------------------------------------------*)

PROCEDURE GetPixel (handle, x, y: INTEGER; VAR index: INTEGER): BOOLEAN;
(*--------------------------------------------------------------------*)


END MagicVDI.

