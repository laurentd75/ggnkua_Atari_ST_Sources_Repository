(*######################################################################

  MAGIC         Modula's  All purpose  GEM  Interface  Cadre
                ÿ         ÿ            ÿ    ÿ          ÿ
########################################################################

  BIOS          Basic Input Output System       Interface for Modula-2

########################################################################
  V1.0  (C) by Peter Hellinger
######################################################################*)

DEFINITION MODULE MagicBIOS;

FROM SYSTEM     IMPORT BYTE, WORD, ADDRESS;
IMPORT MagicSys;

TYPE    PtrPD =         POINTER TO PD;
        PD =            RECORD
                         pLowtpa:       ADDRESS;
                         pHitpa:        ADDRESS;
                         pTbase:        ADDRESS;
                         pTlen:         LONGCARD;
                         pDbase:        ADDRESS;
                         pDlen:         LONGCARD;
                         pBbase:        ADDRESS;
                         pBlen:         LONGCARD;
                         pDta:          ADDRESS;
                         pParent:       PtrPD;
                         res1:          ADDRESS;
                         pEnv:          ADDRESS;
                         devx:          ARRAY [0..5] OF BYTE;
                         res2:          BYTE;
                         defdrv:        BYTE;
                         pUndef:        ARRAY [0..17] OF BYTE;
                         pCmdlin:       ARRAY [0..126] OF CHAR;
                        END;


TYPE    PtrMD =         POINTER TO MD;
        MD =            RECORD
                         mLink:   PtrMD;
                         mStart:  ADDRESS;
                         mLength: LONGCARD;
                         mOwn:    PtrPD;
                        END;


TYPE    PtrMPB =        POINTER TO MPB;
        MPB =           RECORD                  (* memory parameter block *)
                         mpMfl:   PtrMD;        (* memory free list *)
                         mpMal:   PtrMD;        (* memory allocated list *)
                         moRover: PtrMD;        (* roving pointer *)
                        END;

PROCEDURE Getmpb (VAR mpb: PtrMPB);
(*----------------------------------------------------------------------*)

CONST   PRT =           0;
        AUX =           1;
        CON =           2;
        MIDI =          3;
        IKBD =          4;
        RAWCON =        5;


PROCEDURE Bconstat (device: INTEGER): BOOLEAN;
(*----------------------------------------------------------------------*)

PROCEDURE Bconin (device: INTEGER): LONGCARD;
(*----------------------------------------------------------------------*)

PROCEDURE Bconout (device: INTEGER; c: CHAR);
(*----------------------------------------------------------------------*)

CONST   DrvA =           0;
        DrvB =           1;
        DrvC =           2;
        DrvD =           3;
        DrvE =           4;
        DrvF =           5;
        DrvG =           6;
        DrvH =           7;
        DrvI =           8;
        DrvJ =           9;
        DrvK =          10;
        DrvL =          11;
        DrvM =          12;
        DrvN =          13;
        DrvO =          14;
        DrvP =          15;

CONST   Read =          0;
        Write =         1;
        ReadNoMC =      2;
        WriteNoMC =     3;

PROCEDURE Rwabs (rw: INTEGER; buf: ADDRESS; count, recno, dev: INTEGER): LONGINT;
(*----------------------------------------------------------------------*)

PROCEDURE Setexc (vecnum: INTEGER; vec: ADDRESS): ADDRESS;
(*----------------------------------------------------------------------*)

PROCEDURE Tickcal (): LONGCARD;
(*----------------------------------------------------------------------*)

TYPE    PtrBPB =        POINTER TO BPB;
        BPB =           RECORD
                         recsiz: CARDINAL;
                         clsiz:  CARDINAL;
                         clsizb: CARDINAL;
                         rdlen:  CARDINAL;
                         fsiz:   CARDINAL;
                         fatrec: CARDINAL;
                         datrec: CARDINAL;
                         numcl:  CARDINAL;
                         bflags: CARDINAL;
                        END;


PROCEDURE Getbpb (drive: INTEGER): PtrBPB;
(*----------------------------------------------------------------------*)

PROCEDURE Bcostat (device: INTEGER): BOOLEAN;
(*----------------------------------------------------------------------*)

PROCEDURE Mediach (dev: INTEGER): INTEGER;
(*----------------------------------------------------------------------*)

PROCEDURE Drvmap (): LONGCARD;
(*----------------------------------------------------------------------*)

CONST   KRSHIFT =       MagicSys.Bit0;   (* Tastatur-Status *)
        KLSHIFT =       MagicSys.Bit1;
        KCTRL =         MagicSys.Bit2;
        KALT =          MagicSys.Bit3;
        KCAPS =         MagicSys.Bit4;
        KRMOUSE =       MagicSys.Bit5;
        KLMOUSE =       MagicSys.Bit6;
        KRESERVED =     MagicSys.Bit7;

PROCEDURE Kbshift (keys: BITSET): BITSET;


END MagicBIOS.

