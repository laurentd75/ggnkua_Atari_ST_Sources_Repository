(*######################################################################

  MAGIC         Modula's  All purpose  GEM  Interface  Cadre
                ˇ         ˇ            ˇ    ˇ          ˇ
########################################################################

  DOS           Disk Operating System           Interface for Modula-2

########################################################################
  V1.01  18.06.90  Peter Hellinger   Auf Vorschlag von Thomas Tempelmann
                                     wurden die Pterm-Funktionen abgeÑndert.
  V1.00  (C) by    Peter Hellinger
######################################################################*)

DEFINITION MODULE MagicDOS;

FROM SYSTEM IMPORT ADDRESS, BYTE;
IMPORT MagicSys;

CONST   EOK =             0;
        Error =          -1;
        EDrvNR =         -2;     (* Drive not ready *)
        EUnCmd =         -3;     (* Unknown command *)
        ECRC   =         -4;     (* CRC error *)
        EBadRq =         -5;     (* Bad request *)
        ESeek  =         -6;     (* Seek error *)
        EMedia =         -7;     (* Unknown media *)
        ESecNF =         -8;     (* Sector not found *)
        EPaper =         -9;     (* No paper *)
        EWritF =        -10;     (* Write fault *)
        EReadF =        -11;     (* Read fault *)
        EGenrl =        -12;     (* General error *)
        EWrPro =        -13;     (* Write protect *)
        EChng =         -14;     (* Media change *)
        EUnDev =        -15;     (* Unknown device *)
        EBadSF =        -16;     (* Bad sectors on format *)
        EOther =        -17;     (* Insert other disk *)
        EInvFN =        -32;     (* Invalid function number *)
        EFilNF =        -33;     (* File not found *)
        EPthNF =        -34;     (* Path not found *)
        ENHndl =        -35;     (* No handles left *)
        EAccDn =        -36;     (* Access denied *)
        EIHndl =        -37;     (* Invalid handle *)
        ENSMem =        -39;     (* Insufficient memory *)
        EIMBA =         -40;     (* Invalid memory block address *)
        EDrive =        -46;     (* Invaild drive specified *)
        ENMFil =        -49;     (* No more files *)
        ERange =        -64;     (* Range error *)
        EIntrn =        -65;     (* Internal error *)
        EPLFmt =        -66;     (* Invalid program load format *)
        EGSBF =         -67;     (* Setblock failure due to growth restr *)


PROCEDURE Pterm0;
(*--------------------------------------------------------------------*)

TYPE tChar =    RECORD
                 CASE : CARDINAL OF
                  0:  long:     LONGCARD;|
                  1:  hi:       CARDINAL;
                      lo:       CARDINAL;|
                  2:  kbshift:  CHAR;
                      reserved: CHAR;
                      scan:     CHAR;
                      char:     CHAR;|
                 END;
                END;

(* Zum einfachen "auseinandernehmen" des Longwerts, den Cconin liefert.
 * Um die gÅltigen kbshift-Bits zu bekommen, muû das Bit 3 in der System-
 * variablen conterm gesetzt sein.  Bei Einsatz von MagicAES ist dies
 * immer der Fall.
 *)

PROCEDURE Cconin (): LONGCARD;
(* Die meisten Bindings liefern hier ein CHAR, was einer Unterschlagung
 * gleichkommt.
 *)
(*--------------------------------------------------------------------*)

PROCEDURE Cconout (ch: CHAR);
(*--------------------------------------------------------------------*)

PROCEDURE Cauxin (): CARDINAL;
(* Liefert nach Profibuch tatsÑchlich ein WORD. Wozu das allerdings gut
 * sein soll...
 *)
(*--------------------------------------------------------------------*)

PROCEDURE Cauxout (ch: CHAR);
(*--------------------------------------------------------------------*)

PROCEDURE Cprnout (ch: CHAR);
(*--------------------------------------------------------------------*)

CONST Input = 377C;
(* Eigentlich sollte da CHR (255) stehen, aber LPR und SPC lehnen das ab *)

PROCEDURE Crawio  (ch: CHAR): LONGCARD;
(*--------------------------------------------------------------------*)

PROCEDURE Crawin (): LONGCARD;
(*--------------------------------------------------------------------*)

PROCEDURE Cnecin (): LONGCARD;
(*--------------------------------------------------------------------*)

PROCEDURE Cconws (VAR string: ARRAY OF CHAR);
(*--------------------------------------------------------------------*)

PROCEDURE Cconrs (VAR string: ARRAY OF CHAR);
(*--------------------------------------------------------------------*)

PROCEDURE Cconis (): BOOLEAN;
(*--------------------------------------------------------------------*)

PROCEDURE Dsetdrv (drive: CARDINAL; VAR DriveMap: LONGCARD);
(*--------------------------------------------------------------------*)

PROCEDURE Cconos (): BOOLEAN;
(*--------------------------------------------------------------------*)

PROCEDURE Cprnos (): BOOLEAN;
(*--------------------------------------------------------------------*)

PROCEDURE Cauxis (): BOOLEAN;
(*--------------------------------------------------------------------*)

PROCEDURE Cauxos (): BOOLEAN;
(*--------------------------------------------------------------------*)

PROCEDURE Dgetdrv (): CARDINAL;
(*--------------------------------------------------------------------*)

TYPE    PtrDTA =        POINTER TO DTA;
        DTA =           RECORD
                         dReserved: ARRAY [0..21] OF BYTE;
                         dAttrib:   BYTE;
                         dTime:     CARDINAL;
                         dDate:     CARDINAL;
                         dLength:   LONGCARD;
                         dFname:    ARRAY [0..13] OF CHAR;
                        END;

PROCEDURE Fsetdta (dta: PtrDTA);
(*--------------------------------------------------------------------*)

PROCEDURE Super (VAR stack: ADDRESS);
(*--------------------------------------------------------------------*)

PROCEDURE Tgetdate (): CARDINAL;
(*--------------------------------------------------------------------*)

PROCEDURE Tsetdate (date: CARDINAL);
(*--------------------------------------------------------------------*)

PROCEDURE Tgettime (): CARDINAL;
(*--------------------------------------------------------------------*)

PROCEDURE Tsettime (time: CARDINAL);
(*--------------------------------------------------------------------*)

PROCEDURE Fgetdta (): PtrDTA;
(*--------------------------------------------------------------------*)

PROCEDURE Sversion (): CARDINAL;
(*--------------------------------------------------------------------*)

PROCEDURE Ptermres  (keep: LONGCARD; return: CARDINAL);
(*--------------------------------------------------------------------*)

TYPE    DISKINFO =      RECORD
                         bFree:   LONGCARD;
                         bTotal:  LONGCARD;
                         bSecsiz: LONGCARD;
                         bClsiz:  LONGCARD;
                        END;

PROCEDURE Dfree (VAR dib: DISKINFO; drive: CARDINAL);
(*--------------------------------------------------------------------*)

PROCEDURE Dcreate (VAR pfad: ARRAY OF CHAR): INTEGER;
(*--------------------------------------------------------------------*)

PROCEDURE Ddelete (VAR pfad: ARRAY OF CHAR): INTEGER;
(*--------------------------------------------------------------------*)

PROCEDURE Dsetpath (VAR pfad: ARRAY OF CHAR): INTEGER;
(*--------------------------------------------------------------------*)

CONST   ReadOnly =      MagicSys.Bit0;
        Hidden =        MagicSys.Bit1;
        System =        MagicSys.Bit2;
        Volume =        MagicSys.Bit3;
        Folder =        MagicSys.Bit4;
        Archive =       MagicSys.Bit5;

PROCEDURE Fcreate (VAR name: ARRAY OF CHAR; attr: BITSET): INTEGER;
(* Ordner erzeugen NUR mit Dcreate !!! *)
(*--------------------------------------------------------------------*)

CONST   NamePRN =       'PRN:';
        NameAUX =       'AUX:';
        NameCON =       'CON:';

CONST   Read =          0;      (* Modus *)
        Write =         1;
        ReadWrite =     2;

CONST   StdIn =         0;      (* Keyboard *)
        StdOut =        1;      (* Console *)
        Serial =        2;      (* RS232 *)
        Printer =       3;      (* Centronics *)

PROCEDURE Fopen (VAR name: ARRAY OF CHAR; mode: CARDINAL): INTEGER;
(*--------------------------------------------------------------------*)

PROCEDURE Fclose (handle: INTEGER): INTEGER;
(*--------------------------------------------------------------------*)

PROCEDURE Fread (handle: INTEGER; VAR count: LONGCARD; buffer: ADDRESS);
(*--------------------------------------------------------------------*)

PROCEDURE Fwrite (handle: INTEGER; VAR count: LONGCARD; buffer: ADDRESS);
(*--------------------------------------------------------------------*)

PROCEDURE Fdelete (VAR name: ARRAY OF CHAR): BOOLEAN;
(*--------------------------------------------------------------------*)

CONST   SeekStart =     0;      (* Seekmodus *)
        SeekPos =       1;
        SeekEnd =       2;

PROCEDURE Fseek (offset: LONGINT; handle, mode: INTEGER): LONGCARD;
(*--------------------------------------------------------------------*)

PROCEDURE Fattrib (VAR name: ARRAY OF CHAR; set: BOOLEAN; VAR attr: BITSET);
(*--------------------------------------------------------------------*)

PROCEDURE Fdup (handle: INTEGER): INTEGER;
(*--------------------------------------------------------------------*)

PROCEDURE Fforce (std, nonstd: INTEGER): BOOLEAN;
(*--------------------------------------------------------------------*)

PROCEDURE Dgetpath (VAR pfad: ARRAY OF CHAR; drive: CARDINAL);
(*--------------------------------------------------------------------*)

CONST Minus1 =  0FFFFFFFFH;

PROCEDURE Malloc  (bytes: LONGCARD): ADDRESS;
(*--------------------------------------------------------------------*)

PROCEDURE Mfree (addr: ADDRESS): BOOLEAN;
(*--------------------------------------------------------------------*)

PROCEDURE Mshrink (addr: ADDRESS; newSize: LONGCARD): BOOLEAN;
(*--------------------------------------------------------------------*)

CONST   LoadnGo =       0;
        Load =          3;
        Run =           4;
        NewPD =         5;

PROCEDURE Pexec (mode: CARDINAL; VAR name, tail, env: ARRAY OF CHAR): INTEGER;
(*--------------------------------------------------------------------*)

PROCEDURE Pterm (code: INTEGER);
(*--------------------------------------------------------------------*)

PROCEDURE Fsfirst (VAR name: ARRAY OF CHAR; attr: BITSET): INTEGER;
(*--------------------------------------------------------------------*)

PROCEDURE Fsnext (): INTEGER;
(*--------------------------------------------------------------------*)

PROCEDURE Frename (VAR curr, new: ARRAY OF CHAR): INTEGER;
(*--------------------------------------------------------------------*)

TYPE    DOSTIME =       RECORD
                         time: CARDINAL;
                         date: CARDINAL;
                        END;

PROCEDURE Fdatime (handle: INTEGER; buff: DOSTIME; set: BOOLEAN);
(*--------------------------------------------------------------------*)

END MagicDOS.

