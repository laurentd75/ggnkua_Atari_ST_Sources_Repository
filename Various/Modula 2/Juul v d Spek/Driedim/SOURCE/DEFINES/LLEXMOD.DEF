
DEFINITION MODULE LLexMod;

(*****************************************************)
(*                                                   *)
(*      DRIEDIM SCANNER V2.1                         *)
(*      --------------------                         *)
(*                                                   *)
(*   Author: Juul v/d Spek, Valkenswaard.            *)
(*                                                   *)
(*   please do not alter this text without           *)
(*   author's permission.                            *)
(*                                                   *)
(*****************************************************)
(*                                                   *)
(* This module defines a lexical analyser for        *)
(* program DrieDim; a token type is defined, and     *)
(* routines to read and print elements of this type. *)
(*                                                   *)
(*****************************************************)

FROM String IMPORT Strings;

  TYPE 

       LTokenId=   (* token types *)

                   (* general tokens: *)
                   (LStringTok,    (* string     *)
                    LIntegerTok,   (* integer    *)
                    LRealTok,      (* real       *)
                    LIdenTok,      (* identifier *)
                    LEofTok,       (* endmarker  *)
                    LErrTok,       (* error      *)

                   (* special tokens: *)
                    LDotTok,       (*    .    *)          
                    LCommaTok,     (*    ,    *)          
                    LSemicolTok,   (*    ;    *)
                    LEqualTok,     (*    =    *)

                   (* reserved words: *)
                    LHeapSizeTok,  (*  HEAPSIZE    *)
                    LObjectTok,    (*  OBJECT      *)
                    LObendTok,     (*  OBEND       *)
                    LLineTok,      (*  LINE        *)
                    LLineEndTok,   (*  ENDLINE     *)
                    LPlaneTok,     (*  PLANE       *)
                    LPlaneEndTok,  (*  ENDPLANE    *)
                    LAtTok,        (*  AT          *)
                    LTurnTok,      (*  TURN        *)
                    LTimesTok,     (*  TIMES       *)
                    LInternTok     (*  INTERN      *)
                    );
                           

       LIdenNr    = CARDINAL;


       Str        = RECORD Base, Len: CARDINAL END;  

       LToken     = RECORD         (* attributed lexical token *)
                     CASE Sel: LTokenId OF
                       LStringTok   :  StringVal : Str     |  
                       LIntegerTok  :  IntegerVal: INTEGER |
                       LRealTok     :  RealVal   : REAL    |
                       LIdenTok     :  IdenVal   : LIdenNr |
                       LErrTok      :  ErrVal    : CHAR    
                      ELSE 
                     END
                   END;




  VAR 
    LineNr   : CARDINAL;    (* Current input line number *)
    LexError : BOOLEAN;     (* Boolean to flag errors during reading of
                             * strings and numbers
                             *)

PROCEDURE LMakeReal(VAR t: LToken);
(********************************)
(* Converts integer token to a  *)
(* real token with same value.  *)
(* PRE: t.Sel=LIntegerTok       *)
(********************************)

PROCEDURE LLex(VAR Tok: LToken); 
(********************************)
(* Reads one new token which is *)
(*  placed into Tok.            *)
(********************************)

PROCEDURE LInitWarmLex(s: Strings): BOOLEAN;
(******************************************)
(* This procedure is used to initialise   *)
(*  the lexical analyser with inputfile-  *)
(*  name in s; Returns FALSE iff the file *)
(*  cannot be found.                      *)
(******************************************)

PROCEDURE LPrintToken(t: LToken);
(**************************************)
(* print representation of t          *)
(**************************************)

END LLexMod.



