DEFINITION MODULE Objects;

(*****************************************************)
(*                                                   *)
(*      DRIEDIM OBJECTS V2.1                         *)
(*      --------------------                         *)
(*                                                   *)
(*   Author: Juul v/d Spek, Valkenswaard.            *)
(*                                                   *)
(*   please do not alter this text without           *)
(*   author's permission.                            *)
(*                                                   *)
(*****************************************************)
(*                                                   *)
(* This module defines all kind of objects in which  *)
(* sets of lines and planes can be stored, along with*)
(* routines to deal with them.                       *)
(*                                                   *)
(*****************************************************)

  FROM Vectors    IMPORT Matrix, Point, PointList;

  FROM LLexMod    IMPORT LIdenNr;

  TYPE
    PlotFileResult=  (* result type of procedure PlotFile *)
                     (DiskFull, FileExists, CantOpen, Prima);


    PartKind= (Line, Plane);   (* Different kinds of parts    *)
                               (* objects are always expanded *)

    PartList= POINTER TO partlist;

    Part = RECORD
             CASE Sel: PartKind OF
               Line  : line : PointList     (* Points of line  *)

             | Plane : plane: PointList;    (* Points on plane *)
                       int  : Point         (* Internal point  *)
             END;
            
           END;


    partlist= RECORD
                Head: Part;
                Tail: PartList
              END;


    (* The following functions serve to set up an environment *)
    (* i.e. a function from identifiers to partlists          *)

    Alist= POINTER TO alist;    (* environment type *)

    EnvPair= RECORD
               Name    : LIdenNr;
               Contents: PartList
             END;

    alist= RECORD
             Head: EnvPair;
             Tail: Alist
           END;



    (* (Lists of) line segments: *)

    LineList= POINTER TO linelist;

    LineSeg= RECORD
               p1,p2: Point
             END; 

    linelist= RECORD
                Head: LineSeg;
                Tail: LineList
              END;


    (* (Lists of) plane contours: *)

    PlaneList= POINTER TO planelist;

    plane    = RECORD
                 XMin,YMin,       (* Defines rectangle, containing *)
                 XMax,YMax: REAL; (* the planes' projection.       *)

                 Contour  : LineList
               END;
 
    planelist= RECORD
                 Head     : plane;
                 Tail     : PlaneList
               END;
 
    

  PROCEDURE AddPart(VAR l: PartList; p: Part);
  (*********************************)
  (* Add next part to a Partlist   *)
  (*********************************)

  PROCEDURE NextPart(VAR l: PartList; VAR p: Part): BOOLEAN;
  (*********************************)
  (* When l is not empty:          *)
  (* set p to the head, and l to   *)
  (*  of the original list and     *)
  (*  return TRUE,                 *)
  (* else return false.            *)
  (* Typical use:                  *)
  (* WHILE NextPart(l,p) DO        *)
  (*  S(p) END                     *)
  (*********************************)






  PROCEDURE TrPartList(l      : PartList;
                       Add    : Point; 
                       Prod   : Matrix   ): PartList;
  (*************************************************)
  (* Transforms each part in l, and returns these  *)
  (* points in a REVERSED list (according to l     *)
  (*************************************************)


  PROCEDURE DeAllPartList(VAR l: PartList);
  (**********************)
  (* Deallocates list l *)
  (**********************)


  PROCEDURE AddEnv(VAR l: Alist; i: LIdenNr; p: PartList);
  (*********************************)
  (* Add a new pair to environment *)
  (*********************************)

  PROCEDURE Assoc(Env: Alist; i: LIdenNr): PartList;
  (***********************************)
  (* Get value of i from environment *)
  (***********************************)


  PROCEDURE DeAllPair(VAR l: Alist);
  (*******************************)
  (* Deallocates first pair of l *)
  (* and pops l                  *)
  (*******************************)



  PROCEDURE AddLine(VAR l: LineList; p1,p2: Point);
  (*********************************) 
  (* Add new line segment (p1,p2)  *)
  (* to linelist l                 *)
  (*********************************) 


  PROCEDURE AppendLineList(VAR l1: LineList; l2: LineList);
  (*******************) 
  (* Chains l2 to l1 *)
  (*******************) 


  PROCEDURE CopyLineList(l: LineList): LineList;
  (********************)
  (* make a copy of l *)
  (********************)



  PROCEDURE DeAllLineList(VAR l: LineList);
  (***********************)
  (* deallocate linelist *)
  (***********************)

  PROCEDURE PlotFile(VAR FileName: ARRAY OF CHAR; 
                     dx, dy: INTEGER; 
                     Zoom  : REAL;
                     Proj  : LineList): PlotFileResult;
  (******************************************************)
  (* Generate a textfile of name 'FileName', containing *)
  (* the coordinates of endpoints of all linesegments   *)
  (* in proj. Procedure returns appropriate message     *)
  (******************************************************)


  PROCEDURE PlotProjection(handle, midX, midY: INTEGER;
                           scale: REAL;
                           p: LineList);
  (****************************************)
  (* Plot lines in l to workstation       *)
  (* "handle", with (midX,midY) as origin *)
  (* projection is multiplied by scale    *)
  (****************************************)



  PROCEDURE AddPlane(VAR l: PlaneList; p: LineList);
  (*****************************) 
  (* Add new plane (contour)   *)
  (* to planelist l            *)
  (*****************************) 


  PROCEDURE DeAllPlaneList(VAR l: PlaneList);
  (************************)
  (* deallocate planelist *)
  (************************)


END Objects.
  
