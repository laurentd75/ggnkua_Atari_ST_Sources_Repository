
DEFINITION MODULE Vectors;

(*****************************************************)
(*                                                   *)
(*      VECTORS V2.1                                 *)
(*      ------------                                 *)
(*                                                   *)
(*   Author: Juul v/d Spek, Valkenswaard.            *)
(*                                                   *)
(*   please do not alter this text without           *)
(*   author's permission.                            *)
(*                                                   *)
(*****************************************************)
(*                                                   *)
(* This module defines                               *)
(*   1) 3D vectors, along with several vector        *)
(*      functions (inproduct, rotation, outproduct)  *)
(*   2) Lists of vectors, along with routines to     *)
(*      handle them.                                 *)
(*   3) Some Driedim specific vector functions.      *)
(*                                                   *)
(*****************************************************)


  TYPE

    (* Driedimensional points, and lists of them: *)


    Point  = RECORD
               x1,x2,x3: REAL
             END;


    Matrix = RECORD
               x11,x21,x12,x22,x33: REAL
             END;


    PointList = POINTER TO point;

    point= RECORD
             Head: Point;
             Tail: PointList
           END;


  (*************************************************)

  PROCEDURE NextPoint(VAR l: PointList;
                      VAR p: Point)      : BOOLEAN;
  (********************************)
  (* Tests if l is not empty list *)
  (* If so, then p is set to its  *)
  (* head, and l to its tail      *)
  (* Typical use:                 *)
  (* WHILE NextPoint(l,p) DO      *)
  (*   S(p) END;                  *)
  (********************************)


  PROCEDURE AddPoint (VAR l: PointList;
                          p: Point);
  (********************)
  (* Adds p to list l *)
  (********************)



  PROCEDURE TrPointList(l      : PointList;
                        Add    : Point; 
                        Prod   : Matrix   ): PointList;
  (*************************************************)
  (* Transforms each point in l, and returns these *)
  (* points in a REVERSED list (according to l     *)
  (*************************************************)


  PROCEDURE DeAllPointList(VAR l: PointList);
  (**********************)
  (* Deallocates list l *)
  (**********************)


(****************************************************)



  PROCEDURE ViewDirection(viewdir: Point);
  (***************************)
  (* Sets the view direction *)
  (***************************)


  PROCEDURE Transform(x    : Point;  
                      Add  : Point;  
                      Mult : Matrix; 
                      VAR y: Point); 
  (**********************)
  (* y:=  Add + Mult.x  *)
  (**********************)


  PROCEDURE Visible(x: Point): BOOLEAN;
  (****************************************************)
  (* Is x visible for Observer when looking at Point? *)
  (* See ViewParms.                                   *) 
  (****************************************************)

   
  PROCEDURE Project(x: Point; VAR y: Point);
  (**********************************************)
  (* Project x onto a plane before the observer *)
  (* Result: x1 and x2: Coordinates in plane    *)
  (*         x3       : Distance x to Observer  *)
  (**********************************************)


  PROCEDURE Add(x,y: Point; VAR z: Point);
  (********************************************)
  (* componentwise addition of x and y into z *)
  (********************************************)


  PROCEDURE Subtract(x,y: Point; VAR z: Point);
  (***********************************************)
  (* componentwise subtraction of x and y into z *)
  (***********************************************)


  PROCEDURE EqPoint(x,y: Point): BOOLEAN;
  (********)
  (* x=y? *)
  (********)


  PROCEDURE UitProd(x,y: Point; VAR z: Point);
  (***********************************)
  (* Outer product of x and y into z *)
  (***********************************)

  PROCEDURE InProd(x,y: Point): REAL;
  (********************************)
  (* Returns inproduct of x and y *)
  (********************************)


  PROCEDURE MatMult(M1,M2: Matrix; VAR M: Matrix);
  (********************************)
  (* M:= M1.M2                    *)
  (********************************)


  PROCEDURE MatProd(M: Matrix; x: Point; VAR y: Point);
  (********************************)
  (* y:= M.x                      *)
  (********************************)


  PROCEDURE MoveHoriz(VAR Observer, ObPoint: Point;
                      Step: REAL);
  (*************************************************)
  (* Move Step to the right (according to ViewDir) *)  
  (*************************************************)


  PROCEDURE MoveUp(VAR Observer, ObPoint: Point;
                      Step: REAL);
  (******************************************)
  (* Move Step up    (according to ViewDir) *)  
  (******************************************)


  PROCEDURE MoveFurther(VAR Observer, ObPoint: Point;
                        Step: REAL);
  (**************************)
  (* Move Step into ViewDir *)  
  (**************************)


  PROCEDURE Elevate(VAR Observer, ObPoint: Point;
                    Angle: REAL);
  (*************************)
  (* Look Angle degrees up *)  
  (*************************)

  PROCEDURE Rotate(VAR Observer, ObPoint: Point;
                   Angle: REAL);
  (***********************************)
  (* Look Angle degrees to the right *)  
  (***********************************)

  PROCEDURE LookAt(dx, dy: INTEGER;
                   Zoom  : REAL;
                   VAR Observer, ObPoint: Point);
  (********************************************************)
  (* Set new view direction, such that points with old    *)
  (* projection coordinates (dx, dy) are observed now..   *)
  (********************************************************)

END Vectors.



