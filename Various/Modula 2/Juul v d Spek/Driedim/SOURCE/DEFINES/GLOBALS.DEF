DEFINITION MODULE Globals;

(*****************************************************)
(*                                                   *)
(*      GLOBALS version 2.1                          *)
(*      -------------------                          *)
(*                                                   *)
(*   Author: Juul v/d Spek, Valkenswaard.            *)
(*                                                   *)
(*   please do not alter this text without           *)
(*   author's permission.                            *)
(*                                                   *)
(*****************************************************)
(*                                                   *)
(* This module defines all                           *)
(* global constants, types and variables of          *)
(* main program DRIEDIM (which handles the user      *)
(* interface), along with some procedures.           *)
(* This main program became too big for              *)
(* the compiler, that's why it was divided into      *)
(* four parts: GLOBALS, DDHELP, DRAWPROJ and DRIEDIM *) 
(*                                                   *)
(*****************************************************)

  FROM Objects IMPORT PartList;

  CONST
      (* constants, naming elements of nodes in various resources  *)
      (* in DRIEDIM.RSC, which was constructed using the resource  *)
      (* construction set. The next is the included file DRIEDIM.I *)



      MENU     = 0;     (* TREE *)
      FORM     = 1;     (* TREE *)
      ABOUT    = 2;     (* TREE *)

      ZEROVIEW = 0;     (* STRING *)
      ZEROZOOM = 1;     (* STRING *)
      UNKNFILE = 2;     (* STRING *)
      SYNTXERR = 3;     (* STRING *)
      NOMEMORY = 4;     (* STRING *)
      DISKFULL = 5;     (* STRING *)
      FILEXIST = 6;     (* STRING *)
      CANTOPEN = 7;     (* STRING *)
      READONLY = 8;     (* STRING *)

      OBSX     = 6;     (* OBJECT in TREE #1 *)
      OBSY     = 7;     (* OBJECT in TREE #1 *)
      OBSZ     = 8;     (* OBJECT in TREE #1 *)
      LOOKX    = 9;     (* OBJECT in TREE #1 *)
      LOOKY    = 10;    (* OBJECT in TREE #1 *)
      LOOKZ    = 11;    (* OBJECT in TREE #1 *)
      ZOOM     = 14;    (* OBJECT in TREE #1 *)
      DTRANS   = 15;    (* OBJECT in TREE #1 *)
      FORMOK   = 5;     (* OBJECT in TREE #1 *)
      FORMCAN  = 16;    (* OBJECT in TREE #1 *)

      ABOUTDD  = 10;    (* OBJECT in TREE #0 *)
      VIEWPIC  = 24;    (* OBJECT in TREE #0 *)
      SETPARMS = 25;    (* OBJECT in TREE #0 *)
      RESETFLG = 29;    (* OBJECT in TREE #0 *)
      HLRFLG   = 28;    (* OBJECT in TREE #0 *)
      FULLVIEW = 26;    (* OBJECT in TREE #0 *)
      CROSSFLG = 32;    (* OBJECT in TREE #0 *)
      PRINTSCR = 31;    (* OBJECT in TREE #0 *)
      QUITDD   = 20;    (* OBJECT in TREE #0 *)
      PLOTFILE = 19;    (* OBJECT in TREE #0 *)
      DELPLOTF = 22;    (* OBJECT in TREE #0 *)






  TYPE

    Strng  = ARRAY [0 .. 80] OF CHAR;

    TedInfo=   RECORD  (* See AES Programmers Guide pag 6.5 *)
                 text : POINTER TO Strng;
                 tmpl : POINTER TO Strng;
                 valid: POINTER TO Strng;
                 font : CARDINAL;
                 rsrv1: CARDINAL;
                 just : CARDINAL;
                 color: CARDINAL;
                 rsrv2: CARDINAL;
                 thick: CARDINAL;
                 len  : CARDINAL;
                 tmlen: CARDINAL;
               END;


    Object= RECORD  (* See AES Programmers Guide pag 6.4 *)
              next : CARDINAL;
              head : CARDINAL;
              tail : CARDINAL;
              type : CARDINAL;
              flags: CARDINAL;
              state: CARDINAL;
              spec : POINTER TO TedInfo;
              obx  : CARDINAL;
              oby  : CARDINAL;
              width: CARDINAL;
              depth: CARDINAL;
            END;

    ObArray= (* Pointer to Tree Array;       *)
             (* Number of object in tree x=  *)
             (* index in x's array           *)
             POINTER TO ARRAY [ 0 .. 200 ] OF Object;




  VAR
   (* Handles for Application, workstation and Windows used: *)
    ApId, Window1, Window2, handle: INTEGER;

   (* Identifiers for trees for the menubar, aboutbox *)
   (* and the viewparms form:                         *)
    MenuTree, 
    FormTree,
    AboutTree: ObArray;

   (* Size of work area on desktop: *)
    WDesk, HDesk: INTEGER;

   (* Height of menubar: *)
    HMenuBar  : INTEGER; 

   (* Parts of observed object *)
    Parts  : PartList;



PROCEDURE AllocateStuff(VAR WindTitle: ARRAY OF CHAR): BOOLEAN;
PROCEDURE DeAllocateStuff;
PROCEDURE InitDrieDim(): BOOLEAN;
PROCEDURE ChooseFile(VAR fil: ARRAY OF CHAR): BOOLEAN;
PROCEDURE ShowAlert(Str: INTEGER): INTEGER;

END Globals.

