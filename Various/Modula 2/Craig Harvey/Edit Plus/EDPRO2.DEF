DEFINITION MODULE EdPro2;
FROM EdPlus IMPORT Fseltype;
FROM SYSTEM IMPORT ADDRESS;

PROCEDURE Showmouse; (* show mouse *)
(**
PROCEDURE ShowCursor(Reset: INTEGER); (* show mouse *)
PROCEDURE HideCursor; (* hide mouse *)
**)
PROCEDURE Bconout(ch: CHAR; device: CARDINAL); (* all 256 chars *)
PROCEDURE Bcosstat(device, inout: CARDINAL): BOOLEAN;
 (* output/input device ready?  output = 8, input = 1 *)
PROCEDURE BconinGetBPB(devdrive, opcode: CARDINAL): LONGCARD;
 (* use INTEGER() for conin, ADDRESS() for bpbptr *)
 (* dev: 0=PRN, 1=AUX, 2=CON, 3=MIDI, 4=full 256 char display *)
 (* drive: 0=A:, 1=B: etc. *)
 (* opcode: 7 = GetBPB, 2 = bconin *)
PROCEDURE Kbshift(VAR int: INTEGER); (* which shift/cntl/alt pressed *)
PROCEDURE Lineout(ln, startpos, endpos: CARDINAL);
PROCEDURE Graphictext(Handle, x, y: INTEGER; stradr: ADDRESS;
                      strlen: CARDINAL);
PROCEDURE Conzap(ch: CHAR); (* fast char output to screen *)
PROCEDURE Blit(x,y,w,h, newX,newY: INTEGER);
PROCEDURE SetClipFill(x,y,w,h: INTEGER; setclip: BOOLEAN);
(* set clipxy2 clipping rect or fill/clear xywh area *)
(**
PROCEDURE ClearArea(x,y,w,h: INTEGER);
PROCEDURE Add; (* add char to end of text *)
PROCEDURE Insert;
PROCEDURE Overwrite;
**)
PROCEDURE AddInsert;
PROCEDURE TypeInit; (* for typeahead 3.2 *)
PROCEDURE TypeAhead(ln: CARDINAL);
PROCEDURE Display(displine, enddispline: CARDINAL);
PROCEDURE Redraw(x,y,w,h: INTEGER);
PROCEDURE Scrolldown;
PROCEDURE Scrollup;
PROCEDURE ScrnLeft(shiftcols: CARDINAL);
PROCEDURE ScrnRt(shiftcols: CARDINAL); (* shift only if text exists over there in that line *)
PROCEDURE Rtarrow;
PROCEDURE Leftarrow;
PROCEDURE Downarrow;
PROCEDURE Uparrow;
PROCEDURE Downup;
PROCEDURE DeleteChar;
PROCEDURE Backspace;
PROCEDURE SetSlidePos;
PROCEDURE SetSlideSize;
PROCEDURE SetHSlidePos;
PROCEDURE SetHSlideSize;
PROCEDURE Bottomstay;
(*
PROCEDURE Findend(ln: CARDINAL): CARDINAL;
*)
PROCEDURE Findend(ln: CARDINAL): LONGCARD;
PROCEDURE DeleteLine(ln: CARDINAL);
PROCEDURE DelToEnd(ln: CARDINAL); (* 2.30 1/17/92 *)
PROCEDURE Cutblock(delend: LONGCARD): BOOLEAN; (* delstart is global *)
PROCEDURE Copyblock(delend: LONGCARD): BOOLEAN;
PROCEDURE Copycolblk(firstcol: BOOLEAN): BOOLEAN;
PROCEDURE Pastecolblk(): BOOLEAN;
PROCEDURE Delcolblk(firstcol: BOOLEAN);

PROCEDURE Findxpos(x: INTEGER): CARDINAL;
PROCEDURE Finddispline(y: INTEGER; limit: BOOLEAN): CARDINAL;

PROCEDURE Min(x, y: CARDINAL): CARDINAL;
PROCEDURE Max(x, y: CARDINAL): CARDINAL;
PROCEDURE Findscrn(xpos: CARDINAL); (* sets startcol *)
PROCEDURE CursorDraw; (* toggles cursor on/off *)
PROCEDURE CursorPos(y, x: CARDINAL); (* Assembly cursor positioning *)
PROCEDURE Compare(strg1, strg2: ARRAY OF CHAR): BOOLEAN;
PROCEDURE CheckStart;
PROCEDURE FullAlert;
PROCEDURE WriteErr;
(*
PROCEDURE Findline(index: CARDINAL): CARDINAL;
*)
PROCEDURE Findline(index: LONGCARD): CARDINAL;
(* finds line a given text buffer index is on, e.g., after a search *)

(*ds*)
PROCEDURE Pasteblock;
PROCEDURE PasteAlert;
PROCEDURE ShowBlock(startln, endln: CARDINAL; startb, endb: LONGCARD);
PROCEDURE RuinBlock(always: BOOLEAN); (* unmarks block if needed *)
PROCEDURE Wrapblock(startline: CARDINAL; VAR endline: CARDINAL): CARDINAL;
 (* wordwraps to endline or to end of P'graph if endline = 0 *)
    (* returns actual endline it reached - either end of request or end 
       of paragraph *)
PROCEDURE Mergefile(VAR fname: Fseltype; topastebuff: BOOLEAN): BOOLEAN;
 (* Insert text of a file at cursor position in current file *)
PROCEDURE ReadConfig(): BOOLEAN;
PROCEDURE WriteConfig(): BOOLEAN;
(*ds*)

PROCEDURE Lineptrs(startline: CARDINAL);
 (* Sets up line pointer array based on CR/LF at end of each line
    or if no eol chars, based on fixed wrap width *)

PROCEDURE FileAlert;

PROCEDURE Readfile(VAR fname: Fseltype; VAR startf, endf: LONGCARD): CARDINAL;
 (* read in requested portion of file *)
 (* Returns: 0 = read error, not found, 1 = ok, 2 = too big for buffer *)
 (* PROCEDURE Readfile(fname: ARRAY OF CHAR; VAR flen: LONGCARD): BOOLEAN; *)

(**
PROCEDURE MakeBak(VAR fname: Fseltype; ext: ARRAY OF CHAR);
 (* creates 'BAK' or other 'EXT' file after deleting old one if existed *)
**)
 
PROCEDURE Writefile(VAR fname: Fseltype; startf, endf: LONGCARD;
                    bigpart: BOOLEAN; overpend: INTEGER): BOOLEAN;
(*
  bigpart TRUE means to save whole bigfile, of which buffer is a part.
  overpend parameter added in 2.30...1/1/92
   0 = no force overwrite or append
   1 = force overwrite
   2 = force append
*)

PROCEDURE BlockAlert;

PROCEDURE ChangeCase(lowupper: INTEGER);
(* lowupper: 1=make lower, 2=makeupper, 3=capitalize *)

END EdPro2.
