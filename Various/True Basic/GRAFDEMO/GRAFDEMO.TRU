!               True BASIC Graphics Demo
!
!  An Interactive Demonstration of True BASIC Graphics Commands
!
!
!                  by Delmar E. Searls
!         Copyright 1989 Antic Publishing Inc.
!

library "LIBS\GRAPHLIB.TRU"
DIM Dots[6,2]
set cursor "OFF"
ask mode Resolution$
if Resolution$ = "LOW" then
  clear
  print "Please use high or medium resolution."
  set cursor 10,1
  print "Press [Return]."
  call Wait
else
  call Introduction(Resolution$)
  call Create_Windows(#1,#2,Resolution$)
  call Scroll_Demo(#1,#2)
  call Points_Demo(#1,#2)
  call Lines_Demo(#1,#2)
  call Graph_Demo(#1,#2)
  call Picture_Demo(#1,#2)
  call Mouse_Demo(#1,#2, Dots)
  call MATPLOT_Demo(#1,#2,Dots)
  close #1
  close #2
  clear
  call Box_Demo
  clear
  print "That wraps up this little demonstration.  I hope you found it"
  print "a helpful introduction to True BASIC's graphics capabilities."
  print
  print "I have illustrated most of the built-in features, but there are a"
  print "number of additional features available through libraries of"
  print "functions and pictures available from True BASIC.  Some of these"
  print "are included with the purchase of version 2."
  print
  print
  print "Press [Return] to go back to the desktop."

  call Wait
end if
end

sub Introduction(Resolution$)
  clear
  print "                 WINDOWS AND GRAPHICS DEMONSTRATION"
  set cursor 4,1
  print "     A demonstration of some of True BASIC's graphics statements."
  set cursor 6,1
  print "                            by Delmar Searls"
  print "                    Copyright 1989 Antic Publishing"
  print
  print "                Portions Copyright 1987, True BASIC, Inc."
  set cursor 25,1
  print "Press [Return] to continue...";

  call Wait

  clear
  print "Throughout this demonstration I will pause to let you read the"
  print "text on the screen and look at the illustrations.  Most of the"
  print "time you will need to press [Return] to continue the "
  print "demonstration; other times I may ask you to interact with the "
  print "demo, for example, by clicking the mouse."
  print
  print "If you want to terminate the program before I do, just press"
  print "[Control-C], then press any key to return to the Desktop."
  print
  print "I will be demonstrating some of True BASIC's window and graphics"
  print "statements.  Right now I'm using PRINT statements to display"
  print "text on window #0.  This is the default window and includes"
  print "the entire screen."
  print
  print "There are a large number of statements available and I am not"
  print "going to be able to illustrate all of them.  However, I'll"
  print "try to cover some of the more important ones."
  print
  print "To clear a window use True BASIC's CLEAR statement.  It works"
  print "pretty much like the CLS statement in many versions of BASIC"
  print "but is restricted to the current window."
  print
  print "I'm going to execute the CLEAR statement when you are ready."
  set cursor 25,28
  print ">>>>> Press [Return] to continue.";

  call Wait

  clear
  print "You can determine what resolution is currently in effect by"
  print "using the following statement."
  print
  print "   ASK MODE Resolution$"
  print
  print "The string variable Resolution$ will have a value of HIGH,"
  print "MEDIUM or LOW.";
  ASK MODE Resolution$
  print "  I just executed that statement and found"
  print "that you are using ";Resolution$;" resolution."
  set cursor 25,28
  print ">>>>> Press [Return] to continue.";

  call Wait
end sub


sub Continue
rem  ask max cursor l,r
  set cursor 11,45
  print ">>>>> Press [Return] to continue.";
  do
    get key x
  loop until x=13
end sub

sub Wait
  do
    get key x
  loop until x=13
end sub


sub Create_Windows(#1, #2, Resolution$)
  clear
  print "I'm now going to create two windows.  The top half of the screen"
  print "will be used to display text and the bottom half will be used to"
  print "display several illustrations of what True BASIC can do."
  print
  print "A window is a portion of the screen that is treated logically as"
  print "a display device.  For example, graphics will automatically be"
  print "clipped to fit inside a window.  Text will scroll inside a window"
  print "without affecting any other part of the screen."
  print
  print "In order to open a window you must specify its location.  Its"
  print "horizontal location is determined by the position of the left"
  print "and right edges.  These locations are expressed as a fraction"
  print "of the screen width measured from the left edge of the screen."
  print "For example, 0 is the left edge of the screen, 1 is the right"
  print "edge, and .25 a distance one fourth of the way in from the left."
  print
  print "In a similar fashion, the vertical location is determined by the"
  print "top and bottom edges of the window.  A value of 0 indicates the"
  print "bottom of the screen, a 1 means the top of the screen, and .5 is"
  print "the middle of the screen from top to bottom."
  set cursor 25,28
  print ">>>>> Press [Return] to continue.";

  call Wait

  clear
  print "To open a window, use the statement"
  print
  print "OPEN #<Channel Number>: SCREEN <left>,<right>,<bottom>,<top>"
  print
  print "I'm going to get a little fancy.  Before opening a window on"
  print "the top half of the screen, I'm going to draw a surrounding box"
  print "on window #0.  Window #1 will be created inside the box.  By"
  print "opening the window inside the box, I guarantee that nothing I"
  print "do in the window will affect the box.  The fastest way to draw a"
  print "box is to use"
  print
  print "BOX LINES <left x>,<right x>,<bottom y>,<top y>"
  print
  print "All the BOX statements have a similar syntax.  The four"
  print "parameters define the location of the box in the current window's"
  print "coordinates.  The default coordinates of a window are 0 to 1 in"
  print "both directions."
  print
  print "Here's what I will be doing:"
  print
  print "CLEAR                                   ! Clear window #0"
  print "BOX LINES 0, 1, 0.51, 1                 ! Draw box"
  print "OPEN #1: SCREEN 0.01, 0.99, 0.52, 0.99  ! Open window #1"
  set cursor 25,28
  print ">>>>> Press [Return] to continue.";

  call Wait

  CLEAR
  if Resolution$ = "MEDIUM" then
    set color "BLUE"
  end if
  BOX LINES 0,1,0.51,1
  OPEN #1: SCREEN 0.01,0.99,0.52,0.99

  print "Well here we are in window #1.  Let's open window #2 on the"
  print "bottom half of the screen:"
  print
  print "WINDOW #0                              ! Go back to window #0"
  print "BOX LINES 0, 1, 0, 0.49                ! Draw a box"
  print "OPEN #2: SCREEN 0.01,0.99,0.01,0.48    ! Open window #2"

  call Continue

  WINDOW #0
  if Resolution$ = "MEDIUM" then
    set color "RED"
  end if
  BOX LINES 0,1,0,0.49
  set color "BLACK"

  OPEN #2: SCREEN 0.01,0.99,0.01,0.48
  print "Now we are in window #2.  If you have a color monitor, you'll"
  print "have noticed that the boxes we have drawn are blue and red.  The"
  print "SET COLOR <color> statement is used to change the current color."
  print "The color can be a string expression or a numeric code.  These"
  print "both change the color to red:"
  print
  print "  SET COLOR ";chr$(34);"RED";chr$(34)
  print "  SET COLOR 2"

  call Continue
end sub


sub Scroll_Demo(#1,#2)
  clear
  window #1
  clear

  print "You may be wondering how I got back up here.  I executed these"
  print "statements"
  print
  print "  CLEAR       ! Clear window #2"
  print "  WINDOW #1   ! Move to window #1"
  print "  CLEAR       ! Clear window #1"
  print
  print "and then printed this text."

  call Continue

  clear
  print "I'm going to run this little program segment to print some square"
  print "roots in window #2:"
  print
  print "  WINDOW #2            ! Go to window #2"
  print "  FOR I = 1 TO 40      ! Print square roots of 1 thru 40"
  print "    PRINT SQR(I)"
  print "  NEXT I"
  print "  WINDOW #1            ! Go back to window #1"
  print
  print "As I do this, notice how the scrolling does not affect this"
  print "window.";

  call Continue

  WINDOW #2
  FOR I = 1 TO 40
    PRINT SQR(I)
  NEXT I
  print
  print "Pretty slick isn't it?"

  call Continue
end sub


sub Points_Demo(#1,#2)
  clear
  window #1
  clear
  print "The fundamental graphics element is the pixel (picture element)"
  print "which corresponds to a single point on the screen.  Here's how"
  print "to plot a point:"
  print
  print "  PLOT POINTS: <x>,<y>"
  print
  print "where x,y are the coordinates of the point."

  call Continue

  clear
  print "Remember that the default coordinate system is 0 to 1 in both"
  print "directions."
  print
  print "PLOT POINTS: 0.5, 0.5  will plot a point in the middle of the"
  print "window.  See below.  You may have to look real close."
  window #2
  PLOT POINTS: 0.5, 0.5
  plot lines: .45,.5;.49,.5;.48,.52;.49,.5;.48,.48

  window #1
  call Continue

  clear
  window #1
  clear
  print "Here's a little routine that plots points at random:"
  print
  print "FOR I = 1 TO 200"
  print "  PLOT POINTS: RND, RND"
  print "NEXT I"
  print
  print "(RND returns a random number between zero and one.)"

  call Continue

  window #2
  FOR I = 1 TO 200
    PLOT POINTS: RND, RND
  NEXT I

  call Continue
end sub


sub Lines_Demo(#1,#2)
  clear
  window #1
  clear
  print "PLOT LINES: <x1>,<y1>;<x2>,<y2>"
  print
  print "This statement draws a line from (x1,y1) to (x2,y2).  Here's a"
  print "specific example:"
  print
  print "PLOT LINES: 0.25,0.75;0.75,0.25"
  print
  print "(Upper-left to lower-right.)"

  call Continue

  window #2
  PLOT LINES: 0.25,0.75;0.75,0.25

  call Continue

  window #1
  clear
  print "Any number of points (separated by semicolons) can be included."
  print
  print "PLOT LINES: 0.75, 0.25; 0.5, 0.25; 0.25, 0.75"
  print
  print "completes the triangle below."

  call Continue

  window #2
  PLOT LINES: .75,.25;.5,.25;.25,.75

  call Continue
end sub


sub Graph_Demo(#1,#2)
  clear
  window #1
  clear
  print "Graphs can be drawn using short line segments."
  print
  print "FOR X = 0 to 1 STEP .02      ! Plot points and leave 'beam'"
  print "  PLOT LINES: X, SIN(X);     ! on as you go to next point."
  print "NEXT X"
  print "PLOT                         ! Turn off 'beam'"

  call Continue

  window #2
  FOR X = 0 TO 1 STEP .02
    PLOT LINES: X, SIN(X);
  NEXT X
  PLOT
  call Continue
  window #1
  clear
  print "Unfortunately, the sine function isn't very interesting between"
  print "zero and one.  Let's reset our window #2 to correspond to"
  print "X = -6 to 6 and Y = -1 to 1:"
  print
  print "WINDOW #2"
  print "SET WINDOW -6,6,-1,1"
  print
  print "The syntax is SET WINDOW <min x>,<max x>,<min y>,<max y>"
  print
  print "(You can't tell that anything has happened yet.)";
  WINDOW #2
  SET WINDOW -6,6,-1,1

  window #1
  call Continue

  window #2
  clear
  window #1
  clear
  print "But now let's redraw the graph:"
  print
  print "FOR X = -6 TO 6 STEP 0.1"
  print "  PLOT LINES: X, SIN(X);"
  print "NEXT X"
  print "PLOT"

  call Continue

  WINDOW #2
  FOR X = -6 TO 6 STEP 0.1
    PLOT LINES: X, SIN(X);
  NEXT X
  PLOT

  call Continue

  clear
  window #1
  clear
  print "Let's graph Y = X^2 - 3*X - 2."
  print
  print "SET WINDOW -5,5,-5,5"
  print "FOR X = -5 TO 5 STEP 0.1"
  print "  LET Y = X^2-3*X-2"
  print "  PLOT LINES: X,Y;"
  print "NEXT X"
  print "PLOT"

  call Continue

  window #2
  SET WINDOW -5,5,-5,5
  FOR X = -5 TO 5 STEP 0.1
    LET Y = X^2-3*X-2
    PLOT LINES: X,Y;
  NEXT X
  PLOT

  set cursor 11,1
  print ">>>>Press [Return] to continue.";
  call Wait

  window #1
  clear
  print "You can even draw in the x-axis and the y-axis with just one"
  print "subroutine call.  TICKS is a part of the library GRAPHLIB."
  print
  print "CALL TICKS(1,1)"
  print
  print "The ticks are spaced one unit apart on both axes."

  call Continue

  window #2
  CALL TICKS(1,1)

  call Wait

end sub


sub Picture_Demo(#1,#2)
  clear
  window #1
  clear
  print "A nice feature of True BASIC is the PICTURE.  It is the graphic"
  print "equivalent of a subroutine.  You place the PLOT statements used"
  print "to draw an object in a PICTURE.  Then to actually draw the item"
  print "you use the DRAW statement."

  call Continue

  clear
  print "Here is an example of a PICTURE:"
  print
  print "PICTURE House"
  print "  PLOT LINES: -3,2;0,4;3,2;-3,2; !Top of House"
  print "  PLOT LINES: -3,-3;3,-3;3,2     !Bottom of House"
  print "  PLOT AREA: -1,-3;-1,0;1,0;1,-3 !Door"
  print "END PICTURE"
  print 
  print "'DRAW House' causes the house to be drawn."

  call Continue

  window #2
  set window -15,15,-5,5
  DRAW House

  call Continue

  window #1
  clear
  print "The house is drawn in the middle of a window where X = -15 to 15"
  print "and Y = -5 to 5.  (I changed the window's coordinate system when"
  print "you weren't looking.)  It is centered at (0,0) which is the"
  print "middle of the window.  I emphasize this because two-dimensional"
  print "transformations are made relative to the origin."
  print
  print "A translation or shift moves a picture to a different position."
  print "The following command moves the house 3 units to the right and"
  print "down 1."
  print
  print "DRAW House WITH SHIFT(3,-1)";

  call Continue

  window #2
  clear
  DRAW House WITH SHIFT(3,-1)

  window #1
  clear
  print "Now wasn't that easy!"
  print
  print "When you're ready I'll redraw the original house and go on to"
  print "scaling."

  call Continue

  window #2
  clear
  Draw House
  window #1
  clear
  print "Scaling refers to changing the size of a picture.  Let's make the"
  print "house twice as big."
  print
  print "DRAW House WITH SCALE(2)"

  call Continue

  window #2
  clear
  DRAW House WITH SCALE (2)
  window #1
  clear
  print
  print "Notice it is now too big to fit in the window and has been"
  print "clipped."

  call Continue

  window #2
  clear
  draw House
  window #1
  clear
  print "I've redrawn the original house.  Now let's draw it half as big."
  print
  print "DRAW House WITH SCALE(0.5)"

  call Continue

  window #2
  clear
  DRAW House WITH SCALE(0.5)

  call Continue

  window #1
  clear
  window #2
  clear
  draw House
  window #1
  print "The last transformation we'll look at is rotation.  Rotation is"
  print "measured in degrees or radians.  The display is rotated about the"
  print "origin.  We are going to rotate the house 30 degrees counter-"
  print "clockwise (+30 degrees)."
  print
  print "OPTION ANGLE DEGREES                ! Measure angles in degrees"
  print "DRAW House WITH ROTATE(30)"

  call Continue

  window #2
  clear
  OPTION ANGLE DEGREES
  DRAW House WITH ROTATE(30)

  Call Continue

  window #1
  clear
  window #2
  clear
  draw House
  window #1
  print "You can combine two or more of these transformations in one"
  print "statement.  However, the order in which they are applied makes"
  print "a big difference.  I'm going to shift the house 5 units to the"
  print "right and then perform a 90 degree rotation."
  print
  print "DRAW House WITH SHIFT(5,0)*ROTATE(90)"

  call Continue

  clear
  print
  print "First the shift, ";
  window #2
  clear
  DRAW House WITH SHIFT(5,0)

  call Continue


  window #1
  print "and then the rotation."
  window #2
  clear
  DRAW House WITH SHIFT(5,0)*Rotate(90)
  window #1

  call Continue

  clear
  print "Note the position of the house.  Is it where you thought it"
  print "would be?  Don't forget that an object is rotated about the"
  print "origin."
  print
  print "(By the way, the picture is not really drawn in two steps as"
  print "illustrated.  I did it that way just so you could see the order"
  print "in which the transformations were taking place.)"

  call Continue

  clear
  window #2
  clear
  draw House
  window #1
  print "Now let's switch the order of the transformations:"
  print
  print "DRAW House WITH ROTATE(90)*SHIFT(5,0)"

  call Continue

  clear
  print
  print "First the rotation, ";
  window #2
  clear
  DRAW House WITH ROTATE(90)

  call Continue

  window #1
  print "and then the shift."
  window #2
  clear
  DRAW House WITH ROTATE(90)*SHIFT(5,0)

  call Continue

  window #1
  clear 
  print "The lesson here is that while the transformations are easy to do,"
  print "you have to be careful to do them in the order you desire."

  call Continue
end sub


PICTURE House
  PLOT LINES: -3,2;0,4;3,2;-3,2;
  PLOT LINES: -3,-3;3,-3;3,2
  PLOT AREA: -1,-3;-1,0;1,0;1,-3
END PICTURE

sub Mouse_Demo(#1,#2, Dots(,))
  window #2
  set window -15,15,-5,5
  clear
  window #1
  clear
  print "There are two statements that are used for graphic input."
  print "GET POINT: X,Y waits for the user to press and release the"
  print "left mouse button.  It then reports the position of the mouse"
  print "cursor in terms of the current window's coordinates."

  call Continue

  clear
  print "GET POINT: X,Y is supposed to prohibit the user from moving the"
  print "cursor outside of the current window.  Unfortunately this is not"
  print "properly implemented on the Atari ST.  To demonstrate, I'll"
  print "execute the GET POINT statement AFTER setting the BOTTOM window"
  print "as the active window.  DO NOT CLICK ANY MOUSE BUTTON!  Just move"
  print "the mouse around the screen and notice that it is NOT confined"
  print "to the current window!"
  print
  print "When you're ready to try this press [Return]."

  call Wait

  clear
  print "Move the mouse around.  When you have verified that the mouse"
  print "can indeed be moved anywhere, go ahead and click the left mouse"
  print "button."

  set cursor 11,54
  print ">>>>> Click to continue.";
  window #2
  GET POINT: X,Y

  window #1
  clear
  print
  print "The reported coordinates were X = ";X;" and Y = ";Y

  call Continue

  clear
  print "There is another serious flaw with GET POINT.  Before clicking"
  print "the button you MUST move the mouse.  If the left button is"
  print "clicked before the mouse is moved, the values returned for X,Y"
  print "may not be correct."

  call Continue

  clear
  print "I want you to select five points in the window below.  As you"
  print "choose points, I will connect them in dot-to-dot fashion.  When"
  print "you have chosen the fifth point, I will connect it to the first"
  print "point.  To choose a point simply MOVE the cursor to the desired"
  print "location and click the left button.  If you choose a point"
  print "outside the window I will beep at you and let you try again."
  print "Remember that the box is slightly bigger than the window it"
  print "contains."
  print
  print "Press [Return] and I will show you the code I'm executing."

  call Wait

  clear
  print "    WINDOW #2"
  print "    DO"
  print "      GET POINT: X1,Y1"
  print "      IF X1<-15 OR X1>15 OR Y1<-5 OR Y1>5 THEN"
  print "        SOUND 400, 0.1     ! Beep"
  print "      ELSE"
  print "        EXIT DO            ! Terminate the loop"
  print "      END IF"
  print "    LOOP"
  print "    PLOT LINES: X1,Y1; X1,Y1;   ! Draw a one-point line"

  set cursor 11,54
  print ">>>>> Click to continue.";
  WINDOW #2
  DO
    GET POINT: X1,Y1
    IF X1<-15 OR X1>15 OR Y1<-5 OR Y1>5 THEN
      SOUND 400, 0.1
    ELSE
      EXIT DO
    END IF
  LOOP
  PLOT LINES: X1,Y1;X1,Y1;
  let Dots[1,1], Dots[6,1] = X1   ! First point in array
  let Dots[1,2], Dots[6,2] = Y1   ! Last point in array

  window #1
  clear
  print "    FOR I = 2 TO 5"
  print "      DO"
  print "        GET POINT: X,Y"
  print "        IF X<-15 OR X>15 OR Y<-5 OR Y>5 THEN"
  print "          SOUND 400, 0.1       ! BEEP"
  print "        ELSE"
  print "          PLOT LINES: X,Y;     ! Draw line to point"
  print "          EXIT DO"
  print "        END IF"
  print "      LOOP"
  print "    NEXT I",,,">>>>> Click four more times.";

  window #2
  FOR I=2 TO 5
    DO
      GET POINT: X,Y
      IF X<-15 OR X>15 OR Y<-5 OR Y>5 THEN
        SOUND 400, 0.1
      ELSE
        PLOT LINES: X,Y;
        let Dots[I,1] = X
        let Dots[I,2] = Y
        EXIT DO
      END IF
    LOOP
  NEXT I
  
  window #1
  clear
  print "PLOT LINES: X1,Y1   ! Join last dot to first"

  window #2
  PLOT LINES: X1,Y1

  window #1
  call Continue

  window #2
  clear
  window #1
  clear
  print "The other statement allowing us to use the mouse is"
  print "GET MOUSE: X, Y, S which, in addition to the location of the"
  print "mouse cursor, also returns the state of the left button (S).  I"
  print "will illustrate this as follows.  Move to a point in the window"
  print "below and press the left button down.  Move to a second point"
  print "and release the button.  I'll draw a line between those two"
  print "points."
  print
  print "Press [Return] and I'll show you the code I am executing."

  call Wait

  clear
  print "DO"
  print "  GET MOUSE: X1,Y1,S"
  print "LOOP UNTIL S = 2    ! Until left button is pressed"
  print
  print "PLOT POINTS: X1,Y1"
  print
  print "DO"
  print "  GET MOUSE: X2,Y2,S"
  print "LOOP UNTIL S = 3    ! Until left button is released"
  print
  print "PLOT LINES: X1,Y1;X2,Y2","        >>>>> Click, move and release button.";

  window #2
  DO
    GET MOUSE: X1,Y1,S
  LOOP UNTIL S=2
  PLOT POINTS: X1,Y1
  DO 
    GET MOUSE: X2,Y2,S
  LOOP UNTIL S=3
  PLOT LINES: X1,Y1;X2,Y2

  call Continue

  window #1
  clear
  print "By the way, I didn't bother to verify that you were choosing"
  print "points within the window.  If you chose points outside the window"
  print "you will see only the portion of the line that passes through"
  print "the window.  The rest will have been clipped."

  call Continue
end sub


sub MATPLOT_Demo(#1,#2,Dots(,))
  window #2
  clear
  window #1
  clear
  print "I have a little confession to make.  When you chose five points a"
  print "little while ago, I stored the coordinates in an array containing"
  print "six points.  The last point is the same as the first.  I did this"
  print "so I could illustrate the MAT PLOT statements."
  print
  print "These statements require a two-dimensional array parameter."
  print "The first dimension (the number of rows) determines how many"
  print "points can be stored in the array.  The second dimension (the"
  print "number of columns) should be 2.  Column 1 contains the X"
  print "values and column 2 the corresponding Y values."

  call Continue

  clear
  print "MAT PLOT POINTS: Dots"
  print
  print "will plot the points contained in the array Dots (see below)."

  window #2
  MAT PLOT POINTS: Dots

  call Continue

  clear
  window #1
  clear
  print "MAT PLOT LINES: Dots"
  print
  print "will connect the points in the array Dots with lines."

  window #2
  MAT PLOT LINES: Dots

  call Continue

  clear
  window #1
  clear
  print "MAT PLOT AREA: Dots"
  print
  print "will connect the dots and fill in the enclosed area."

  window #2
  MAT PLOT AREA: Dots

  call Continue
end sub


sub Box_Demo
  print "I just closed our two windows and cleared window #0 (the default)"
  print "window.  I'm going to illustrate some of the BOX statements."
  print "Most of them have four parameters: "
  print
  print "   left x, right x, bottom y, top y"
  print
  print "These paramaters define a box within which some action will take"
  print "place."
  print
  print "BOX LINES will outline the box."
  print
  print "BOX ELLIPSE will draw an ellipse bordered by the box."
  print
  print "BOX AREA will fill in the box."
  print
  print "BOX CLEAR will set the box to the background color."
  print
  print
  print "Press [Return] after the boxes are drawn to continue."

  set cursor 25,28
  print ">>>>> Press [Return] to continue.";

  call Wait

  clear
  randomize
  open #1: screen 0,1,0,.5
  set window -60,60,-30,30
  print "                     BOX AREA and BOX CLEAR statements"
  open #2: screen 0,.5,.51,1
  set window -30,30,-30,30
  print "        BOX LINE statements"
  open #3: screen .51,1,.51,1
  set window -30,30,-30,30
  print "       BOX ELLIPSE statements"
  for i = 1 to 20
    window #1
    box clear 120*rnd-60,120*rnd-60,50*rnd-30,50*rnd-30
    box area  120*rnd-60,120*rnd-60,50*rnd-30,50*rnd-30
    window #2
    box lines 60*rnd-30,60*rnd-30,50*rnd-30,50*rnd-30
    window #3
    box ellipse 60*rnd-30,60*rnd-30,50*rnd-30,50*rnd-30
  next i

  window #2

  call Wait
  close #1
  close #2
  close #3
end sub
