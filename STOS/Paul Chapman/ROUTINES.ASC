
  Short Documentation For Routines on Disk - Paul Chapman

  There are about four or five routines on the disk which I have
  written. The first couple are easy to follow. The two routines I 
  am going to cover are WORDWRAP.BAS and INPUT.BAS.

  WORDWRAP.BAS is a small routine which takes a string and prints
  it on the screen, so that no word gets cut off halfway through. 
  ie it checks to see if there is space on the line, if not, it moves
  the word onto the next line. 

  HOW TO USE : You will need to set the following variables before
               you call the subroutine ( using GOSUB )...
       
    LIMIT : This should contain the max length of a line of text 
            before it is wrapped. ie If you wanted to fit text into 
            a column 20 characters wide, LIMIT = 20.

    O$   : This is the text string which is to be processed. 
           Note : Currently, the routine only processes and prints
           the string. If you want the string to be printed at a 
           specific location, and you probably do, then you will
           need to fiddle with the routine. If you need help, 
           contact me !

    NB - The routine also trashes the variables L and WE so change
         them if they are used elsewhere.

  This routine is very handy for an adventure where you want text to 
  look neat, and not chopped halfway through the word. 

  INPUT.BAS is a little subroutine which prompts for an input string 
  from the user. 'Wow, dead sophisticated !' , I hear you cry ! Well
  actually, it is a little more complex than you think.
  Have you ever written a program where you ask the user to input a 
  string, and all sorts of problems occur when he types numbers, or
  characters which you don't want him to type ?? Or perhaps he is 
  allowed to enter so many characters than it types over the rest of
  the screen? Using this routine you can limit the amount of characters
  he is allowed to input. You can also stop him from entering numbers
  or unwanted characters like "?.,!*/)( etc... You can also stop him 
  from entering an empty string.
  Or if, in the middle of inputting a string, you want a certain thing 
  happen when he presses a certain key, you simply add a bit more code.
 
  HOW TO USE : Fairly simple to use. 
               
               X and Y tell the computer where to put the cursor. 
               
               LIM tells the computer the maximum number of characters 
               the user is allowed to enter.
               
               Var. K$,m$ and L are trashed.
               When the user presses enter, the subroutine is exited
               and M$ contains the string he typed in. 

  if you wanted to jump to a line if the user presses "*" for example,
  you could add...

  211 if asc(k$)=asc("*") then goto ????

  Simple as that !!!

  I hope you make use of the routines. You can contact me on 0429 231100
  and my address is in the STOSSER contacts pages !!
  
                -- Paul Chapman

