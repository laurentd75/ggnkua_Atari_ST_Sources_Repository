


                    FAST SPRITES IN STOS BASIC
                      by STEVE JARRETT 1992

Hello and welcome,  this time i will show you how to do sprites in 
stos and use very little cpu time.
The  sprites in the source code are 16 by 16 pixel 4  plane  fully 
masked  and if you look at the 1 sprite demo you can see just  how 
little  time  the  routine uses,  remember that  theres  is  music 
playing  as well that also uses cpu time also the prg  checks  for 
key presses this also takes a small amount of time , so the actual 
time used by the routine is a little less than that shown.

The  actual sprite is a drawn image stored in bank 4 at  0,0,16,16 
this sprite could be as big as you like ,  you would only have  to 
adjust a few items too change the size of the sprite.

Lets look at the first lines of intrest

130 DIM X#(560),XO#(560),X(560),Y(560),CX(560),CY(560)
140 DIM BALL$(15),VUX(15),TPOS(15)
150 GOSUB 430:rem store the balls
160 GOSUB 540:rem store the sine moves

Line  130  and  140 dimmension all the arrays  used  they  are  as 
follows
X#(A)= the original sine wave for the x sprite moves
XO#(a)=  the  x# offset i.e 0 to 15 this is used  for  the  sprite 
images
X(a)=  the  original sine wave(x#(a)) minus the  x  offset(xo#(a)) 
plus 150 ,by precalculating all this into 1 array saves cpu time
Y(a)= the sine wave for the y sprite moves plus 100
CX(a)= x position(x(a)) minus 8 this is for clear old image
CY(a)= y position(y(a)) minus 4 ``                        ``
BALL$(a)= the 16 frames of the sprite
VUX(a) and TPOS(a) are for the vumeters and the text route 

Next we gosub to store the sprites as follows

430 rem offset the balls
440 def scroll 1,0,0 to 320,24,1,0
450 screen copy 4,0,0,32,16 to logic,0,0
460 for a=0 to 15
470 ball$(a)=screen$(logic,0,0 to 32,16)
480 scroll 1 : next a
490 return 

Line 440 sets out the scroll zone at the top of the logical screen 
i  am scrolling the whole screen in the x direction but  it  could 
have been just 48 pixels instead .

Line 450 copy the sprite from screen 4 to the logical screen

Line  460  sets  up the for next loop this is for  the  16  sprite 
images

Line 470 stores the image at 0,0,32,16 in the array ball$(a)

Line 480 scrolls the screen right 1 pixel and jumps back to 460

So we now have our 16 sprite images stored in ball$(a).
The  next  gosub  stores  the sine moves  at  line  550  this  was 
explained earlier when we delt with the arrays

Next we need to display our sprites this is done as follows

1170 repeat
1180 logic=back
1190 rem show sprite
1200 screen$(logic,x(xb),y(xb))=ball$(xo#(xb))
1210 rem
1220 screen swap : wait vbl
1230 rem clear old sprites
1240 cls logic,0,cx(xb),cy(xb) to cx(xb)+52,cy(xb)+22
1250 rem inc sprite counter
1260 inc xb:if xb>360 then xb=1
1310 until false

O.k.  1180 sets up back as logic, line 1200 displays the sprite at 
x(xb),y(xb)  these  are  the x and y coordinates  that  we  stored 
earlier,using  ball$(xo#(xb)) these are the sprite images  ranging 
from 0 to 15.Line 1220 swaps the physical and logical screens  and 
wait for the next vbl
Line  1240  clears  the  old images of the  old  screen  with  the 
previously stored x and y positions
Line 1260 increases the counter for the stored data in the  arrays 
and resets it when it reaches 360.

Well  thats  basically it,i stored all the data for the  x  and  y 
moves  but they could be realtime i.e joystick or mouse  but  they 
would  be a little bit slower than this routine,also  dont  forget 
that the size of the sprite can be anything that you want but  the 
bigger the image the more cpu time taken to display it.
Also  i  have  packed the screen data to save space  and  this  is 
depacked  using the stos squasher extension,  if you do  not  have 
this extension installed you will not be able to run the prg.
To get over this you will have to draw your own sprite 16 x 16 and 
store  it as a picture at 0,0 and then delete the  depack  routine 
and load your pic into bank 4.


When you load and run this prg you will see that it is in 2  parts 
the  first  part is a sort of demo with 6  tracking  sprites,3  vu 
meters,and  a put text routine this is just to show you  how  much 
you  can  do using this routine,the text could  easily  have  been 
scrolling  horizontaly with time that was left after  the  sprites 
and the vu meters, but i was feeling very lazy!!!.Also the code is 
not fully optimised and i am sure that i cuold get it all to run a 
bit  faster still....To get into the second part of the  prg  just 
hit  the  space bar you will then see just 1 sprite and  the  time 
remaining  in  the vbl.To return to the first  screen  just  press 
space again ,to exit either screen press tab.........


Thats it for this now.I will give you my address now so
that if you have any problems or just wish to contact me you can.

                          STEVE JARRETT
                         52 MAWNEY CLOSE 
                             ROMFORD
                              ESSEX 
                             RM7 8EJ



Thats it bye............................................
 


