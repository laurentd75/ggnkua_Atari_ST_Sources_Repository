€                   ---- LOGICAL OPERATORS ---- 
  
  
  
     This  article is about some commands that although  available 
to  STOS  programmers,  are with one exception,  mentioned  but  not 
described within the STOS  manual. 
  
     The one exception is the command NOT which is described in the 
manual as the Logical NOT operation ( see p.225 ).  This  function 
changes  every binary digit in a number from a 1 to a 0  and  vice 
versa. 
     The manual then goes on to give the example : 
  
     Print not(-1) 
  
     This returns the value 0 
  
     STOS  stores integers as longwords, i.e. 32 bits long. 
     The  most significant bit ( the one at the left hand end  )is 
defined  as  the  SIGN bit.  If this is a 1  then  the  number  is 
negative and if it is a 0 then the number is positive. 
     This allows for a wide range of numbers ( see p.35 ) 
     The  NOT  command  operates on the full  32  bits. 
  
hence : 
  
     -1 = % 1111 1111 1111 1111 1111 1111 1111 1111 
NOT  -1 = % 0000 0000 0000 0000 0000 0000 0000 0000 = 0 
            | 
            | 
            Sign Bit 
  
     NOT is also known as the One's Complement.  The negative of a 
binary number can be found by adding one to its one's complement. 
     This is then called its Two's Complement. 
  
     So taking a byte ( 8 bits ) and say the number 7 
  
                 7 = % 0000 0111 
  
             NOT 7 = % 1111 1000    The one's Complement 
                               1 + 
                     ------------- 
                -7 = % 1111 1001    The two's complement 
  
  
     Under the heading "Arithmetic Operations",( see p.38 ), 
 are the three logical operators  AND, OR, and XOR. 
  
     There is no other reference to these commands. 
  
     These  three  commands allow for the manipulation  of  either 
individual or groups of bits within a binary number or a bit field. 
     A bit field is simply a binary number used for purposes other 
than arithmetic. 
  
  
     For example if we take the bit field % 0011 0110 111 0001 
     This  could refer to the state of 16 switches,  on or off  or 
could relate to 16 items in an adventure and whether they are being 
carried ( 1 ) or not ( 0 ) etc. 
  
     In making the comparisons we take "0" as false and "1" as true 
  
      Taking two binary quantities "A" and "B" and taking "R"  for 
the  resultant  comparison  the following table  for  AND  may  be 
compiled :- 
  
                    A   and   B    =    R 
                    --------------------- 
                    1         1         1 
                    1         0         0 
                    0         1         0 
                    0         0         0 
  
  
     It can be seen that BOTH "A" and "B" must be true ( equal 1 ) 
for the result to be true. 
  
     This is often compared to things like ordering fish and chips 
to make the point clear. 
     If  you ordered fish AND chips then unless you received  both 
your order would be unfulfilled. 
  
      Keeping with this analogy for the command OR it can be  seen 
that if you received fish OR chips or both then the order would be 
fulfilled. This gives the following OR table 
  
  
                    A   or    B    =    R 
                    --------------------- 
                    1         1         1 
                    1         0         1 
                    0         1         1 
                    0         0         0 
  
  
     XOR is the Exclusive Or condition,  similar to OR except that 
the result "R" can only be true if Either "A" or "B"  exclusively 
is true but not both. This gives the following XOR table. 
  
  
                    A   xor   B    =    R 
                    --------------------- 
                    1         1         0 
                    1         0         1 
                    0         1         1 
                    0         0         0 
  
  
  
  
  
  
  
     Looking  at  this in relation to two numbers 5 and 7. 
  
     If we enter print 5 AND 7 the result is 5 
  
     if we enter print 5  OR 7 the result is 7 
  
     If we enter print 5 XOR 7 the result is 2 
  
     This should now become clear in binary notation 
  
             AND                   OR                   XOR 
  
     5 =  %0000 0101           0000 0101             0000 0101 
     7 =  %0000 0111           0000 0111             0000 0111 
         -----------           ---------             --------- 
           0000 0101 = 5       0000 0111 = 7         0000 0010 = 2 
  
     In each case the columns are considered totally independently 
of one another. It is a bitwise operation. 
  
     So what use can we make of this? 
  
     On  the disk is a small game called "Slider".  This  involves 
sliding tiles about to get them into the correct order. 
     the puzzle is based on a 4x4 grid of 16 tiles. Tile number 16 
is removed at the start of the game by a blank. 
  
     The initial tile setup 
  
  
                        01   05   09   13 
  
                        02   06   10   14 
  
                        03   07   11   15 
  
                        04   08   12  (16) Blank 
  
  
     At  the start of the game the tile positions  are  randomized 
such that no tile is in its correct position. 
     In order to keep track of the tiles as they are moved about a 
bit field is used, this is a variable called "WIN" which is set to 
zero at the start. Each bit represents one of the tiles. 
  
  
  Tile No. 16 15 14 13 12 11 10 09 08 07 06 05 04 03 02 01 00 
  "WIN"  %  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 
  
     If a tile is moved onto its correct position then its relevant 
bit is set to 1, if it is moved from its correct position then the 
relevant  bit  is cleared.  This is done using the BSET  and  BCLR 
commands ( see p.221 ). 
  
  
  
  
  
     So  if  we  had managed to get all the tiles  in  the  second 
column  in their correct positions but all the others  were  wrong 
the bit field "WIN" would look like this. 
  
  Tile No. 16 15 14 13 12 11 10 09 08 07 06 05 04 03 02 01 00 
  "WIN"  %  0  0  0  0  0  0  0  0  1  1  1  1  0  0  0  0  0 
  
     If  you wished to know when this happens in order  to  trigger 
some  effect or other you could set up another bit  field  against 
which to check the current position. 
     If we were looking for completion of the first column,that is 
tiles No'd 1,  2, 3 and 4 the bit field for column one would be as 
follows : 
  
 C1 =  %  0  0  0  0  0  0  0  0  0  0  0  0  1  1  1  1  0 
  
     The logic of the check then becomes : 
  
     If win AND C1 = C1 then column 1 is complete 
  
     It  should  be noted that in an actual  programme  we  cannot 
check against an AND expression,  consequently the argument  needs 
to be written as follows : 
  
     Win and C1 = x 
     if x=C1 then goto wherever your routine is 
  
 E.G. 
  
     Column 1 not complete : 
  
 Tile No. 16 15 14 13 12 11 10 09 08 07 06 05 04 03 02 01 00 
  
 "WIN"  %  0  0  0  1  1  0  0  0  1  1  0  1  1  0  1  0  0 
COL1 =  %  0  0  0  0  0  0  0  0  0  0  0  0  1  1  1  1  0 
        ----------------------------------------------------- 
ANDING     0  0  0  0  0  0  0  0  0  0  0  0  1  0  1  0  0 
  
  
     Column 1  complete : 
  
 Tile No. 16 15 14 13 12 11 10 09 08 07 06 05 04 03 02 01 00 
  
 "WIN"  %  0  0  0  1  1  0  0  0  1  1  0  1  1  1  1  1  0 
COL1 =  %  0  0  0  0  0  0  0  0  0  0  0  0  1  1  1  1  0 
        ----------------------------------------------------- 
ANDING     0  0  0  0  0  0  0  0  0  0  0  0  1  1  1  1  0 
  
Using  such  a procedure any combination of tiles can  be  checked 
for. 
  
     As we have seen ANDING any bit with zero will result in zero. 
This is known as masking. 
  
     This  ability  can  be used to place things on  screen  in  a 
specific position. 
  
  
     For example, consider the following : 
  
     You have split up a picture into 32 x 32 pixel tiles. 
     you  then  wish to place the tiles on screen onto a 32  x  32 
grid ( where the axis of the grid are a multiple of 32 pixels) by 
clicking on the mouse within the boxes of the grid. 
     Using  SCREEN$ you need to know the X and Y positions of  the 
top left of the box. 
  
                x= 224               x= 256 
                    |                    | 
          y= 128 ---|--------------------|--- 
                    |\                   | 
                    | \Req'd position    | 
                    |                    | 
                    |            x..............Position of mouse 
                    |                           x= 240, y= 144 
                    |                    | 
                    |                    | 
          y= 160 ---|--------------------|--- 
  
  
     X mouse MOD 32 and Y mouse MOD 32 would give us the  difference 
between the mouse and the required position, the required position 
then being found by: 
  
                    X mouse - ( X mouse MOD 32 ) 
                    Y mouse - ( Y mouse MOD 32 ) 
  
     An  easier way would be to use the AND operation to  mask  of 
the unwanted part of the values of X mouse and Y mouse. 
  
     As the values of the binary digits are as follows : 
  
   Value   ............................. 64 32 16    8  4  2  1 
   BITS    1  1  1  1    1  1  1  1    1  1  1  0    0  0  0  0 
  
     The required position then becomes : 
  
                    X mouse AND %1111 1111 1110 0000 
                    Y mouse AND %1111 1111 1110 0000 
  
     Normally this would be written as the HEX or Decimal values 
  
                    X mouse AND $ffe0 
                    Y mouse AND $ffe0 
  
     If we take the original example in binary 
  
     X mouse = 240 = % 0000 0000 1111 0000 
             $ffe0 =   1111 1111 1110 0000 
                      --------------------- 
            ANDing =   0000 0000 1110 0000  = 224 
  
     Y mouse = 144 = % 0000 0000 1001 0000 
             $ffe0 =   1111 1111 1110 0000 
                      --------------------- 
            ANDing =   0000 0000 1000 0000  = 128 
  
     The  ANDing operation strips off all the bits whose value  is 
less than 32 and leaves the remainder which is a multiple of 32. 
     It  should be remembered that whether hexadecimal  or  decimal 
notation  is  used the computer is actually performing  a  bitwise 
operation on all the individual pairs of bits. 
  
     If you have the book "The Game Maker's Manual" you will  find 
another  example of the use of the AND command on page 40.  I  hope 
this  explanation may make it a bit clearer to those who  may  not 
have understood the logic. 
  
     Whereas the AND operation is useful for masking off bits  the 
OR operation can be used to include bits. 
     The logic being " anything OR 1 =1 ". 
  
     So, suppose we had an adventure game in which we were using a 
bit field to keep track of the items held,  helmet, sword, potion, 
magic box etc. 
     We  could  use  BSET and BCLR for  picking  up  and  dropping 
individual items but we could also use the OR operation to  modify 
the  bit field if the character was to pick up a number of  things 
at once. 
  
E.G. 
Items            c  f  w   c  m  p  s         d  a      g  h  s 
                 l  o  a   o  e  o  c         a  n      l  e  w 
                 o  o  n   i  d  t  r         g  k      o  l  o 
                 a  d  d   n  a  i  o         g  l      v  m  r 
                 k            l  o  l         e  e      e  e  d 
                                 n  l         r  t      s  t 
Items held 
Bit  field    0  0  1  0   0  0  0  0   0  0  0  0   0  1  1  1 
  
  Box 
Bit field     0  0  0  0   1  1  1  1   0  0  0  0   0  0  0  0 
---------------------------------------------------------------- 
Items OR  =   0  0  1  0   1  1  1  1   0  0  0  0   0  1  1  1 
  Box 
  
      The logic being " if box opened then Items = Items OR Box" 
     If  two  bit fields were used for different lists  of items 
then  they could be compared by using the XOR operation  to  check 
if, and what, related items from the two lists were being carried. 
  
     XOR only = 1 when both operands = 1 
  
     Any bit field can be 32 bits long which gives quite a lot  of 
scope. 
  
     Well that's it. I hope you liked the article and it has given 
you something to think about, especially if you haven't considered 
the use of these LOGICAL OPERATORS........ 
  
  
