
               GRAPHIC ADVENTURE TUTORIAL....(PART 3)

                               BY DEANO

Welcome  to  the  final  part of this  tutorial  on  writing  a  Graphic 
Adventure,  if you've missed the first two parts then you will find them 
in STOSSER, issues six and seven.

What we have from last month,  is a basic setup of the code for such  an 
adventure.  But  there is still room for improvement,  so this month  we 
shall have a look at adding extra's

 SPECIAL OBJECT LOCATIONS

As we saw last month,  objects have their own locations. We already know 
about  the  normal  object  location  but  objects  also  have   special 
locations. These are the following........

CARRIED..........Object is carried by the player
WORN.............Object is worn by the player
NOT CREATED......Object does not yet exist in the game

In  order to put our objects into these special locations we  must  give 
them a number other than a normal location number.  For example,  if our 
game had 100 locations,  then so would an object.  A normal object would 
be  given a location number between 1 and 100 so it would appear at  the 
specified location.  But,  a special object would NOT appear at a normal 
location  so  therefore we have to give it,  its  own  special  location 
number higher than 100, the highest normal location number.

So,  to  make  life easier we assign the special location numbers  to  a 
varible like so......

 10 CARRIED=1000 : WORN=2000 : NC=3000

Each varible can be used to specify which special location the object is 
in.  So for example,  if we wanted the game to list our carried  objects 
then it could be checked like this. First, using an array like OBLOC, we 
can put our first object in the carried special location like this..

 20 OBLOC(1)=CARRIED

We  can  then add some lines to our game which imform  the  player  what 
objects he is carrying......
    
 30 for X=1 to 10
 40 if OBLOC(X)=CARRIED then print"You are carrying.....";OBJECT$(X)
 50 if OBLOC(X)=WORN then print"You are wearing....";OBJECT$(X)
 60 next X

What  this routine does is looks at the location numbers of ten  objects 
and prints the required information.  OBJECT$(X) is an array which holds 
a  short description of the objects.  So line 40 checks if object  X  is 
carried and if so, tells the player he is carrying it.

Note  line 50,  this will tell the player if the object he has is  being 
worn by him.

The varible NC stands for NOT CREATED, an NC object is, in simple terms, 
an  object  which  DOES exist,  but does'nt appear  in  the  game  until 
something happens.  For example,  if the player examines a rug he  could 
find a key.  The rug would be part of the location and the key would  be 
the  NC object.  When the player examines the rug,  the game would  then 
move the key from the NC location to the players present room....

 100 if EXAMINE$="key" and OBLOC(5)=NC then OBLOC(5)=ROOM 

The varible EXAMINE$ holds the object word of the object the player  has 
decided  to examine,  the line also checks that the object is still  not 
created before creating it. Once this is done, we can tell the player.

  100 if EXAMINE$="key" and OBLOC(5)=NC then OBLOC(5)=ROOM :
      print"You have found a key under the rug."

So, we can move each object to a special location or a room quite easily 
using these examples...

 OBLOC(5)=NC........Move object 5 to NOT CREATED location
 OBLOC(2)=WORN......Move object 2 to WORN location
 OBLOC(7)=ROOM......Move object 7 to player's present room
 OBLOC(3)=10........Move object 3 to room ten

  EXITS

Apart  from normal exits leading from one room to the other,  there  are 
other exits that we can use....
 
First,  a false exit. Like NC objects a false exit can be something that 
does'nt  exist yet.  Something that is blocked until the player finds  a 
way  to  unblock it.  If theres an exit leading into a bedroom  then  it 
could  be blocked by a door which must be opened in order to  enter  the 
bedroom.  To  do these we can use the MAP array I mentioned last  month, 
read  issue 7 if you have'nt learnt about MAP yet.  Anyway,  lets  first 
make exit one in room two a false exit..

 10 MAP(2,1)=0

Now  any attempt to go through this exit will result in the game  saying 
that you can'nt go that way. Now lets allow the player to open the door.

 100 if OPEN$="door" and MAP(2,1)=0 then MAP(2,1)=5 :  print"The door is 
     now open."

The varible OPEN$ holds the part of the location you wish to  open,  the 
line  then  checks to see if the door is still closed and  opens  it  by 
connecting the false exit to room five. The player is told that the door 
is open and he can now enter it.
  
Another type of exit is the special exit.  This can be used to transport 
the player to another location.  For example, if the player stepped into 
a magic mirror then he could be transported to another room...

 200 if STEP$="mirror" then ROOM=rnd(100) : if not(ROOM) then 200

This line checks if the player has stepped into the mirror,  if so  then 
the varible ROOM which holds the number of the player's present room  is 
set  to  a random number between 1 and 100 which will be  the  room  the 
player  is transported to.  The last part of the line tells STOS  to  go 
back and try again if ROOM equals nought....

AND FINALLY........

Well thats the end of this short course,  I hope its been of some use to 
you and given you a few idea's. It does'nt cover everything but I'm sure 
you'll be able to use a few of the routines.

If you want to dive further into creating a graphic adventure then there 
is  such  a  package that you can use.  It's  called  the  STOS  Graphic 
Adventure  Creator and its availible from L.A.P.D.  It is a  Licenceware 
package  costing œ2.99 and it takes the complete beginner step  by  step 
into creating Graphic Adventures.  It has a massive well detailed manual 
with  it  and  an example game.  It also has a  powerful  program  which 
allows  you  to set up your data with ease.  The save data can  then  be 
loaded  into another program and with a bit of work,  you  could  create 
your own masterpiece.

There is also the STOS Adventure Creator which is used for creating text 
based adventures,  this is PD and can be obtained from various  librarys 
such as MT Software and L.A.P.D.

If you wish,  I could send you both packages for œ2.00 each,  just write 
to the following address...........

 DEANO
 27 TURBARY WALK
 MILNROW ROCHDALE
 OL16 4JN

Please make cheques payable to Dean Sharples


