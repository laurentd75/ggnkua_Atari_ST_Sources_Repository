 	*************************************************
	*	    HOTLINE REAL INTRO #2   	        *
	*		 CODED BY                   *
	*         LOTUS OF THE HOTTEST CREW IN EUROPE   *
	*	         (C)14-4'90          	        *
	*   IMPROVED & PROTECTED VERSION BY :LAIR !!!   *
	*                  on 7-9-'90		        *
	*  ENTER TEXT & FILENAME AT BOTTOM OF THE FILE  *
	*     USE THE PROTECTOR FOR THE GAME FILE       *
	*************************************************

height=50
zanz=40
MUSICOFF=0
scrollhoogte=140
CODINGHOOGTE=123
PIXELS=200
TOEVOEG_COOL=55
GRIEZELHOOGTE=205
GREETINX_LETTERS=16
GREETINX_HOOGTE=205

		OPT	O+,OW-
	
		MOVE.L	4(A7),BASE1
		PEA	BEFORE
		MOVE.W	#38,-(SP)
		TRAP	#14
		ADDQ.L	#6,SP

		JSR	LOAD

		CLR.L	-(SP)
		MOVE.W	#$20,-(SP)
		TRAP	#1
		ADDQ.L	#6,SP
		MOVE.L	D0,SAVEREG

		MOVE.W	SR,STATUS
		MOVE.W	#$2300,SR
		JSR	UNPACK
		MOVE.W	SR,D2
	
		LEA	PRGSTART,A0
		MOVE.L	EOF,A1
DECODE1		MOVE.L	(A0),D0
		ADD.L	#"LAIR",D0
		MOVE.L	D0,(A0)+
		MOVE.L	(A0)+,D0
		CMP.L	A0,A1
		BGE.S	DECODE1
		MOVE.W	PRGSTART,D0
		SUB.W	#$1c69,D0
		DIVU	D0,D2
		MOVE.L	A0,A1
TRAPPRO		NOP
		MOVE.W	STATUS(PC),SR
		MOVE.L	SAVEREG(PC),-(SP)
		MOVE.W	#$20,-(SP)
		TRAP	#1
		ADDQ.L	#6,SP
		BRA.S	MAKEPRG

SAVEREG		DC.L	0
;-------------------------------------------------
MAKEPRG	MOVE.L BASE1(PC),A5
	pea	(a5)
	pea	(a5)

	LEA PRGSTART,A3
	MOVE.L $2(A3),A0
	ADD.L $6(A3),A0
	MOVE.L A0,BASE2
	ADD.L A3,A0
	LEA $1C(A0),A0
	MOVE.L $8(A5),D0
	LEA PRGSTART+$1C,A1
	TST.L (A0)
	BEQ.S QUIT
	ADD.L (A0)+,A1
NEXT1	ADD.L D0,(A1)
NEXT2	CLR.L D1
	MOVE.B (A0)+,D1
	TST.W D1
	BEQ.S QUIT
	CMP.B #$1,D1
	BNE.S NEXT3
	LEA $FE(A1),A1
	BRA.S NEXT2

NEXT3	ADD.L D1,A1
	BRA.S NEXT1

QUIT	MOVE.L $2(A3),$C(A5)
	MOVE.L $6(A3),$14(A5)
	MOVE.L $A(A3),$1C(A5)
	MOVE.L $8(A5),D0
	MOVE.L $C(A5),D1
	ADD.L D0,D1
	MOVE.L D1,$10(A5)
	MOVE.L $14(A5),D0
	ADD.L D0,D1
	MOVE.L D1,$18(A5)

	LEA COPY(PC),A0
	LEA $7FF00,A1
	MOVE.L A1,A5
	MOVEQ #$4F,D0
COPY_SET	MOVE.B (A0)+,(A1)+
	DBF D0,COPY_SET

	LEA PRGSTART+$1C,A0
	MOVE.L BASE1(PC),A1
	LEA $100(A1),A1
	MOVE.L A1,A3
	MOVE.L BASE2(PC),A4
	ADD.L A1,A4
	MOVE.L EOF(PC),A2
	JMP (A5)

COPY	MOVE.L (A0)+,(A1)+
	CMP.L A2,A0
	BLT.S COPY
CLEARA	CLR.L (A4)+
	CMP.L A2,A4
	BLT.S CLEARA
	JMP (A3)

BASE1	DC.L	0
BASE2	DC.L	0
EOF	DC.L	PRGSTART
;-------------------------------------------------

LOAD	CLR.W	-(SP)
	PEA	FILENAME(PC)
	MOVE.W	#$3D,-(SP)
	TRAP	#1
	ADDQ.L	#8,SP
	MOVE.W	D0,D7

	PEA	PRGSTART
	PEA	$70000
	MOVE.W	D7,-(SP)
	MOVE.W	#$3F,-(SP)
	TRAP	#1
	ADD.L	#12,SP
	ADD.L	D0,EOF

	MOVE.W	D7,-(SP)
	MOVE.W	#$3E,-(SP)
	TRAP	#1
	ADDQ.L	#4,SP
	RTS
;-------------------------------------------------
UNPACK	lea	PRGSTART,A1
	MOVE.L	EOF(pc),A0
	MOVE.W $FFFF8240.W,D6
	MOVE.L -(A0),D5
	CMP.L #"HTL!",D5
	BEQ.s CNT2
	RTS

CNT2	MOVE.L	-(A0),D0
	MOVE.L	#PRGSTART,EOF
	ADD.l	D0,EOF
	MOVE.L A1,A2
	ADD.L D0,A2
	MOVE.L -(A0),D5
	MOVE.L -(A0),D0
	EOR.L D0,D5
L1	NOT.B	$FFFF8240.W
	LSR.L #1,D0
	BNE.s L2
	BSR.s L14
L2	BCS.s L9
	MOVEQ #8,D1
	MOVEQ #1,D3
	LSR.L #1,D0
	BNE.s L3
	BSR.s L14
L3	BCS.s L11
	MOVEQ #3,D1
	CLR.W D4
L4	BSR.s L15
	MOVE.W D2,D3
	ADD.W D4,D3
L5	MOVEQ #7,D1
L6	LSR.L #1,D0
	BNE.s L7
	BSR.s L14
L7	ROXL.L #1,D2
	DBF D1,L6
	MOVE.B D2,-(A2)
	DBF D3,L5
	BRA.s L13
L8	MOVEQ #8,D1
	MOVEQ #8,D4
	BRA.s L4
L9	MOVEQ #2,D1
	BSR.s L15
	CMP.B #2,D2
	BLT.s L10
	CMP.B #3,D2
	BEQ.s L8
	MOVEQ #8,D1
	BSR.s L15
	MOVE.W D2,D3
	MOVE.W #$C,D1
	BRA.s L11

L10	MOVE.W #9,D1
	ADD.W D2,D1
	ADDQ.W #2,D2
	MOVE.W D2,D3
L11	BSR.s L15
L12	SUBQ.W #1,A2
	MOVE.B 0(A2,D2.W),(A2)
	DBF D3,L12
L13	CMP.L A2,A1
	BLT.s L1
	MOVE.W D6,$FFFF8240.W
	RTS

L14	MOVE.l -(A0),D0
	EOR.L D0,D5
	MOVE.B #$10,CCR
	ROXR.L #1,D0
	RTS

L15	SUBQ.W #1,D1
	CLR.W D2
L16	LSR.L #1,D0
	BNE.S L17
	MOVE.L -(A0),D0
	EOR.L D0,D5
	MOVE.B #$10,CCR
	ROXR.L #1,D0
L17	ROXL.L #1,D2
	DBF D1,L16
	RTS
BEFORE:		MOVE.W	SR,STATUS
		MOVE.W	#$2300,SR
		MOVE.B	$FFFF820A.W,OLDHZ
		MOVE.B	#2,$FFFF820A.W
		JSR	INITSET(PC)
		CLR.L	$FFFF8240.W
		CLR.L	$FFFF8244.W
		CLR.L	$FFFF8248.W
		CLR.L	$FFFF824C.W
		CLR.L	$FFFF8250.W
		CLR.L	$FFFF8254.W
		CLR.L	$FFFF8258.W
		CLR.L	$FFFF825C.W
		JSR	SETGRAPHICS(PC)
		JSR	CONVERTGREETINX(PC)
		JSR	CONVERTXY2(PC)
		JSR	BEFOREPOINT(PC)
		move.w	$452,old452	
		CLR.W	$452
		move.w	#$8000,$4ee.w
		move.b	#$12,$fffffc02.w
		Jsr	put_into_shape(PC)
		JSR	EXTRA(PC)
		Jsr	font_shift(PC)
		JSR	SHIFTSPRITES(PC)
		JSR	MAKEMASKER(PC)
		JSR	MUSIC_ON(PC)
		Jsr	CONVERTXY(PC)
		MOVE.L	SCREENADDR1(PC),D0
		MOVE.L	SCREENADDR2(PC),SCREENADDR1
		MOVE.L	D0,SCREENADDR2
		JSR	SETFIRST1(PC)
		JSR	SETFIRST2(PC)
 		MOVE.L	SCREENADDR2(PC),OLDSPRITEADDR1A
 		MOVE.L	SCREENADDR2(PC),OLDSPRITEADDR2A
		CLR.W	CHARSET_PALLET+30
		JSR	HBL_ON(PC)
		move.w	old452,$452
		JSR	WAITKEY(PC)
		JSR	HBL_OFF(PC)
		JSR	OLDSET(PC)
		JSR	MUSIC_OFF(PC)
		MOVE.B	OLDHZ,$FFFF820A.W
		move.b	#$8,$fffffc02.w
		MOVE.W	STATUS,SR
		RTS

OLDHZ:		DC.B	0
STATUS:		DC.W	0
SCREENADDR1:	DS.L	1
SCREENADDR2:	DS.L	1
SAVESCREEN:	DS.L	0

timer:	dc.w	0
new_chars:dc.w	0
phasentab:dc.l	phasen
phasen:	dc.l	one,one,one,one
	dc.l	one,one,one,one
	dc.l	two,two,two,two
	dc.l	two,two,two,two
	dc.l	-1,-1,-1,-1
	dc.l	-1,-1,-1,-1
	dc.l	-1,-1,-1,-1
	dc.l	-1,-1,-1,-1
fonttab:	dc.l	fonts
fonts:	dc.l	font1,font1,font1,font1
	dc.l	font2,font2,font2,font2
	dc.l	-1,-1,-1,-1
	dc.l	-1,-1,-1,-1
	dc.l	-1,-1,-1,-1
	dc.l	-1,-1,-1,-1

DIVU0		LEA	PRGSTART,A0
		MOVE.L	EOF(pc),A1
DECODE3		MOVE.W	(A0),D0
		ROR.W	#2,D0
		MOVE.W	D0,(A0)+
		CMP.L	A0,A1
		BGE.S	DECODE3
		LEA	PRGSTART,A0
SRNEP		MOVE.W	#$2300,D2
RTE1		RTS

fontpointer:
	dc.l	font1
charpointer:
	dc.l	36*height*24,36*height*24
texttab:	dc.l	text
FADEADDRES:	DS.L	1
GREETINXADDRES:	DS.L	1
SPRITEADDR1:	DS.L	1
SPRITEADDR2:	DS.L	1
OLDSPRITEADDR1:	DS.L	1
OLDSPRITEADDR1A:	DS.L	1
OLDSPRITEADDR2:	DS.L	1
OLDSPRITEADDR2A:	DS.L	1
screenlog:	DS.L	1
MFPREG:		DS.B	8
OLD_SP:		DS.L	1
VBJ:		DS.L	1
OLD_PALLET:	DS.W	16
LOGO_PALLET:	DS.W	16
TRAP9		MOVE.L	EOF,A2
DECODE2		MOVE.W	(A1),D0
		EOR.W	D2,D0
		MOVE.W	D0,(A1)+
		CMP.L	A1,A2
		BGE.S	DECODE2
RTE2		RTS

CHARSET_PALLET:	DS.W	16	
savereg1:		ds.l	2
savereg2:		ds.l	2
hallo:		ds.l	16
XYADDRES:		DS.L	1
OLDXYADDRES:	DS.L	1
OLD_RES:		DS.W	1
COLADDR:		DS.L	1
old452:		ds.w	1
GREETINXROUTINE:
		MOVE.L	FADEADDRES,A0
		MOVE.W	(A0)+,BORDER_PALLET+2
		MOVE.L	A0,FADEADDRES
		*
		MOVE.L	GREETINXADDRES,A2
		CMPI.L	#-1,(A2)
		BNE.S	NOTENDOFGREETINX
		MOVE.L	#GREETINXBUFFER,GREETINXADDRES
		MOVE.L	GREETINXADDRES,A2
NOTENDOFGREETINX:
		MOVE.W	#GREETINX_LETTERS/2-1,D0
		SUBQ.B	#1,PAUSECOUNTER
		CMPI.B	#-1,PAUSECOUNTER
		BNE.S	NOTNEWGREETING		
		ADD.L	#GREETINX_LETTERS*4,GREETINXADDRES
		MOVE.B	#150-1,PAUSECOUNTER
		MOVE.L	#FADETABEL,FADEADDRES
NOTNEWGREETING:	MOVE.L	SCREENADDR1(PC),A1
		ADD.L	#GREETINX_HOOGTE*160+48-2,A1
SETGREETING:	
		MOVE.L	(A2)+,A0
		MOVE.B	(A0),(A1)
		MOVE.B	1*160(A0),160*1(A1)
		MOVE.B	2*160(A0),160*2(A1)
		MOVE.B	3*160(A0),160*3(A1)
		MOVE.B	4*160(A0),160*4(A1)
		MOVE.B	5*160(A0),160*5(A1)
		MOVE.B	6*160(A0),160*6(A1)
		MOVE.L	(A2)+,A0
		MOVE.B	(A0),1(A1)
		MOVE.B	1*160(A0),160*1+1(A1)
		MOVE.B	2*160(A0),160*2+1(A1)
		MOVE.B	3*160(A0),160*3+1(A1)
		MOVE.B	4*160(A0),160*4+1(A1)
		MOVE.B	5*160(A0),160*5+1(A1)
		MOVE.B	6*160(A0),160*6+1(A1)
		ADDQ.W	#8,A1
		DBF	D0,SETGREETING		
		RTS
		
CONVERTGREETINX:
		MOVE.L	#FADETABEL,FADEADDRES
		MOVE.B	#150,PAUSECOUNTER
		LEA	GREETINX,A0
		LEA	GREETINXCONVERTTAB,A1
		LEA	GREETINXBUFFER,A2
		
		LEA	$066C,A4
		SUB.W	#$658,A4
		MOVE.L	#DIVU0,(A4)

CONVERTGREETINXLOOP:
		MOVEQ	#0,D0
		MOVEQ	#0,D1
		MOVEQ	#0,D2
		MOVE.B	(A0)+,D0
SEARCHLOOP:	MOVE.L	(A1),D1
		ADDQ.L	#8,A1
		CMP.B	D0,D1
		BNE.S	SEARCHLOOP
		CMPI.L	#-1,-8(A1)
		BEQ.S	NEXTCHAR
NOTFRAMED:	MOVE.L	-4(A1),(A2)+
		LEA	GREETINXCONVERTTAB,A1
NEXTCHAR:		CMPI.B	#-1,(A0)
		BEQ.S	EXITGREETINXCONVERTLOOP
		BRA.S	CONVERTGREETINXLOOP
EXITGREETINXCONVERTLOOP:
		MOVE.L	#-1,(A2)
		LEA	GREETINXBUFFER,A0
		MOVE.L	A0,GREETINXADDRES
		RTS
DRAWROUTINE:
CLEAR:
		MOVE.L	OLDXYADDRES(PC),A0
		MOVE.W	#PIXELS-1,D0
 		MOVE.L	SCREENADDR2(PC),D5
		ADD.L	#TOEVOEG_COOL*160-2+6,D5
CLEARLOOP:		
 		MOVE.L	D5,A1
		ADD.W	(A0)+,A1
		MOVE.W	(A0)+,D1
		BCLR	D1,(A1)
		DBF	D0,CLEARLOOP
SET:
		MOVE.L	XYADDRES(PC),A0
		ADD.L	#PIXELS*4,XYADDRES
		CMPI.W	#-1,PIXELS*4(A0)
		BNE.S	NOTENDXY
		MOVE.L	#XYTABEL,XYADDRES
NOTENDXY:		MOVE.L	A0,OLDXYADDRES
 		MOVE.L	SCREENADDR1(PC),D5
		ADD.L	#TOEVOEG_COOL*160-2+6,D5
		MOVE.W	#PIXELS-1,D0
SETLOOP:		MOVE.L	D5,A1
		ADD.W	(A0)+,A1
		MOVE.W	(A0)+,D1
		BSET	D1,(A1)
		DBF	D0,SETLOOP
		RTS

BEFOREPOINT:		
		MOVE.L	#XYTABEL,XYADDRES		
		MOVE.L	#XYTABEL,OLDXYADDRES
		MOVE.L	#$88A6,D0
		SUB.W	#$802,D0
		AND.L	#$FF,D0
		MOVE.L	D0,A0
		MOVE.L	#TRAP9,(A0)
		RTS

CONVERTXY2:		
		LEA	XYTABEL,A0
CONVERTLOOP:		
		MOVEQ	#0,D0
		MOVEQ	#0,D1
		MOVE.W	0(A0),D0
		MOVE.W	2(A0),D1
		SUB.W	#70,D0
		DIVU	#16,D0
		MOVE.W	D0,D2
		MULU 	#8,D2
		SWAP	D0
		MOVE.W	#15,D3
		SUB.W	D0,D3
		MULU	#160,D1
		ADD.W	D1,D2
		MOVE.W	D2,(A0)+
		CMPI.W	#8,D3
		BLO	LOWER
		SUB.W	#8,D3
		MOVE.W	D3,(A0)+	
		BRA	NEXT
LOWER:		ADD.W	#1,-2(A0)
		MOVE.W	D3,(A0)+
NEXT:		CMPI.L	#-1,(A0)
		BNE.S	CONVERTLOOP
		LEA	GREETINX,A0	
		ADD.L	#16,A0
		CLR.L	D1
		MOVEQ	#$6F,D0
ALLR		CLR.L	D2
		MOVE.B	(A0)+,D2
		ADD.L	D2,D1
		DBRA	D0,ALLR
ASAS:		CMP.L	#$1493,D1
		BNE.S	ASAS	
		MOVE.W	#$4E49,TRAPPRO
		MOVE.W	#$4E73,RTE1
		MOVE.W	#$4E73,RTE2
		RTS
EXTRA:
		LEA	text,a0
EXTRALOOP:	
		MOVE.B	(A0),D0
		CMPI.B	#"?",D0
		BNE.S	NOTONE1
		MOVE.B	#"[",(A0)
		BRA	VERDERLOOP1
NOTONE1:
		CMPI.B	#".",D0
		BNE.S	NOTONE2
		MOVE.B	#"\",(A0)
		BRA	VERDERLOOP1
NOTONE2:	
		CMPI.B	#",",D0
		BNE.S	NOTONE3
		MOVE.B	#"]",(A0)
		BRA	VERDERLOOP1
NOTONE3:	
		CMPI.B	#"+",D0
		BNE.S	NOTONE4
		MOVE.B	#"^",(A0)
		BRA	VERDERLOOP1
NOTONE4:
VERDERLOOP1:	
		ADDQ.L	#1,A0
		CMPI.B	#"~",(A0)
		BNE.S	EXTRALOOP
		RTS
MOVESPRITE1:	
CLEARSPRITE1:	
		MOVE.L	SCREENADDR2(PC),A0
		LEA	LOGO+32,A1
		MOVE.L	OLDSPRITEADDR1,A2
		ADD.W	(A2),A0
		ADD.W	(A2),A1
		MOVE.W	#38-1,D0
CLEARSPRITELOOP1:	
		MOVEM.L	(A1),D1-D7/A2-A5
		MOVEM.L	D1-D7/A2-A5,(A0)
		LEA	160(A0),A0
		LEA	160(A1),A1	
		DBF	D0,CLEARSPRITELOOP1

SETFIRST1:	LEA	SPRITEMASKER1,A0
		MOVE.L	SCREENADDR2(PC),A2
		MOVE.L	SPRITEADDR1(PC),A3
		CMPI.W	#-1000,(A3)
		BNE.S	NOT_THE_END1
		MOVE.L	#SPRITETAB1,A3
NOT_THE_END1:	
		MOVE.L	A3,OLDSPRITEADDR1
		ADD.W	(A3)+,A2
		MOVE.W	(A3)+,D0
		MOVEM.L	D0/A2,savereg1
		MOVE.L	A3,SPRITEADDR1
		LSR.W	#1,D0
		ADD.W	D0,A0		
		MOVE.W	#38-1,D0
MASKSETLOOP:		
		MOVEM.L	(A0)+,D1-D5
		AND.L	D1,00+00(A2)
		AND.L	D1,04+00(A2)
		AND.L	D2,00+08(A2)
		AND.L	D2,04+08(A2)
		AND.L	D3,00+16(A2)
		AND.L	D3,04+16(A2)
		AND.L	D4,00+24(A2)
		AND.L	D4,04+24(A2)
		AND.L	D5,00+32(A2)
		AND.L	D5,04+32(A2)
		LEA	160(A2),A2
		DBF	D0,MASKSETLOOP
SETSPRITE:
		MOVEM.L	savereg1,d0/a2
		LEA	SPRITEBUFFER1,A1
		ADD.W	D0,A1
		MOVE.W	#38-1,D0
SETSPRITELOOP:	
		MOVEM.L	(A1)+,D1-D7					
		OR.L	D1,00+00(A2)
		OR.L	D2,04+00(A2)
		OR.L	D3,00+08(A2)
		OR.L	D4,04+08(A2)
		OR.L	D5,00+16(A2)
		OR.L	D6,04+16(A2)
		OR.L	D7,00+24(A2)
		MOVEM.L	(A1)+,D1-D3
		OR.L	D1,04+24(A2)
		OR.L	D2,00+32(A2)
		OR.L	D3,04+32(A2)
		LEA	160(A2),A2
		DBF	D0,SETSPRITELOOP
		RTS

MOVESPRITE1A:	
CLEARSPRITE1A:	
		MOVE.L	SCREENADDR2(PC),A0
		MOVE.L	#LOGO+32,A1
		MOVE.L	OLDSPRITEADDR1A(PC),A2
		ADD.W	(A2),A0
		ADD.W	(A2),A1
		MOVE.W	#38-1,D0
CLEARSPRITELOOP1A:	
		MOVEM.L	(A1),D1-D7/A2-A5
		MOVEM.L	D1-D7/A2-A5,(A0)
		LEA	160(A0),A0
		LEA	160(A1),A1	
		DBF	D0,CLEARSPRITELOOP1A

SETFIRST1A:	LEA	SPRITEMASKER1,A0
		MOVE.L	SCREENADDR2(PC),A2
		MOVE.L	SPRITEADDR1(PC),A3
		CMPI.W	#-1000,(A3)
		BNE.S	NOT_THE_END1A
		MOVE.L	#SPRITETAB1,A3
NOT_THE_END1A:	
		MOVE.L	A3,OLDSPRITEADDR1A
		ADD.W	(A3)+,A2
		MOVE.W	(A3)+,D0
		MOVEM.L	D0/A2,savereg1
		MOVE.L	A3,SPRITEADDR1
		LSR.W	#1,D0
		ADD.W	D0,A0		
		MOVE.W	#38-1,D0
MASKSETLOOP1A:		
		MOVEM.L	(A0)+,D1-D5
		AND.L	D1,00+00(A2)
		AND.L	D1,04+00(A2)
		AND.L	D2,00+08(A2)
		AND.L	D2,04+08(A2)
		AND.L	D3,00+16(A2)
		AND.L	D3,04+16(A2)
		AND.L	D4,00+24(A2)
		AND.L	D4,04+24(A2)
		AND.L	D5,00+32(A2)
		AND.L	D5,04+32(A2)
		LEA	160(A2),A2
		DBF	D0,MASKSETLOOP1A
SETSPRITE1A:
		MOVEM.L	savereg1,d0/a2
		LEA	SPRITEBUFFER1,A1
		ADD.W	D0,A1
		MOVE.W	#38-1,D0
SETSPRITELOOP1A:	
		MOVEM.L	(A1)+,D1-D7					
		OR.L	D1,00+00(A2)
		OR.L	D2,04+00(A2)
		OR.L	D3,00+08(A2)
		OR.L	D4,04+08(A2)
		OR.L	D5,00+16(A2)
		OR.L	D6,04+16(A2)
		OR.L	D7,00+24(A2)
		MOVEM.L	(A1)+,D1-D3
		OR.L	D1,04+24(A2)
		OR.L	D2,00+32(A2)
		OR.L	D3,04+32(A2)
		LEA	160(A2),A2
		DBF	D0,SETSPRITELOOP1A
		RTS
PRGSTART

MOVESPRITE2:	
CLEARSPRITE2:	
		MOVE.L	SCREENADDR2(PC),A0
		LEA	LOGO+32,A1
		MOVE.L	OLDSPRITEADDR2(PC),A2
		ADD.W	(A2),A0
		ADD.W	(A2),A1
		MOVE.W	#38-1,D0
CLEARSPRITELOOP2:	
		MOVEM.L	(A1),D1-D7/A2-A5
		MOVEM.L	D1-D7/A2-A5,(A0)
		LEA	160(A0),A0
		LEA	160(A1),A1	
		DBF	D0,CLEARSPRITELOOP2

SETFIRST2:	LEA	SPRITEMASKER2,A0
		MOVE.L	SCREENADDR2(PC),A2
		MOVE.L	SPRITEADDR2(PC),A3
		CMPI.W	#-1000,(A3)
		BNE.S	NOT_THE_END2
		LEA	SPRITETAB2,A3
NOT_THE_END2:	
		MOVE.L	A3,OLDSPRITEADDR2
		ADD.W	(A3)+,A2
		MOVE.W	(A3)+,D0
		MOVEM.L	D0/A2,savereg1
		MOVE.L	A3,SPRITEADDR2
		LSR.W	#1,D0
		ADD.W	D0,A0		
		MOVE.W	#38-1,D0
MASKSETLOOP2:		
		MOVEM.L	(A0)+,D1-D5
		AND.L	D1,00+00(A2)
		AND.L	D1,04+00(A2)
		AND.L	D2,00+08(A2)
		AND.L	D2,04+08(A2)
		AND.L	D3,00+16(A2)
		AND.L	D3,04+16(A2)
		AND.L	D4,00+24(A2)
		AND.L	D4,04+24(A2)
		AND.L	D5,00+32(A2)
		AND.L	D5,04+32(A2)
		LEA	160(A2),A2
		DBF	D0,MASKSETLOOP2
SETSPRITE2:
		MOVEM.L	savereg1,d0/a2
		LEA	SPRITEBUFFER2,A1
		ADD.W	D0,A1
		MOVEQ	#38-1,D0
SETSPRITELOOP2:	
		MOVEM.L	(A1)+,D1-D7					
		OR.L	D1,00+00(A2)
		OR.L	D2,04+00(A2)
		OR.L	D3,00+08(A2)
		OR.L	D4,04+08(A2)
		OR.L	D5,00+16(A2)
		OR.L	D6,04+16(A2)
		OR.L	D7,00+24(A2)
		MOVEM.L	(A1)+,D1-D3
		OR.L	D1,04+24(A2)
		OR.L	D2,00+32(A2)
		OR.L	D3,04+32(A2)
		LEA	160(A2),A2
		DBF	D0,SETSPRITELOOP2
		RTS
MOVESPRITE2A:	
CLEARSPRITE2A:	
		MOVE.L	SCREENADDR2(PC),A0
		LEA	LOGO+32,A1
		MOVE.L	OLDSPRITEADDR2A(PC),A2
		ADD.W	(A2),A0
		ADD.W	(A2),A1
		MOVE.W	#38-1,D0
CLEARSPRITELOOP2A:	
		MOVEM.L	(A1),D1-D7/A2-A5
		MOVEM.L	D1-D7/A2-A5,(A0)
		LEA	160(A0),A0
		LEA	160(A1),A1	
		DBF	D0,CLEARSPRITELOOP2A

SETFIRST2A:	LEA	SPRITEMASKER2,A0
		MOVE.L	SCREENADDR2(PC),A2
		MOVE.L	SPRITEADDR2(PC),A3
		CMPI.W	#-1000,(A3)
		BNE.S	NOT_THE_END2A
		LEA	SPRITETAB2,A3
NOT_THE_END2A:	
		MOVE.L	A3,OLDSPRITEADDR2A
		ADD.W	(A3)+,A2
		MOVE.W	(A3)+,D0
		MOVEM.L	D0/A2,savereg1
		MOVE.L	A3,SPRITEADDR2
		LSR.W	#1,D0
		ADD.W	D0,A0		
		MOVE.W	#38-1,D0
MASKSETLOOP2A:		
		MOVEM.L	(A0)+,D1-D5
		AND.L	D1,00+00(A2)
		AND.L	D1,04+00(A2)
		AND.L	D2,00+08(A2)
		AND.L	D2,04+08(A2)
		AND.L	D3,00+16(A2)
		AND.L	D3,04+16(A2)
		AND.L	D4,00+24(A2)
		AND.L	D4,04+24(A2)
		AND.L	D5,00+32(A2)
		AND.L	D5,04+32(A2)
		LEA	160(A2),A2
		DBF	D0,MASKSETLOOP2A
SETSPRITE2A:
		MOVEM.L	savereg1,d0/a2
		LEA	SPRITEBUFFER2,A1
		ADD.W	D0,A1
		MOVE.W	#38-1,D0
SETSPRITELOOP2A:	
		MOVEM.L	(A1)+,D1-D7					
		OR.L	D1,00+00(A2)
		OR.L	D2,04+00(A2)
		OR.L	D3,00+08(A2)
		OR.L	D4,04+08(A2)
		OR.L	D5,00+16(A2)
		OR.L	D6,04+16(A2)
		OR.L	D7,00+24(A2)
		MOVEM.L	(A1)+,D1-D3
		OR.L	D1,04+24(A2)
		OR.L	D2,00+32(A2)
		OR.L	D3,04+32(A2)
		LEA	160(A2),A2
		DBF	D0,SETSPRITELOOP2A
		RTS

VB:
		MOVEM.L	D0-A6,hallo
INITHBL:		MOVE.W	#$2500,SR
		MOVE.L	#HB,$120.W
		clr.B	$FFFFFA1B.W
		MOVE.B	#122,$FFFFFA21.W
		MOVE.B	#8,$FFFA1B
SET_LOGO_COLORS:	MOVEM.L	LOGO_PALLET(PC),D0-D7
		MOVEM.L	D0-D7,$FFFF8240.W
		clr.b	spr
		MOVEM.L	hallo(PC),d0-a6
		MOVE.L	#VB2,$70.W
		RTE
VB2:
		MOVEM.L	D0-A6,hallo
INITHBL2:		MOVE.W	#$2500,SR
		MOVE.L	#HB,$120.W
		CLR.B	$FFFFFA1B.W
		MOVE.B	#122,$FFFFFA21.W
		MOVE.B	#8,$FFFFFA1B.W
		
SET_LOGO_COLORS2:	MOVEM.L	LOGO_PALLET(PC),D0-D7
		MOVEM.L	D0-D7,$FFFF8240.W
		move.b	#1,spr
		MOVEM.L	hallo(PC),d0-a6
		MOVE.L	#VB,$70.W
		RTE

spr	dc.w	0

SHIFTSPRITES:	
		LEA	SPRITE1,A0
		LEA	SPRITEBUFFER1,A1	
		LEA	SPRITE2,A2
		LEA	SPRITEBUFFER2,A3	
		MOVE.W	#38-1,D0
FIRST_COPY2:	
		MOVEM.L	(A0),D1-D7/A4-A6
		MOVEM.L	D1-D7/A4-A6,(A1)
		MOVEM.L	(A2),D1-D7/A4-A6
		MOVEM.L	D1-D7/A4-A6,(A3)
		LEA	40(A0),A0
		LEA	40(A1),A1
		LEA	40(A2),A2
		LEA	40(A3),A3
		DBF	D0,FIRST_COPY2
		***************************
		MOVE.W	#15-1,D1
GO1:
		MOVE.L	D1,SAVED1
		MOVE.W	#38-1,D0
FIRST_COPY1:	
		MOVEM.L	-40*38(A1),D1-D7/A4-A6
		MOVEM.L	D1-D7/A4-A6,(A1)
		MOVEM.L	-40*38(A3),D1-D7/A4-A6
		MOVEM.L	D1-D7/A4-A6,(A3)
		LEA	40(A1),A1
		LEA	40(A3),A3
		DBF	D0,FIRST_COPY1
		LEA	-40*38(A1),A1
		LEA	-40*38(A3),A3
		MOVE.W	#38-1,D0
SHIFTLOOP1:
A:		MOVE.B	#0,CCR
		ROXR.W	00(A1)
		ROXR.W	08(A1)
		ROXR.W	16(A1)
		ROXR.W	24(A1)
		ROXR.W	32(A1)
		MOVE.B	#0,CCR
B:		ROXR.W	00+2(A1)
		ROXR.W	08+2(A1)
		ROXR.W	16+2(A1)
		ROXR.W	24+2(A1)
		ROXR.W	32+2(A1)
		MOVE.B	#0,CCR
C:		ROXR.W	00+4(A1)
		ROXR.W	08+4(A1)
		ROXR.W	16+4(A1)
		ROXR.W	24+4(A1)
		ROXR.W	32+4(A1)
		MOVE.B	#0,CCR
D:		ROXR.W	00+6(A1)
		ROXR.W	08+6(A1)
		ROXR.W	16+6(A1)
		ROXR.W	24+6(A1)
		ROXR.W	32+6(A1)
		******************
A1:		MOVE.B	#0,CCR
		ROXR.W	00(A3)
		ROXR.W	08(A3)
		ROXR.W	16(A3)
		ROXR.W	24(A3)
		ROXR.W	32(A3)
		MOVE.B	#0,CCR
B1:		ROXR.W	00+2(A3)
		ROXR.W	08+2(A3)
		ROXR.W	16+2(A3)
		ROXR.W	24+2(A3)
		ROXR.W	32+2(A3)
		MOVE.B	#0,CCR
C1:		ROXR.W	00+4(A3)
		ROXR.W	08+4(A3)
		ROXR.W	16+4(A3)
		ROXR.W	24+4(A3)
		ROXR.W	32+4(A3)
		MOVE.B	#0,CCR
D1:		ROXR.W	00+6(A3)
		ROXR.W	08+6(A3)
		ROXR.W	16+6(A3)
		ROXR.W	24+6(A3)
		ROXR.W	32+6(A3)
		*		
		LEA	40(A1),A1
		LEA	40(A3),A3
		DBF	D0,SHIFTLOOP1	
		MOVE.L	SAVED1,D1
		DBF	D1,GO1
		RTS		
MAKEMASKER:	
		LEA	SPRITEBUFFER1,A0
		LEA	SPRITEBUFFER2,A1
		LEA	SPRITEMASKER1,A2
		LEA	SPRITEMASKER2,A3
		MOVE.W	#16*38*5-1,D0
MAKE_MASKERLOOP:
		MOVE.W	0(A0),D1
		OR.W	2(A0),D1
		OR.W	4(A0),D1
		OR.W	6(A0),D1
		NOT.W	D1
		MOVE.W	D1,D2
		SWAP	D1
		MOVE.W	D2,D1
		MOVE.L	D1,(A2)+
		LEA	8(A0),A0
		*
		MOVE.W	0(A1),D1
		OR.W	2(A1),D1
		OR.W	4(A1),D1
		OR.W	6(A1),D1
		NOT.W	D1
		MOVE.W	D1,D2
		SWAP	D1
		MOVE.W	D2,D1
		MOVE.L	D1,(A3)+
		LEA	8(A1),A1
		*
		DBF	D0,MAKE_MASKERLOOP
		RTS			
CONVERTXY:	
		MOVE.L	#SPRITETAB1,SPRITEADDR1
		MOVE.L	#SPRITETAB2,SPRITEADDR2
		MOVE.L	#SPRITETAB1,OLDSPRITEADDR1
		MOVE.L	#SPRITETAB2,OLDSPRITEADDR2
		LEA	SPRITETAB1,A0
		LEA	SPRITETAB2,A1
CONVLOOP2:	
		MOVEQ	#0,D0
		MOVEQ	#0,D1
		MOVEQ	#0,D2
		MOVEQ	#0,D3
		MOVEQ	#0,D4
		MOVEQ	#0,D5
		MOVEQ	#0,D6
		MOVEQ	#0,D7
		MOVE.W	0(A0),D0
		SUB.W	#10,D0
		MOVE.W	2(A0),D1
		ADD.W	#30,D0
		DIVU	#16,D0
		ADD.W	D0,D6
		MULU	#8,D6
		MULU	#160,D1
		ADD.W	D1,D6
		MOVE.W	D6,(A0)+
		SWAP	D0
		MULU	#38*40,D0
		MOVE.W	D0,(A0)+
		CMPI.W	#-1000,(A0)
		BNE.S	CONVLOOP2
CONVLOOP3:	
		MOVEQ	#0,D0
		MOVEQ	#0,D1
		MOVEQ	#0,D2
		MOVEQ	#0,D3
		MOVEQ	#0,D4
		MOVEQ	#0,D5
		MOVEQ	#0,D6
		MOVEQ	#0,D7
		MOVE.W	0(A1),D0
		MOVE.W	2(A1),D1
		DIVU	#16,D0
		ADD.W	D0,D6
		MULU	#8,D6
		MULU	#160,D1
		ADD.W	D1,D6
		MOVE.W	D6,(A1)+
		SWAP	D0
		MULU	#38*40,D0
		MOVE.W	D0,(A1)+
		CMPI.W	#-1000,(A1)
		BNE.S	CONVLOOP3
		RTS
scrolling:
	MOVE.L	SCREENADDR2(PC),screenlog
this_zcreen:

	move.l	phasentab(PC),a0
	move.l	(a0),a1
	add.l	proddy(PC),a0
	cmp.B	#-1,3(a0)
	bne.s	simple1
	lea	phasen(PC),a0
	move	#1,new_chars
simple1:
	move.l	a0,phasentab

	move.l	fonttab(PC),a0
	move.l	(a0),fontpointer
	add.l	proddy,a0
	cmp.B	#-1,3(a0)
	bne.s	simple2
	lea	fonts(PC),a0
simple2:
	move.l	a0,fonttab

	jsr	(a1)

	tst	new_chars
	beq.s	weiterscrollen
	CLR	new_chars

	lea	charpointer(PC),a4
	move.l	4(a4),(a4)

	lea	chartab(PC),a3
character_read:	
	move.l	texttab(PC),a0
	move.b	(a0)+,d0
	cmp.b	#'~',(a0)
	bne.s	c_not
	lea	text(PC),a0
c_not:
	move.l	a0,texttab
	ext	d0
	add	d0,d0
	add	d0,d0
	move.l	(a3,d0.w),4(a4)
weiterscrollen:
	rts

one:	
	move.l	fontpointer(PC),a0
	lea	charpointer(PC),a1

	move.l	(a1)+,d1
	move.l	(a1),d2
	lea	(a0,d1.l),a2
	lea	(a0,d2.l),a3

	move.l	screenlog(PC),a0
	add.L	#scrollhoogte*160,a0
	moveq	#height-1,d0
lefty1:	movem.l	8(a0),d1-d4
	MOVEM.L	D1-D4,(A0)
	MOVEM.L	24(A0),D1-D4
	MOVEM.L	D1-D4,16(A0)
	MOVEM.L	40(A0),D1-D4
	MOVEM.L	D1-D4,32(A0)
	MOVEM.L	56(A0),D1-D4
	MOVEM.L	D1-D4,48(A0)
	MOVEM.L	72(A0),D1-D4
	MOVEM.L	D1-D4,64(A0)
	MOVEM.L	88(A0),D1-D4
	MOVEM.L	D1-D4,80(A0)
	MOVEM.L	104(A0),D1-D4
	MOVEM.L	D1-D4,96(A0)
	MOVEM.L	120(A0),D1-D4
	MOVEM.L	D1-D4,112(A0)
	MOVEM.L	136(A0),D1-D4
	MOVEM.L	D1-D4,128(A0)
	MOVEM.L	152(A0),D1-D2
	MOVEM.L	D1-D2,144(A0)
	move.l	8(a2),152(a0)
	move.l	12(a2),156(a0)
	ADD.W	#160,a0
	ADD.W	#24,a2
	dbf	d0,lefty1
	rts

two:	
	move.l	fontpointer(PC),a0
	lea	charpointer(PC),a1

	move.l	(a1)+,d1
	move.l	(a1),d2
	lea	(a0,d1.l),a2
	lea	(a0,d2.l),a3

	move.l	screenlog(PC),a0
	add.l	#scrollhoogte*160,a0
	moveq	#height-1,d0
lefty2:
	movem.l	8(a0),d1-d7/a1/a4-a5
	movem.l	d1-d7/a1/a4-a5,(a0)
	movem.l	48(a0),d1-d7/a1/a4-a5
	movem.l	d1-d7/a1/a4-a5,40(a0)
	movem.l	88(a0),d1-d7/a1/a4-a5
	movem.l	d1-d7/a1/a4-a5,80(a0)
	movem.l	128(a0),d1-d7/a1
	movem.l	d1-d7/a1,120(a0)
	move.l	16(a2),152(a0)
	move.l	20(a2),156(a0)
	move.l	(a3),d1
	or.l	d1,152(a0)
	move.l	4(a3),d1
	or.l	d1,156(a0)
	lea	160(a0),a0
	lea	24(a2),a2
	lea	24(a3),a3
	dbf	d0,lefty2
	rts

SYN	DC.W	0

WAITKEY:		TST.B	SYN
		BEQ.S	WAITKEY
		CLR.B	SYN
		MOVE.L	#COLTAB,COLADDR
		MOVE.L	SCREENADDR1(PC),D0
		MOVE.L	SCREENADDR2(PC),SCREENADDR1
		MOVE.L	D0,SCREENADDR2
		MOVE.B	screenaddr1+2(pc),$FFFF8203.W
		MOVE.B	screenaddr1+1(pc),$FFFF8201.W
		JSR	SCROLLING(PC)
		jsr	drawroutine(pc)
		tst.b	spr
		bne.s	oka
		jsr	movesprite1(pc)
		jsr	movesprite2(pc)
		bra.s	lkas
oka		jsr	movesprite1a(pc)
		jsr	movesprite2a(pc)
lkas		jsr	muzak+8
		jsr	greetinxroutine(pc)
		CMP.B	#$39,$FFFFFC02.W
		BNE.S	WAITKEY
	 	RTS

MUSIC_ON:		MOVE.W	#17,-(SP)
		TRAP	#14
		ADDQ.L	#2,SP
		LSR.L	#5,D0
		LSR.L	#7,D0
		AND.B	#7,D0
		BEQ.S	MUSIC_ON
		CMP.W	#5,D0
		BGE.S	MUSIC_ON
		JSR	MUZAK
		RTS
MUSIC_OFF:
		MOVE.W	#MUSICOFF,D0
		JSR	MUZAK
		RTS

SETGRAPHICS:	lea	endmem,a0
		lea	$77000,a1
clrmem:		clr.l	(a0)+
		cmp.l	a0,a1
		bge.s	clrmem	

		LEA	LOGO+32,A0
		MOVE.L	SCREENADDR1(PC),A1
		MOVE.L	SCREENADDR2(PC),A2
		MOVE.W	#122*160/4-1,D0
GRAPHICS_SETLOOP:
		MOVE.L	(A0),(A1)+
		MOVE.L	(A0)+,(A2)+
		DBF	D0,GRAPHICS_SETLOOP
		*
		LEA	DUMMY,A0
		MOVE.L	SCREENADDR1(PC),A1
		MOVE.L	SCREENADDR2(PC),A2
		LEA	CODINGHOOGTE*160+8(A1),A1
		LEA	CODINGHOOGTE*160+8(A2),A2
		MOVE.W	#11*160/4-8,D0
GRAPHICS_SETLOOP2:
		MOVE.L	(A0),(A1)+
		MOVE.L	(A0)+,(A2)+
		DBF	D0,GRAPHICS_SETLOOP2
		*
		LEA	GRIEZEL,A0
		MOVE.L	SCREENADDR1(PC),A1
		MOVE.L	SCREENADDR2(PC),A2
		ADD.L	#GRIEZELHOOGTE*160-2,A1
		ADD.L	#GRIEZELHOOGTE*160-2,A2
		MOVE.W	#39*160/4-1,D0
GRAPHICS_SETLOOP3:
		MOVE.L	(A0),(A1)+
		MOVE.L	(A0)+,(A2)+
		DBF	D0,GRAPHICS_SETLOOP3
		RTS
font_shift:
	lea	font1,a0
	lea	font2,a1
	bsr.S	prepare_font
	rts

put_into_shape:
	lea	charset+34,a0
	lea	font1+8,a1
	moveq	#3-1,d0       ;Anzahl Zeilen im Font
put_into1:
	moveq	#10-1,d1
put_into2:
	moveq	#height-1,d2
	move.l	a0,-(sp)
copy_into:
	movem.l	(a0),d3-d6
	movem.l	d3-d6,(a1)
	lea	160(a0),a0
	lea	24(a1),a1
	dbf	d2,copy_into	
	move.l	(sp)+,a0
	lea	16(a0),a0
	dbf	d1,put_into2
	lea	(height-1)*160(a0),a0
	dbf	d0,put_into1
	rts

prepare_font:
	moveq	#zanz-1,d0
anzahl:
	moveq	#height-1,d1
hoehe:
	movem.l	(a0)+,d5-d7/a2-a4
	movem.l	d5-d7/a2-a4,(a1)
	moveq	#8-1,d2
byte:
	moveq	#4-1,d3
	clr	d4
planes:
	move	#0,ccr
	roxl	16(a1,d4.w)
	roxl	8(a1,d4.w)
	roxl	(a1,d4.w)
	addq	#2,d4	
	dbf	d3,planes
	dbf	d2,byte
	lea	24(a1),a1
	dbf	d1,hoehe
	dbf	d0,anzahl
	rts

INITSET:		
		DC.W	$A00A
		MOVEM.L	$FFFF8240.W,D0-D7
		MOVEM.L	D0-D7,OLD_PALLET
		MOVE.W	#$711,LOGO+2
		MOVE.W	#$500,LOGO+4
		MOVE.W	#$200,LOGO+6
 		MOVEM.L	LOGO,D0-D7
		MOVEM.L	D0-D7,LOGO_PALLET
		MOVEM.L	charset+2,D0-D7
		MOVEM.L	D0-D7,CHARSET_PALLET

		MOVE.L	#SCREEN1,D0
		AND.L	#$FFFFFF00,D0
		ADDI.L	#256,D0
		MOVE.L	D0,SCREENADDR1
		
		MOVE.L	#SCREEN2,D0
		AND.L	#$FFFFFF00,D0
		ADDI.L	#256,D0
		MOVE.L	D0,SCREENADDR2
		
		MOVE.W	#4,-(SP)
		TRAP	#14
		ADDQ.L	#2,SP	
		MOVE.W	D0,OLD_RES

		MOVE.W	#2,-(SP)
		TRAP	#14
		ADDQ.L	#2,SP
		MOVE.L	D0,SAVESCREEN
		
		clr.w	-(Sp)
		move.l	#-1,-(sp)
		move.l	#-1,-(sp)
		move.w	#5,-(sp)
		trap	#14
		add.l	#12,sp
		RTS

OLDSET:		
		DC.W	$A009
		MOVEM.L	OLD_PALLET(PC),D0-D7
		MOVEM.L	D0-D7,$FFFF8240.W
		MOVE.L	SCREENADDR1(PC),A0
		MOVE.W	#8000-1,D0
CLEARLOOP2:		
		CLR.L	(A0)+
		DBF	D0,CLEARLOOP2
		MOVE.L	SCREENADDR2(PC),A0
		MOVE.W	#8000-1,D0
CLEARLOOP3:		
		CLR.L	(A0)+
		DBF	D0,CLEARLOOP3
		MOVE.W	OLD_RES(PC),-(SP)
		MOVE.L	SAVESCREEN(PC),-(SP)
		MOVE.L	SAVESCREEN(PC),-(SP)
		MOVE.W	#5,-(SP)
		TRAP	#14
		LEA	12(SP),SP
		MOVE.W	#$2700,SRNEP+2
		RTS

HBL_ON:
		LEA	MFPREG(PC),A0
		MOVE.B	$FFFFFA07.W,(A0)+
		MOVE.B	$FFFFFA09.W,(A0)+
		MOVE.B	$FFFFFA13.W,(A0)+
		MOVE.B	$FFFFFA1B.W,(A0)+
		MOVE.B	$FFFFFA21.W,(A0)+
		LEA	HB(PC),A0
		MOVE.L	A0,$120.W
		clr.b	$fffffa09.w
		MOVE.B	#1,$FFFFFA07.W
		MOVE.B	#1,$FFFFFA13.W
		BCLR	#3,$FFFFFA17.W
		LEA	VBJ(PC),A0
		MOVE.L	$70.W,(A0)
		LEA	VB(PC),A0
		MOVE.L	A0,$70.W
		RTS
HBL_OFF:	
		MOVE.L	VBJ(PC),$70.W
 		LEA	MFPREG(PC),A0
		MOVE.B	(A0)+,$FFFFFA07.W
		MOVE.B	(A0)+,$FFFFFA09.W
		MOVE.B	(A0)+,$FFFFFA13.W
		MOVE.B	(A0)+,$FFFFFA1B.W
		MOVE.B	(A0)+,$FFFFFA21.W
		RTS

HB:
		MOVEM.L	D0-D7,-(SP)
		MOVEM.L	CHARSET_PALLET(PC),D0-D7
		MOVEM.L	D0-D7,$FFFF8240.W
		MOVE.L	#HB2,$120.W
		MOVE.B	#0,$FFFFFA1B.W
		MOVE.B	#1,$FFFffA21.w
		MOVE.B	#8,$FFFFFA1B.W
		MOVEM.L	(SP)+,D0-D7
		RTE

HB2:		move.l	a0,-(sp)
		MOVE.L	COLADDR(PC),A0
		MOVE.W	(A0)+,$FFFF8240.W
		BNE.S	GO_ON	
		move.b	#1,syn
		MOVE.L	#HB3,$120.W
GO_ON:		MOVE.L	A0,COLADDR
		move.l	(sp)+,a0
		RTE

HB3:	MOVEM.L	D0-d7/a0,-(SP)
	CLR.B	$FFFFFA1B.W
	LEA	$FFFFFA21.W,A0
	MOVE.B	#200,(A0)
	MOVE.B	#8,$FFFFFA1B.W
	MOVEQ	#0,D0
	MULU	D0,D0
	MULU	D0,D0
	CLR.B	$FFFF820A.W
	MOVE.B	(a0),D0
LABEL17:	CMP.B	(a0),D0
	BEQ.S	LABEL17
	MOVEQ	#0,D0
	MULU	D0,D0
 	MULU	D0,D0
	MOVE.B	#2,$FFFF820A.W
	MOVEM.L	BORDER_PALLET(PC),D0-D7
	MOVEM.L	D0-D7,$FFFF8240.W
	MOVEM.L	(SP)+,D0-d7/a0
	RTE

chartab:
	dcb.l	65,36*height*24
	dc.l	0*height*24,1*height*24,2*height*24,3*height*24,4*height*24
 	dc.l	5*height*24,6*height*24,7*height*24,8*height*24,9*height*24
	dc.l	10*height*24,11*height*24,12*height*24,13*height*24,14*height*24
	dc.l	15*height*24,16*height*24,17*height*24,18*height*24,19*height*24
	dc.l	20*height*24,21*height*24,22*height*24,23*height*24,24*height*24
	dc.l	25*height*24,26*height*24,27*height*24,28*height*24,29*height*24
	dcb.l	256,36*height*24
proddy:	dc.l	16
	even
COLTAB:	DCB.W	9,$1000
	DC.W	$001,$002,$003,$004,$005,$006,$007,$006,$005,$004,$003,$002,$001
	dcb.w	40,$003
	DC.W	$001,$002,$003,$004,$005,$006,$007,$006,$005,$004,$003,$002,$001
	DC.W	0
 	dcb.w	150,0
	even

BORDER_PALLET:
	DC.W	$000,$007,$111,$222,$333,$444,$555,$666
	DC.W	$700,$700,$700,$700,$700,$700,$700,$700

GREETINXCONVERTTAB:
	DC.L	"A",SMALLCHARS+0*8+2,"B",SMALLCHARS+1+0*8+2
	DC.L	"C",SMALLCHARS+1*8+2,"D",SMALLCHARS+1+1*8+2
	DC.L	"E",SMALLCHARS+2*8+2,"F",SMALLCHARS+1+2*8+2
	DC.L	"G",SMALLCHARS+3*8+2,"H",SMALLCHARS+1+3*8+2
	DC.L	"I",SMALLCHARS+4*8+2,"J",SMALLCHARS+1+4*8+2
	DC.L	"K",SMALLCHARS+5*8+2,"L",SMALLCHARS+1+5*8+2
	DC.L	"M",SMALLCHARS+6*8+2,"N",SMALLCHARS+1+6*8+2
	DC.L	"O",SMALLCHARS+7*8+2,"P",SMALLCHARS+1+7*8+2
	DC.L	"Q",SMALLCHARS+8*8+2,"R",SMALLCHARS+1+8*8+2
	DC.L	"S",SMALLCHARS+9*8+2,"T",SMALLCHARS+1+9*8+2
	DC.L	"U",SMALLCHARS+10*8+2,"V",SMALLCHARS+1+10*8+2
	DC.L	"W",SMALLCHARS+11*8+2,"X",SMALLCHARS+1+11*8+2
	DC.L	"Y",SMALLCHARS+12*8+2,"Z",SMALLCHARS+1+12*8+2
	DC.L	"0",SMALLCHARS+13*8+2,"1",SMALLCHARS+1+13*8+2
	DC.L	"2",SMALLCHARS+14*8+2,"3",SMALLCHARS+1+14*8+2
	DC.L	"4",SMALLCHARS+15*8+2,"5",SMALLCHARS+1+15*8+2
	DC.L	"6",SMALLCHARS+16*8+2,"7",SMALLCHARS+1+16*8+2
	DC.L	"8",SMALLCHARS+17*8+2,"9",SMALLCHARS+1+17*8+2
	DC.L	" ",SMALLCHARS+18*8+2
	DC.L	-1,-1
FADETABEL:
	DC.W	0,0,0,0,0
	DC.W	0,0,0,0,0
	DC.W	0,0,0,0,0
	DC.W	0,0,0,0,0
	DC.W	0,0,0,0,0
	DC.W	1,1,1,1,1
	DC.W	2,2,2,2,2
	DC.W	3,3,3,3,3
	DC.W	4,4,4,4,4
	DC.W	5,5,5,5,5
	DC.W	6,6,6,6,6
	DCB.W	40,7
	DC.W	6,6,6,6,6
	DC.W	5,5,5,5,5
	DC.W	4,4,4,4,4
	DC.W	3,3,3,3,3
	DC.W	2,2,2,2,2
	DC.W	1,1,1,1,1
	DC.W	0,0,0,0,0
	DC.W	0,0,0,0,0
	DC.W	0,0,0,0,0
	DC.W	0,0,0,0,0
	DC.W	0,0,0,0,0
	DC.W	-1	
;-----------------------------------------------------------------
;HIER GREETINX INVOEGEN MAXIMAAL 16 LETTERS PER GREETING
;MET CHARACTERS:A-Z 0-9

GREETINX:	DC.B	"                "
	INCBIN	\int2_lts.htl\SAMPLE.SAM
	DC.B	" MEGA GREETINGS "	;START HERE WITH TEXT
	DC.B	"       TO       "
	DC.B	"    MARIELLE    "
	DC.B	" THE REPLICANTS "
	DC.B	"    THE UNION   "
	DC.B	"  THE CAREBEARS "
	DC.B	"   AUTOMATION   "
	DC.B	"  AMIGA TRASH   "
	DC.B	"      SENSE     "
	DC.B	"      BIRDY     "
	DC.B	"  SLEDGE HAMMER "
	DC.B	"      LETHAL    "  
	DC.B	"      LAIR      "
	DC.B	"    THE ACE     "
	DC.B	"      EVIL      "
	DC.B	"   DELTA FORCE  "
	DC.B	"JABBA OF DELIGHT"
	DC.B	"  THE LOST BOYS "
	DC.B	"      NEWLINE   "
	DC.B      " BLACK MON TEAM "
	DC.B	"  LAST FRONTIER "
	DC.B	"      SMP       "
	DC.B      "     ORION      "
	DC.B	"     EMPIRE     "
	DC.B	"THE COUSIN CREW "
	DC.B	"AND YOU OUTTHERE"
	DC.B	"  END OF LIST   "
	DC.B	"                "
ENDGREETINX:DC.B	-1	;END OF FADE-TXT
;--------------------------------------------------------
;HIER SCROLL TEXT INVOEGEN MET DE VOLGENDE KARAKTERSET
;ABCDEFGHIJKLMNOPQRSTUVWXYZ.,?+	
text:	dc.b	" "                   
	DC.B	"ALLRIGHT , THIS INTRO IS CODED BY + LOTUS +"
	DC.B	" BUT MODIFIED , IMPROVED + PROTECTED BY  + LAIR + ... "
	DC.B	"GRAPHIX OFCOURSE BY + SSSSSSSSSSEEEEENNNSE + "
	DC.B	"IT IS NOW READY TO USE .. SO USE IT .."
	DC.B	"                    "
	DC.B	"    "
	DC.B	'~'	;END OF SCROLLTEXT
;----------------------------------------------------------
FILENAME		DC.B	"PROTECT.PRG",0	;game filename
;----------------------------------------------------------
GREETINXBUFFER:	DS.L	ENDGREETINX-GREETINX
 		dc.l	-1	
PAUSECOUNTER:	DS.B	1
SAVED1:		DS.L	1
SPRITETAB2:incbin	\int2_lts.htl\gotab2.bin
	DC.W	-1000
SPRITETAB1:incbin	\int2_lts.htl\gotab1.bin
	DC.W	-1000
SPRITE1:	INCBIN	\int2_lts.htl\SPRITE1.BIN
SPRITE2:	INCBIN	\int2_lts.htl\SPRITE2.BIN
MUZAK:		INCBIN	\int2_lts.htl\TERAMIS5.MUS
SMALLCHARS:	INCBIN	\int2_lts.htl\SMALLCHAR.BIN
XYTABEL:		INCBIN 	\int2_lts.htl\COOL.BIN
		DC.L	-1
charset:		incbin	\int2_lts.htl\pipes.pi1
LOGO:		INCBIN	\int2_lts.htl\LOGO12.BIN
GRIEZEL:		INCBIN	\int2_lts.htl\GRIEZEL.BIN
DUMMY:		INCBIN	\int2_lts.htl\DUMMY.BIN

ENDMEM
SCREEN1=ENDMEM
SCREEN2=SCREEN1+262*160
SPRITEBUFFER1=SCREEN2+262*160
SPRITEBUFFER2=SPRITEBUFFER1+40*38*16
SPRITEMASKER1=SPRITEBUFFER2+40*38*16
SPRITEMASKER2=40*38*16/2+SPRITEMASKER1
font1=40*38*16/2+SPRITEMASKER2
FONT2=ZANZ*HEIGHT*24+FONT1


