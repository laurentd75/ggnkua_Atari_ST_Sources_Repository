THE WIZARDS PART I   by Udo (-ME-) and Erik (ES) of The Exceptions
or: How to program things that are actually not possible
  
  
   What,  actually, IS scrolling? Basically, it can be said that it 
  means  the  moving  of the contents of the screen  in  a  certain 
  direction,  whether characters or graphics (which is all the same 
  with the ST,  as you'll know). When you list a program listing on 
  the screen,  for example, it scrolls up. The next level comprises 
  the  so-called  'soft  scrolling'.  The  screen  moves  smoothly, 
  without flashing or shaking.  This kind of scrolling is  obtained 
    through three factors.  First,  the distance between to movements 
  should not be too big.  But the most important factors are  these 
  (which also count for shapes that move across the  screen):  From 
  one  scroll-step  to another,  no more than 1/50th  of  a  second 
  should  pass.  That's the screen frequency of your monitor -  the 
  time the electron beam in your monitor needs to draw one  screen. 
  If  your  program uses more than 1/50th of a second to  move  the 
  picture,  it can happen that it appears as if your monitor builds 
  up the screen too slowly:  It starts to flicker or shake. Thinks, 
  for comparison, of a film projector that runs too slow. The human 
  eye cannot be fooled to think that things are happening  smoothly 
  when it's done at less than 50 screens per second.
   For the perfect scrolling,  you must also watch out that you  do 
  not  move graphics that are currently drawn on the screen by  the 
  electron beam.  This will result in part of the 'old' graphics to 
  be  displayed,  while your program is already moving  the  screen 
  contents. So far the theoretical aspects.
  
     Our   practical   experiments  on  the   ST   started   really 
  disappointing.  Scrolling vertically went really nicely,  but  in 
  the horizontal directions, everything went wrong. The grounds for 
  this are hidden in the graphical setup of the ST's screen. Memory 
    words  that  lie behind each other create the  bitmap.  When  one 
  would want to move the screen, or a part of it, one pixel down or 
  up,  it  suffices to move a memory block word-wise (1 word  is  2 
  bytes = 16 pixels).  The 68000 doesn't take long in these  cases, 
  and does this with its familiar speed.  That also explains why so 
  many shoot-'em-up games appear on the ST with vertical scrolling. 
  The  reason why such few games with horizontal scrolling  (hello, 
  Steve Bak!) are on the market, is simple. When graphics are to be 
  moved  by less than one word (16 pixels) to left  or  right,  the 
  bits  of the memory words have to be shifted and that even  costs 
  too much time for the 68000 when more than just a few lines  need 
  to be scrolled.  Thirty-two scanlines is possible, but there's no 
  time left to process shapes or something else.
   So one should use as little bit-oriented operation as  possible. 
  But  how?  We  DID want to scroll more than just a  part  of  the 
  screen,  and time had to be left to take care of other jobs (like 
  moving objects,  for example).  Don't panic. Udo found a solution 
  for  our first demo (what a staggering coincidence) and will  now 
  explain it:
  
    The  first trials were based on simple,  bit-wise  shifting  of 
  memory words,  but was so slow that I had to think of new method. 
    The  bit-shifting  routine was written on paper,  and  the  clock 
  cycles were added together.  A glance in the 68000-book and  some 
  thinking  were needed to know that the same thing could  be  done 
  faster using other instructions.  After the moment on which  this 
  kind  of optimising didn't speed up anything anymore,  I  had  to 
  think of some other programming logics. The bit-wise shifting was 
  the slow-down factor in my routines; somewhat faster is byte-wise 
  shifting  and,  due  to the graphic setup of  the  ST,  word-wise 
  shifting  is fastest.  That would,  however,  turn out to  be  16 
  pixels at once. That's too fast to read and would shake terribly. 
  So  there  was only one solution:  Using 8 buffers in  which  the 
  graphics were each shifted 2 pixels,  and displaying these  after 
  one another.  After displaying the last buffer,  the first one is 
  shifted  by 16 pixels and the shifted graphics now fit neatly  to 
  the eighth buffer.
   Copying the buffer to the screen also needs some time,  so  that 
  up to fifty scan lines can be scrolled using this method  (adding 
  data  to  be scrolled into the screen will be  discussed  later). 
  When  you  also want to save the  buffer-copying  time,  you  can 
  simply  work  on eight screens.  You can then scroll  up  to  100 
  lines,  but  it  costs you 256 Kb memory that are only  used  for 
  scrolling.
    
    Now  for  the problem of adding data to be  scrolled  into  the 
  screen (in our case from the right of the screen).  They have  to 
  be shifted bit-wise each time,  and get into eight other  buffers 
  from  which  the current scroll buffer gets its memory  words  to 
  merge  them onto the right.  This preparation of the eight  extra 
  buffers  (at  which only two memory words are  shifted  bit-wise) 
  takes just as long as shifting one buffer but-wise and copying it 
  to  the  screen.  This  shows  how  tideously  slow  bit-oriented 
  operations  are.  A further trick exists in the way  one  shifts: 
  Because  not just the next,  but also the memory word after  that 
  can become visible,  this data has to be added.  Here,  no single 
  bits  are  shifted  several  times and  the  carrier  flag  added 
  afterwards,  but  each  over-next  word is loaded  in  the  upper 
  longword half of a register,  the next one in the lower  longword 
  half  and  then  the required factor is  rotated   to  the  left. 
  Thereby,  the  bits of the over-next word fit neatly to the  next 
  word.
  
    Now  for  a general look at the program (to  be  found  in  the 
  PROGRAMS folder, "WIZARD_1.S", on this  ST NEWS   disk).
  
     When initializing,  a table is built up that contains a  pointer 
  for  each character.  In our case,  the characters are 32  by  32 
  pixels in size,  and are painted using "Neochrome".  In the first 
  32  screen  lines,   the  first  ten  characters  are   therefore 
  contained,  and so on.  Later,  our text only consists of numbers 
  that identify the character to be displayed.
   After that,  the height in 'zanz' needs to be  specified,  after 
  which  the routine only has to be built into the  ST's  interrupt 
  structure.
   Our interruptroutine contains an internal counter,  that is used 
  by the program to determine which buffer has to be displayed  and 
  which  one  is  being  prepared  to  be  displayed.   The  proper 
  subroutine  is executed through the value of  this  counter.  The 
  subroutines 1-7 are identical to the subprograms 9-15.  They only 
  transfer the current buffer addresses and shift off.  Routines  0 
  and  8,  however,  also  have to prepare  the  data-add-buffer  - 
  routine 0 gets the next character to be displayed,  calculates it 
  and  prepares the appropriate  counter.  Then,  the  data-add-on-
  buffer  is shifted.  Routine 8 takes over the right  counter  and 
  shifts the last 16 pixels of the data-add-on buffer.
   The 'linksw' routine shifts 16 pixels (one word, two bytes) in a 
  buffer, and merges the 16 pixels of the data-add-on buffer to the 
    right.  The  'show' routine copies the appropriate buffer on  the 
  visible screen.
   The routine 'addpuff' prepares the data-add-on buffer,  which is 
  optimized by the trick I mentioned above.
  
    I  have  used this technique in an assembler  listing  that  is 
  supplied in K-Seka format.  When you want to experiment a little, 
  you can go ahead.
   When you have assembled the program,  all you need is a  picture 
  with a character set and scrolling can start!
  
