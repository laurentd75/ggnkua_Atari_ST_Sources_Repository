As for today I am aware of three bugs in vdifast.a library distributed
as a part of gemfast version 1.3 release by Ian Lepore.  This
directory contains replacement source code for two functions and
instructions how to fix the third bug.  All this works at least with
assembler and archiver from Sozobon C compiler.  Instruction below
refer to these tools.  New sources are in gemfast style which means
that all input and output arrays are created on stack in a runtime.
Happy patching.

      Michal

----------------------------------------------------------------
Michal Jaegermann, Edmonton, Alberta, Canada
ntomczak@ualtavm.bitnet, ntomczak@vm.ucs.ualberta.ca
----------------------------------------------------------------

Bugs:

(1) There is a typo in sources for vsm_height() giving it an
    opcode number 16 instead of 19. To fix it in a simple manner
    extract file vdiattr2.o with a command 'ar x vdifast.a vdiattr2.o'.
    Edit this file with a disk editor.  Byte to change is located
    at offset 155 (0x9b) from a beginning of the file.  Replace
    0x10 with 0x13.  Save your edit and replace it in the library
    giving a command 'ar r vdifast.a vdiattr2.o'.  Sozobon archiver
    will not change a position of a file in a library so you do not
    have to worry about ordering.

(2) Function vr_trnfm() is just missing. Compile attached source
    with 'cc -c vr_trnfm.s' command and add to library by
    'ar r vdifast.a vr_trnfm.o'.  New function is self contained
    and it can be put anywhere in the library.

(3) Functions vrq_string() and vsm_string() - this is really the same
    function - create havoc assuming that VDI returns input strigs
    in C format (0-terminated).  It does not!  Instead these strings
    are counted with a count returned in contrl[4].  New source is
    a part of a replacement file vdiinpt2.s.  The remaining part of
    this source was created by disassembling an original object file.
    Recompile and replace in the library as above.

    Originally the source was created with an idea of overwriting an
    old object file with a binary patch. Therefore some care was taken
    to minimize its size.  But is appears that this could more trouble
    than it is worth since relocation info would require a careful
    fixing. A compiler is better in this task.

Anybody else has some bugs and fixes? 
See you on the line
   --mj
