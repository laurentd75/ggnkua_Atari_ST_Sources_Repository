Inside ReSTART

The short assembly language file RESTART.S on your START disk is 
the entire source code for ReSTART.  ReSTART is 100% assembly 
language, compiled with Atari's MADMAC assembler.

ReSTART is what is known as a terminate-and-stay-resident (TSR) 
utility.  Most programs load from disk, execute, and when they 
terminate, the memory they occupy is released back to the system 
for use by other programs.  A TSR, on the other hand, executes but 
leaves a part of itself (or the whole thing) behind in memory.  
This is how the START Selector, GDOS and a number of other utility 
packages operate -- they are loaded from disk, a special piece of 
installation code is executed which "splices" the utility code 
into the operating system, and the program terminates, leaving the 
utility code in memory.

ReSTART's operating principle is simple.  It is spliced into the 
68000 trap vector #13, where it waits for requests to get 
characters from the keyboard.  When it sees such a request, it 
intercepts the character before it is returned to the calling 
program.  If the character is a Control-Alternate-Delete, ReSTART 
never returns the character to the caller, but instead jumps to 
the ST's system reset code!

Looking at the source code, there are two main sections, which 
begin with the labels "begin:" and "mytrap:".

The "begin:" code is the part which installs ReSTART into memory. 
The "trapin:" subroutine is called in supervisor mode to exchange 
our trap 13 vector for the old one.  The old vector is saved.  
After "trapin:" returns, the program prints the installation 
message, "inst_str", to the screen and performs the terminate-
stay-resident GEMDOS function, reserving the amount of memory 
contained between the "begin:" and "end:" labels.

If you want to modify ReSTART to do a coldstart when the reset 
button is pressed, place the following instruction inside the 
"trapin:" subroutine:

clr.l   memvalid

This wipes out one of the "magic numbers" that tells the OS it had 
a successful coldstart.  Without the magic number, when the reset 
button is pressed, the system assumes it never coldstarted 
correctly and does it again!

The "mytrap:" code is somewhat more complicated.  Every time the 
68000's trap 13 is called, this code examines the trap opcode and 
looks for a Bconin() call for the keyboard.

In order to work properly, we need to get the Control and 
Alternate keys so that we can see if they were pressed with the 
Delete key.  This is done by setting bit 3 of the "conterm" OS 
variable.  With this bit set, the high byte of returned character 
values will reflect the condition of the Control, left and right 
Shift and Alternate keys.

Next, we save several values in the BIOS save area, including the 
stack pointer and several values off the top of the stack.

We then look at the top two words on the the stack and see if they 
are $00020002, which is the opcode for Bconin(), $0002, and the 
parameter for the keyboard device, $0002.  If they are, we set a 
flag which tells us to process the character which comes back in 
register D0 from the trap call.

Next, we call the old trap code by setting up our own return point 
on the stack along with the status register.

The trap code will execute as usual, and when complete, it returns 
to the "retpoint:" label.  If our key flag is set, we check to see 
if the keycode returned is the Ctl-Alt-Delete keystroke, 
$0C53001F.  If it is, we zero out the OS variable "memvalid", 
clobbering the "magic number" stored there.  Now when we do a 
system reset, the OS looks at the memvalid variable, doesn't see 
the magic number, and does a coldstart!  To perform the system 
reset function, we get the base address of the OS and jump there.  
The code there jumps to the system reset code, which does our 
coldstart.

If the key is not what we want, or it was not a Bconin() call, we 
restore the old values back onto the stack and exit back to the 
caller.

