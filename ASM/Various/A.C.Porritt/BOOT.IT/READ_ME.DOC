                          - Dattrax Software -

                            Proudly Presents

                          Writing  Bootsectors


                         Written By A.C.Porritt

     DISCLAIMER:

         Under NO circumstances will Dattrax Software or any member of be 
held in any way responsible for the loss of data in any way from the use 
or misuse of their products.

         Do NOT place boot sectors on original games or utilities disks.  
They may well have their own which you will overwrite.



     What Is A Boot Sector?

         A boot sector is part of the disk that contains information 
about the disk.  When the ST is switched on, it automatically reads the 
boot sector from the disk.  This must be done before any loading of 
programs can occur.

         However, the boot sector does not just contain information about 
the disk.  This information takes up only 11% of the sector.  It is 
therefore possible to fit a small program on the sector.  This program is 
automatically executed by the ST on boot up, providing certain criteria 
are met.  I will be happy to send a more informative document to anyone 
who is more interested in the subject but feel it does not warrant a full 
explanation here.

     How Do I Write A Boot Sector Program?

         This is a question that I asked myself time and again and time 
and again the answer eluded my puzzling mind.  I finally purchased a book 
on ST disk drives (though not for the answer to the boot sector problem).  
It was from here, though not very clearly, the answer slowly evolved.

         The disk information (which is essential to the loading and 
saving of data) is contained from position 2 to position 58 on the boot 
sector.  The first 2 bytes contain a jump to the boot sector program.

         The program cannot be written in anything except assembly 
language due to the size restriction (the program must be less than 460 
bytes long).  It may seem impossible to write code that small, but it 
can be done.  An example of the way you should write a boot sector 
program to be installed using my BOOTINST.PRG program onto a normal ST 
disk is given below.

; This program will assemble using Devpac - it may need changing for 
; other assemblers.

         opt         o+,x-,s-,w-       ; essential to remove symbols

         bra.s       boot_prog         ; essential branch past disk data
         ds.l        14                ; save space for disk data
boot_prog
         pea         message(pc)       ; must be pc relative
         move.w      #9,-(sp)          ; command - print
         trap        #1                ; do it
         addq.l      #6,sp             ; restore stack

         rts                           ; boot sector program has ended

message  dc.b        "Test Boot Sector.",0


     Ok, let's lay down the law.  These following rules and facts apply 
when writing boot sectors.

     1)  You are automatically in supervisor mode
     2)  Everything must be PC relative
     3)  You cannot have a BBS section
     4)  You must not have a symbol table
     5)  You must leave room for the disk data
     6)  You should not do anything daft (like reserve memory etc.)

     Apart from these restrains, boot sectors are quite nice things to 
write.  Especially if you use my BOOTINST.PRG to write the boot sector 
out.  It's so easy because it takes care of calculating checksums and 
overlaying the original disk data into your program... you can't fall 
off!

     There are some example boot sectors (with source code - "Wow!" you 
lucky devils cry!) on the disk so you should have no problem writing your 
own boot sectors.

     Now, I know most of you will ignore this bit, but please do not.  
This is the "if you find this program useful" plea.  I do not want to 
lecture, but if people stop supporting shareware authors, shareware 
authors will stop supporting people.  So surely œ5 is not too high a 
price to ask for this program?  If you do enjoy using the program and/or 
have benefitted from the information in this document, just send œ5 to 
the address below.

     Thank you for reading this, and I hope that is is beneficial to you.

All correspondence to:

         Dattrax Software
         First Floor Offices
         201 York Road
         Hartlepool
         Cleveland
         England

         TS26 9QN

