PROGRAM DDRAW ;

  CONST
    {$I gemconst}

 TYPE
   {$I gemtype}

    CTRL_PARMS = ARRAY [0..11] OF INTEGER ;
    INT_IN_PARMS = ARRAY [0..15] OF INTEGER ;
    INT_OUT_PARMS = ARRAY [0..45] OF INTEGER ;
    PTS_IN_PARMS = ARRAY [0..11] OF INTEGER ;
    PTS_OUT_PARMS = ARRAY [0..11] OF INTEGER ;

  VAR
   X,Y,EVENT,DUMMY,BC,TITLEA,ITEMA,ITEMB,ITEMC,ITEMD,ITEMF : INTEGER ;
   MD,XC,YC,XL,YL,XB,YB,RADX,RADY,C,ITEME,WB,HB : INTEGER ;
   XMAX,YMAX,WMAX,HMAX,FILLI,FILL,DUMMYI,MP,DP,MPI,DPI,MODEI :INTEGER ;
   XX,YY,CC,FC,POY,POX,COLORI,TITLEB,CDUM,XXC,DISKI,LINEI :INTEGER ;
   REDT,GREENT,BLUET,REDA,REDB,REDC,REDD,REDE,REDF,REDG,RV,GV,BV :INTEGER ;
   REDH,REDI,GRA,GRB,GRC,GRD,GRE,GRF,GRG,GRH,GRI,BLA,BLB,BLC,BLD,BLE :INTEGER ;
   BLF,BLG,BLH,BLI,PATDONE,EDITI,MDEL,TIME,REDRAWI,NULLI :INTEGER ;
   FINISHED,LNTYPE,PNTYPE,PATTERNI,PATTYPE,EDMOVE :INTEGER ;
   UNDOI,FILLAI,TITLEC,MOUSEA,MOUSEB,MOUSEC,TRII :INTEGER ;
   DBOXI,DTRII,DTRIA,DTRIB,DTRIY,QUITALERT,UNKEY,PLAT :INTEGER ;
   CONTROL :CTRL_PARMS ;
   INT_INA :INT_IN_PARMS ;
   INT_OUTA :INT_OUT_PARMS ;
   PTS_INA :PTS_IN_PARMS ;
   PTS_OUTA :PTS_OUT_PARMS ;
   MSHP :MOUSE_TYPE ;
   MENUPAT :MENU_PTR ;
   ERRORDM,ERRORDUM :BOOLEAN ;
   DPDUMM,MPDUMM :INTEGER ;
   PATH,FNAME :PATH_NAME ;
   SCA,SCB,SCC,SCD,SCE,SCF,SCG,SCH,SCI,SCJ,SCK :ARRAY [1..10] OF INTEGER ;
   SCL,SCM,SCN,SCO,SCP : ARRAY [1..10] OF INTEGER ;
   MODE,MODEII :ARRAY [1..15000] OF INTEGER ;
   DATA,DATAII :ARRAY [1..15000] OF INTEGER ;
   CSTART :ARRAY [1..100] OF INTEGER ;
   MSG :MESSAGE_BUFFER ;
   MENUA,MENUB :MENU_PTR ;
   F :FILE OF INTEGER ;

PROCEDURE IO_CHECK(FLAG:BOOLEAN) ; {*  MUST DECLARE AS GLOBAL VARIABLE }
EXTERNAL ;

FUNCTION IO_RESULT :INTEGER ; {*  MUST DECLARE AS GLOBAL VARIABLE }
EXTERNAL ;

{$I gemsubs}

PROCEDURE VDI_CALL(CMD, SUB_CMD, NINTS, NPTS :INTEGER ;   {*  VDI CALLER }
  VAR CTRL :CTRL_PARMS ; VAR INT_IN :INT_IN_PARMS ;
  VAR INT_OUT :INT_OUT_PARMS ; VAR PTS_IN :PTS_IN_PARMS ;
  VAR PTS_OUT :PTS_OUT_PARMS ; TRANSLATE :BOOLEAN ) ;
 EXTERNAL ;

PROCEDURE FILLAR(FILLX,FILLY :INTEGER ) ;  {*  SEED FILL ROUTINE }
 BEGIN
  INT_INA[0]:=-1 ;
  PTS_INA[0]:=FILLX ;
  PTS_INA[1]:=FILLY ;
  VDI_CALL(103,0,1,2,CONTROL,INT_INA,INT_OUTA,PTS_INA,PTS_OUTA,FALSE) ;
 END ;

PROCEDURE CLMSG ; { CLEARS MSG VARIABLE }
 BEGIN
  MSG[3]:=0 ;
  MSG[4]:=0 ;
  MSG[1]:=0 ;
  MSG[2]:=0 ;
  MSG[0]:=0 ;
 END ;

PROCEDURE MOUSE ; { MOUSE ROUTINE }
 VAR EVENT :INTEGER ;
 BEGIN
  CLMSG ;
  EVENT:=GET_EVENT(E_MESSAGE|E_BUTTON,1,1,1,0,FALSE,0,0,0,0,FALSE,
         0,0,0,0,MSG,DUMMY,BC,DUMMY,X,Y,DUMMY) ;
 END ;

PROCEDURE RPOINT ; {*  REDRAW POINT }
 VAR RPC: INTEGER ;
 BEGIN
  RPC:=DATA[DP] ;
  DP:=DP+1 ;
  X:=DATA[DP] ;
  DP:=DP+1 ;
  Y:=DATA[DP] ;
  DP:=DP+1 ;
  DRAW_MODE(1) ;
  LINE_COLOR(RPC) ;
  PAINT_COLOR(RPC) ;
  PLOT(X,Y) ;
 END ;

PROCEDURE RLINE ;  {*  REDRAW LINE }
 VAR LNDUMMY,RLCC,LLXX,LLYY :INTEGER ;
 BEGIN
  LNDUMMY:=DATA[DP] ;
  DP:=DP+1 ;
  RLCC:=DATA[DP] ;
  DP:=DP+1 ;
  XL:=DATA[DP] ;
  DP:=DP+1 ;
  YL:=DATA[DP] ;
  DP:=DP+1 ;
  LLXX:=DATA[DP] ;
  DP:=DP+1 ;
  LLYY:=DATA[DP] ;
  DP:=DP+1 ;
  LINE_STYLE(LNDUMMY) ;
  DRAW_MODE(2) ;
  LINE_COLOR(RLCC) ;
  LINE(XL,YL,LLXX,LLYY) ;
 END ;

PROCEDURE RCIRCLE ; {*  REDRAW CIRCLE }
 VAR LNDUMM,RCC :INTEGER ;
 BEGIN
  PATTYPE:=DATA[DP] ;
  DP:=DP+1 ;
  LNDUMM:=DATA[DP] ;
  DP:=DP+1 ;
  RCC:=DATA[DP] ;
  DP:=DP+1 ;
  XC:=DATA[DP] ;
  DP:=DP+1 ;
  YC:=DATA[DP] ;
  DP:=DP+1 ;
  RADX:=DATA[DP] ;
  DP:=DP+1 ;
  RADY:=DATA[DP] ;
  DP:=DP+1 ;
  LINE_COLOR(RCC) ;
  LINE_STYLE(LNDUMM) ;
  PAINT_STYLE(PATTYPE) ;
  PAINT_COLOR(RCC) ;
  IF MODEI=3 THEN DRAW_MODE(2)
   ELSE DRAW_MODE(1) ;
  IF MODEI=3 THEN FRAME_OVAL(XC,YC,RADX,RADY)
   ELSE PAINT_OVAL(XC,YC,RADX,RADY) ;
 END ;

PROCEDURE RBOX ; {*  REDRAW BOX }
 VAR LNDUMY,RBC :INTEGER ;
 BEGIN
  PATTYPE:=DATA[DP] ;
  DP:=DP+1 ;
  LNDUMY:=DATA[DP] ;
  DP:=DP+1 ;
  RBC:=DATA[DP] ;
  DP:=DP+1 ;
  XB:=DATA[DP] ;
  DP:=DP+1 ;
  YB:=DATA[DP] ;
  DP:=DP+1 ;
  WB:=DATA[DP] ;
  DP:=DP+1 ;
  HB:=DATA[DP] ;
  DP:=DP+1 ;
  LINE_COLOR(RBC) ;
  LINE_STYLE(LNDUMY) ;
  PAINT_STYLE(PATTYPE) ;
  PAINT_COLOR(RBC) ;
  IF MODEI=4 THEN DRAW_MODE(2)
   ELSE DRAW_MODE(1) ;
  IF MODEI=4 THEN FRAME_RECT(XB,YB,WB,HB)
   ELSE PAINT_RECT(XB,YB,WB,HB) ;
 END ;

PROCEDURE RFILLAREA ; {*  REDRAW SEED FILL }
 VAR XFIL,YFIL,CFIL,PNFIL :INTEGER ;
 BEGIN
  XFIL:=DATA[DP] ;
  DP:=DP+1 ;
  YFIL:=DATA[DP] ;
  DP:=DP+1 ;
  CFIL:=DATA[DP] ;
  DP:=DP+1 ;
  PNFIL:=DATA[DP] ;
  DP:=DP+1 ;
  PAINT_STYLE(PNFIL) ;
  PAINT_COLOR(CFIL) ;
  LINE_COLOR(CFIL) ;
  DRAW_MODE(2) ;
  FILLAR(XFIL,YFIL) ;
 END ;

PROCEDURE RTRI ; {*  REDRAW TRIANGLE }
 VAR TXX,TYY,TTXX,XXT,YYT,TLNT,TCC,TAA :INTEGER ;
 BEGIN
  TXX:=DATA[DP] ;
  DP:=DP+1 ;
  TYY:=DATA[DP] ;
  DP:=DP+1 ;
  XXT:=DATA[DP] ;
  DP:=DP+1 ;
  YYT:=DATA[DP] ;
  DP:=DP+1 ;
  TLNT:=DATA[DP] ;
  DP:=DP+1 ;
  TCC:=DATA[DP] ;
  DP:=DP+1 ;
  IF TXX<=XXT THEN TTXX:=XXT-TXX
  ELSE TTXX:=TXX-XXT ;
  IF TXX<=XXT THEN TAA:=TXX-TTXX
  ELSE TAA:=TXX+TTXX ;
  LINE_COLOR(TCC) ;
  LINE_STYLE(TLNT) ;
  LINE(XXT,YYT,TXX,TYY) ;
  LINE_TO(TAA,YYT) ;
  LINE_TO(XXT,YYT) ;
 END ;

PROCEDURE RDBOX ; {*  REDRAW 3-D BOX }
 VAR DBX,DBY,DBA,DBB,RXB,RYB,RWB,RHB,RX,RY,RC,RLN :INTEGER ;
 BEGIN
  RXB:=DATA[DP] ;
  DP:=DP+1 ;
  RYB:=DATA[DP] ;
  DP:=DP+1 ;
  RWB:=DATA[DP] ;
  DP:=DP+1 ;
  RHB:=DATA[DP] ;
  DP:=DP+1 ;
  RX:=DATA[DP] ;
  DP:=DP+1 ;
  RY:=DATA[DP] ;
  DP:=DP+1 ;
  RC:=DATA[DP] ;
  DP:=DP+1 ;
  RLN:=DATA[DP] ;
  DP:=DP+1 ;
  DBX:=RX+RWB ;
  DBY:=RY+RHB ;
  DBA:=RXB+RWB ;
  DBB:=RYB+RHB ;
  DRAW_MODE(2) ;
  LINE_COLOR(RC) ;
  LINE_STYLE(RLN) ;
  FRAME_RECT(RXB,RYB,RWB,RHB) ;
  FRAME_RECT(RX,RY,RWB,RHB) ;
  LINE(RX,RY,RXB,RYB) ;
  LINE(DBA,RYB,DBX,RY) ;
  LINE(DBA,DBB,DBX,DBY) ;
  LINE(RXB,DBB,RX,DBY) ;
 END ;

PROCEDURE PROTRI(PRTX,PRTY,PRTH,PRTW,MINORPL : INTEGER ) ;  {* TRI ROUTINE }
 VAR PRTA,PRTB,PRTD,PRTE :INTEGER ;
 PRTC :REAL ;
 BEGIN
  PRTC:=PRTW/2 ;
  PRTA:=ROUND(PRTC) ;
  PRTB:=PRTX+PRTA ;
  PRTE:=PRTX-PRTA ;
  IF MINORPL=2 THEN PRTD:=PRTY+PRTH
  ELSE PRTD:=PRTY-PRTH ;
  DTRIY:=PRTD ;
  DTRIA:=PRTB ;
  DTRIB:=PRTE ;
  LINE(PRTX,PRTY,PRTB,PRTD) ;
  LINE_TO(PRTE,PRTD) ;
  LINE_TO(PRTX,PRTY) ;
 END ;

PROCEDURE RDTRI ; {*  REDRAW 3-D TRIANGLE }
 VAR TX,TY,TTX,TTA,DTX,DTY,DTA,DTB,DTC,DTD,DTE,RTX,RTY,RTC,RTLN :INTEGER ;
 DTXX,DTDX,DTYY :INTEGER ;
 BEGIN
  TX:=DATA[DP] ;
  DP:=DP+1 ;
  TY:=DATA[DP] ;
  DP:=DP+1 ;
  RTX:=DATA[DP] ;
  DP:=DP+1 ;
  RTY:=DATA[DP] ;
  DP:=DP+1 ;
  DTX:=DATA[DP] ;
  DP:=DP+1 ;
  DTY:=DATA[DP] ;
  DP:=DP+1 ;
  DTXX:=DATA[DP] ;
  DP:=DP+1 ;
  DTDX:=DATA[DP] ;
  DP:=DP+1 ;
  DTYY:=DATA[DP] ;
  DP:=DP+1 ;
  TTA:=DATA[DP] ;
  DP:=DP+1 ;
  RTLN:=DATA[DP] ;
  DP:=DP+1 ;
  RTC:=DATA[DP] ;
  DP:=DP+1 ;
  LINE_COLOR(RTC) ;
  LINE_STYLE(RTLN) ;
  LINE(TX,TY,TTA,DTY) ;
  LINE_TO(DTX,DTY) ;
  LINE_TO(TX,TY) ;
  PROTRI(RTX,RTY,DTXX,DTDX,DTYY) ;
  LINE(TX,TY,RTX,RTY) ;
  LINE(TTA,DTY,DTRIB,DTRIY) ;
  LINE(DTX,DTY,DTRIA,DTRIY) ;
 END ;

PROCEDURE DELAY ; {*  TIME DELAY, CONTROLLED BY 'TIME' VARIABLE }
 VAR DEDUM,DEDUMA,DEDUMB :INTEGER ;
 BEGIN
  DEDUM:=0 ;
  DEDUMA:=0 ;
  DEDUMB:=0 ;
  REPEAT
   DEDUM:=DEDUM+1 ;
   IF DEDUM=50 THEN DEDUMA:=DEDUMA+1 ;
   IF DEDUM=50 THEN DEDUM:=0 ;
   IF DEDUMA=10 THEN DEDUMB:=DEDUMB+1 ;
   IF DEDUMA=10 THEN DEDUMA:=0 ;
  UNTIL DEDUMB=TIME ;
 END ;

PROCEDURE DELMP ; { DELETES MOVE UNDER THE EDIT ROUTINE }
 BEGIN
  CASE MODEI OF
   1  :MODE[MP]:=11 ;
   2  :MODE[MP]:=12 ;
   3  :MODE[MP]:=13 ;
   4  :MODE[MP]:=14 ;
   5  :MODE[MP]:=15 ;
   6  :MODE[MP]:=16 ;
   7  :MODE[MP]:=17 ;
   8  :MODE[MP]:=18 ;
   9  :MODE[MP]:=19 ;
   10 :MODE[MP]:=20 ;
  END ;
 END ;

PROCEDURE EDREDRAW ; { PAUSE ROUTINE UNDER EDIT MODE }
 VAR EDALERT :INTEGER ;
 BEGIN
  EDALERT:=0 ;
  IF KEYPRESS THEN
   EDALERT:=DO_ALERT('[2][| WHAT OPERATION ....    ][EXIT|DELETE|CONT]',3) ;
  IF EDALERT=1 THEN MP:=MPI ;
  IF EDALERT=2 THEN DELMP ;
 END ;

PROCEDURE REDRAW ; {*  REDRAWS SCREEN USING 'MODE' AND 'DATA' ARRAYS }
 VAR TMDUM :INTEGER ;
 BEGIN
  HIDE_MOUSE ;
  ERASE_MENU(MENUA) ;
  CLEAR_SCREEN ;
  DRAW_MENU(MENUA) ;
  DPI:=DP ;
  MPI:=MP ;
  DP:=1 ;
  MP:=1 ;
  IF TIME<>0 THEN TMDUM:=1
   ELSE TMDUM:=0 ;
  REPEAT
   MODEI:=MODE[MP] ;
    CASE MODEI OF
     1  :RPOINT ;
     2  :RLINE ;
     3  :RCIRCLE ;
     4  :RBOX ;
     5  :RCIRCLE ;
     6  :RBOX ;
     7  :RTRI ;
     8  :RFILLAREA ;
     9  :RDBOX ;
     10 :RDTRI ;
     11 :DP:=DP+3 ;
     12 :DP:=DP+6 ;
     13 :DP:=DP+7 ;
     14 :DP:=DP+7 ;
     15 :DP:=DP+7 ;
     16 :DP:=DP+7 ;
     17 :DP:=DP+6 ;
     18 :DP:=DP+4 ;
     19 :DP:=DP+8 ;
     20 :DP:=DP+12 ;
    END ;
   IF MODEI>10 THEN TMDUM:=0 ;
   IF TMDUM<>0 THEN DELAY ;
   IF TIME<>0 THEN TMDUM:=1 ;
   IF EDMOVE=1 THEN EDREDRAW ;
   MP:=MP+1 ;
  UNTIL MP>=MPI ;
  DRAW_MODE(1) ;
  DP:=DPI ;
  MP:=MPI ;
  LINE_COLOR(C) ;
  PAINT_COLOR(C) ;
  LINE_STYLE(LNTYPE) ;
  PAINT_STYLE(PNTYPE) ;
  SHOW_MOUSE ;
 END ;

PROCEDURE NULLMOVE ; { CREATES TIME DELAY DURING REDRAW }
 BEGIN
  MODE[MP]:=0 ;
  MP:=MP+1 ;
 END ;

PROCEDURE DRAW ; { POINT ROUTINE }
 BEGIN
  EVENT:=GET_EVENT(E_BUTTON,1,0,1,0,FALSE,0,0,0,0,FALSE,
        0,0,0,0,MSG,DUMMY,BC,DUMMY,X,Y,DUMMY) ;
  HIDE_MOUSE ;
  DRAW_MODE(1) ;
  LINE_STYLE(1) ;
  LINE_COLOR(C) ;
  PLOT(X,Y) ;
  MODE[MP]:=1 ;
  MP:=MP+1 ;
  DATA[DP]:=C ;
  DP:=DP+1 ;
  DATA[DP]:=X ;
  DP:=DP+1 ;
  DATA[DP]:=Y ;
  DP:=DP+1 ;
  SHOW_MOUSE ;
 END ;

PROCEDURE DOCIRCLE ; { CIRCLE'S ROUTINE }
 BEGIN
  PAINT_COLOR(C) ;
  LINE_STYLE(LNTYPE) ;
  PAINT_STYLE(PNTYPE) ;
  LINE_COLOR(C) ;
  DRAW_MODE(1) ;
  IF FILL=0 THEN DRAW_MODE(2) ;
  HIDE_MOUSE ;
  IF FILL=0 THEN FRAME_OVAL(XC,YC,RADX,RADY)
   ELSE PAINT_OVAL(XC,YC,RADX,RADY) ;
  IF FILL=0 THEN MODE[MP]:=3
   ELSE MODE[MP]:=5 ;
  MP:=MP+1 ;
  DATA[DP]:=PNTYPE ;
  DP:=DP+1 ;
  DATA[DP]:=LNTYPE ;
  DP:=DP+1 ;
  DATA[DP]:=C ;
  DP:=DP+1 ;
  DATA[DP]:=XC ;
  DP:=DP+1 ;
  DATA[DP]:=YC ;
  DP:=DP+1 ;
  DATA[DP]:=RADX ;
  DP:=DP+1 ;
  DATA[DP]:=RADY ;
  DP:=DP+1 ;
  DRAW_MODE(1) ;
  SHOW_MOUSE ;
 END ;

 PROCEDURE CIRCLE ; { CIRCLE ROUTINE }
 VAR CKEY :INTEGER ;
 BEGIN
  XC:=X ;
  YC:=Y ;
  EVENT:=GET_EVENT(E_BUTTON,1,0,1,0,FALSE,0,0,0,0,FALSE,
         0,0,0,0,MSG,DUMMY,BC,DUMMY,X,Y,DUMMY) ;
  CKEY:=0 ;
  REPEAT
  EVENT:=GET_EVENT(E_BUTTON|E_TIMER|E_KEYBOARD,1,1,1,0,FALSE,0,0,0,0,FALSE,
         0,0,0,0,MSG,CKEY,BC,DUMMY,X,Y,DUMMY) ;
  IF X>XC THEN RADX:=X-XC ;
  IF X<XC THEN RADX:=XC-X ;
  IF Y>YC THEN RADY:=Y-YC ;
  IF Y<YC THEN RADY:=YC-Y ;
  LINE_COLOR(C) ;
  LINE_STYLE(LNTYPE) ;
  IF FILL=1 THEN LINE_STYLE(1) ;
  DRAW_MODE(3) ;
  HIDE_MOUSE ;
  FRAME_OVAL(XC,YC,RADX,RADY) ;
  LINE_COLOR(0) ;
  FRAME_OVAL(XC,YC,RADX,RADY) ;
  SHOW_MOUSE ;
  IF CKEY=24832 THEN BC:=1 ;
  UNTIL BC>0 ;
  IF CKEY<>24832 THEN DOCIRCLE ;
  EVENT:=GET_EVENT(E_BUTTON,1,0,1,0,FALSE,0,0,0,0,FALSE,
         0,0,0,0,MSG,DUMMY,BC,DUMMY,X,Y,DUMMY) ;
  RADX:=0 ;
  RADY:=0 ;
  XC:=0 ;
  YC:=0 ;
  BC:=0 ;
  DRAW_MODE(1) ;
 END ;

 PROCEDURE DODLINE ; { LINE'S ROUTINE }
 BEGIN
  LINE_COLOR(C) ;
  LINE_STYLE(LNTYPE) ;
  DRAW_MODE(2) ;
  HIDE_MOUSE ;
  LINE(XL,YL,X,Y) ;
  MODE[MP]:=2 ;
  MP:=MP+1 ;
  DATA[DP]:=LNTYPE ;
  DP:=DP+1 ;
  DATA[DP]:=C ;
  DP:=DP+1 ;
  DATA[DP]:=XL ;
  DP:=DP+1 ;
  DATA[DP]:=YL ;
  DP:=DP+1 ;
  DATA[DP]:=X ;
  DP:=DP+1 ;
  DATA[DP]:=Y ;
  DP:=DP+1 ;
  DRAW_MODE(1) ;
  SHOW_MOUSE ;
 END ;

PROCEDURE DLINE ; { LINE ROUTINE }
 VAR LKEY :INTEGER ;
 BEGIN
  XL:=X ;
  YL:=Y ;
  LKEY:=0 ;
  EVENT:=GET_EVENT(E_BUTTON,1,0,1,0,FALSE,0,0,0,0,FALSE,
         0,0,0,0,MSG,DUMMY,BC,DUMMY,X,Y,DUMMY) ;
  REPEAT
   EVENT:=GET_EVENT(E_BUTTON|E_TIMER|E_KEYBOARD,1,1,1,0,FALSE,0,0,0,0,FALSE,
          0,0,0,0,MSG,LKEY,BC,DUMMY,X,Y,DUMMY) ;
   HIDE_MOUSE ;
   LINE_STYLE(LNTYPE) ;
   DRAW_MODE(3) ;
   LINE_COLOR(C) ;
   LINE(XL,YL,X,Y) ;
   LINE_COLOR(0) ;
   LINE(XL,YL,X,Y) ;
   SHOW_MOUSE ;
   IF LKEY=24832 THEN BC:=1 ;
  UNTIL BC>0 ;
  IF LKEY<>24832 THEN DODLINE ;
  DRAW_MODE(1) ;
 END ;

 PROCEDURE DOBOX ; { BOX'S ROUTINE }
 BEGIN
  HIDE_MOUSE ;
  DRAW_MODE(1) ;
  IF FILL=0 THEN DRAW_MODE(2) ;
  LINE_COLOR(C) ;
  LINE_STYLE(LNTYPE) ;
  PAINT_STYLE(PNTYPE) ;
  PAINT_COLOR(C) ;
  IF FILL=0 THEN FRAME_RECT(XB,YB,WB,HB)
   ELSE PAINT_RECT(XB,YB,WB,HB) ;
  IF FILL=0 THEN MODE[MP]:=4
   ELSE MODE[MP]:=6 ;
  MP:=MP+1 ;
  DATA[DP]:=PNTYPE ;
  DP:=DP+1 ;
  DATA[DP]:=LNTYPE ;
  DP:=DP+1 ;
  DATA[DP]:=C ;
  DP:=DP+1 ;
  DATA[DP]:=XB ;
  DP:=DP+1 ;
  DATA[DP]:=YB ;
  DP:=DP+1 ;
  DATA[DP]:=WB ;
  DP:=DP+1 ;
  DATA[DP]:=HB ;
  DP:=DP+1 ;
  SHOW_MOUSE ;
 END ;

PROCEDURE BOX ; { BOX ROUTINE }
 VAR BKEY :INTEGER ;
 BEGIN
  XB:=X ;
  YB:=Y ;
  BKEY:=0 ;
  EVENT:=GET_EVENT(E_BUTTON,1,0,1,0,FALSE,0,0,0,0,FALSE,
         0,0,0,0,MSG,DUMMY,BC,DUMMY,X,Y,DUMMY) ;
  REPEAT
   EVENT:=GET_EVENT(E_BUTTON|E_TIMER|E_KEYBOARD,1,1,1,0,FALSE,0,0,0,0,FALSE,
          0,0,0,0,MSG,BKEY,BC,DUMMY,X,Y,DUMMY) ;
   IF X>XB THEN WB:=X-XB
    ELSE WB:=0 ;
   IF Y>YB THEN HB:=Y-YB
    ELSE HB:=0 ;
   LINE_STYLE(LNTYPE) ;
   IF FILL=1 THEN LINE_STYLE(1) ;
   LINE_COLOR(C) ;
   HIDE_MOUSE ;
   DRAW_MODE(3) ;
   FRAME_RECT(XB,YB,WB,HB) ;
   LINE_COLOR(0) ;
   FRAME_RECT(XB,YB,WB,HB) ;
   SHOW_MOUSE ;
   IF BKEY=24832 THEN BC:=1 ;
  UNTIL BC>0 ;
  IF BKEY<>24832 THEN DOBOX ;
  EVENT:=GET_EVENT(E_BUTTON,1,0,1,0,FALSE,0,0,0,0,FALSE,
         0,0,0,0,MSG,DUMMY,BC,DUMMY,X,Y,DUMMY) ;
  DRAW_MODE(1) ;
 END ;

PROCEDURE FILLAREA ; { SEED FILL ROUTINE }
 BEGIN
  HIDE_MOUSE ;
  PAINT_COLOR(C) ;
  LINE_COLOR(C) ;
  PAINT_STYLE(PNTYPE) ;
  DRAW_MODE(2) ;
  FILLAR(X,Y) ;
  SHOW_MOUSE ;
  MODE[MP]:=8 ;
  MP:=MP+1 ;
  DATA[DP]:=X ;
  DP:=DP+1 ;
  DATA[DP]:=Y ;
  DP:=DP+1 ;
  DATA[DP]:=C ;
  DP:=DP+1 ;
  DATA[DP]:=PNTYPE ;
  DP:=DP+1 ;
 END ;

PROCEDURE DOTRIANGLE(TX,TY,TTA :INTEGER) ; { TRIANGLE'S ROUTINE }
 BEGIN
  HIDE_MOUSE ;
  LINE_COLOR(C) ;
  DRAW_MODE(2) ;
  LINE(X,Y,TX,TY) ;
  LINE_TO(TTA,Y) ;
  LINE_TO(X,Y) ;
  MODE[MP]:=7 ;
  MP:=MP+1 ;
  DATA[DP]:=TX ;
  DP:=DP+1 ;
  DATA[DP]:=TY ;
  DP:=DP+1 ;
  DATA[DP]:=X ;
  DP:=DP+1 ;
  DATA[DP]:=Y ;
  DP:=DP+1 ;
  DATA[DP]:=LNTYPE ;
  DP:=DP+1 ;
  DATA[DP]:=C ;
  DP:=DP+1 ;
  SHOW_MOUSE ;
 END ;

PROCEDURE TRIANGLE ; { TRIANGLE ROUTINE }
 VAR TX,TY,TTX,TTA,TKEY :INTEGER ;
 BEGIN
  EVENT:=GET_EVENT(E_BUTTON,1,0,1,0,FALSE,0,0,0,0,FALSE,
         0,0,0,0,MSG,DUMMY,BC,DUMMY,X,Y,DUMMY) ;
  TX:=X ;
  TY:=Y ;
  TKEY:=0 ;
  BC:=0 ;
  DRAW_MODE(3) ;
  LINE_STYLE(LNTYPE) ;
  REPEAT
   EVENT:=GET_EVENT(E_BUTTON|E_TIMER|E_KEYBOARD,1,1,1,0,FALSE,0,0,0,0,FALSE,
          0,0,0,0,MSG,TKEY,BC,DUMMY,X,Y,DUMMY) ;
   HIDE_MOUSE ;
   IF TX<=X THEN TTX:=X-TX
   ELSE TTX:=TX-X ;
   IF TX<=X THEN TTA:=TX-TTX
   ELSE TTA:=TX+TTX ;
   LINE_COLOR(1) ;
   LINE(X,Y,TX,TY) ;
   LINE_TO(TTA,Y) ;
   LINE_TO(X,Y) ;
   LINE_COLOR(0) ;
   LINE(X,Y,TX,TY) ;
   LINE_TO(TTA,Y) ;
   LINE_TO(X,Y) ;
   SHOW_MOUSE ;
   IF TKEY=24832 THEN BC:=1 ;
  UNTIL BC>0 ;
  IF TKEY<>24832 THEN DOTRIANGLE(TX,TY,TTA) ;
  EVENT:=GET_EVENT(E_BUTTON,1,0,1,0,FALSE,0,0,0,0,FALSE,
         0,0,0,0,MSG,DUMMY,BC,DUMMY,X,Y,DUMMY) ;
  BC:=0 ;
  TKEY:=0 ;
  CLMSG ;
  DRAW_MODE(1) ;
 END ;

PROCEDURE DODBOXC(DBA,DBX,DBY,DBB :INTEGER) ; { ONE OF 3-D BOX ROUTINES }
 BEGIN
  HIDE_MOUSE ;
  LINE_COLOR(C) ;
  LINE_STYLE(LNTYPE) ;
  DRAW_MODE(2) ;
  FRAME_RECT(X,Y,WB,HB) ;
  LINE(X,Y,XB,YB) ;
  LINE(DBA,YB,DBX,Y) ;
  LINE(DBA,DBB,DBX,DBY) ;
  LINE(XB,DBB,X,DBY) ;
  MODE[MP]:=9 ;
  MP:=MP+1 ;
  DATA[DP]:=XB ;
  DP:=DP+1 ;
  DATA[DP]:=YB ;
  DP:=DP+1 ;
  DATA[DP]:=WB ;
  DP:=DP+1 ;
  DATA[DP]:=HB ;
  DP:=DP+1 ;
  DATA[DP]:=X ;
  DP:=DP+1 ;
  DATA[DP]:=Y ;
  DP:=DP+1 ;
  DATA[DP]:=C ;
  DP:=DP+1 ;
  DATA[DP]:=LNTYPE ;
  DP:=DP+1 ;
  SHOW_MOUSE ;
 END ;

PROCEDURE DODBOXB ; { ONE OF 3-D BOX ROUTINES }
 VAR DBX,DBY,DBA,DBB,DOKEY,BOXTIME :INTEGER ;
 BEGIN
  DOKEY:=0 ;
  REPEAT
   EVENT:=GET_EVENT(E_BUTTON|E_TIMER|E_KEYBOARD,1,1,1,0,FALSE,0,0,0,0,FALSE,
          0,0,0,0,MSG,DOKEY,BC,DUMMY,X,Y,DUMMY) ;
   HIDE_MOUSE ;
   DRAW_MODE(3) ;
   DBX:=X+WB ;
   DBY:=Y+HB ;
   DBA:=XB+WB ;
   DBB:=YB+HB ;
   LINE_COLOR(C) ;
   FRAME_RECT(X,Y,WB,HB) ;
   LINE(X,Y,XB,YB) ;
   LINE(DBA,YB,DBX,Y) ;
   LINE(DBA,DBB,DBX,DBY) ;
   LINE(XB,DBB,X,DBY) ;
   LINE_COLOR(0) ;
   FRAME_RECT(X,Y,WB,HB) ;
   LINE(X,Y,XB,YB) ;
   LINE(DBA,YB,DBX,Y) ;
   LINE(DBA,DBB,DBX,DBY) ;
   LINE(XB,DBB,X,DBY) ;
   SHOW_MOUSE ;
   IF DOKEY=24832 THEN BC:=1 ;
  UNTIL BC>0 ;
  BOXTIME:=TIME ;
  TIME:=0 ;
  IF DOKEY=24832 THEN REDRAW ;
  TIME:=BOXTIME ;
  IF DOKEY<>24832 THEN DODBOXC(DBA,DBX,DBY,DBB) ;
 END ;

PROCEDURE DODBOXA ; { ONE OF 3-D BOX ROUTINES }
 BEGIN
  HIDE_MOUSE ;
  DRAW_MODE(2) ;
  LINE_COLOR(C) ;
  LINE_STYLE(LNTYPE) ;
  FRAME_RECT(XB,YB,WB,HB) ;
  SHOW_MOUSE ;
  EVENT:=GET_EVENT(E_BUTTON,1,0,1,0,FALSE,0,0,0,0,FALSE,
         0,0,0,0,MSG,DUMMY,BC,DUMMY,X,Y,DUMMY) ;
  BC:=0 ;
  DODBOXB ;
 END ;

PROCEDURE DBOX ; { 3-D BOX ROUTINE }
 VAR DBKEY :INTEGER ;
 BEGIN
  XB:=X ;
  YB:=Y ;
  DBKEY:=0 ;
  EVENT:=GET_EVENT(E_BUTTON,1,0,1,0,FALSE,0,0,0,0,FALSE,
         0,0,0,0,MSG,DUMMY,BC,DUMMY,X,Y,DUMMY) ;
  REPEAT
   EVENT:=GET_EVENT(E_BUTTON|E_TIMER|E_KEYBOARD,1,1,1,0,FALSE,0,0,0,0,FALSE,
         0,0,0,0,MSG,DBKEY,BC,DUMMY,X,Y,DUMMY) ;
   IF X>XB THEN WB:=X-XB
    ELSE WB:=0 ;
   IF Y>YB THEN HB:=Y-YB
    ELSE HB:=0 ;
   LINE_STYLE(LNTYPE) ;
   LINE_COLOR(C) ;
   HIDE_MOUSE ;
   DRAW_MODE(3) ;
   FRAME_RECT(XB,YB,WB,HB) ;
   LINE_COLOR(0) ;
   FRAME_RECT(XB,YB,WB,HB) ;
   SHOW_MOUSE ;
   IF DBKEY=24832 THEN BC:=1 ;
  UNTIL BC>0 ;
  IF DBKEY<>24832 THEN DODBOXA ;
  EVENT:=GET_EVENT(E_BUTTON,1,0,1,0,FALSE,0,0,0,0,FALSE,
         0,0,0,0,MSG,DUMMY,BC,DUMMY,X,Y,DUMMY) ;
  BC:=0 ;
  CLMSG ;
  DRAW_MODE(1) ;
 END ;

PROCEDURE DOTRIC(DTE,DTD,DTF,TX,TY,TTA,DTY,DTX :INTEGER) ; {1 OF TRI ROUTINES}
 BEGIN
  HIDE_MOUSE ;
  DRAW_MODE(2) ;
  LINE_STYLE(LNTYPE) ;
  LINE_COLOR(C) ;
  PROTRI(X,Y,DTE,DTD,DTF) ;
  LINE(TX,TY,X,Y) ;
  LINE(TTA,DTY,DTRIB,DTRIY) ;
  LINE(DTX,DTY,DTRIA,DTRIY) ;
  MODE[MP]:=10 ;
  MP:=MP+1 ;
  DATA[DP]:=TX ;
  DP:=DP+1 ;
  DATA[DP]:=TY ;
  DP:=DP+1 ;
  DATA[DP]:=X ;
  DP:=DP+1 ;
  DATA[DP]:=Y ;
  DP:=DP+1 ;
  DATA[DP]:=DTX ;
  DP:=DP+1 ;
  DATA[DP]:=DTY ;
  DP:=DP+1 ;
  DATA[DP]:=DTE ;
  DP:=DP+1 ;
  DATA[DP]:=DTD ;
  DP:=DP+1 ;
  DATA[DP]:=DTF ;
  DP:=DP+1 ;
  DATA[DP]:=TTA ;
  DP:=DP+1 ;
  DATA[DP]:=LNTYPE ;
  DP:=DP+1 ;
  DATA[DP]:=C ;
  DP:=DP+1 ;
  SHOW_MOUSE ;
 END ;

PROCEDURE DODTRIB(DTE,DTD,DTF,TX,TY,TTA,DTY,DTX :INTEGER) ; {1 OF TRI ROUTINES}
 VAR DOTRIKEY,DTRITIME :INTEGER ;
 BEGIN
  DOTRIKEY:=0 ;
  REPEAT
   EVENT:=GET_EVENT(E_BUTTON|E_TIMER|E_KEYBOARD,1,1,1,0,FALSE,0,0,0,0,FALSE,
          0,0,0,0,MSG,DOTRIKEY,BC,DUMMY,X,Y,DUMMY) ;
   HIDE_MOUSE ;
   LINE_COLOR(C) ;
   PROTRI(X,Y,DTE,DTD,DTF) ;
   LINE(TX,TY,X,Y) ;
   LINE(TTA,DTY,DTRIB,DTRIY) ;
   LINE(DTX,DTY,DTRIA,DTRIY) ;
   LINE_COLOR(0) ;
   PROTRI(X,Y,DTE,DTD,DTF) ;
   LINE(TX,TY,X,Y) ;
   LINE(TTA,DTY,DTRIB,DTRIY) ;
   LINE(DTX,DTY,DTRIA,DTRIY) ;
   SHOW_MOUSE ;
   IF DOTRIKEY=24832 THEN BC:=1 ;
  UNTIL BC>0 ;
  DTRITIME:=TIME ;
  TIME:=0 ;
  IF DOTRIKEY=24832 THEN REDRAW ;
  TIME:=DTRITIME ;
  IF DOTRIKEY<>24832 THEN DOTRIC(DTE,DTD,DTF,TX,TY,TTA,DTY,DTX) ;
 END ;

PROCEDURE DODTRIANGLE(TX,TY,TTA :INTEGER) ; { ONE OF TRIANGLE ROUTINES }
 VAR DTX,DTY,DTA,DTB,DTC,DTF,DTD,DTE,DTYY,LFT :INTEGER ;
 BEGIN
  HIDE_MOUSE ;
  LINE_COLOR(C) ;
  DRAW_MODE(2) ;
  LINE(X,Y,TX,TY) ;
  LINE_TO(TTA,Y) ;
  LINE_TO(X,Y) ;
  BC:=0 ;
  DTX:=X ;
  DTY:=Y ;
  DTA:=TX ;
  DTB:=TY ;
  DTC:=TTA ;
  DTF:=0 ;
  IF TTA>X THEN DTD:=TTA-X
   ELSE DTD:=X-TTA ;
  IF TY>Y THEN DTE:=TY-Y
   ELSE DTE:=Y-TY ;
  IF TY<Y THEN DTF:=2
   ELSE DTF:=1 ;
  IF DTF=2 THEN DTYY:=Y+DTE
   ELSE DTYY:=Y-DTE ;
  IF DTX<TX THEN LFT:=1
   ELSE LFT:=0 ;
  IF LFT=1 THEN DTX:=TTA ;
  IF LFT=1 THEN TTA:=X ;
  DRAW_MODE(3) ;
  SHOW_MOUSE ;
  EVENT:=GET_EVENT(E_BUTTON,1,0,1,0,FALSE,0,0,0,0,FALSE,
         0,0,0,0,MSG,DUMMY,BC,DUMMY,X,Y,DUMMY) ;
  BC:=0 ;
  DODTRIB(DTE,DTD,DTF,TX,TY,TTA,DTY,DTX) ;
 END ;

PROCEDURE DTRIANGLE ; { TRIANGLE ROUTINE }
 VAR TX,TY,TTX,TTA,DTKEY :INTEGER ;
 BEGIN
  EVENT:=GET_EVENT(E_BUTTON,1,0,1,0,FALSE,0,0,0,0,FALSE,
         0,0,0,0,MSG,DUMMY,BC,DUMMY,X,Y,DUMMY) ;
  TX:=X ;
  TY:=Y ;
  BC:=0 ;
  DTKEY:=0 ;
  DRAW_MODE(3) ;
  LINE_STYLE(LNTYPE) ;
  REPEAT
   EVENT:=GET_EVENT(E_BUTTON|E_TIMER|E_KEYBOARD,1,1,1,0,FALSE,0,0,0,0,FALSE,
          0,0,0,0,MSG,DTKEY,BC,DUMMY,X,Y,DUMMY) ;
   HIDE_MOUSE ;
   IF TX<=X THEN TTX:=X-TX
    ELSE TTX:=TX-X ;
   IF TX<=X THEN TTA:=TX-TTX
    ELSE TTA:=TX+TTX ;
   LINE_COLOR(1) ;
   LINE(X,Y,TX,TY) ;
   LINE_TO(TTA,Y) ;
   LINE_TO(X,Y) ;
   LINE_COLOR(0) ;
   LINE(X,Y,TX,TY) ;
   LINE_TO(TTA,Y) ;
   LINE_TO(X,Y) ;
   SHOW_MOUSE ;
   IF DTKEY=24832 THEN BC:=1 ;
  UNTIL BC>0 ;
  IF DTKEY<>24832 THEN DODTRIANGLE(TX,TY,TTA) ;
  EVENT:=GET_EVENT(E_BUTTON,1,0,1,0,FALSE,0,0,0,0,FALSE,
         0,0,0,0,MSG,DUMMY,BC,DUMMY,X,Y,DUMMY) ;
  BC:=0 ;
  DTKEY:=0 ;
  CLMSG ;
  DRAW_MODE(1) ;
 END ;

PROCEDURE CHECKB ; { MARKS A CHECK NEXT TO ITEMB UNDER MENU-A }
 BEGIN
  MD:=1 ;
  MENU_CHECK(MENUA,ITEMB,TRUE) ;
  MENU_CHECK(MENUA,ITEMC,FALSE) ;
  MENU_CHECK(MENUA,ITEMD,FALSE) ;
  MENU_CHECK(MENUA,FILLAI,FALSE) ;
  MENU_CHECK(MENUA,ITEME,FALSE) ;
  MENU_CHECK(MENUA,TRII,FALSE) ;
  MENU_CHECK(MENUA,DTRII,FALSE) ;
  MENU_CHECK(MENUA,DBOXI,FALSE) ;
 END ;

PROCEDURE CHECKC ; { MARKS CHECK NEXT TO ITEMC }
 BEGIN
  MD:=2 ;
  MENU_CHECK(MENUA,ITEMC,TRUE) ;
  MENU_CHECK(MENUA,ITEMB,FALSE) ;
  MENU_CHECK(MENUA,ITEMD,FALSE) ;
  MENU_CHECK(MENUA,FILLAI,FALSE) ;
  MENU_CHECK(MENUA,ITEME,FALSE) ;
  MENU_CHECK(MENUA,DTRII,FALSE) ;
  MENU_CHECK(MENUA,DBOXI,FALSE) ;
  MENU_CHECK(MENUA,TRII,FALSE) ;
 END ;

PROCEDURE CHECKD ; { MARKS CHECK NEXT TO ITEMD }
 BEGIN
  MD:=3 ;
  MENU_CHECK(MENUA,DTRII,FALSE) ;
  MENU_CHECK(MENUA,DBOXI,FALSE) ;
  MENU_CHECK(MENUA,ITEMD,TRUE) ;
  MENU_CHECK(MENUA,ITEMB,FALSE) ;
  MENU_CHECK(MENUA,ITEMC,FALSE) ;
  MENU_CHECK(MENUA,ITEME,FALSE) ;
  MENU_CHECK(MENUA,FILLAI,FALSE) ;
  MENU_CHECK(MENUA,TRII,FALSE) ;
 END ;

PROCEDURE CHECKE ; { MARKS CHECK NEXT TO ITEME }
 BEGIN
  MD:=4 ;
  MENU_CHECK(MENUA,DTRII,FALSE) ;
  MENU_CHECK(MENUA,DBOXI,FALSE) ;
  MENU_CHECK(MENUA,ITEMD,FALSE) ;
  MENU_CHECK(MENUA,ITEMB,FALSE) ;
  MENU_CHECK(MENUA,ITEMC,FALSE) ;
  MENU_CHECK(MENUA,FILLAI,FALSE) ;
  MENU_CHECK(MENUA,ITEME,TRUE) ;
  MENU_CHECK(MENUA,TRII,FALSE) ;
 END ;

PROCEDURE FILLCHECK ; { MARKS CHECK NEXT TO FILL-AREA }
 BEGIN
  MENU_CHECK(MENUA,DTRII,FALSE) ;
  MENU_CHECK(MENUA,DBOXI,FALSE) ;
  MENU_CHECK(MENUA,ITEMD,FALSE) ;
  MENU_CHECK(MENUA,ITEMB,FALSE) ;
  MENU_CHECK(MENUA,ITEMC,FALSE) ;
  MENU_CHECK(MENUA,FILLAI,TRUE) ;
  MENU_CHECK(MENUA,ITEME,FALSE) ;
  MENU_CHECK(MENUA,TRII,FALSE) ;
  MD:=5 ;
 END ;

PROCEDURE CHECKTRI ; { MARKS CHECK NEXT TO TRIANGLE }
 BEGIN
  MENU_CHECK(MENUA,DTRII,FALSE) ;
  MENU_CHECK(MENUA,DBOXI,FALSE) ;
  MENU_CHECK(MENUA,ITEMD,FALSE) ;
  MENU_CHECK(MENUA,ITEMB,FALSE) ;
  MENU_CHECK(MENUA,ITEMC,FALSE) ;
  MENU_CHECK(MENUA,FILLAI,FALSE) ;
  MENU_CHECK(MENUA,ITEME,FALSE) ;
  MENU_CHECK(MENUA,TRII,TRUE) ;
  MD:=6 ;
 END ;

PROCEDURE CHECKDTRI ; { CHECKS 3-D TRIANGLE }
 BEGIN
  MENU_CHECK(MENUA,DTRII,TRUE) ;
  MENU_CHECK(MENUA,DBOXI,FALSE) ;
  MENU_CHECK(MENUA,ITEMD,FALSE) ;
  MENU_CHECK(MENUA,ITEMB,FALSE) ;
  MENU_CHECK(MENUA,ITEMC,FALSE) ;
  MENU_CHECK(MENUA,FILLAI,FALSE) ;
  MENU_CHECK(MENUA,ITEME,FALSE) ;
  MENU_CHECK(MENUA,TRII,FALSE) ;
  MD:=7 ;
 END ;

PROCEDURE CHECKDBOX ; { CHECKS 3-D BOX }
 BEGIN
  MENU_CHECK(MENUA,DTRII,FALSE) ;
  MENU_CHECK(MENUA,DBOXI,TRUE) ;
  MENU_CHECK(MENUA,ITEMD,FALSE) ;
  MENU_CHECK(MENUA,ITEMB,FALSE) ;
  MENU_CHECK(MENUA,ITEMC,FALSE) ;
  MENU_CHECK(MENUA,FILLAI,FALSE) ;
  MENU_CHECK(MENUA,ITEME,FALSE) ;
  MENU_CHECK(MENUA,TRII,FALSE) ;
  MD:=8 ;
 END ;

PROCEDURE DOIT ; { DOES SELECTED MOVE }
 BEGIN
  END_MOUSE ;
  CASE MD OF
   1 :DRAW ;
   2 :CIRCLE ;
   3 :DLINE ;
   4 :BOX ;
   5 :FILLAREA ;
   6 :TRIANGLE ;
   7 :DTRIANGLE ;
   8 :DBOX ;
  END ;
  BEGIN_MOUSE ;
 END ;

PROCEDURE CCOLORS ; { DEFAULT COLORS }
 BEGIN
  SCA[1]:=1000 ;
  SCA[2]:=1000 ;
  SCA[3]:=1000 ;
  SCB[1]:=0 ;
  SCB[2]:=0 ;
  SCB[3]:=0 ;
  SCC[1]:=250 ;
  SCC[2]:=125 ;
  SCC[3]:=625 ;
  SCD[1]:=625 ;
  SCD[2]:=250 ;
  SCD[3]:=250 ;
  SCE[1]:=250 ;
  SCE[2]:=500 ;
  SCE[3]:=125 ;
  SCF[1]:=125 ;
  SCF[2]:=0 ;
  SCF[3]:=1000 ;
  SCG[1]:=500 ;
  SCG[2]:=0 ;
  SCG[3]:=500 ;
  SCH[1]:=375 ;
  SCH[2]:=0 ;
  SCH[3]:=375 ;
  SCI[1]:=1000 ;
  SCI[2]:=0 ;
  SCI[3]:=0 ;
  SCJ[1]:=0 ;
  SCJ[2]:=1000 ;
  SCJ[3]:=0 ;
  SCK[1]:=0 ;
  SCK[2]:=0 ;
  SCK[3]:=1000 ;
  SCL[1]:=125 ;
  SCL[2]:=750 ;
  SCL[3]:=0 ;
  SCM[1]:=750 ;
  SCM[2]:=750 ;
  SCM[3]:=750 ;
  SCN[1]:=750 ;
  SCN[2]:=1000 ;
  SCN[3]:=1000 ;
  SCO[1]:=1000 ;
  SCO[2]:=750 ;
  SCO[3]:=750 ;
  SCP[1]:=0 ;
  SCP[2]:=750 ;
  SCP[3]:=125 ;
  SET_COLOR(0,SCA[1],SCA[2],SCA[3]) ;
  SET_COLOR(1,SCB[1],SCB[2],SCB[3]) ;
  SET_COLOR(2,SCC[1],SCC[2],SCC[3]) ;
  SET_COLOR(3,SCD[1],SCD[2],SCD[3]) ;
  SET_COLOR(4,SCE[1],SCE[2],SCE[3]) ;
  SET_COLOR(5,SCF[1],SCF[2],SCF[3]) ;
  SET_COLOR(6,SCG[1],SCG[2],SCG[3]) ;
  SET_COLOR(7,SCH[1],SCH[2],SCH[3]) ;
  SET_COLOR(8,SCI[1],SCI[2],SCI[3]) ;
  SET_COLOR(9,SCJ[1],SCJ[2],SCJ[3]) ;
  SET_COLOR(10,SCK[1],SCK[2],SCK[3]) ;
  SET_COLOR(11,SCL[1],SCL[2],SCL[3]) ;
  SET_COLOR(12,SCM[1],SCM[2],SCM[3]) ;
  SET_COLOR(13,SCN[1],SCN[2],SCN[3]) ;
  SET_COLOR(14,SCO[1],SCO[2],SCO[3]) ;
  SET_COLOR(15,SCP[1],SCP[2],SCP[3]) ;
 END ;

PROCEDURE CLEARR ; { CLEAR ROUTINE }
 VAR DUMYY :INTEGER ;
 BEGIN
  HIDE_MOUSE ;
  ERASE_MENU(MENUA) ;
  CLEAR_SCREEN ;
  DRAW_MENU(MENUA) ;
  WORK_RECT(0,XMAX,YMAX,WMAX,HMAX) ;
  SET_CLIP(XMAX,YMAX,WMAX,HMAX) ;
  MSG[4]:=ITEMB ;
  FOR DUMYY:= 1 TO 15000 DO
   BEGIN
    MODE[DUMYY]:=0 ;
    DATA[DUMYY]:=0 ;
   END ;
  MP:=1 ;
  DP:=1 ;
  TIME:=0 ;
  SHOW_MOUSE ;
 END ;

PROCEDURE CLEAR ; { LAST CHANCE TO CANCEL CLEAR }
 VAR CLALERT,RECLR :INTEGER ;
 BEGIN
  RECLR:=2 ;
  CLALERT:=DO_ALERT('[3][| CLEAR SCREEN ??? ][OK| CANCEL ]',2) ;
  IF CLALERT=1 THEN
   RECLR:=DO_ALERT('[2][| RESET COLORS ??? ][ YES |NO]',2) ;
  IF RECLR=1 THEN CCOLORS ;
  IF CLALERT=1 THEN CLEARR ;
  SET_MOUSE(MSHP) ;
 END ;

PROCEDURE CLEARDESK ; { ABOUT D-DRAW }
 VAR STA :STRING [255] ;
 BEGIN
  STA:='[0][|D-DRAW by|Dale Giarratana    |][ OK ]' ;
  DUMMY:=DO_ALERT(STA,1);
  MENU_NORMAL(MENUA,MSG[3]) ;
  SET_MOUSE(MSHP) ;
  CLMSG ;
 END ;

PROCEDURE FILLN ; { ERASES CHECK NEXT TO AUTO-FILL }
 BEGIN
  FILL:=0 ;
  MENU_CHECK(MENUA,FILLI,FALSE) ;
 END ;

PROCEDURE FILLY ; { MARKS CHECK NEXT TO AUTO-FILL }
 BEGIN
  FILL:=1 ;
  MENU_CHECK(MENUA,FILLI,TRUE) ;
 END ;

PROCEDURE FILLSELECT ; { SELECTS FILLN OR FILLY }
 BEGIN
  CLMSG ;
  IF FILL=1 THEN FILLN
  ELSE FILLY ;
 END ;

PROCEDURE COLORSCR ; { DRAWS COLOR MENU }
 VAR RVV,GVV,BVV :INTEGER ;
  RSTR,GSTR,BSTR :STRING ;
  REALR,REALB,REALG :REAL ;
 BEGIN
  HIDE_MOUSE ;
  ERASE_MENU(MENUB) ;
  CLEAR_SCREEN ;
  DRAW_MENU(MENUB) ;
  XX:=15 ;
  YY:=40 ;
  CC:=0 ;
  LINE_STYLE(1) ;
  PAINT_STYLE(1) ;
  REPEAT
   PAINT_COLOR(CC) ;
   LINE_COLOR(CC) ;
   PAINT_RECT(XX,YY,15,20) ;
   LINE_COLOR(1) ;
   FRAME_RECT(XX,YY,15,20) ;
   XX:=XX+15 ;
   CC:=CC+1 ;
  UNTIL CC=16 ;
  XX:=XX+2 ;
  YY:=YY+15 ;
  DRAW_STRING(XX,YY,'DONE') ;
  CC:=C+1 ;
  XX:=CC*15 ;
  XX:=XX+7 ;
  YY:=47 ;
  IF C=1 THEN CC:=0
   ELSE CC:=1 ;
  PAINT_COLOR(CC) ;
  PAINT_OVAL(XX,YY,3,2) ;
  RVV:=RV+125 ;
  BVV:=BV+125 ;
  GVV:=GV+125 ;
  REALR:=RVV/125 ;
  REALB:=BVV/125 ;
  REALG:=GVV/125 ;
  RVV:=ROUND(REALR) ;
  BVV:=ROUND(REALB) ;
  GVV:=ROUND(REALG) ;
  CASE GVV OF
   1 :GSTR:='0' ;
   2 :GSTR:='1' ;
   3 :GSTR:='2' ;
   4 :GSTR:='3' ;
   5 :GSTR:='4' ;
   6 :GSTR:='5' ;
   7 :GSTR:='6' ;
   8 :GSTR:='7' ;
   9 :GSTR:='8' ;
  END ;
  CASE BVV OF
   1 :BSTR:='0' ;
   2 :BSTR:='1' ;
   3 :BSTR:='2' ;
   4 :BSTR:='3' ;
   5 :BSTR:='4' ;
   6 :BSTR:='5' ;
   7 :BSTR:='6' ;
   8 :BSTR:='7' ;
   9 :BSTR:='8' ;
  END ;
  CASE RVV OF
   1 :RSTR:='0' ;
   2 :RSTR:='1' ;
   3 :RSTR:='2' ;
   4 :RSTR:='3' ;
   5 :RSTR:='4' ;
   6 :RSTR:='5' ;
   7 :RSTR:='6' ;
   8 :RSTR:='7' ;
   9 :RSTR:='8' ;
  END ;
  DRAW_STRING(30,120,'RED =') ;
  DRAW_STRING(120,120,'GREEN =') ;
  DRAW_STRING(230,120,'BLUE =') ;
  DRAW_STRING(80,120,RSTR) ;
  DRAW_STRING(180,120,GSTR) ;
  DRAW_STRING(280,120,BSTR) ;
  SHOW_MOUSE ;
 END;

PROCEDURE POS ; { CHECKS POSITION OF POINTER ON COLOR SCREEN }
 BEGIN
  POY:=1 ;
  IF Y<40 THEN POY:=0 ;
  IF Y>60 THEN POY:=0 ;
  IF X>290 THEN XX:=33 ;
  IF X<290 THEN XX:=55 ;
  IF X<255 THEN XX:=15 ;
  IF X<240 THEN XX:=14 ;
  IF X<225 THEN XX:=13 ;
  IF X<210 THEN XX:=12 ;
  IF X<195 THEN XX:=11 ;
  IF X<180 THEN XX:=10 ;
  IF X<165 THEN XX:=9 ;
  IF X<150 THEN XX:=8 ;
  IF X<135 THEN XX:=7 ;
  IF X<120 THEN XX:=6 ;
  IF X<105 THEN XX:=5 ;
  IF X<90 THEN XX:=4 ;
  IF X<75 THEN XX:=3 ;
  IF X<60 THEN XX:=2 ;
  IF X<45 THEN XX:=1 ;
  IF X<30 THEN XX:=0 ;
  IF X<15 THEN XX:=33 ;
 END ;

PROCEDURE MENUBCH ; { SET COLOR'S RED, GREEN, AND BLUE VALUES }
 BEGIN
  IF C=0 THEN RV:=SCA[1] ;
  IF C=0 THEN GV:=SCA[2] ;
  IF C=0 THEN BV:=SCA[3] ;
  IF C=1 THEN RV:=SCB[1] ;
  IF C=1 THEN GV:=SCB[2] ;
  IF C=1 THEN BV:=SCB[3] ;
  IF C=2 THEN RV:=SCC[1] ;
  IF C=2 THEN GV:=SCC[2] ;
  IF C=2 THEN BV:=SCC[3] ;
  IF C=3 THEN RV:=SCD[1] ;
  IF C=3 THEN GV:=SCD[2] ;
  IF C=3 THEN BV:=SCD[3] ;
  IF C=4 THEN RV:=SCE[1] ;
  IF C=4 THEN GV:=SCE[2] ;
  IF C=4 THEN BV:=SCE[3] ;
  IF C=5 THEN RV:=SCF[1] ;
  IF C=5 THEN GV:=SCF[2] ;
  IF C=5 THEN BV:=SCF[3] ;
  IF C=6 THEN RV:=SCG[1] ;
  IF C=6 THEN GV:=SCG[2] ;
  IF C=6 THEN BV:=SCG[3] ;
  IF C=7 THEN RV:=SCH[1] ;
  IF C=7 THEN GV:=SCH[2] ;
  IF C=7 THEN BV:=SCH[3] ;
  IF C=8 THEN RV:=SCI[1] ;
  IF C=8 THEN GV:=SCI[2] ;
  IF C=8 THEN BV:=SCI[3] ;
  IF C=9 THEN RV:=SCJ[1] ;
  IF C=9 THEN GV:=SCJ[2] ;
  IF C=9 THEN BV:=SCJ[3] ;
  IF C=10 THEN RV:=SCK[1] ;
  IF C=10 THEN GV:=SCK[2] ;
  IF C=10 THEN BV:=SCK[3] ;
  IF C=11 THEN RV:=SCL[1] ;
  IF C=11 THEN GV:=SCL[2] ;
  IF C=11 THEN BV:=SCL[3] ;
  IF C=12 THEN RV:=SCM[1] ;
  IF C=12 THEN GV:=SCM[2] ;
  IF C=12 THEN BV:=SCM[3] ;
  IF C=13 THEN RV:=SCN[1] ;
  IF C=13 THEN GV:=SCN[2] ;
  IF C=13 THEN BV:=SCN[3] ;
  IF C=14 THEN RV:=SCO[1] ;
  IF C=14 THEN GV:=SCO[2] ;
  IF C=14 THEN BV:=SCO[3] ;
  IF C=15 THEN RV:=SCP[1] ;
  IF C=15 THEN GV:=SCP[2] ;
  IF C=15 THEN BV:=SCP[3] ;
  IF MSG[3]=REDT THEN MENU_NORMAL(MENUB,REDT) ;
  IF MSG[3]=GREENT THEN MENU_NORMAL(MENUB,GREENT) ;
  IF MSG[3]=BLUET THEN MENU_NORMAL(MENUB,BLUET) ;
  IF MSG[3]=3 THEN MENU_NORMAL(MENUB,3) ;
  IF MSG[4]=REDA THEN RV:=0 ;
  IF MSG[4]=REDB THEN RV:=125 ;
  IF MSG[4]=REDC THEN RV:=250 ;
  IF MSG[4]=REDD THEN RV:=375 ;
  IF MSG[4]=REDE THEN RV:=500 ;
  IF MSG[4]=REDF THEN RV:=625 ;
  IF MSG[4]=REDG THEN RV:=750 ;
  IF MSG[4]=REDH THEN RV:=875 ;
  IF MSG[4]=REDI THEN RV:=1000 ;
  IF MSG[4]=GRA THEN GV:=0 ;
  IF MSG[4]=GRB THEN GV:=125 ;
  IF MSG[4]=GRC THEN GV:=250 ;
  IF MSG[4]=GRD THEN GV:=375 ;
  IF MSG[4]=GRE THEN GV:=500 ;
  IF MSG[4]=GRF THEN GV:=625 ;
  IF MSG[4]=GRG THEN GV:=750 ;
  IF MSG[4]=GRH THEN GV:=875 ;
  IF MSG[4]=GRI THEN GV:=1000 ;
  IF MSG[4]=BLA THEN BV:=0 ;
  IF MSG[4]=BLB THEN BV:=125 ;
  IF MSG[4]=BLC THEN BV:=250 ;
  IF MSG[4]=BLD THEN BV:=375 ;
  IF MSG[4]=BLE THEN BV:=500 ;
  IF MSG[4]=BLF THEN BV:=625 ;
  IF MSG[4]=BLG THEN BV:=750 ;
  IF MSG[4]=BLH THEN BV:=875 ;
  IF MSG[4]=BLI THEN BV:=1000 ;
  IF C=0 THEN SCA[1]:=RV ;
  IF C=0 THEN SCA[2]:=GV ;
  IF C=0 THEN SCA[3]:=BV ;
  IF C=1 THEN SCB[1]:=RV ;
  IF C=1 THEN SCB[2]:=GV ;
  IF C=1 THEN SCB[3]:=BV ;
  IF C=2 THEN SCC[1]:=RV ;
  IF C=2 THEN SCC[2]:=GV ;
  IF C=2 THEN SCC[3]:=BV ;
  IF C=3 THEN SCD[1]:=RV ;
  IF C=3 THEN SCD[2]:=GV ;
  IF C=3 THEN SCD[3]:=BV ;
  IF C=4 THEN SCE[1]:=RV ;
  IF C=4 THEN SCE[2]:=GV ;
  IF C=4 THEN SCE[3]:=BV ;
  IF C=5 THEN SCF[1]:=RV ;
  IF C=5 THEN SCF[2]:=GV ;
  IF C=5 THEN SCF[3]:=BV ;
  IF C=6 THEN SCG[1]:=RV ;
  IF C=6 THEN SCG[2]:=GV ;
  IF C=6 THEN SCG[3]:=BV ;
  IF C=7 THEN SCH[1]:=RV ;
  IF C=7 THEN SCH[2]:=GV ;
  IF C=7 THEN SCH[3]:=BV ;
  IF C=8 THEN SCI[1]:=RV ;
  IF C=8 THEN SCI[2]:=GV ;
  IF C=8 THEN SCI[3]:=BV ;
  IF C=9 THEN SCJ[1]:=RV ;
  IF C=9 THEN SCJ[2]:=GV ;
  IF C=9 THEN SCJ[3]:=BV ;
  IF C=10 THEN SCK[1]:=RV ;
  IF C=10 THEN SCK[2]:=GV ;
  IF C=10 THEN SCK[3]:=BV ;
  IF C=11 THEN SCL[1]:=RV ;
  IF C=11 THEN SCL[2]:=GV ;
  IF C=11 THEN SCL[3]:=BV ;
  IF C=12 THEN SCM[1]:=RV ;
  IF C=12 THEN SCM[2]:=GV ;
  IF C=12 THEN SCM[3]:=BV ;
  IF C=13 THEN SCN[1]:=RV ;
  IF C=13 THEN SCN[2]:=GV ;
  IF C=13 THEN SCN[3]:=BV ;
  IF C=14 THEN SCO[1]:=RV ;
  IF C=14 THEN SCO[2]:=GV ;
  IF C=14 THEN SCO[3]:=BV ;
  IF C=15 THEN SCP[1]:=RV ;
  IF C=15 THEN SCP[2]:=GV ;
  IF C=15 THEN SCP[3]:=BV ;
  SET_COLOR(C,RV,GV,BV) ;
 END ;

PROCEDURE SELECTCC ; { DEFINES VARIABLE 'C' TO PROPER COLOR NUMBER }
 VAR CTIME :INTEGER ;
 BEGIN
  FINISHED:=0 ;
  REPEAT
   MOUSE ;
   EVENT:=GET_EVENT(E_BUTTON,1,0,1,0,FALSE,0,0,0,0,FALSE,
          0,0,0,0,MSG,DUMMY,BC,DUMMY,X,Y,DUMMY) ;
   POS ;
   IF MSG[0]=MN_SELECTED THEN XX:=20 ;
   IF POY=0 THEN XX:=21 ;
   CASE XX OF
    0  :C:=0 ;
    1  :C:=1 ;
    2  :C:=2 ;
    3  :C:=3 ;
    4  :C:=4 ;
    5  :C:=5 ;
    6  :C:=6 ;
    7  :C:=7 ;
    8  :C:=8 ;
    9  :C:=9 ;
    10 :C:=10 ;
    11 :C:=11 ;
    12 :C:=12 ;
    13 :C:=13 ;
    14 :C:=14 ;
    15 :C:=15 ;
    55 :FINISHED:=1 ;
   END ;
   MENUBCH ;
   COLORSCR ;
  UNTIL FINISHED=1 ;
  HIDE_MOUSE ;
  CDUM:=C ;
  CLMSG ;
  ERASE_MENU(MENUB) ;
  CTIME:=TIME ;
  TIME:=0 ;
  REDRAW ;
  TIME:=CTIME ;
  C:=CDUM ;
  PAINT_COLOR(C) ;
  LINE_COLOR(C) ;
  SHOW_MOUSE ;
 END ;

PROCEDURE SELECTC ; { ERASES MENUA AND DRAWS MENUB }
 BEGIN
  MENU_NORMAL(MENUA,TITLEB) ;
  ERASE_MENU(MENUA);
  DRAW_MENU(MENUB) ;
  COLORSCR ;
  SELECTCC ;
 END;

PROCEDURE ERRORCH ; {*  ALERT USER TO DISK ERROR }
 VAR ERRALERT :INTEGER ;
 BEGIN
  ERRALERT:=DO_ALERT('[3][ DISK ERROR !!! ][ CANCEL ]',1) ;
 END ;

PROCEDURE LOADSCRII ; {*  LOADS DATA FROM DISK }
 VAR LDDUM,CNNT,CNNTT :INTEGER ;
 BEGIN
  FOR LDDUM:= 1 TO 15000 DO
   BEGIN
    MODE[LDDUM]:=0 ;
    DATA[LDDUM]:=0 ;
   END ;
  TIME:=F^ ;
  GET(F) ;
  MP:=F^ ;
  GET(F) ;
  DP:=F^ ;
  GET(F) ;
  SCA[1]:=F^ ;
  GET(F) ;
  SCA[2]:=F^ ;
  GET(F) ;
  SCA[3]:=F^ ;
  GET(F) ;
  SCB[1]:=F^ ;
  GET(F) ;
  SCB[2]:=F^ ;
  GET(F) ;
  SCB[3]:=F^ ;
  GET(F) ;
  SCC[1]:=F^ ;
  GET(F) ;
  SCC[2]:=F^ ;
  GET(F) ;
  SCC[3]:=F^ ;
  GET(F) ;
  SCD[1]:=F^ ;
  GET(F) ;
  SCD[2]:=F^ ;
  GET(F) ;
  SCD[3]:=F^ ;
  GET(F) ;
  SCE[1]:=F^ ;
  GET(F) ;
  SCE[2]:=F^ ;
  GET(F) ;
  SCE[3]:=F^ ;
  GET(F) ;
  SCF[1]:=F^ ;
  GET(F) ;
  SCF[2]:=F^ ;
  GET(F) ;
  SCF[3]:=F^ ;
  GET(F) ;
  SCG[1]:=F^ ;
  GET(F) ;
  SCG[2]:=F^ ;
  GET(F) ;
  SCG[3]:=F^ ;
  GET(F) ;
  SCH[1]:=F^ ;
  GET(F) ;
  SCH[2]:=F^ ;
  GET(F) ;
  SCH[3]:=F^ ;
  GET(F) ;
  SCI[1]:=F^ ;
  GET(F) ;
  SCI[2]:=F^ ;
  GET(F) ;
  SCI[3]:=F^ ;
  GET(F) ;
  SCJ[1]:=F^ ;
  GET(F) ;
  SCJ[2]:=F^ ;
  GET(F) ;
  SCJ[3]:=F^ ;
  GET(F) ;
  SCK[1]:=F^ ;
  GET(F) ;
  SCK[2]:=F^ ;
  GET(F) ;
  SCK[3]:=F^ ;
  GET(F) ;
  SCL[1]:=F^ ;
  GET(F) ;
  SCL[2]:=F^ ;
  GET(F) ;
  SCL[3]:=F^ ;
  GET(F) ;
  SCM[1]:=F^ ;
  GET(F) ;
  SCM[2]:=F^ ;
  GET(F) ;
  SCM[3]:=F^ ;
  GET(F) ;
  SCN[1]:=F^ ;
  GET(F) ;
  SCN[2]:=F^ ;
  GET(F) ;
  SCN[3]:=F^ ;
  GET(F) ;
  SCO[1]:=F^ ;
  GET(F) ;
  SCO[2]:=F^ ;
  GET(F) ;
  SCO[3]:=F^ ;
  GET(F) ;
  SCP[1]:=F^ ;
  GET(F) ;
  SCP[2]:=F^ ;
  GET(F) ;
  SCP[3]:=F^ ;
  GET(F) ;
  FOR CNNT:=1 TO MP DO
   BEGIN
    MODE[CNNT]:=F^ ;
    GET(F) ;
   END ;
  FOR CNNTT:=1 TO DP DO
   BEGIN
    DATA[CNNTT]:=F^ ;
    GET(F) ;
   END ;
  RV:=SCA[1] ;
  GV:=SCA[2] ;
  BV:=SCA[3] ;
  SET_COLOR(0,RV,GV,BV) ;
  RV:=SCB[1] ;
  GV:=SCB[2] ;
  BV:=SCB[3] ;
  SET_COLOR(1,RV,GV,BV) ;
  RV:=SCC[1] ;
  GV:=SCC[2] ;
  BV:=SCC[3] ;
  SET_COLOR(2,RV,GV,BV) ;
  RV:=SCD[1] ;
  GV:=SCD[2] ;
  BV:=SCD[3] ;
  SET_COLOR(3,RV,GV,BV) ;
  RV:=SCE[1] ;
  GV:=SCE[2] ;
  BV:=SCE[3] ;
  SET_COLOR(4,RV,GV,BV) ;
  RV:=SCF[1] ;
  GV:=SCF[2] ;
  BV:=SCF[3] ;
  SET_COLOR(5,RV,GV,BV) ;
  RV:=SCG[1] ;
  GV:=SCG[2] ;
  BV:=SCG[3] ;
  SET_COLOR(6,RV,GV,BV) ;
  RV:=SCH[1] ;
  GV:=SCH[2] ;
  BV:=SCH[3] ;
  SET_COLOR(7,RV,GV,BV) ;
  RV:=SCI[1] ;
  GV:=SCI[2] ;
  BV:=SCI[3] ;
  SET_COLOR(8,RV,GV,BV) ;
  RV:=SCJ[1] ;
  GV:=SCJ[2] ;
  BV:=SCJ[3] ;
  SET_COLOR(9,RV,GV,BV) ;
  RV:=SCK[1] ;
  GV:=SCK[2] ;
  BV:=SCK[3] ;
  SET_COLOR(10,RV,GV,BV) ;
  RV:=SCL[1] ;
  GV:=SCL[2] ;
  BV:=SCL[3] ;
  SET_COLOR(11,RV,GV,BV) ;
  RV:=SCM[1] ;
  GV:=SCM[2] ;
  BV:=SCM[3] ;
  SET_COLOR(12,RV,GV,BV) ;
  RV:=SCN[1] ;
  GV:=SCN[2] ;
  BV:=SCN[3] ;
  SET_COLOR(13,RV,GV,BV) ;
  RV:=SCO[1] ;
  GV:=SCO[2] ;
  BV:=SCO[3] ;
  SET_COLOR(14,RV,GV,BV) ;
  RV:=SCP[1] ;
  GV:=SCP[2] ;
  BV:=SCP[3] ;
  SET_COLOR(15,RV,GV,BV) ;
  SET_MOUSE(MSHP) ;
 END ;

PROCEDURE LOADSCR ; {*  CHECKS FOR ERROR AND OPENS DISK FILE }
 BEGIN
  IO_CHECK(FALSE) ;
  RESET(F,FNAME) ; {MUST DEFINE FNAME TO THE PICTURE'S FILE NAME (A:NAME.DDR)}
  IF IO_RESULT=0 THEN ERRORDM:=FALSE
   ELSE ERRORDM:=TRUE ;
  IF ERRORDM=TRUE THEN ERRORCH
   ELSE LOADSCRII ;
  CLOSE(F) ;
 END ;

PROCEDURE LOADSCRR ; { SETS MOUSE FORM TO A BEE }
 BEGIN
  SET_MOUSE(M_BEE) ;
  LOADSCR ;
 END ;

PROCEDURE LOADPIC ; { GETS PICTURE'S FILE NAME }
 BEGIN
  IF GET_IN_FILE(PATH,FNAME) THEN LOADSCRR ;
 END ;

PROCEDURE SAVESCRII ; { SAVES DATA TO DISK }
 VAR CNT,CNTT,SCCOUNT :INTEGER ;
 BEGIN
  F^:=TIME ;
  PUT(F) ;
  F^:=MPDUMM ;
  PUT(F) ;
  F^:=DPDUMM ;
  PUT(F) ;
  F^:=SCA[1] ;
  PUT(F) ;
  F^:=SCA[2] ;
  PUT(F) ;
  F^:=SCA[3] ;
  PUT(F) ;
  F^:=SCB[1] ;
  PUT(F) ;
  F^:=SCB[2] ;
  PUT(F) ;
  F^:=SCB[3] ;
  PUT(F) ;
  F^:=SCC[1] ;
  PUT(F) ;
  F^:=SCC[2] ;
  PUT(F) ;
  F^:=SCC[3] ;
  PUT(F) ;
  F^:=SCD[1] ;
  PUT(F) ;
  F^:=SCD[2] ;
  PUT(F) ;
  F^:=SCD[3] ;
  PUT(F) ;
  F^:=SCE[1] ;
  PUT(F) ;
  F^:=SCE[2] ;
  PUT(F) ;
  F^:=SCE[3] ;
  PUT(F) ;
  F^:=SCF[1] ;
  PUT(F) ;
  F^:=SCF[2] ;
  PUT(F) ;
  F^:=SCF[3] ;
  PUT(F) ;
  F^:=SCG[1] ;
  PUT(F) ;
  F^:=SCG[2] ;
  PUT(F) ;
  F^:=SCG[3] ;
  PUT(F) ;
  F^:=SCH[1] ;
  PUT(F) ;
  F^:=SCH[2] ;
  PUT(F) ;
  F^:=SCH[3] ;
  PUT(F) ;
  F^:=SCI[1] ;
  PUT(F) ;
  F^:=SCI[2] ;
  PUT(F) ;
  F^:=SCI[3] ;
  PUT(F) ;
  F^:=SCJ[1] ;
  PUT(F) ;
  F^:=SCJ[2] ;
  PUT(F) ;
  F^:=SCJ[3] ;
  PUT(F) ;
  F^:=SCK[1] ;
  PUT(F) ;
  F^:=SCK[2] ;
  PUT(F) ;
  F^:=SCK[3] ;
  PUT(F) ;
  F^:=SCL[1] ;
  PUT(F) ;
  F^:=SCL[2] ;
  PUT(F) ;
  F^:=SCL[3] ;
  PUT(F) ;
  F^:=SCM[1] ;
  PUT(F) ;
  F^:=SCM[2] ;
  PUT(F) ;
  F^:=SCM[3] ;
  PUT(F) ;
  F^:=SCN[1] ;
  PUT(F) ;
  F^:=SCN[2] ;
  PUT(F) ;
  F^:=SCN[3] ;
  PUT(F) ;
  F^:=SCO[1] ;
  PUT(F) ;
  F^:=SCO[2] ;
  PUT(F) ;
  F^:=SCO[3] ;
  PUT(F) ;
  F^:=SCP[1] ;
  PUT(F) ;
  F^:=SCP[2] ;
  PUT(F) ;
  F^:=SCP[3] ;
  PUT(F) ;
  FOR CNT:= 1 TO MPDUMM DO
   BEGIN
    F^:=MODEII[CNT] ;
    PUT(F) ;
   END ;
  FOR CNTT:= 1 TO DPDUMM DO
   BEGIN
    F^:=DATAII[CNTT] ;
    PUT(F) ;
   END ;
  SET_MOUSE(MSHP) ;
 END ;

PROCEDURE SAVECOLORS ; { SAVES COLOR PALETTES TO DISK }
 BEGIN
  REWRITE(F,FNAME) ;
  F^:=SCA[1] ;
  PUT(F) ;
  F^:=SCA[2] ;
  PUT(F) ;
  F^:=SCA[3] ;
  PUT(F) ;
  F^:=SCB[1] ;
  PUT(F) ;
  F^:=SCB[2] ;
  PUT(F) ;
  F^:=SCB[3] ;
  PUT(F) ;
  F^:=SCC[1] ;
  PUT(F) ;
  F^:=SCC[2] ;
  PUT(F) ;
  F^:=SCC[3] ;
  PUT(F) ;
  F^:=SCD[1] ;
  PUT(F) ;
  F^:=SCD[2] ;
  PUT(F) ;
  F^:=SCD[3] ;
  PUT(F) ;
  F^:=SCE[1] ;
  PUT(F) ;
  F^:=SCE[2] ;
  PUT(F) ;
  F^:=SCE[3] ;
  PUT(F) ;
  F^:=SCF[1] ;
  PUT(F) ;
  F^:=SCF[2] ;
  PUT(F) ;
  F^:=SCF[3] ;
  PUT(F) ;
  F^:=SCG[1] ;
  PUT(F) ;
  F^:=SCG[2] ;
  PUT(F) ;
  F^:=SCG[3] ;
  PUT(F) ;
  F^:=SCH[1] ;
  PUT(F) ;
  F^:=SCH[2] ;
  PUT(F) ;
  F^:=SCH[3] ;
  PUT(F) ;
  F^:=SCI[1] ;
  PUT(F) ;
  F^:=SCI[2] ;
  PUT(F) ;
  F^:=SCI[3] ;
  PUT(F) ;
  F^:=SCJ[1] ;
  PUT(F) ;
  F^:=SCJ[2] ;
  PUT(F) ;
  F^:=SCJ[3] ;
  PUT(F) ;
  F^:=SCK[1] ;
  PUT(F) ;
  F^:=SCK[2] ;
  PUT(F) ;
  F^:=SCK[3] ;
  PUT(F) ;
  F^:=SCL[1] ;
  PUT(F) ;
  F^:=SCL[2] ;
  PUT(F) ;
  F^:=SCL[3] ;
  PUT(F) ;
  F^:=SCM[1] ;
  PUT(F) ;
  F^:=SCM[2] ;
  PUT(F) ;
  F^:=SCM[3] ;
  PUT(F) ;
  F^:=SCN[1] ;
  PUT(F) ;
  F^:=SCN[2] ;
  PUT(F) ;
  F^:=SCN[3] ;
  PUT(F) ;
  F^:=SCO[1] ;
  PUT(F) ;
  F^:=SCO[2] ;
  PUT(F) ;
  F^:=SCO[3] ;
  PUT(F) ;
  F^:=SCP[1] ;
  PUT(F) ;
  F^:=SCP[2] ;
  PUT(F) ;
  F^:=SCP[3] ;
  PUT(F) ;
  CLOSE(F) ;
 END ;

PROCEDURE LOADCOLORA ; { LOADS COLOR PALETTES FROM DISK }
 BEGIN
  SCA[1]:=F^ ;
  GET(F) ;
  SCA[2]:=F^ ;
  GET(F) ;
  SCA[3]:=F^ ;
  GET(F) ;
  SCB[1]:=F^ ;
  GET(F) ;
  SCB[2]:=F^ ;
  GET(F) ;
  SCB[3]:=F^ ;
  GET(F) ;
  SCC[1]:=F^ ;
  GET(F) ;
  SCC[2]:=F^ ;
  GET(F) ;
  SCC[3]:=F^ ;
  GET(F) ;
  SCD[1]:=F^ ;
  GET(F) ;
  SCD[2]:=F^ ;
  GET(F) ;
  SCD[3]:=F^ ;
  GET(F) ;
  SCE[1]:=F^ ;
  GET(F) ;
  SCE[2]:=F^ ;
  GET(F) ;
  SCE[3]:=F^ ;
  GET(F) ;
  SCF[1]:=F^ ;
  GET(F) ;
  SCF[2]:=F^ ;
  GET(F) ;
  SCF[3]:=F^ ;
  GET(F) ;
  SCG[1]:=F^ ;
  GET(F) ;
  SCG[2]:=F^ ;
  GET(F) ;
  SCG[3]:=F^ ;
  GET(F) ;
  SCH[1]:=F^ ;
  GET(F) ;
  SCH[2]:=F^ ;
  GET(F) ;
  SCH[3]:=F^ ;
  GET(F) ;
  SCI[1]:=F^ ;
  GET(F) ;
  SCI[2]:=F^ ;
  GET(F) ;
  SCI[3]:=F^ ;
  GET(F) ;
  SCJ[1]:=F^ ;
  GET(F) ;
  SCJ[2]:=F^ ;
  GET(F) ;
  SCJ[3]:=F^ ;
  GET(F) ;
  SCK[1]:=F^ ;
  GET(F) ;
  SCK[2]:=F^ ;
  GET(F) ;
  SCK[3]:=F^ ;
  GET(F) ;
  SCL[1]:=F^ ;
  GET(F) ;
  SCL[2]:=F^ ;
  GET(F) ;
  SCL[3]:=F^ ;
  GET(F) ;
  SCM[1]:=F^ ;
  GET(F) ;
  SCM[2]:=F^ ;
  GET(F) ;
  SCM[3]:=F^ ;
  GET(F) ;
  SCN[1]:=F^ ;
  GET(F) ;
  SCN[2]:=F^ ;
  GET(F) ;
  SCN[3]:=F^ ;
  GET(F) ;
  SCO[1]:=F^ ;
  GET(F) ;
  SCO[2]:=F^ ;
  GET(F) ;
  SCO[3]:=F^ ;
  GET(F) ;
  SCP[1]:=F^ ;
  GET(F) ;
  SCP[2]:=F^ ;
  GET(F) ;
  SCP[3]:=F^ ;
  GET(F) ;
  RV:=SCA[1] ;
  GV:=SCA[2] ;
  BV:=SCA[3] ;
  SET_COLOR(0,RV,GV,BV) ;
  RV:=SCB[1] ;
  GV:=SCB[2] ;
  BV:=SCB[3] ;
  SET_COLOR(1,RV,GV,BV) ;
  RV:=SCC[1] ;
  GV:=SCC[2] ;
  BV:=SCC[3] ;
  SET_COLOR(2,RV,GV,BV) ;
  RV:=SCD[1] ;
  GV:=SCD[2] ;
  BV:=SCD[3] ;
  SET_COLOR(3,RV,GV,BV) ;
  RV:=SCE[1] ;
  GV:=SCE[2] ;
  BV:=SCE[3] ;
  SET_COLOR(4,RV,GV,BV) ;
  RV:=SCF[1] ;
  GV:=SCF[2] ;
  BV:=SCF[3] ;
  SET_COLOR(5,RV,GV,BV) ;
  RV:=SCG[1] ;
  GV:=SCG[2] ;
  BV:=SCG[3] ;
  SET_COLOR(6,RV,GV,BV) ;
  RV:=SCH[1] ;
  GV:=SCH[2] ;
  BV:=SCH[3] ;
  SET_COLOR(7,RV,GV,BV) ;
  RV:=SCI[1] ;
  GV:=SCI[2] ;
  BV:=SCI[3] ;
  SET_COLOR(8,RV,GV,BV) ;
  RV:=SCJ[1] ;
  GV:=SCJ[2] ;
  BV:=SCJ[3] ;
  SET_COLOR(9,RV,GV,BV) ;
  RV:=SCK[1] ;
  GV:=SCK[2] ;
  BV:=SCK[3] ;
  SET_COLOR(10,RV,GV,BV) ;
  RV:=SCL[1] ;
  GV:=SCL[2] ;
  BV:=SCL[3] ;
  SET_COLOR(11,RV,GV,BV) ;
  RV:=SCM[1] ;
  GV:=SCM[2] ;
  BV:=SCM[3] ;
  SET_COLOR(12,RV,GV,BV) ;
  RV:=SCN[1] ;
  GV:=SCN[2] ;
  BV:=SCN[3] ;
  SET_COLOR(13,RV,GV,BV) ;
  RV:=SCO[1] ;
  GV:=SCO[2] ;
  BV:=SCO[3] ;
  SET_COLOR(14,RV,GV,BV) ;
  RV:=SCP[1] ;
  GV:=SCP[2] ;
  BV:=SCP[3] ;
  SET_COLOR(15,RV,GV,BV) ;
 END ;

PROCEDURE LOADCOLORS ; { CHECKS FOR ERRORS AND OPENS COLOR FILE }
 BEGIN
  IO_CHECK(FALSE) ;
  RESET(F,FNAME) ;
  IF IO_RESULT=0 THEN LOADCOLORA
   ELSE ERRORCH ;
  CLOSE(F) ;
 END ;

PROCEDURE SAVESCR ; { CHECKS FOR ERRORS AND OPENS PICTURE FILE }
 VAR COUNT,COUNTII :INTEGER ;
 BEGIN
  ERRORDUM:=TRUE ;
  MPDUMM:=MP ;
  DPDUMM:=DP ;
  FOR COUNT:=1 TO MPDUMM DO
   BEGIN
    MODEII[COUNT]:=MODE[COUNT] ;
   END ;
  FOR COUNTII:=1 TO DPDUMM DO
   BEGIN
    DATAII[COUNTII]:=DATA[COUNTII] ;
   END ;
  REWRITE(F,FNAME) ;
  IO_CHECK(FALSE) ;
  IF IO_RESULT=0 THEN ERRORDUM:=FALSE
   ELSE ERRORDUM:=TRUE ;
  IF ERRORDUM=TRUE THEN ERRORCH
   ELSE SAVESCRII ;
  CLOSE(F) ;
 END ;

PROCEDURE SAVESCRR ; { SETS MOUSE FORM TO A BEE }
 BEGIN
  SET_MOUSE(M_BEE) ;
  SAVESCR ;
 END ;

PROCEDURE SAVEPIC ; { GETS NAME OF PICTURE FILE }
 BEGIN
  IF GET_IN_FILE(PATH,FNAME) THEN SAVESCRR ;
 END ;

PROCEDURE DOS ; { SAVE OR LOAD PICTURE }
 VAR ALERTDUM :INTEGER ;
 BEGIN
  PATH:='A:\*.DDR' ;
  ALERTDUM:=DO_ALERT('[2][WHAT D-DRAW FILE OPERATION...][ SAVE | LOAD ]',2);
  IF ALERTDUM=1 THEN SAVEPIC
  ELSE LOADPIC ;
  SET_MOUSE(MSHP) ;
  HIDE_MOUSE ;
  REDRAW ;
  SHOW_MOUSE ;
 END;

PROCEDURE SAVECLR ; { GETS NAME OF COLOR FILE }
 BEGIN
  IF GET_IN_FILE(PATH,FNAME) THEN SAVECOLORS ;
 END ;

PROCEDURE LOADCLR ; { GETS NAME OF COLOR FILE }
 BEGIN
  IF GET_IN_FILE(PATH,FNAME) THEN LOADCOLORS ;
 END ;

PROCEDURE CDOS ; { SAVE OR LOAD COLORS }
 VAR ALERTDUM,CDOSTIME :INTEGER ;
 BEGIN
  PATH:='A:\*.DCL' ;
  ALERTDUM:=DO_ALERT('[2][WHAT COLOR FILE OPERATION...][ SAVE | LOAD ]',2);
  IF ALERTDUM=1 THEN SAVECLR
  ELSE LOADCLR ;
  SET_MOUSE(MSHP) ;
  HIDE_MOUSE ;
  CDOSTIME:=TIME ;
  TIME:=0 ;
  REDRAW ;
  TIME:=CDOSTIME ;
  SHOW_MOUSE ;
 END;

PROCEDURE LINETYPE ; { LINE-PATTERN SCREEN }
 VAR LINETITLE,LINEA,LINEB,LINEC,LINED,LINEE,LINEF,LINEDONE :INTEGER ;
 LNY,LNDUM,LNTIME :INTEGER ;
 MENUC :MENU_PTR ;
 BEGIN
  HIDE_MOUSE ;
  ERASE_MENU(MENUA) ;
  CLEAR_SCREEN ;
  MENUC:=NEW_MENU(15,'LINE STYLES') ;
  LINETITLE:=ADD_MTITLE(MENUC,' LINE STYLES ') ;
  LINEA:=ADD_MITEM(MENUC,LINETITLE,' 1    ') ;
  LINEB:=ADD_MITEM(MENUC,LINETITLE,' 2    ') ;
  LINEC:=ADD_MITEM(MENUC,LINETITLE,' 3    ') ;
  LINED:=ADD_MITEM(MENUC,LINETITLE,' 4    ') ;
  LINEE:=ADD_MITEM(MENUC,LINETITLE,' 5    ') ;
  LINEF:=ADD_MITEM(MENUC,LINETITLE,' 6    ') ;
  LINEDONE:=ADD_MITEM(MENUC,LINETITLE,' DONE ') ;
  DRAW_MENU(MENUC) ;
  DRAW_STRING(50,60,'1') ;
  DRAW_STRING(50,80,'2') ;
  DRAW_STRING(50,100,'3') ;
  DRAW_STRING(50,120,'4') ;
  DRAW_STRING(50,140,'5') ;
  DRAW_STRING(50,160,'6') ;
  LINE_COLOR(1) ;
  FOR LNDUM:=1 TO 6 DO
   BEGIN
    LINE_STYLE(LNDUM) ;
    LNY:=LNDUM*20 ;
    LNY:=LNY+40 ;
    LNY:=LNY-6 ;
    LINE(100,LNY,200,LNY) ;
   END ;
  SHOW_MOUSE ;
  REPEAT
  MOUSE ;
  EVENT:=GET_EVENT(E_BUTTON|E_MESSAGE,1,0,1,0,FALSE,0,0,0,0,FALSE,
         0,0,0,0,MSG,DUMMY,BC,DUMMY,X,Y,DUMMY) ;
  IF MSG[0]=MN_SELECTED THEN MENU_NORMAL(MENUC,MSG[3]) ;
  IF MSG[4]=LINEA THEN LNTYPE:=1 ;
  IF MSG[4]=LINEB THEN LNTYPE:=2 ;
  IF MSG[4]=LINEC THEN LNTYPE:=3 ;
  IF MSG[4]=LINED THEN LNTYPE:=4 ;
  IF MSG[4]=LINEE THEN LNTYPE:=5 ;
  IF MSG[4]=LINEF THEN LNTYPE:=6 ;
  UNTIL MSG[4]=LINEDONE ;
  LINE_STYLE(LNTYPE) ;
  ERASE_MENU(MENUC) ;
  DELETE_MENU(MENUC) ;
  CLMSG ;
  LNTIME:=TIME ;
  TIME:=0 ;
  REDRAW ;
  TIME:=LNTIME ;
  BC:=0 ;
 END ;

PROCEDURE DPATTERNS ; { FILL-PATTERN SCREEN }
 VAR FCNT,FPX,FPY :INTEGER ;
 BEGIN
  HIDE_MOUSE ;
  ERASE_MENU(MENUA) ;
  CLEAR_SCREEN ;
  DRAW_MENU(MENUPAT) ;
  FPX:=25 ;
  FPY:=20 ;
  DRAW_MODE(1) ;
  LINE_STYLE(1) ;
  LINE_COLOR(1) ;
  PAINT_COLOR(1) ;
  FOR FCNT:=2 TO 37 DO
   BEGIN
    PAINT_STYLE(FCNT) ;
    PAINT_RECT(FPX,FPY,30,30) ;
    FPX:=FPX+30 ;
    IF FPX>250 THEN FPY:=FPY+30 ;
    IF FPX>250 THEN FPX:=25 ;
   END ;
  FRAME_RECT(FPX,FPY,120,30) ;
  FPX:=FPX+20 ;
  FPY:=FPY+20 ;
  DRAW_STRING(FPX,FPY,'DONE') ;
  PAINT_STYLE(PNTYPE) ;
  DRAW_STRING(130,190,'>') ;
  PAINT_RECT(150,175,30,20) ;
  DRAW_STRING(190,190,'<') ;
  SHOW_MOUSE ;
  LINE_STYLE(LNTYPE) ;
  PAINT_COLOR(C) ;
 END ;

PROCEDURE PATPOS ; { FINDS POINTER POSITION FOR FILL-PATTERN SCREEN }
 VAR PYDUM,PATX,PATDUMMY :INTEGER ;
 BEGIN
  PATX:=55 ;
  PYDUM:=55 ;
  PATDUMMY:=0 ;
  IF X>265 THEN PATX:=55 ; {POINTER NOT IN ANY OF THE BOXES}
  IF X<265 THEN PATX:=8 ;
  IF X<235 THEN PATX:=7 ;
  IF X<205 THEN PATX:=6 ;
  IF X<175 THEN PATX:=5 ;
  IF X<145 THEN PATX:=4 ;
  IF X<115 THEN PATX:=3 ;
  IF X<85 THEN PATX:=2 ;
  IF X<55 THEN PATX:=1 ;
  IF X<25 THEN PATX:=55 ;  {POINTER NOT IN ANY OF THE BOXES}
  IF Y>170 THEN PATX:=55 ; {  "      "   "  "   "  "    "  }
  IF Y<170 THEN PYDUM:=5 ;
  IF Y<140 THEN PYDUM:=4 ;
  IF Y<110 THEN PYDUM:=3 ;
  IF Y<80 THEN PYDUM:=2 ;
  IF Y<50 THEN PYDUM:=1 ;
  IF Y<20 THEN PATX:=55 ;
  CASE PYDUM OF
   2 :PATX:=PATX+8 ;
   3 :PATX:=PATX+16 ;
   4 :PATX:=PATX+24 ;
   5 :PATX:=PATX+32 ;
  END ;
  PATX:=PATX+1 ;
  IF PATX<2 THEN PATX:=55 ;
  IF PATX>37 THEN PATDUMMY:=1 ;
  IF PATX>41 THEN PATX:=55 ;
  IF PATX>41 THEN PATDUMMY:=0 ;
  IF PATDUMMY=1 THEN PATDONE:=1 ;
  IF PATDUMMY=1 THEN PATX:=55 ;
  IF PATX<>55 THEN PNTYPE:=PATX ;
  PAINT_STYLE(PNTYPE) ;
  DRAW_MODE(1) ;
  PAINT_COLOR(1) ;
  IF PATX<>55 THEN HIDE_MOUSE ;
  IF PATX<>55 THEN DRAW_STRING(130,190,'>') ;
  IF PATX<>55 THEN PAINT_RECT(150,175,30,20) ;
  IF PATX<>55 THEN DRAW_STRING(190,190,'<') ;
  IF PATX<>55 THEN SHOW_MOUSE ;
 END ;

PROCEDURE SELECTPAT ; { EXITS FILL-PATTERN SCREEN }
 VAR PATTIME :INTEGER ;
 BEGIN
  DPATTERNS ;
  PATDONE:=0 ;
  REPEAT
  MOUSE ;
  EVENT:=GET_EVENT(E_BUTTON|E_MESSAGE,1,0,1,0,FALSE,0,0,0,0,FALSE,
         0,0,0,0,MSG,DUMMY,BC,DUMMY,X,Y,DUMMY) ;
  IF MSG[0]=MN_SELECTED THEN MENU_NORMAL(MENUPAT,MSG[3])
  ELSE PATPOS ;
  UNTIL PATDONE=1 ;
  HIDE_MOUSE ;
  ERASE_MENU(MENUPAT) ;
  CLEAR_SCREEN ;
  CLMSG ;
  BC:=0 ;
  PATTIME:=TIME ;
  TIME:=0 ;
  REDRAW ;
  TIME:=PATTIME ;
  PAINT_COLOR(C) ;
  LINE_COLOR(C) ;
  SHOW_MOUSE ;
 END ;

PROCEDURE UNDOO ; { DELETE MOVES }
 VAR DPP :INTEGER ;
 BEGIN
  MP:=MP-1 ;
  DPP:=MODE[MP] ;
  CASE DPP OF
   1 :DP:=DP-3 ;
   2 :DP:=DP-6 ;
   3 :DP:=DP-7 ;
   4 :DP:=DP-7 ;
   5 :DP:=DP-7 ;
   6 :DP:=DP-7 ;
   7 :DP:=DP-6 ;
   8 :DP:=DP-4 ;
   9 :DP:=DP-8 ;
   10 :DP:=DP-12 ;
  END ;
 END ;

PROCEDURE UNDO ; { DELETES OR CLEARS SCREEN }
 VAR DUMKEY,UNDOTIME :INTEGER ;
 BEGIN
  IF MP>1 THEN UNDOO ;
  IF MP=1 THEN CLEAR ;
  UNDOTIME:=TIME ;
  TIME:=0 ;
  REDRAW ;
  TIME:=UNDOTIME ;
  CLMSG ;
  BC:=0 ;
  REPEAT
   DUMKEY:=0 ;
   EVENT:=GET_EVENT(E_KEYBOARD|E_TIMER,0,0,0,0,FALSE,
   0,0,0,0,FALSE,0,0,0,0,MSG,DUMKEY,DUMMY,DUMMY,X,Y,DUMMY) ;
  UNTIL DUMKEY<>3592 ;
 END ;

PROCEDURE CHECKMA ; { CHECKS MOUSE ARROW }
 BEGIN
  MENU_CHECK(MENUA,MOUSEA,TRUE) ;
  MENU_CHECK(MENUA,MOUSEB,FALSE) ;
  MENU_CHECK(MENUA,MOUSEC,FALSE) ;
  MSHP:=M_ARROW ;
  SET_MOUSE(MSHP) ;
 END ;

PROCEDURE CHECKMB ; { CHECKS MOUSE CROSS }
 BEGIN
  MENU_CHECK(MENUA,MOUSEA,FALSE) ;
  MENU_CHECK(MENUA,MOUSEB,TRUE) ;
  MENU_CHECK(MENUA,MOUSEC,FALSE) ;
  MSHP:=M_THIN_CROSS ;
  SET_MOUSE(MSHP) ;
 END ;

PROCEDURE CHECKMC ; { CHECKS MOUSE OUTLINED CROSS }
 BEGIN
  MENU_CHECK(MENUA,MOUSEA,FALSE) ;
  MENU_CHECK(MENUA,MOUSEB,FALSE) ;
  MENU_CHECK(MENUA,MOUSEC,TRUE) ;
  MSHP:=M_OUTLN_CROSS ;
  SET_MOUSE(MSHP) ;
 END ;

PROCEDURE MDELETEA ; { DELETES MANY MOVES }
 BEGIN
  REPEAT
   MDEL:=MDEL-1 ;
   UNDOO ;
  UNTIL MDEL=1 ;
 END ;

PROCEDURE MDELETE ; { TO CLEAR OR NOT TO CLEAR }
 VAR MDTIME,DELI,DELIA,DLB :INTEGER ;
  DELBOX :DIALOG_PTR ;
  DIDIT :TREE_INDEX ;
  MDSTR :STR255 ;
 BEGIN
  MDEL:=1 ;
  DELBOX:=NEW_DIALOG(10,0,0,35,15) ;
  DELI:=ADD_DITEM(DELBOX,G_TEXT,NONE,4,3,29,1,0,4096|256|128) ;
  DELIA:=ADD_DITEM(DELBOX,G_FTEXT,EDITABLE,7,7,20,1,0,4096|256|128) ;
 DLB:=ADD_DITEM(DELBOX,G_BUTTON,SELECTABLE|EXIT_BTN,12,9,10,1,0,4096|256|128) ;
  SET_DTEXT(DELBOX,DELI,'HOW MANY DELETES (0-199) ???',3,TE_CENTER) ;
  SET_DEDIT(DELBOX,DELIA,'>>>___<<<','999','000',3,TE_CENTER) ;
  SET_DTEXT(DELBOX,DLB,' EXIT ',3,TE_CENTER) ;
  OBJ_SETSTATE(DELBOX,DELI,NORMAL,FALSE) ;
  OBJ_SETSTATE(DELBOX,DELIA,NORMAL,FALSE) ;
  OBJ_SETSTATE(DELBOX,DLB,NORMAL,FALSE) ;
  CENTER_DIALOG(DELBOX) ;
  DIDIT:=DO_DIALOG(DELBOX,DELIA) ;
  GET_DEDIT(DELBOX,DELIA,MDSTR) ;
  END_DIALOG(DELBOX) ;
  DELETE_DIALOG(DELBOX) ;
  IF MDSTR[1]='1' THEN MDEL:=MDEL+100 ;
  IF MDSTR[2]='1' THEN MDEL:=MDEL+10 ;
  IF MDSTR[2]='2' THEN MDEL:=MDEL+20 ;
  IF MDSTR[2]='3' THEN MDEL:=MDEL+30 ;
  IF MDSTR[2]='4' THEN MDEL:=MDEL+40 ;
  IF MDSTR[2]='5' THEN MDEL:=MDEL+50 ;
  IF MDSTR[2]='6' THEN MDEL:=MDEL+60 ;
  IF MDSTR[2]='7' THEN MDEL:=MDEL+70 ;
  IF MDSTR[2]='8' THEN MDEL:=MDEL+80 ;
  IF MDSTR[2]='9' THEN MDEL:=MDEL+90 ;
  IF MDSTR[3]='1' THEN MDEL:=MDEL+1 ;
  IF MDSTR[3]='2' THEN MDEL:=MDEL+2 ;
  IF MDSTR[3]='3' THEN MDEL:=MDEL+3 ;
  IF MDSTR[3]='4' THEN MDEL:=MDEL+4 ;
  IF MDSTR[3]='5' THEN MDEL:=MDEL+5 ;
  IF MDSTR[3]='6' THEN MDEL:=MDEL+6 ;
  IF MDSTR[3]='7' THEN MDEL:=MDEL+7 ;
  IF MDSTR[3]='8' THEN MDEL:=MDEL+8 ;
  IF MDSTR[3]='9' THEN MDEL:=MDEL+9 ;
  IF MDEL=1 THEN MDEL:=0 ;
  IF MDEL>199 THEN MDEL:=199 ;
  IF MDEL>=MP THEN CLEAR ;
  IF MDEL>=MP THEN MDEL:=0 ;
  IF MDEL<>0 THEN MDELETEA ;
  MDTIME:=TIME ;
  TIME:=0 ;
  REDRAW ;
  CLMSG ;
  TIME:=MDTIME ;
  SET_MOUSE(MSHP) ;
 END ;

PROCEDURE CHTIME ; { CHANGES DELAY TIME }
 VAR DELI,DELIA,DELIB :INTEGER ;
  DELBOX :DIALOG_PTR ;
  DIDIT :TREE_INDEX ;
  MDSTR :STR255 ;
 BEGIN
  TIME:=0 ;
  DELBOX:=NEW_DIALOG(10,0,0,35,15) ;
  DELI:=ADD_DITEM(DELBOX,G_TEXT,NONE,4,4,25,1,0,4096|256|128) ;
  DELIA:=ADD_DITEM(DELBOX,G_FTEXT,EDITABLE,7,7,20,1,0,4096|256|128) ;
 DELIB:=ADD_DITEM(DELBOX,G_BUTTON,SELECTABLE|EXIT_BTN,12,9,10,1,0,4096|256|1) ;
  SET_DTEXT(DELBOX,DELI,'TIME DELAY (0-999) ???',3,TE_CENTER) ;
  SET_DEDIT(DELBOX,DELIA,'>>>___<<<','999','000',3,TE_CENTER) ;
  SET_DTEXT(DELBOX,DELIB,' EXIT ',3,TE_CENTER) ;
  OBJ_SETSTATE(DELBOX,DELI,NORMAL,FALSE) ;
  OBJ_SETSTATE(DELBOX,DELIA,NORMAL,FALSE) ;
  OBJ_SETSTATE(DELBOX,DELIB,NORMAL,FALSE) ;
  CENTER_DIALOG(DELBOX) ;
  DIDIT:=DO_DIALOG(DELBOX,DELIA) ;
  GET_DEDIT(DELBOX,DELIA,MDSTR) ;
  END_DIALOG(DELBOX) ;
  DELETE_DIALOG(DELBOX) ;
  IF MDSTR[0]='1' THEN TIME:=TIME+100 ;
  IF MDSTR[0]='2' THEN TIME:=TIME+200 ;
  IF MDSTR[0]='3' THEN TIME:=TIME+300 ;
  IF MDSTR[0]='4' THEN TIME:=TIME+400 ;
  IF MDSTR[0]='5' THEN TIME:=TIME+500 ;
  IF MDSTR[0]='6' THEN TIME:=TIME+600 ;
  IF MDSTR[0]='7' THEN TIME:=TIME+700 ;
  IF MDSTR[0]='8' THEN TIME:=TIME+800 ;
  IF MDSTR[0]='9' THEN TIME:=TIME+900 ;
  IF MDSTR[1]='1' THEN TIME:=TIME+10 ;
  IF MDSTR[1]='2' THEN TIME:=TIME+20 ;
  IF MDSTR[1]='3' THEN TIME:=TIME+30 ;
  IF MDSTR[1]='4' THEN TIME:=TIME+40 ;
  IF MDSTR[1]='5' THEN TIME:=TIME+50 ;
  IF MDSTR[1]='6' THEN TIME:=TIME+60 ;
  IF MDSTR[1]='7' THEN TIME:=TIME+70 ;
  IF MDSTR[1]='8' THEN TIME:=TIME+80 ;
  IF MDSTR[1]='9' THEN TIME:=TIME+90 ;
  IF MDSTR[2]='1' THEN TIME:=TIME+1 ;
  IF MDSTR[2]='2' THEN TIME:=TIME+2 ;
  IF MDSTR[2]='3' THEN TIME:=TIME+3 ;
  IF MDSTR[2]='4' THEN TIME:=TIME+4 ;
  IF MDSTR[2]='5' THEN TIME:=TIME+5 ;
  IF MDSTR[2]='6' THEN TIME:=TIME+6;
  IF MDSTR[2]='7' THEN TIME:=TIME+7 ;
  IF MDSTR[2]='8' THEN TIME:=TIME+8 ;
  IF MDSTR[2]='9' THEN TIME:=TIME+9 ;
  IF TIME<0 THEN TIME:=0 ;
  IF TIME>199 THEN TIME:=199 ;
  REDRAW ;
  SET_MOUSE(MSHP) ;
 END ;

PROCEDURE EDITMOVES ; { STEPS THROUGH MOVES }
 VAR EDMVTIME :INTEGER ;
 BEGIN
  EDMOVE:=1 ;
  EDMVTIME:=TIME ;
  TIME:=40 ;
  REDRAW ;
  EDMOVE:=0 ;
  TIME:=0 ;
  REDRAW ;
  TIME:=EDMVTIME ;
  SET_MOUSE(MSHP) ;
 END ;

PROCEDURE EDITPIC ; { DELETE, EDIT, OR ALTER DELAY }
 VAR EDCHOICE :INTEGER ;
 EDST :STRING ;
 BEGIN
  EDST:='[2][|A: MULTIPLE DELETES|B: EDIT MOVES|C: ALTER DELAY][ A | B | C ]' ;
  EDCHOICE:=DO_ALERT(EDST ,2) ;
  IF EDCHOICE=1 THEN MDELETE ;
  IF EDCHOICE=2 THEN EDITMOVES ;
  IF EDCHOICE=3 THEN CHTIME ;
  BC:=0 ;
 END ;

PROCEDURE SETSUP ; { DEFINES ALL VARIABLES AND DRAWS COPYRIGHT SCREEN }
VAR DUMSETUP :INTEGER ;
 BEGIN
  INIT_MOUSE ;
  HIDE_MOUSE ;
  CLEAR_SCREEN ;
  CCOLORS ;
  DRAW_MODE(1) ;
  DRAW_STRING(20,20,'D-DRAW by Dale Giarratana') ;
  DRAW_STRING(20,40,'Portions of this product are') ;
  DRAW_STRING(20,60,'Copyright (c) 1986, OSS and CCD.') ;
  DRAW_STRING(20,80,'Used by Permission of OSS.') ;
  DRAW_STRING(20,130,'-HIT ANY KEY TO CONTINUE-') ;
  REPEAT
  UNTIL KEYPRESS ;
  SHOW_MOUSE ;
  MSHP:=M_ARROW ;
  SET_MOUSE(MSHP) ;
  FOR DUMSETUP:= 1 TO 15000 DO
  BEGIN
  MODE[DUMSETUP]:=0 ;
  DATA[DUMSETUP]:=0 ;
  END ;
  EDMOVE:=0 ;
  LNTYPE:=1 ;
  PNTYPE:=1 ;
  PATTYPE:=1 ;
  MP:=1 ;
  DP:=1 ;
  C:=1 ;
  FC:=1 ;
  MD:=1 ;
  FILL:=0 ;
  UNKEY:=0 ;
  TIME:=0 ;
  HIDE_MOUSE ;
  CLEAR_SCREEN ;
  SHOW_MOUSE ;
  WORK_RECT(0,XMAX,YMAX,WMAX,HMAX) ;
  SET_CLIP(XMAX,YMAX,WMAX,HMAX) ;
  MENUPAT:=NEW_MENU(15,' FILL PATTERNS ') ;
  MENUB:=NEW_MENU(50,' COLORS ') ;
  REDT:=ADD_MTITLE(MENUB,' RED  ') ;
  GREENT:=ADD_MTITLE(MENUB,' GREEN  ') ;
  BLUET:=ADD_MTITLE(MENUB,' BLUE ') ;
  REDA:=ADD_MITEM(MENUB,REDT,'   0   ') ;
  REDB:=ADD_MITEM(MENUB,REDT,'   1   ') ;
  REDC:=ADD_MITEM(MENUB,REDT,'   2   ') ;
  REDD:=ADD_MITEM(MENUB,REDT,'   3   ') ;
  REDE:=ADD_MITEM(MENUB,REDT,'   4   ') ;
  REDF:=ADD_MITEM(MENUB,REDT,'   5   ') ;
  REDG:=ADD_MITEM(MENUB,REDT,'   6   ') ;
  REDH:=ADD_MITEM(MENUB,REDT,'   7   ') ;
  REDI:=ADD_MITEM(MENUB,REDT,'   8   ') ;
  GRA:=ADD_MITEM(MENUB,GREENT,'   0   ') ;
  GRB:=ADD_MITEM(MENUB,GREENT,'   1   ') ;
  GRC:=ADD_MITEM(MENUB,GREENT,'   2   ') ;
  GRD:=ADD_MITEM(MENUB,GREENT,'   3   ') ;
  GRE:=ADD_MITEM(MENUB,GREENT,'   4   ') ;
  GRF:=ADD_MITEM(MENUB,GREENT,'   5   ') ;
  GRG:=ADD_MITEM(MENUB,GREENT,'   6   ') ;
  GRH:=ADD_MITEM(MENUB,GREENT,'   7   ') ;
  GRI:=ADD_MITEM(MENUB,GREENT,'   8  ') ;
  BLA:=ADD_MITEM(MENUB,BLUET,'   0   ') ;
  BLB:=ADD_MITEM(MENUB,BLUET,'   1   ') ;
  BLC:=ADD_MITEM(MENUB,BLUET,'   2   ') ;
  BLD:=ADD_MITEM(MENUB,BLUET,'   3   ') ;
  BLE:=ADD_MITEM(MENUB,BLUET,'   4   ') ;
  BLF:=ADD_MITEM(MENUB,BLUET,'   5   ') ;
  BLG:=ADD_MITEM(MENUB,BLUET,'   6   ') ;
  BLH:=ADD_MITEM(MENUB,BLUET,'   7   ') ;
  BLI:=ADD_MITEM(MENUB,BLUET,'   8   ') ;
  MENUA:=NEW_MENU(50,' D-DRAW ') ;
  TITLEA:=ADD_MTITLE(MENUA,' MODES') ;
  TITLEB:=ADD_MTITLE(MENUA,' SPECIAL') ;
  TITLEC:=ADD_MTITLE(MENUA,' POINTER ') ;
  MOUSEA:=ADD_MITEM(MENUA,TITLEC,'  ARROW          ') ;
  MOUSEB:=ADD_MITEM(MENUA,TITLEC,'  THIN CROSS     ') ;
  MOUSEC:=ADD_MITEM(MENUA,TITLEC,'  OUTLINED CROSS ') ;
  COLORI:=ADD_MITEM(MENUA,TITLEB,'  COLOR         ') ;
  PATTERNI:=ADD_MITEM(MENUA,TITLEB,'  FILL PATTERNS ') ;
  LINEI:=ADD_MITEM(MENUA,TITLEB,'  LINE TYPE     ') ;
  DISKI:=ADD_MITEM(MENUA,TITLEB,'  D-DRAW FILES  ') ;
  PLAT:=ADD_MITEM(MENUA,TITLEB,'  COLOR FILES   ') ;
  EDITI:=ADD_MITEM(MENUA,TITLEB,'  EDIT          ') ;
  NULLI:=ADD_MITEM(MENUA,TITLEB,'  NULL MOVE     ') ;
  UNDOI:=ADD_MITEM(MENUA,TITLEB,'  DELETE MOVE   ') ;
  REDRAWI:=ADD_MITEM(MENUA,TITLEB,'  REDRAW        ') ;
  ITEMB:=ADD_MITEM(MENUA,TITLEA,'  POINTS      ') ;
  ITEMD:=ADD_MITEM(MENUA,TITLEA,'  LINE        ') ;
  ITEMC:=ADD_MITEM(MENUA,TITLEA,'  CIRCLE      ') ;
  ITEME:=ADD_MITEM(MENUA,TITLEA,'  BOX         ') ;
  TRII:=ADD_MITEM(MENUA,TITLEA,'  TRIANGLE    ') ;
  DBOXI:=ADD_MITEM(MENUA,TITLEA,'  3D-BOX      ') ;
  DTRII:=ADD_MITEM(MENUA,TITLEA,'  3D-TRIANGLE ') ;
  FILLAI:=ADD_MITEM(MENUA,TITLEA,'  FILL AREA   ') ;
  FILLI:=ADD_MITEM(MENUA,TITLEA,'  AUTO-FILL   ') ;
  ITEMF:=ADD_MITEM(MENUA,TITLEA,'  CLEAR       ') ;
  DUMMYI:=ADD_MITEM(MENUA,TITLEA,'______________') ;
  ITEMA:=ADD_MITEM(MENUA,TITLEA,'  QUIT        ') ;
  MENU_DISABLE(MENUA,DUMMYI) ;
  DRAW_MENU(MENUA) ;
  MENU_CHECK(MENUA,MOUSEA,TRUE) ;
  MENU_CHECK(MENUA,ITEMB,TRUE) ;
 END ;

PROCEDURE INCOLORS ; { SAVES DESKTOP COLORS TO AN ARRAY }
 VAR INC,IND :INTEGER ;
 BEGIN
  INC:=1 ;
  IND:=0 ;
  REPEAT
  INT_INA[0]:=IND ; {COLOR INDEX}
  INT_INA[1]:=1 ;
  VDI_CALL(26,0,2,0,CONTROL,INT_INA,INT_OUTA,PTS_INA,PTS_OUTA,FALSE) ;
  CSTART[INC]:=INT_OUTA[1] ; {RED INTENSITY}
  INC:=INC+1 ;
  CSTART[INC]:=INT_OUTA[2] ; {GREEN INTENSITY}
  INC:=INC+1 ;
  CSTART[INC]:=INT_OUTA[3] ; {BLUE INTENSITY}
  INC:=INC+1 ;
  IND:=IND+1 ;
  UNTIL IND=16 ;
 END ;

PROCEDURE OUTCOLORS ; { RESTORES DESKTOP COLORS }
 VAR INA,IND :INTEGER ;
 BEGIN
  IND:=0 ;
  INA:=1 ;
  REPEAT
  INT_INA[0]:=IND ; {COLOR INDEX}
  INT_INA[1]:=CSTART[INA]  ; {RED}
  INA:=INA+1 ;
  INT_INA[2]:=CSTART[INA]  ; {GREEN}
  INA:=INA+1 ;
  INT_INA[3]:=CSTART[INA]  ; {BLUE}
  INA:=INA+1 ;
  VDI_CALL(14,0,4,0,CONTROL,INT_INA,INT_OUTA,PTS_INA,PTS_OUTA,FALSE) ;
  IND:=IND+1 ;
  UNTIL IND=16 ;
 END ;

{ MAIN }
BEGIN
    IF INIT_GEM >= 0 THEN
       BEGIN
        INCOLORS ;
        SETSUP ;
        REPEAT
        CLMSG ;
        QUITALERT:=0 ;
        UNKEY:=0 ;
        EVENT:=GET_EVENT(E_MESSAGE|E_BUTTON|E_KEYBOARD,1,1,1,0,FALSE,
        0,0,0,0,FALSE,0,0,0,0,MSG,UNKEY,BC,DUMMY,X,Y,DUMMY) ;
        EVENT:=GET_EVENT(E_MESSAGE|E_BUTTON,1,0,1,0,FALSE,
        0,0,0,0,FALSE,0,0,0,0,MSG,DUMMY,DUMMY,DUMMY,X,Y,DUMMY) ;
        IF MSG[0]=MN_SELECTED THEN BC:=0 ;
        IF MSG[3]=TITLEA THEN MENU_NORMAL(MENUA,TITLEA) ;
        IF MSG[3]=TITLEB THEN MENU_NORMAL(MENUA,TITLEB) ;
        IF MSG[3]=TITLEC THEN MENU_NORMAL(MENUA,TITLEC) ;
        IF MSG[3]=3 THEN CLEARDESK ;
        IF MSG[4]=NULLI THEN NULLMOVE ;
        IF MSG[4]=REDRAWI THEN REDRAW ;
        IF MSG[4]=EDITI THEN EDITPIC ;
        IF MSG[4]=ITEMB THEN CHECKB ;
        IF MSG[4]=ITEMC THEN CHECKC ;
        IF MSG[4]=ITEMD THEN CHECKD ;
        IF MSG[4]=ITEME THEN CHECKE ;
        IF MSG[4]=ITEMF THEN CLEAR ;
        IF MSG[4]=FILLI THEN FILLSELECT ;
        IF MSG[4]=COLORI THEN SELECTC ;
        IF MSG[4]=DISKI THEN DOS ;
        IF MSG[4]=PLAT THEN CDOS ;
        IF MSG[4]=LINEI THEN LINETYPE ;
        IF MSG[4]=PATTERNI THEN SELECTPAT ;
        IF MSG[4]=UNDOI THEN UNDO ;
        IF MSG[4]=FILLAI THEN FILLCHECK ;
        IF MSG[4]=MOUSEA THEN CHECKMA ;
        IF MSG[4]=MOUSEB THEN CHECKMB ;
        IF MSG[4]=MOUSEC THEN CHECKMC ;
        IF MSG[4]=TRII THEN CHECKTRI ;
        IF MSG[4]=DTRII THEN CHECKDTRI ;
        IF MSG[4]=DBOXI THEN CHECKDBOX ;
        IF MSG[4]=ITEMA THEN
        QUITALERT:=DO_ALERT('[2][| EXIT TO DESKTOP ??? ][OK| CANCEL ]',2) ;
        IF MSG[4]=ITEMA THEN SET_MOUSE(MSHP) ;
        IF UNKEY=3592 THEN UNDO ;
        UNKEY:=0 ;
        IF BC>0 THEN DOIT ;
        IF QUITALERT=2 THEN MSG[4]:=0 ;
        UNTIL MSG[4]=ITEMA ;
        OUTCOLORS ;
        EXIT_GEM ;
       END ;
END.
