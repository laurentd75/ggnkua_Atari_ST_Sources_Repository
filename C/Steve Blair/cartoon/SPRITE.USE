           USING SPRITE SEQUENCES IN YOUR OWN PROGRAMS

     There are two assembly language programs on your disk which 
will allow you to load your sprite animation sequence into your 
own program.  These programs, RASTER.S and SCREEN.S, were written 
to be assembled and linked by the Alcyon C compiler; if you are 
using a different version of C you may have to modify them.

RASTER.S

     This program contains the main functions you will need to 
load and manipulate sprite sequences.  All sprite manipulation is 
handled through C with a structure array.  The name of the 
structure is arbitrary, but I chose 'raster'.  An initialization 
routine must be called before any of the other routines can be 
called.  That routine is called init(raster), where raster is the 
address of the array of structures.

The structure is defined as follows:

                    struct    {
                         long addr;
                         int  word_length;
                         int  byte_length;
                         int  width;
                         int  height;
                         int  new_x;
                         int  new_y;
                         int  x;
                         int  y;
                         char new;
                         char enable;
                         char plane';
                         char frame;
                         char next_frame;
                         char advance_frame;
                         char last_frame;
                         char filler;
                    }    raster[16];

     The naming of all elements of the structure is purely up to 
you, but the order must be the same because the animation routines 
use them.

     The first element is raster[image].addr, where image is a 
sprite number between zero and fifteen, contains the address of 
the sprite data; this element is only used by the animation 
routines.  The elements word_length and byte_length are also used 
by the routines.  Raster[image].new_x and new_y are used only when 
you are defining a new sprite; these will probably be used only by 
the editor because you will not be defining sprites in your 
programs.

     Raster[image].x and y will be the most important elements 
that you will use.  These elements tell the animation routines 
where that sprite is to be displayed on the screen.  When you save 
sprites to disk, their current screen position will also be saved, 
so be sure to save them in the position that you want.

     Raster[image].new is only used to tell the routines that you 
are defining a new sprite.  You will probably not use this one 
either.  Raster[image].enable tells the routines whether to 
display that sprite or not.  A one enables the sprite and a zero 
means that it will not be displayed.  Note that this is a byte or 
char value.

     Raster[image].plane is the priority level of that sprite (0-
15).  Raster[image].frame is used to tell the routines what frame 
you want to define; again, this element will only be used by the 
editor.  Raster[image].next_frame is used by the routines to keep 
track of the current frame that is being displayed.  Later I will 
tell you how to use this element for some extra control of what 
goes to the screen.  Element advance_frame tells the routines when 
you want the frames to flip.  A byte value of zero means no 
flipping, one means flip once and negative one means continuous 
flipping.  Continuous flipping means that the sprite will flip a 
frame every time the animation routine is called, and a one will 
flip only the next time you call the routine.  Element last_frame 
simply helps the routines keep track of the the number of the last 
frame.

     Now that you know which elements to change to do all the 
sprite manipulations, I will describe the routine you need to call 
to perform those manipulations.  The routine is 
do_raster(tell_gem), where tell_gem is a value to let the routine 
know whether to tell the operating system where the screen is.  To 
achieve smooth animation, one screen must be drawn while another 
is being displayed.  If you want GEM to know where the current 
screen is, pass the routine an integer value of one, otherwise, 
zero.

     When the animation routines initialize, 64K of ram is set 
aside for the two extra screens needed.  We now have three screens 
in memory.  The original desktop screen is used as the main screen 
but it is never displayed.  The main screen holds the background 
picture without sprites and is copied to one of the secondary 
screens to restore the background behind the sprites on that 
screen.  The process is:  copy the main screen to the secondary 
screen, display the sprites on the secondary screen, and then tell 
the graphics chip to display that secondary screen.  Since there 
are two secondary screens, one can be displayed while the other is 
being drawn so the animation is flicker free.  Any changes made to 
the main screen will be permanent because that screen is always 
copied to the secondary screen.

     If you want to use GEM drawing functions to change the 
background, use do_raster(1); this will make all GEM drawing go to 
the main screen.  Do_raster(0) will make GEM draw on the screen 
that is being displayed, so those changes will only last until the 
next do_raster call.

     Here is a list and description of the other routines you may 
need to include into your program:

set_source() will tell the routines where the main screen will be. 
The default will be the screen returned by Physbase().  Changing 
the source screen will allow you to have another background.  This 
function is useful for page flipping, for example, 
set_source(screen); where screen is a long integer.

kill_sprite()  will dynamically delete sprites.  The syntax is 
kill_sprite(sprite, frame); where frame is the frame of 'sprite' 
to delete.  If frame is zero, then the entire sprite 'sprite' will 
be deleted.  Frame and sprite are integers.

get_free() returns the total amount of free space for storing 
sprite data.  This value is greater than returned by Malloc(-1L) 
because of the memory management used by the routines.  If want to 
know how much space is left for allocating for your own use, use 
Malloc(-1L);.  The syntax is free = get_free(); where free is a 
long integer.

load_sprite() allows you to load a sprite into memory.  The 
calling sequence is err = load_sprite(filename, pal); where err is 
an integer, filename is the address of the filename and pal is the 
address of a palette array; the new palette will be loaded and a 
call will be made to tell the operating system about it during the 
loading process. If err is one, then an error occured--either not 
enough memory or the filename was not found.  When you load a 
sprite, all other sprite date in memory will be lost.

save_sprite() saves a sprite to disk.  The calling sequence is the 
same as load_sprite().

     An example program, demo.c, is included to help you get 
started in using the routines.  Not all of the routines are used; 
load_sprite and do_raster are the only ones you will probably 
need.  The demo will load a sequence and display the sprites and 
associated frames in the order they were defined.

SCREEN.S

This file contains the screen operations scr_copy(source, 
destination) and clear_screen(source).


Before you can use these programs, you will need to assemble 
RASTER.S and SCREEN.S, and then link them with your program.  The 
sequence of link files is:

apstart,(program name),vdibind,aesbind,osbind,libf,raster,screen

PROGRAMMING TIPS

     One of the drawbacks of using these routines is that the 
frames flip in order, so flipping 'on the fly' is usually not 
possible.  One way to overcome this is by manually feeding the 
raster[image].next_frame element.  This element holds the next 
frame to be displayed minus one.  If you want to display the frame 
sequence (1, 3, 4, 2, 0) and there are 6 total frames (0-5), then 
you must feed raster[image].next_frame with the sequence (0, 2, 3, 
1, 5), since the last frame you want to display is zero, a five 
must be used because it is the last frame.

     Another drawback is that one image cannot be displayed in 
more than one place.  If you want sprite zero to be displayed in 
two places, you must copy the structure elements to another 
structure.  By doing this, the other structure will use the same 
data as structure zero.  You can then individually manipulate two 
of the same image.

ABOUT THE ANIMATION ROUTINES

     Now is the time to get a little technical on how the routines 
work.  When an image is defined, the routines grab that portion of 
the screen and put it into memory.  I had to write my own memory 
management routines to handle memory allocation/deallocation 
because Malloc() allocates only twenty times.  My routines Malloc 
40K at a time, and then slice up that memory when needed.  Some 
rather unsophisticated algorithms try to keep memory waste to a 
minimum, but on the average 3% of Malloc'ed memory is wasted.  
When the images are put into memory, they are shifted to the left 
to eliminate blank spaces and usually require less memory than 
they did in screen memory.

     After do_raster is called, the main screen is copied onto the 
secondary screen that is not being displayed and then each sprite 
is checked for two events.  The first event is if a sprite wants 
to be defined; if raster[image].new_x has a value other than -1, 
then the routines proceed to define that sprite.  If 
raster[image].frame is not zero, then that frame will be defined 
and linked to its parent. All sprites are checked for this event 
before the check on raster[image].enable is checked.  If 
raster[image].enable is one, then that sprite is displayed at its 
coordinates according to its priority.  If you set enable before 
defining a sprite, it will be displayed in one do_raster call.

     When a sprite is displayed on the screen, it is first rotated 
to its correct position.  A sprite can be placed on any coordinate 
that is a multiple of 16 without rotation, but must be rotated 
otherwise.  It takes slightly less than 3500 instructions to put a 
32X32 four plane sprite on the screen.  Compare that to the 8500 
instructions needed to make a copy of the main screen.  The ST can 
execute about 800,000 instructions per second so the animation is 
very fast.  A simple calculation would put the frame rate for an 
average sprite at 67 frames per second, but it's not quite that 
fast.  One reason is that the routines must check each sprite on 
whether to display it and then display it in the proper order 
according to its priority.  Another reason is that the move.l 
(a0)+, (a1)+ instruction (used to copy the main screen) and the 
rotate instructions (used to display a sprite) take about 50% 
longer to execute than the average instruction.


Happy cartooning!

