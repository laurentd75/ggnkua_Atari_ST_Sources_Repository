The RTX PTY Driver

(C) Copyright 1990
David Beckemeyer

10/31/90

The driver is called PTYDVR.PRG. This version installs 4 PTYs.  Each PTY has
two BIOS devices associated with it.  There are two sides to a PTY.  Each
side is tightly connected.  The two devices for the first PTY are:

	ttyp0:
	ptyp0:

The devices may be accessed with normal GEMDOS Fcreate() and Fopen() calls.
The "ttyp0:" device is called the "client" side.  The "ptyp0:" device is the
"server side".  Clients read data written by the server and they may write
data to the server.  The GEMDOS handle obtained from the Fopen() call
can be used to redirect I/O (using Fforce) and thus child processes can
inherit the PTY handle transparently.

The PTY devices may also be accessed with BIOS Bconxxx calls, by using
the RTX Ftype() call to get the BIOS device number.  This can be done at
run-time.  For example, the following fragment obtains the BIOS device
number for the "server" side of PTY 2 (the third PTY):

	fd = Fopen("ptyp2:", 2);
	dev = Ftype(fd);
	Fclose(fd);

	Bconout(dev, c);
	c = Bconin(dev);
	etc.

Data written to the "ttypn:" device by the client may be read on the 
corresponding "ptypn:" device by the server.  Conversely, data written
by the server to the "ptypn:" device may be read on the corresponding
"ttypn:" device by the client.

The following code fragment shows a typical sequence to spawn a
shell with the PTY device made the STDIO:

	/* redirect I/O to client side of PTY */
	fd = Fopen("ttyp0:", 2);
	Fforce(0, fd);
	Fforce(1, fd);
	Fforce(2, fd);
	Fclose(fd);

	/* get BIOS number for server side of PTY */
	fd = Fopen("ptyp0:", 2);
	pty_dev = Ftype(fd);
	Fclose(fd);

	/* spawn the shell concurrently */
	Pexec(100, shell, args, env);

	/* Process I/O for the client (the main server loop) */
	for (;;) {
		/* send keyboard input from user to client */
		while (user_typed_key())
			Bconout(pty_dev, get_user_keystroke());
		/* read client output and display it */
		while (Bconstat(pty_dev))
			send_to_screen(Bconin(pty_dev));
	}

		
		
