
			MKRSC   Documentation

	       		   J. Charlton
   		30 Prescot Rd, Winnipeg, Manitoba
			Canada   R3T 3X5
		       Tel (204) 261-7267
	         E-mail  charltn@ccu.umantioba.ca
	
	MKRSC copyright Jim Charlton 1989.  MKRSC is freely distributable
provided that this file is distributed with the source and executable
code.  No-one may charge a fee for the executable or source code, nor for
distribution of this code.

	Version 1.0 is the first release of this program and all reports of 
problems, bugs or suggestions for improvements should be forwarded to the
address given above.

	No guarantees, written or implied are made as to the suitability of
this program for any particular purpose.  Anyone who uses it, does so at
their own risk.

This documentation is NOT a manual for GEM programming using a Resource
Construction Program (RCP).  It is a description of how to use MKRSC
to create resource files to use in GEM programming.

MKRSC is a simple GEM resource construction program (RCP) suitable for the
creation of dialog boxes and menus.  The purpose in writing this program
was to provide a utility for those interested in GEM programming on the
Atari ST/MEGA computers, but not having access to a commercial resource
builder.  Version 1.0 of the program has no facility for the creation of
icons or bit mapped images.  Neither is the program useful for editing
existing resource files, even those containing only dialog boxes and menus.
It is only useful for the creation of new resource files and their
associated C header files.  The program should work in either monochrome
or colour although it has been more extensively tested on monochrome systems.

MKRSC was written using the Laser C compiler sold by Megamax Inc.
Laser C is an excellent commercial C compiler for the Atari ST/MEGA and
I recommend it to anyone contemplating buying a C compiler.  It comes
with a very good RCP and an optional debugger (that is absolutely
essential, if you are doing any serious programming).  I am able to
develop relatively large applications using only a 1040ST with a single
double-sided drive.  I have no connection whatsoever with Megamax other
than as a satisfied customer.

The source code has also been modified by Jwahar Bammi to allow compilation
with the gcc compiler.  A separate Makefile (Makefile.gcc) as well as an
additional gcc support file (gnu.c) are included in the sources.

MKRSC was written without the benefit of any documentation other than what
could be gleaned from the Laser C manual.  There are many strange things
about resource files that I do not understand at all, some of which I mention
as part of the documentation in the source code.  I would be very glad
to hear about any problems encountered while using the program.  I will
try to fix bugs and post new versions in a timely manner.

How to use the program should be fairly obvious but I will try to generally
explain the items on the menu bar.

NEW- This starts the creation of a new resource by opening up a window
on the right side of the screen.  You can open up as many as seven of these
windows after which you should get a message saying that no more windows are
available.  Each window will have a different title which will change when
you save the resource.  You can rotate through the open windows by using
the 'rotate windows' command at the right end of the menu bar.

Having opened a window you may now drag the icons from the left hand side
of the screen to the right hand window.  You do this clicking on an icon
(left button, hold down) and dragging it into the window.  Anywhere in the
window is fine.  A namer dialog will pop up that will enable you to change
the name of this 'resource tree' (You can rename it later if you choose to
accept the default name by clicking on OK).  You should only drag either
dialog or menu icons into the window.  Do not use the 'unknown' icon.  If
you do, it will be treated exactly as a dialog icon.

Once you have one or more icons in the right hand window you can 'open' a
resource tree by double clicking on one of the icons.  Try a dialog box
first.  A dialog box opens with a simple outlined box in the window on the
right.  Note that the icons on the left hand side of the screen change as
you open the dialog box.  You may now 'drag' objects from the left hand side
of the screen into the window on the right.  They will be positioned at the
place you release the mouse.  You may reposition them by clicking on them
and dragging them to a new position.  NOTE.. If you drag an object or even
do a sustained click on an object, it will make it the top object in its
list of siblings.  This means that if you have overlapping objects, the one
that is top will be drawn on top.  By sequentially doing a sustained click
on a list of siblings (objects at the same level.. all having the same parent),
you can 'order' the list.  You can also 'order' or sort the list by using
the 'SORT' function (see below).  All objects can also be resized by
clicking near their lower right corner and dragging the corner to make a
new size.  Simply single clicking an object will cause it to be 'selected'
which will be useful for things to be described later.  If you double click
an object, a dialog box will open which will allow you to change the
characteristics of of the object.
  NOTE...  If you hold down the control key while clicking, dragging or
resizing an object, you will select the 'parent' of the top object
(usually the object under the top object).  If you hold down the left-shift
key while doing a sustained click on an object, a copy of the object will
be copied to the cut buffer.  The cursor will change to a pointing finger
and you can now paste a copy of the object by just clicking somewhere 
else.  You can copy objects within a dialog or whole trees at the resource
level.

SNAP-  Objects can be placed at any position and sized to any size if
snapping is turned off by clicking on SNAP (it can be turned back
on by clicking SNAP again).  If SNAP is on (the default) then object
positions and sizes will be snapped to the nearest character boundary/size.
Making 'unsnapped' resources may cause objects to be positioned
slightly differently at different resolutions.  You can also snap all
objects in the current dialog box (Snap all) or snap a selected object
(Snap selected).  Menu resources are always 'snapped'.

If you are working on a monochrome system, remember that only colors
0 and 1 have any significance.  Many of the object characteristics
affect their use in GEM programs and their use may not be obvious to
you until you become familiar with GEM.

Once you have put the objects that you desire into a dialog box you can close
the tree by clicking on the close box of the window (upper left) or by
selecting 'close' from the menu bar.  This will return you to the 'resource'
level from the single 'tree' level.  Now try dragging in and double clicking
a menu icon.  On double clicking the menu icon a menu bar opens up.  It
begins with a minimum set of items on the bar.  While you can edit the titles
and strings on the menu bar you should never 'erase' the 'desk' or 'file'
title.  You can examine the drop down menus under each title by 'selecting'
(single clicking) a title.  The drop down menu box and the entries in the
boxes can be resized by dragging their lower right corner.  You will have
to first reduce the size of the last menu box entry before you can get
access to the menubox itself for resizing, or use control/click to access
the menu box under the entry.  You can only resize menuboxes,
not reposition them.  Titles can be resized and even repositioned.  Their
corresponding menuboxes (with contents) will be repositioned automatically.
Tiles on the menu bar will always be end to end, left justified so that
repositioning will only change their order.  New tiles can be dragged only to
the title region of the menu bar.  A new menubox is automatically created
when you insert a new title.  New entries to a menubox can be dragged to an
open menu box.  They will always be positioned left justified in the box.
Double clicking a title or entry will allow editing the characteristics of the
title or entry although I am not sure of what use this is (I've never tried
running a program with these characteristics changed from their default
values)!

After playing with the menubar a bit, close the window until the subtree
icons are once again visible.

SAVE-  If you click 'save' three files will be created on the current drive.
They will all be named the same as the window title name.  The three files
might be RSC0.RSC, RSC0.DEF and RSC0.H.  RSC0.RSC is the resource file
itself.  RSC0.H is the C header file with variables defined giving the index
numbers of the named objects and trees in the resource file (see later for
naming).  RSC0.DEF is a file used ONLY by MKRSC to reload the resource into
MKRSC if you so desire.  It is not absolutely necessary for reloading but
is used to restore names (see later) and subtree types (menu or dialog).
The DEF file is NOT compatible with any other resource editor that I know of.

SAVE AS-  A file selector box will open to allow you to choose a new name
before creating the saved files.

OPEN-  A new window will open (if one is still available) and a file selector
box will appear to allow you to select a xxxx.RSC file to load.  The .DEF
file will also be loaded if it is available in the same directory with the
same name, xxxx.DEF.

CLOSE-  If a subtree is open in the window (a dialog box or menu), 'close'
will return you to the 'resource' level with its icons for all of the
current menus and dialogs in the resource.  If you 'close' from this latter
level, the window will be closed and all of the created resources will be
discarded.  The final closing of a resource brings up a dialog box
to ask if you would like to close, save or cancel (unless you have just
recently saved).  The window close box (upper left) functions the same as
'close' on the menu bar.

QUIT- (ALT-Q) Quits the program after closing each open window with the
close, save or cancel query.

The edit menu....CUT, COPY, PASTE, ERASE- (Keyboard equivalents ALT-X,
ALT-C, ALT-V and ALT-E).
If a subtree icon at the resource level, or an object in a subtree is
'selected' by single clicking on it, the edit menu will have the CUT, COPY,
and ERASE entries enabled.  'Erase' will simply erase the object with no
way of recovering it.  'Cut' will erase the object or tree and also keep a
copy in the cut buffer.  'Copy' just makes a copy in the cut buffer.  After
having cut or copied, the 'paste' entry of the edit menu will be enabled
and you will be able to paste items to their appropriate places.  This
copy and paste method is handy for copying items from one resource
to another one in another window.  Paste may seem like it is not working
at times.  This usually means that the object you are pasteing is not
positioned entirely within the parent, or that the parent is too small
to accomodate it.  Try again keeping in mind that the pointing finger icon
is pointing just inside the upper left corner of the object to be pasted.
It may be necessary to make the parent bigger.

NAME- (ALT-N) If you 'select' a subtree icon at the resource level, or an
object at the subtree level, then you can use the 'name' menu item to name
the object or tree.  These names will subsequently appear in the header file
created when you save.  In the C header file, each name will be #defined
to its corresponding index number in the resource.  This will enable you
to use the names as macros in your C programs.  This is the only way to
determine the index number of the objects in the resource.

SORT- (ALT-S) If you select an object which has at least two children then
you can 'sort' the children.  Sorting objects will affect the order in which
the children will be drawn when the dialog box is drawn.  It will also
affect the order in which editable objects will be handles by form_do().
Soting is allowed on the basis of the x or y position of the objects (or
on both).  Note, that as mentioned above, a sustained click on an object or
dragging an object, changes its order.  You can use either sequential
sustained clicks or the 'SORT' function to sort a list of siblings.

.C Output-  If you click on this item in the 'CHOOSE' menu it becomes
checked and a .C file will be created when you save the resource.  Clicking
the item again will turn this feature off again.  The .C file that is created
will be named xxxxxRSC.C, where xxxxx are up to 5 characters of the name
you give to the resource file.  The .C file contains arrays of TEDINFOs and
OBJECTS.  The OBJECT arrays are the resource trees that you have created.
They are named using the lower case version of the 'name' given to the 
resource tree when you created the resource.  The TEDINFOs are those needed
by the resource tree and their addresses will be calculated automatically 
and put into the appropriate ob_specs at compile time.  The .C resource has
been created so that you can simply #include it at the top of your program
among your global variables.  You can then remove the rsrc_load() and
rsrc_gaddr() calls from your program.  The addresses normally returned by 
rsrc_gaddr() are now those defined by the names of the resource arrays in
the .C output file.  You still #include the xxxxx.H file, as the macros
defined in that file are still valid.  The x, y, width and height parameters
of each object in the .C file object tree array are set to 'character'
coordinates and will need to be reset to the appropriate absolute coordinates
for your resolution.  Just pass each of the names of the object tree arrays
(TREE001 or whatever) to the following routine (thanks Sam) to adjust the
coordinates.
***********************************
int convert_resource(p)
	OBJECT *p;
{	OBJECT *p2;
	int ndx;
	p2 = p;
	ndx = 0;
	for(;;)
	{	rsrc_obfix(p,ndx);
		if(p2->ob_flags & 0x20) break;
		ndx++;
		p2++;
	}
}
***********************************
Your program should work exactly as before but without the
necessity of the xxxxx.RSC file.


ROTATE WINDOWS- (ALT-R) Does what it says, as long as you have at least two
windows open.

	Supplementary notes about the inner workings of MKRSC.

I started this program as a fun project and it soon grew into a major
programming effort.  I have worked on it part time for four months and
hope that it is usable without a lot of extra work to fix bugs.  In
starting the project I chose a rather poor format for storing the resources
as they are created.  I always intended on cleaning up that part of the
program but soon found that it would be impossible without rewriting the 
whole thing.  So, if you are trying to figure out the sources or are trying
to port them, I apologize for the rather inept data handling.  As it is,
all of the data is stored in structures called 'objtree' which has one link
to a sub 'objtree'.  Each objtree has arrays for objects, tedinfos, iconblocks,
three sets of strings, the name, the kind etc.  Each window will have a
'maintree' objtree which in turn will point to a 'subtree' objtree via its
treelink pointer.  The resource level icons with their iconblocks are stored
in the maintree objtree.  When you click open an icon you move to the subtree
level.

The source code is extensively documented so that it should be possible to
figure out what is going on.  I unfortunately was not consistent in the use
of variable names across functions so that may lead to some confusion.

One word of warning.  Because of the way the program works, the resource tree
is almost ALWAYS rebuilt before saving.  It is also rebuilt when an object is
'erased'.  This rebuilding discards any unused objects from the object tree
and repacks the remaining objects into the object array.  This means that
you will probably always have to recompile your GEM programs after editing
an existing resource.  The program is currently set to allow only 150 objects
in an object tree (MAXONUM).  If you need more you will have to recompile
the program with MAXONUM set to a higher value.  Objects can also be nested
only 10 deep.  This limit would be more difficult to change as it was hard-
coded into several functions.  One would have to use egrep to find the
number 10 where-ever it occurs in the sources and then change it where
appropriate.

Because of the lack of official documentation on GEM I am not quite sure
how to guarantee that multiple tedinfos in a dialog box will work.  The
problem is in using the arrow or tab key to jump the cursor from one
tedinfo to the next.  Sometimes, trying to tab or down-arrow while positioned
at the last tedinfo object will crash your program.  The only solution that
I know is to make sure that your dialogs containing tedinfos are FIRST in
the maintree window.  Build your menu resource last.  This *seems to* avoid
the problem.  If anyone knows officially how to fix this problem, let me
know.  Perhaps it is a bug in TOS and has been fixed with TOS 1.4.

Although I have said earlier that it is NOT possible to load and edit 
resource files created with other RCPs, it is not totally true.  I had
originally wrote the program so that it would load other resource files.
However, I found that other resource files had oddities that I did not
understand and which caused my program to crash on trying to load them.
Some resources may load just fine.  If you want to try, go ahead...  but
you were warned.  The program does not read any other type of DEF file,
so all icons will come up as 'unknown'.  You can set them to their proper
type using the 'name' menu item.  Under no circumstances, try to edit a
menu bar as a dialog box and then try to remake it a menu bar.  This will
probably crash MKRSC or at best will crash the program using the resource.

I have been told that a good book on GEM programming is....
	"Programmers Guide to Gem" by Balma and Fitler (Pub- Sybex).

ACKNOWLEGEMENTS

The most significant part of any programming project is (IMHO) the polishing
that occurs during beta testing.  I personally find that the last few weeks
(or months) of a project become extremely tiresome and without the
encouragement of the beta testers, programs finish in very poor shape (if
at all).  Truly half of the 'features' that you will find in MKRSC were
added at the suggestion of the testers.  I would especially like to 
acknowledge Jwahar Bammi and Samuel Streeper who stuck with the program,
helping to see it to completion.  I would also like to thank Don Morris, who
helped both in the early stages of this program and was the main tester for
XXED (a PD hexadecimal file editor written in 1989).

     Jim Charlton    April 29, 1990.
