
PROLOG AT WORK

     The only way to get a real taste of Prolog is to see it at work.
The sample programs on your disk were selected to give you a better
understanding of how the language works as well as to illustrate how
Prolog solves real-world problems.  Most of the examples were inspired
by the book The Art of Prolog, by Leon Sterling and Ehud Shapiro.

     Some of these programs can perform more than one task, so you may
need to edit them to access different parts of the program and get the
full benefit of the example.

SAMPLE.PRO

     This simple program tests to find out whether Betty is happy by
finding out if she is healthy, wealthy and wise.  It is a helpful
program to study if you are just learning Prolog because it prints out
descriptive messages which tell exactly which conditions have been met
at each stage of the program's execution.

FAMILY.PRO

     This program demonstrates Prolog's ability to interpret a
database of facts and make inferences from it.  FAMILY consists of
some elementary rules about family relationships, along with a few
facts about the British royal family.  Notice that although there is
no explicit mention of brothers in the collection of facts, Prolog is
able to find all of the people whom Charles is brother to because its
rules tell it how to make inferences.  Notice also the use of the
"fail" in the initial body of goals.  This predicate is guaranteed to
fail, so it forces Prolog to backtrack and find other solutions to the
query.

GRAMMAR.PRO

     Prolog was originally designed to deal with natural language
understanding, and works well in this area.  The program listed
defines a simple grammar, along with a small lexicon of words.  When
confronted with the sentence "Brave Washington crossed the chilly
Delaware," the program can determine that the sentence is grammatical.
Along the way, it also parses the sentence into its constituent parts,
although it doesn't explicitly record this achievement.  The TRACE
statement at the beginning of the file lets you follow the progress of
G-Prolog as it analyses the sentence.

LIST.PRO

     As the popularity of LISP demonstrates, the list can can an
immensely powerful data structure.  LIST includes a number of programs
which operate on lists.  These programs are interesting to study; you
may also wish to incorporate them into your own Prolog programs.

NDFA.PRO

     Finite automata play an important role in computer science.  This
file contains programs which use non-deterministic finite automata;
one of them determines if a string is a palindrome, that is, if it
reads the same backwards and forwards.

ARITH.PRO

     The programs in this file are all arithmetic.  One of the
examples uses recursion to find the factorial of a number.  (The
factorial of a number is the product of itself and all of the
preceding natural numbers down to one.  For example, the factorial of
3 is 3 * 2 * 1 = 6.)  The procedure to find the factorial of a number
is to first find the factorial of its predecessor, and then multiply
this factorial by the original number.

     There is another program in ARITH which  will determine the inner
product of two vectors.  (the inner product of two vectors is the sum
of the products of corresponding elements of the vectors.  So, for
example, the inner product of [1,2,3] and [4,5,6] = 1*4 + 2*5 + 3*6 =
32.)  The program works in typical Prolog recursion fashion: the inner
product is defined to be the sum of the product of the heads of the
two vectors and the inner product of the tails, and the inner product
of empty lists is defined as 0.

     There is no way to directly indicate negation in pure logic
programming. Instead, Prolog simply assumes that anything it can't
prove is false.  But with the aid of the cut, a sort of negation can
be used.  The programs square(x) and not_square(x) demonstrate this
trick.

GRAPH.PRO

     This program shows how Prolog can search through a graph.

QUEENS.PRO

     The n Queens problem, the problem of locating n chess queens on
an n-sqaure with none of the queens attacking any other one, has
become a classic.  QUEENS shows two ways that Prolog can solve the
problem.   (For a more thorough explanation of the n Queens problem,
read the documentation in the file.)

     I hope these few examples have given you some taste of what
Prolog can do and have inspired you to try your hand at writing your
own programs for G-Prolog.

