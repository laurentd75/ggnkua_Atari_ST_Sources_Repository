EVERYTHING IN THIS FOLDER GOES WITH THE C PROGRAMMING TUTORIAL
IN THIS MONTH'S ST FORMAT


Part 2 C PROGRAMMING TUTORIAL
(c) 1989 Warwick Grigg



Introduction

This month we're going to look at a program that is a bit 
more fun. Of course I'll try and teach you something about 
programming the ST in C as we go along. The program I chose 
for this month is a simple electronic organ. For this program 
we need to:

 -  access the keyboard via the operating system at the 
    BIOS, GEMDOS and system variable level
 -  access the timer via standard C functions 
 -  calculate the frequencies of the notes using floating    
    point arithmetic
 -  access the sound chip via the operating system at the 
    XBIOS level
 -  use more features of the C language
     
You'll find the source code for the program on the cover disk 
as "music.c" and printed below. The code is heavily commented 
to make it easy to understand. The executable program is on 
the cover disk as "music.prg".


Outline of the program logic

The program has four basic steps:

-  Display the operating instructions
-  Initialise the sound chip and the keyboard
-  For each key press, sound the appropriate note
-  Restore the state of the sound chip and the keyboard


The C code

Let's go through the C code roughly in the order that the 
code executes at run time. Last month you learned that a C 
program starts at the function called 'main()'. The code in 
this function follows the program logic outlined above.

The call to intro() and the code therein is simple stuff.

The 'setup()' function introduces some new features. Giaccess 
is a call to the operating system at the XBIOS level. In C 
the operating system's functions are called just like any 
other function. We use Giaccess to access the sound chip 
registers, in this case to initialise it. 

The operating system's keyclick procedure interferes with 
what we are trying to do with the sound chip. We avoid this 
by turning off the keyclick at the start and restoring the 
status at the end. The keyclick status is found in the 
documented system variable at address 0x484. The system 
variables can only be accessed in the privileged 'Supervisor' 
mode. This is why the operating system's GEMDOS function 
'Super()' is called.

The largest part of 'main()' gets the key codes and works out 
the number of the note to be played.        

'Play_note()' contains the algorithm for the frequency of 
each note in the chromatic scale (you can find the theory in 
physics text books). The floating point library functions are 
described in the file 'specs' on disk two of the Sozobon 
issue disk. For the benefit of the sound chip, the frequency 
is translated into the  high bits and low bits of the period. 

When I was writing this program I wanted the note to play for 
as long as the key is held down, but I couldn't find any 
appropriate documented system call. So the code waits until 
another key is pressed or until the end of the time allowed. 
The note is turned off by setting the volume register to 
zero. You can find a description of the timer functions, and 
the other standard library functions for Sozobon C, in the 
file 'dlibs.doc' on disk two of the Sozobon C issue disk. 


Features of the C language explored

POINTERS

The program uses pointers in a few places. A pointer is a 
variable containing an address of an area of memory. A 
declaration

fred_t *p

declares p as a variable which may contain the address of an 
area of memory of type fred_t. If later on we say

*p = *p + 1

this means add one to the data at the memory location pointed 
to by p. Pointer arithmetic is allowed. In C pointer 
arithmetic, one unit corresponds to one item of the type to 
which the pointer refers. So,

p++ 

would increment p by one byte if *p is of type 'char', but 
would increment p by one word (ie two bytes) if *p is of type 
'int'. C's pointer arithmetic is very powerful, combining the 
power of assembler with the expression of a high level 
language: you are allowed to manipulate pointers, but you 
don't have to remember the sizes of the data items. We will 
be using pointers extensively over the next few months.


MORE DATA TYPES

Three new types have been introduced: char, long, and float. 

A 'char' is the smallest unit of memory able to store the 
machine's character set. On the Atari ST this is a byte.

A 'long' is an integer, but able to store a wider range of 
values. For Sozobon C on the Atari ST this is equivalent to a 
long in 68000 assembler (ie 32 bits).

Although integer types are signed by default, attaching the 
prefix 'unsigned' will declare a variable that can only take 
positive values. Thus if an 'int' can take a value between 
32767 and -32768 an 'unsigned int' can take a value between 0 
and 65535. 

A 'float' is a floating point number. This is stored 
internally as an exponent and a mantissa (like the scientific 
notation on a calculator), so that numbers of very small 
magnitude  and very large magnitude can be manipulated with 
the same degree of precision.


ARRAY DECLARATIONS

In the program, 'kbd' is an array of elements, each element 
of type char. This can be generalised:

fred_t   a[10];

declares an array of 10 elements, each element of type fred_t.     
Elements are identified as a[0], a[1] ... a[9].

There is a connection between arrays and pointer arithmetic 
which will help you understand some of the thinking behind 
C's elegant design: in C, the item 
         
a[i] 

is the same as 

*(a+i)


An example of a two dimensional array declaration is:

int  a[10][3]


FUNCTION ARGUMENTS

The function play_note has one argument of type 'int'. 
Multiple arguments can be defined, for example:

fred(a, b)
int *a;
float b;

Completely opposite to FORTRAN, all arguments are passed by 
value (ie if the function alters these, this will not alter 
those of the caller).

If you want a variable passed 'by name', you declare an 
argument which is a pointer to the variable. Initially, 
PASCAL programmers HATE this, but after a while you can get 
to like it!

Compiling the music program

As floating point arithmetic is used, the library containing 
the maths routines (libm.a) needs to be included in the 
compile statement:

cc -O libm.a music.c -o music.prg
