
Strap

Program in C #7

If recent articles left you behind, this is for you: Warwick Grigg 
explains some of the easier C statements and illustrates them with 
some simple programs on the cover disk.

------------------------------------------------------------------

Several  readers  have  found recent  articles  too  difficult  to 
follow, so I'll cover some more of the basic constructs. I'll keep 
the  example  programs  short and simple but  illustrative  of  ST 
programming. When I get a few letters telling me that it's all too 
easy,  I'll know that I've pitched the level about  right!  You'll 
find  the  source  code,   executable  programs  and   compilation 
instructions on the cover disk.  So pop the disk in and learn that 
C!


switch and case

A switch and case construct is the familiar multiple choice  test. 
For  example,  RESTEST.C is a program to test for low,  medium  or 
high  resolution.  The switch statement's integer  expression  (in 
this case the value returned by the Getrez function ) is evaluated 
once, checked against the integer constants in the case statements 
and then the processor jumps to the matching case  statement.  The 
default  statement  is  obeyed when none of  the  case  statements 
apply.  Switch/case programming is a bit like assembler:  the case 
statements  are just lables;  unless you end each  case  condition 
with  a break statement,  execution just 'falls through' into  the 
next case condition.


------------------------------------------------------------------



#include <osbind.h>
#include <stdio.h>

main()
{
    switch (Getrez()) {

    case 0:
        printf("Low resolution\n");
        break;

    case 1:
        printf("Medium resolution\n");
        break;

    case 2:
        printf("High resolution\n");
        break;

    default:
        printf("What? Not low, medium nor high resolution!\n");

    }

    getchar();
}

               The program RESTEST.C

------------------------------------------------------------------


break

Break is also a useful statement for people who don't want to  use 
a goto to 'break out' of a loop.  See how it's used in the program 
GETINT.C.


------------------------------------------------------------------

#include <stdio.h>

main()    /* reads digit string and returns value of it */
{
     int c, result, signed;

     signed = 0;
     result = 0;
     c = getchar();

     while (c=='-') {    /* process leading minus signs */
          signed = !signed;
          c = getchar();
     }
     while (c != EOF) {
          if (c<'0' || c>'9')
               break;
          result = result*10 + c - '0';
          c = getchar()
     }
     if (signed)
          exit(-result);
     exit(result);
}

              The program GETINT.C

------------------------------------------------------------------


continue

The  continue  statement  is used to force  restart  of  the  next 
iteration  of a loop at the point just before the condition  test. 
The statement is very rarely used.


goto

Most  C  programmers  I know never use  the  goto  statement,  not 
through  lip service to dogmatic 'structured  programming'  rules, 
but because the break statement is so useful.  Anyway this is  how 
you use goto :

     while (a==b) {
          do {
               abc();
               if (fatal_error)
                    goto errlab;
          }
     }
     def();
     exit(0);

errlab:
     cleanup();
     exit(1);


for

The  for  statement is just convenient  shorthand.  The  following 
code:

     for (i=0; i<10; i++)
          printf("%d\n", i);
     

is equivalent to:

     i=0;
     while (i<10) {
          {
               printf("%d\n", i);
          }
          i++;
     }

A word of warning:  if you accidentally append a semicolon to  the 
for  statement it won't show up as a compilation error and  you'll 
find it difficult to spot the error.


do

The normal while loop has a test at the beginning,  but  sometimes 
it's  useful  to place the test after the first iteration  of  the 
loop. That is when you use a do statement:

     do {
         pr_item(); /* this statement executed at least once */
     } while (!lastitem);



           
command line arguments

The program name,  together with the command line parameters  that 
you  enter from the desktop for a .TTP program,  or you supply  to 
any program through a shell like gulam,  are available to the main 
function  through  an  array  of  pointers.   The  first  function 
parameter (argc) specifies the number of arguments and the second, 
(argv) is the array of pointers. Each pointer points to one of the 
arguments.  The  first  argument  is  the  program  name  and  the 
remaining  arguments  are the program's  parameters.  The  program 
PRINTPS.C prints its command line arguments.

------------------------------------------------------------------

#include <stdio.h>

main(argc, argv)
int argc;
char *argv[];
{
     printf("There are %d arguments\n", argc);

     for (i=0; i<argc; i++) {
          printf("Argument %d is %s\n", i, argv[i]);
     }

     getchar();
}

              The program PRINTPS.C

------------------------------------------------------------------


sizeof(variable) or sizeof(type)

Although  sizeof  is not a 'real' function it  behaves  like  one, 
returning  the  size (in bytes) of  its  parameter.  Sophisticated 
programs sometimes allocate memory dynamically depending upon  run 
time conditions,  using the malloc function call. As you must pass 
the  number of bytes you need to malloc,  you must  determine  the 
size  of the data structure you want.  Calculating  this  manually 
leads  to problems if you try to port your program to a  different 
machine,  and  you  would have to recalculate it if  you  were  to 
change your data structure. The sizeof function tells you how many 
bytes  used by a variable or a data type.  The most common use  of 
sizeof is :

     p = malloc(sizeof(*p));

If  you  want to find the sizes of you compiler's  primitive  data 
types try the program SIZES.C.

------------------------------------------------------------------

#include <stdio.h>

main()
{
     printf("\n");
     printf("Type            Size in bytes\n");
     printf("--------------  -------------\n");
     printf("char            %d\n", sizeof(char));
     printf("unsigned char   %d\n", sizeof(unsigned char));
     printf("short           %d\n", sizeof(short));
     printf("unsigned short  %d\n", sizeof(unsigned short));
     printf("int             %d\n", sizeof(int));
     printf("unsigned int    %d\n", sizeof(unsigned int));
     printf("long            %d\n", sizeof(long));
     printf("unsigned long   %d\n", sizeof(unsigned long));
     printf("float           %d\n", sizeof(float));
     printf("double          %d\n", sizeof(double));
     printf("char *          %d\n", sizeof(char *));

     return 0;
}

             The program SIZES.C

------------------------------------------------------------------

preprocessor directives

Preprocessor  directives  are processed by the first pass  of  the 
compiler before any real compilation into executable code.  Indeed 
for the UNIX C compiler the preprocessor is a separate program and 
can  be  used  for  other  languages,  not  just  C.  Preprocessor 
directives  are easily recognisable:  the first character  in  the 
line is a '#'.


#include "filename" or #include <filename>

This  includes the named file into the program and  the  resulting 
code is passed to the compiler.  The first form looks for the file 
in the current folder first,  whereas the second only looks in the 
folders specified in the LIB environment variable.


#define symbol new-symbol

This causes all subsequent occurrences of symbol to be  translated 
to  new-symbol.  As  C  doesn't have any means  of  specifying  an 
identifier to represent a constant this construct is used instead. 
For example the following definitions are useful for selecting the 
mouse pointer shape using the graf_mouse function call:

#define ARROW           0
#define BEE             2
#define TEXT_CRSR       1
#define HOURGLASS       2
#define POINT_HAND      3
#define FLAT_HAND       4
#define THIN_CROSS      5
#define THICK_CROSS     6
#define OUTLN_CROSS     7
#define USER_DEF        255
#define M_OFF           256
#define M_ON            257

These  definitions are declared for you in an include  file  named 
GEMFAST.H. So at the beginning of the program you write:

#include <gemfast.h>

and  at  the point where you want to change the mouse shape  to  a 
pointing hand:

graf_mouse(POINT_HAND);


#define symbol(parameter1, parameter2, ... ) expansion

This type of macro definition is best illustrated by an example:

#define cube(x) ((x)*(x)*(x))

The  cube  macro is a bit like a function call,  but  because  the 
source code is translated by a preprocessor,  the code is compiled 
in  line  (ie.  without a jump to subroutine).  Macros  result  in 
faster code but larger programs. Also note that I have placed x in 
brackets: otherwise cube(1+2) would be be calculated as (1 + 2*1 + 
2*1 + 2*1 + 2) !



NEXT MONTH

On  next month's cover disk you'll find updates for the Sozobon  C 
compiler.  Also I'll be solving some of the more tricky  problems, 
like  how to create desk accessories.  Originally,  I intended  to 
expand  the pinball game that was used as the basis  for  previous 
articles;  this will not be practical because in future articles I 
need to provide more help for the beginners.  However,  I  haven't 
turned  my back on the more advanced  programmers.  Whatever  your 
level,  if you are stuck, explain your specific problems to me and 
I'll help.

