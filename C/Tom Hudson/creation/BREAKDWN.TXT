
PROGRAM TAKE-APART

The main() function is fairly straightforward, acting as the main
initialization function and the dispatcher for the rest of the
program.  Note that separate path and filename strings are
maintained for the picture save, 3D file save and map data file
selection operations.  This eliminates frustration among users
who store their files in different folders and would normally
have to constantly change path specs in the file selector.  Also
notice that all RAM but 8000 bytes is allocated for map data from
the USGS file.

     The do_menu() function handles menu bar task dispatching,
and is also very straightforward.

     The save_pic(), pi1_save() and neo_save() functions take
care of saving low-res picture files.  The save_pic() function
handles file selection and determines whether the picture is to
be saved in DEGAS or NeoChrome format.

     The save_3D() and write_3D() functions handle the creation
and writing of the CAD-3D format solid object file.  An important
note here -- if you plan to modify and recompile the Creation!
program, be sure to use the LIBF fast floating-point library or
one with a compatible data format.  The .3D files use the
floating-point values and other floating-point formats will be
unreadable by CAD-3D.  I used the older .3D format as opposed to
the newer .3D2 format so that users of CAD-3D 1.0 could use the
files.

     The gen_real() function generates a map from the USGS data
file.  The first portion of the function handles the dialog box
interaction, the second part samples the data from the large USGS
array down into the work array and calls fin_proc() to do the
final processing.

     The gen_fractal() function follows the procedure outlined in
Figures 2-4 in order to create a full fractal map.  It then calls
fin_proc() for final processing.

     The fin_proc() function, as its name implies, performs the
final processing steps.  It samples the 256 X 256 work array down
into the 160 X 160 "tab2" array, which holds the altitude data,
and into the 160 X 160 "table" array, which holds the color
codings for the appropriate altitudes.

     The gen_top() and gen_perspec() functions generate the top
and pseudo-perspective views in their own separate image buffers,
using the myplot() function, found in the assembly language
source listing, to perform pixel plotting operations.

     The load_data() function is a critical part of Creation!.
It reads in the raw USGS data files, determines the largest
square map grid that memory can hold, and reads in the map
altitude values.  There are two problems here.  The first one is
that the map data files, created for the IBM PC, have all their
values stored in Intel's data format, the reverse of Motorola's.
This problem is corrected by the flop_l() and flop_i() functions,
which reverse the byte order in long and integer values,
respectively.

     The second problem with the map data files is that the data
in them may not be square.  Peerless Engineering fixes this so
that the unused grid positions are set to a null value, but it
causes problems in our plots.  For this reason, the last part of
load_data() trims the edges with null data.  Some data may be
lost, but this is necessary to maintain a square map.

