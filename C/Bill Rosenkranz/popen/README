popen(3) for TOS (rosenkra 15 Oct 90)
-------------------------------------

This is an implementation of popen(3) and pclose(3) for TOS. It does not
rely on MiNT or other multi-tasking systems. It uses temporary files (and
is thus limited to maximum number of open pipes as open files).

It is farily robust and has worked for me for the things I use it for.
Only source is posted here.

The source can be run standalone, with a main program (included). Just
define STANDALONE in config.h and compile. Run with no args. If you do this,
you might as well set debugging on by setting global _pipdebugging to 1 (by
#define DEBUG and #define DEBUG_ON in config.h).

To install, compile (after #undef STANDALONE and turning debug off) with:

	cc -c popen.c

and add to your library. You can #define DEBUG but #undef DEBUG_ON to
compile with debugging in the code but not turned on. The caller can then
declare extern int _pipdebugging and set it to 1 to turn it on at run time.

Note that popen and pclose use system(3) to invoke the command. I have
included my own system(3) here, though it is renamed _xsystem in the source.
This system follows the PATH to find an executable, so you can do:

	system ("grep whatever");

and it will search PATH for grep.ttp, grep.tos, and grep.prg. It does not
handle Bourne shell commands, however. If you do not have a decent system(3),
pull it out from the source, compile, and add to your library. Note that
_xsystem (which should in this case be renamed system) calls a lower level
routine _system, which actually does the Pexec. As far as I recall, _xsystem
only calls getenv(3) and access(2), and probably string stuff. Nothing fancy.
It should be pretty portable between compilers.

There is also a system call included called _psystem which attempts to do
the command via gulam. I have not tried this (successfully), however. It
should be possible, though. The code is setup to use _xsystem. If you want
to play with gulam invoking the command, #define SYSTEM to be _psystem.
I have not been able to get this to work properly. Maybe someone can explain
it to me. It runs, but then the prompt flakes out, oscillating rapidly between
the prompt and the emacs "Mark Set" string, effectively locking up the system
and requiring a soft (or hard) reboot.

If you have an environment variable TMP set, popen puts the tmp files
in that directory. Otherwise it uses the current directory.

There is a manpage included. Also included is output from executing the
standalone code with full debugging (file "out"). Note that the manpage
only is setup to make the standalone executable, not any library additions.
You can do that pretty easily, though.

Finally, before compiling the standalone executable, look at the main
program for the commands I execute for the read and write popens. They
are specific to my config and may need changing for yours.

Enjoy...


-Bill Rosenkranz
rosenkra%c1yankee@convex.com
