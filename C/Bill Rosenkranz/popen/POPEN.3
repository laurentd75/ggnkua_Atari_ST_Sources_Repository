NAME  
	popen, pclose -	operation on pipes 

SYNOPSIS  
	#include <stdio.h>
	
	FILE *popen (command, type)
	char *command, *type;
	
	pclose (stream)
	FILE *stream;

DESCRIPTION  
	Popen creates a	pipe between the calling process and the command 
	to be  executed.    The	 arguments to popen are	pointers to null
	terminated strings containing respectively a  shell  command  to
	execute	 and  an  I/O  mode,  either  "r" for reading or "w" for
	writing.  The value returned is	a stream  pointer  that	 can  be
	used  to write to the standard input of	the command or read from
	its standard output.  

	A stream opened	by popen MUST be  closed  by  pclose.	 A  pipe
	opened	for  writing does not execute until the	stream is closed
	with pclose.  A	pipe opened for	reading,  however,  is	executed
	when it	is opened.  

	Because	open files are shared, a type "r" command can be used as 
	an input filter, and a type "w"	as an output filter.  

NOTES  
	On non-multitasking systems (i.e. TOS),	pipes are implemented as 
	temporary  files  in  the directory specified by the environment
	variable TMP or	in the current directory.  

FILES  
	$TMP\__pipe__.xxx	temporary files	(xxx is	000 to 999)

EXAMPLE	 
	Here is	an example showing how to set up a read	pipe and  direct
	its output to a	write pipe.  

	#include <stdio.h>
	
	char   *read_cmd = "ls -l";
	char   *writ_cmd = "c:\bin\grep	popen";
	
	main ()
	{
		extern FILE    *popen ();
		extern int	pclose ();
	
		FILE	       *pip_read;	/* stream for reading */
		FILE	       *pip_writ;	/* stream for writing */
		char		buf[1024];	/* buffer for read */
	
		/*
		 *   open a pipe for reading. here we just do an "ls".
		 *   the FILE returned we can then read	from.
		 */
		if ((pip_read =	popen (read_cmd, "r")) == (FILE	*) NULL)
		{
			fprintf	(stderr, "could	not open read pipe");
			exit (1);
		}
	
		/*
		 *   open a pipe for writing. here we do a "grep".
		 *   the FILE returned we can then write to.
		 */
		if ((pip_writ =	popen (writ_cmd, "w")) == (FILE	*) NULL)
		{
			fprintf	(stderr, "could	not open write pipe");
			exit (1);
		}
	
		/*
		 *   in	this loop, we read from	the read pipe (ls command)
		 *   and write to the write pipe (grep command). note that
		 *   the write pipe does not really happen until we pclose
		 *   the pipe later. all that happens here is the tmp file
		 *   for the write pipe	gets filled. we	could also filter
		 *   lines before writing to pip_writ, if we wanted.
		 */
		while (1)
		{
			fgets (buf, 1023, pip_read);
			if (feof (pip_read))
				break;
			fprintf	(pip_writ, "%s", buf);
			fflush (pip_writ);
		}
	
		/*
		 *   close the pipes. when we close the	write pipe, it then
		 *   does its thing...
		 */
		pclose (pip_read);
		pclose (pip_writ);
	
		exit (0);
	}

SEE ALSO  
	fopen(3), fclose(3), system(3) 
