manpager v1.4 (91/1/27)
-----------------------

This is probably all I will do on this. If you make some improvements,
please mail the diffs to me...

Manpager also only works in monochrome, so far. No checks are done for
color, so do not attempt this!

In addition to the actual source, I have included the fonts (in .fnt and
.fed format, see fonts.arc) and some tools I hacked to make some of the
fonts (see tools.arc). You do not need these to rebuild, only if you want
to modify the fonts. See the readmes in these arcs, in that case. A
particularly useful tool, however, is fnt2fed, which converts MGR .fnt
files (the source of the fonts used here) to .fed fonts (the format
used in the ST's memory). It only works on monospaced fonts (which is
all MGR and manpager supports now anyway).

Manpager also can read files compressed with compress 4.3 (16-bit). I
used zlib to read these files (I posted this back in Nov 90), but also
include the src here since it is fairly small (zlib.arc).

This program uses line A, and you need a routine "linea0" which returns
a pointer to the line A stucture. Here is the synopsis:

	long linea0 (void)

Note that the makefile uses aln (atari linker for alcyon) to link. there
is an aln command file (l.inp) for this. Someday I will get around to
XARG-ing my cc(1)...

The stack is set to 350000, which should be more than enough for any
"reasonable" manpage under 300k in size (here reasonable means lines with
more than just a few characters per line since a linked list is created,
with space for pointers, etc, not just the line itself).

Changes since v1.1:

	- A Roman font was built in as well. All "normal" text above the
	  command/status line is printed in this font. Note that the
	  current font is always changed back to the actual system font
	  after every line is printed (in putline), not to Roman, so it
	  should still be well behaved. Only problem that might occur is
	  if a ^C is entered while text is being printed, though putline
	  does not use stdio to output chars (uses BIOS) if stdout isatty
	  so this really may not be an issue.

	- Fonts were lifted from MGR (the nserif8x16*.fnt fonts). They were
	  cleaned up. A conversion program (fnt2fed) was developed for
	  converting .fnt fonts to .fed fonts (i.e. the format used in the
	  ST's memory). The special font was also changed to be consistent
	  with these new fonts. fnt2fed also handles changing font sizes
	  i.e. cour6x12r.fnt was converted to an 8x16 font to be used as
	  the small font). It can also reduce the size of glyphs, but in
	  that case, you most likely will have to hand edit (using FED.PRG)
	  since it will be removing information. Note that the "fun" font
	  started out life as an 11x15 font and was converted.

	  Since .fnt files do not contain all the info needed to make a
	  proper struct font_hdr, an attempt is made to do so. Source for
	  fnt2fed is included (in the source post) if you want to improve
	  on this (and make the generated .fed files useful elsewhere).

	  The small font is sans serif. If you want serif, define SM_SERIF
	  in CFLAGS in makefile.

	- Font data now included in *.h files. There are font changing
	  drivers (e.g. fnt_bold in bold.c) which include the appropriate
	  header. The makefile has dependencies for *.o depend on the *.h
	  files.

	- An option (-z) to read compressed files (yeah!) using the zlib(3)
	  package I posted recently. You will need this to compile. If the
	  -z option is not specified, manpager will still look at the first
	  2 chars in the file to see if it may be a compressed file (the
	  magic number for compress is 0x1f9d) and will reopen the file
	  using zlib routines (zfopen, zfeof, zfclose, zfgets). These are
	  really nice to have, IMHO. Compressed files are typically less
	  than half the size of straight ascii. Note that compress uses
	  this scheme on the ST for renaming files:

		compress file		generates: file.z
		compress file.		generates: file.z
		compress file.e		generates: file.ez
		compress file.ee	generates: file.eez
		compress file.eee	generates: file.eez

	  (note the loss of the last char in the file.eee case!)
	  so manpager also attempts to find files named accordingly. I.e.,
	  if you have a file "manpager.1z" and type:

		manpager -z manpager.1

	  manpager will look for manpager.1z, too, if it does not find
	  manpager.1. Note that even with -z, the zlib routines can read
	  files which are not compressed, though somewhat slower. The
	  compress I have tested this with (from terminator) is:

		@(#) compress,v 4.3 88/12/26 08:00:00 don Release $
		Options: Unix MAXBITS = 16

	  You compress a file with:

		compress file

	  Since it does not appear to be documented, you can uncompress
	  with:

		compress -d file

	  Also note that compress removes (or writes over and renames?)
	  the original file, so unless you are comfortable with compress,
	  I'd recommend you make a copy of the file you wish to compress.

	- An option (-s) to force system font, and display non-printable
	  characters with octal code equivalent (i.e. \xxx). This display
	  is not available without the -s option.

	- Alternate Roman and bold fonts (-fun). Try it! (Can be disabled
	  when compiling, define USE_FUNNY_FONT in CFLAGS in makefile).
	  Note there is no underline version, so underline font is the
	  same as bold here.

	- As with all my programs, "-help" prints usage info (also "h" when
	  running), "-version" prints current program version (also "V" when
	  running), and "-debug" turns on debug mode (here there is no debug
	  info, though).

To do:

	- Any bug fixes.

	- Loadable fonts.

This is a special subset of less(1) intended to be used as a pager for
man(1). The Nroff(1) I recently posted now has the ability to generate
escape sequences in its output for bold (\fB), underline (\fI), and
alternate character sets (\(xx escapes), somewhat similar to vt100/ANSI
escape sequences of the form "ESC [ n m" where "n" is a number (n=1 for bold,
n=0 for normal, etc.). Manpager can be invoked by man(1) (set MANPAGER
in the environment) or can be used standalone. It can also filter out
these escape sequences, if it detects that stdout is not the screen.
I also posted a version of man(1), but it does not currently handle
compressed files, though manpager can read compressed files without the
"z" suffix.

So far, manpager has the new font data built in. This is currently only
for the monospaced 8x16 system fonts on monochrome systems, though it should
be easy to generate 8x8 fonts for medium resolution color. Perhaps it would
be nice to be able to load fonts, but that will wait for another day.

I wrote this to be able to have manpages generated with nroff (MY nroff,
that is) print to the screen with at least underline and bold
capabilities, much like man on a vt100 on a unix system. In addition
to bold and underline (to simulate italics), I have created two special
fonts, a "small" font (really a 6x12 font expanded to 8x16) and an
alternate character set, driven by nroff escape sequences, which includes
things like upper and lower case Greek, box drawing characters, and other
characters not found in the standard ST system font. I used some trivial
tools of my own device to make the bold, small, underline fonts, and
used the FED program to create and edit the special character set.
These tools (fnt2fed, mksmall, mkuline, mkbold) accept .fed files and write
new versions, with the appropriate transformations.

How would you use this? Well, here is one scenario, assuming you are using
both nroff v1.10 p4 and the man(1) I just posted:

	1) Given a manpage from a program in nroff format, say "mycmd.man",
	   run nroff to generate a readable version, for the "proper"
	   section of the manual:

		nroff -T -man mycmd.man >mycmd.1

	   "Proper" is defined (by BSD unix) as:

	     section	contents
		1:	user commands (e.g. /bin, /usr/bin, etc)
		2:	system calls (e.g. open(2), Cconout(2g), etc)
		3:	library calls (e.g. fopen(3s), system(3), etc)
		4:	special files (dev drivers, hardware)
		5:	file formats (e.g. arc(5), picture(5), etc)
		6:	games (e.g. larn(6), etc)
		7:	misc (e.g. man(7), ascii(7), etc)
		8:	administration commands (e.g. reboot(8), etc)
		l:	local user commands (e.g. compress(1L), etc)
		n:	new commands (to replace existing, once ok,
			ususally /usr/new)
		o:	old commands (those which were replaced,
			usually /usr/old)

	   In addition, I also have section 0 (for general info, etc).
	   I can't remember what System V Release 3 uses, though the
	   first 4 or 5 are the same.

	2) So you would make/have a directory structure like this:

		...\man
		...\man\man0
		...\man\man1
		...\man\man2
		...\man\man3
		...\man\man4
		...\man\man5
		...\man\man6
		...\man\man7
		...\man\man8
		...\man\manl
		...\man\mann
		...\man\mano

	   Here "..." means some other root directory, like "c:\usr" or "d:".
	   I use "c:" so that manpages are in "c:\man\man1", etc. so lets
	   use that in the remainder of this example.

	3) Decide if you want to compress the manpages to save space. If
	   so,

		compress mycmd.1

	   yielding "mycmd.1z".

	4) Copy the generated manpage (mycmd.1 or mycmd.1z here) to the
	   proper subdirectory:

		cp mycmd.1 c:\man\man1      or
		cp mycmd.1z c:\man\man1

	5) Tell man(1) where the manpages are and what pager to use:

		setenv MANDIR c:\man
		setenv MANPAGER c:\bin\manpager.ttp

	   assuming you keep the executable for manpager in c:\bin.
	   You MUST specify the full path for manpager.

	6) Now try it out:

		man mycmd

Implementation of manpager depends on line A (resetting the DEF_FONT and
V_FNT_AD pointers) so it may not run on the TT. Since it is unlikely that
I will ever have one, so I really don't care. The program is a "legal" one,
in that it finds the addresses from line A, NOT from undocumented memory
locations, so it should run on any ST TOS version (tested on 1.0 and 1.2).
It is also well behaved and should never leave the font pointers other
than what they were, unless for some reason the program crashes in the
line output routine (putline) itself. Never say never, but I don't think
that will ever happen unless the system is already hosed.

It is almost as fast as less v97, especially since it has to look at every
char in each line to find the escape sequences (which I think less(1) does
as well). It uses the BIOS to output characters, not stdio, if stdout is
the screen (i.e. isatty(1) != 0).

Note: I have no idea how this program will interact with GDOS (or clones),
Ultrascript, etc. since I do not have access to these.

It compiles fine with Alcyon, and should port easily to gcc, sozobon, and
MiNT. Please send me any diffs if you make such a port.


Enjoy...

-Bill Rosenkranz
rosenkra@convex.com

