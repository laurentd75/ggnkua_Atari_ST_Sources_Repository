-----------------------------------
nroff (TOS, Minix) v1.10 p4 1/22/91
-----------------------------------

This is the source post of nroff v1.10 p4. See the "readme.bin" file in the
binary post as well. I mention manpager(1) which I also posted. This is a
subset of less(1) used to interpret special escapes sequences "nroff -T"
produces. An executable is on the binary post of nroff as well.

Also included is a tmac.an (for manpages) which turns on
bold/italic in section headers, .B, etc. I usually name this file "tmac.anx"
and invoke "nroff -manx ..." to get the bold and italic escapes. With
manpager, I expect to make this the standard for -man (and have escape-less
macros in tmac.anx), converting the 100's of manpages I have to use the
bold/italic escapes, and making manpager the PAGER for man(1) on my system.

Note that I have (concurrently) posted src/bin for manpager(1) as well as
a more or less complete man(1) system, including whatis(1), apropos(1), and
whatisin(1).

This was developed with Alcyon and my own cc(1) and make(1). It works fine
under Gulam (under TOS). Note that I am not sure some of
the changes made to the Minix version (dealing with termcap, mainly) have
made it in. Sorry. This release really only adds alternate character
sets for TOS ONLY anyway, so I would not waste my time porting to this
patchlevel to Minix. There are really no other changes anyway.

Besides small bug fixes, these are some new features since v1.10p3.
Pretty minor in code, major in implication; expect a major release this
spring, if I can find the time. This will probably be the last of v1.

Note that in order to make use of these changes, you should also get the
manpager program I also posted. It would also be recommended to get the
man(1) package I also posted (which includes man, apropos, whatis, and
whatisin) so that you can create a very unix-like documentation system,
as I have on my system. All you need is the manpages :-).

As part of this post, I have included a style guide for creating manpages,
which would be nice to adopt, if only for the reason that it creates
uniformity of documentation. It is in essence a template.

Here are the changes:

	o Add -Tname switch for ANSI/vt100 escape sequences rather than vt52
	  for font changes (standout). Now bold and italic are different.
	  Only useful if you have a way of viewing these, which you DO if
	  you got the "manpager" program I also posted. manpager is a
	  subset of less(1) which is like more(1) but can go backwards.
	  manpager implements new fonts for bold (\fB), underline (\fI),
	  and special character sets (\fS) on the fly, as it were. So far
	  it is only for monochrome, though a medium rez version is in
	  the works. Note that "name" is currently ignores, though in the
	  next release, it will point to a file \lib\term\tabname which
	  can be used to set up alternate char sets and special escapes
	  for devices (i.e. manpager, printers, etc). I will probably
	  use some code sent to me by an avid nroff'er in Germany, just
	  recently (which will not appear until v2, however).

	  Formatted files which only do font changes for bold and italic
	  *should* be viewable on vt100 terminals (with -T). I have not
	  tried this, however.

	o Along with the -T switch, a host of new escape sequences were
	  added (escape.c) which, if used with -T (and manpager to view),
	  add things like box/line drawing characters (no more crude
	  underline/dash/bar boxes), full upper/lower greek alphabet,
	  large square/curly brackets, math symbols, sub/superscripts,
	  etc. All that would be needed is a filter program and you
	  should be able to produce laser documents. Keep in mind this
	  is still nroff, NOT troff, however. You are stuck with
	  mono-spaced fonts. However, I think it would be fairly easy
	  to make a fair troff, with proportional fonts, by including
	  some "standard" character width tables. I'd have to see how
	  the real troff does it. Note that this alternate character
	  set is NOT accessible via \fS. Use the \(xx escapes. Well,
	  they are accessible, but only for characters the keyboard/
	  editor can generate, and you'd need to consult the table
	  to find the proper character. I will not guarantee compatibility
	  to future releases, however, if you do this. Use the escapes!

	o -help and -version added.

	o patchlev.h now #included (in version.h) so it is really tied
	  to the source.

Things to come in the (hopefully) near future:

	o Hyphenation, if I can get the stupid state machine going.

	o Internally, all chars will be 16-bit ints, with upper byte
	  flagging special handling (fonts, char width, etc).

	o Internally, each page will be kept in memory, based on .pl, .ll,
	  etc. This will make it easy to implement traps, diversions, etc.
	  though it may finally make it too big for Minix, at least the
	  archaic PC version. I'd like to shy away from tmp files, prefering
	  faster memory, if possible. This may make it too big for 520's,
	  though.

	o Support for lasers, though don't ask me what that means at this
	  point. This will depend on my getting at least a DeskJet, if I
	  can save up for it. This may include proportional fonts.

	o More comprehensive -ms package, perhaps -me as well. -man seems
	  pretty complete, except those things which really rely on diversions.

	o Probably a version of tbl(1), and a remote possibility of eqn(1),
	  though that is stretching it. Since I never use refer(1), I doubt
	  I will do anything there (last time I wrote a thesis was a dozen
	  years ago and a paper probably 10 years ago, before PC :-).

	o Manpager supports bold, italic (underline), standout (reverse
	  video), "small" characters, and an alternate character set.
	  Somehow I will make nroff deal with standout and small (it does
	  not, currently), meaning point size changes.


Enjoy...


-Bill Rosenkranz
rosenkra%c1yankee@convex.com
