@database "TINICONV"
@options "+g -i -s +z -t2 -d12"
@author "Pierre TONTHAT"
@$VER: 1
@subject "Tiniconv.ldg documentation"


@node "tiniconvldg_start" "Tiniconv.ldg documentation"

    TINICONV.LDG

      @{"What is it?" LINK "tiniconvldg_presentation"}

      @{"Install" LINK "tiniconvldg_install"}
      @{"History" LINK "tiniconvldg_history"}
    
    Functions:

      @{"Miscellaneous" LINK "tiniconvldg_misc_functions"}

      @{"Convertion" LINK "tiniconvldg_convert_functions"}

      @{"Tools" LINK "tiniconvldg_tool_functions"}

    Test program:
    
      @{"TSTICONV.PRG" LINK "tiniconvldg_test_program"}
  
@endnode


@node "tiniconvldg_presentation" "Tiniconv.ldg documentation"
@{0U}                                                           Presentation@{0}
   
    Tiniconv.ldg provides charset conversions for any Atari ST applications.
    
    From: http://sourceforge.net/projects/tiniconv/
    Author: Roman Rybalko <Roman.Rybalko@kaspersky.com>
         
    Remember not all charsets are supported, thus "tiny" compared to the
    iconv implementation.
    
    Transliteration is not supported.
    
    Used as a library for the LDG system and configured to interact the less
    with disk.
  
@endnode

@node "tiniconvldg_test_program" "Tiniconv.ldg documentation"
@{0U}                                                  Tiniconv test program@{0}
   
    TSTICONV.PRG is released as a test program to learn how to use this
    Tiniconv.ldg.
    
    Choose a text file, from the EXAMPLES folder or other file you want to see.
    
    Select the supposed charset of this file, it will convert automaticaly
    to Unicode (UTF-16).
    
    NVDI 4+ is mandatory. Install latest versions of TTF fonts (for example,
    Arial or Tahoma) from latest operating systems. These should contains the
    Unicode (16 bits) glyphes, so that NVDI may display them.
    
    Choose size and alignment, and for Hebrew or Arabic, change the reading
    direction (right to left).
    
    The GFA source is provided to learn more how to use the library, from GFA
    or even C language.
  
@endnode

@node "tiniconvldg_install" "Tiniconv.ldg documentation"
@{0U}                                       Installation and required things@{0}

    @{0U}Needs:@{0}

    - uses more or less 1 MB RAM
    - NVDI is advised if you want to display text converted to Unicode (UTF-16)
    - MagiC or MiNT is advised

    @{0U}Update:@{0}

    > Replace old Tiniconv.ldg by the new one.

    @{0U}Installation:@{0}

    > Install the LDG system:
      - LDG.PRG in your AUTO folder is needed by some programs (GFA coded)
      which detect and use ldg functions via the LDGM cookie.
      - set the LDG folder (usualy C:\GEMSYS\LDG\) by launching LDG.CPX in
      the Control Panel.
    
    > Put Tiniconv.ldg in the LDG folder.
    
    > No need to restart, the LDG libraries are loaded dynamicaly.
      Some programs need the LDGM cookie, you can launch LDG.PRG after
      boot sequence.
  
@endnode

@node "tiniconvldg_misc_functions" "Tiniconv.ldg documentation"
@{0U}                                                Miscellaneous functions@{0}

 Carefull: "int" are 32 bits (gcc)

 /*
  * return the version of the Tiniconv library
  */
 const int get_version(); 

 /*
  * return the size of the structure descriptor for one convertion process
  */
 unsigned long get_sizeof_tiniconv_ctx_struct();
  
@endnode


@node "tiniconvldg_convert_functions" "Tiniconv.ldg documentation"
@{0U}                                                   Convertion functions@{0}

 Carefull: "int" are 32 bits (gcc)

 /*
  * Initiate the convertion work
  *
  * param: input charset opcode
  * param: output charset opcode
  * param: options mask (see below)
  * param: pointer of the iconv structure descriptor 
  *        (previously global-mallocated and 0-filled by the caller)
  * 
  * return: 0 if OK, -1 if error (see below)
  */
 int tconv_init(int in_charset_id, int out_charset_id, int options, struct tiniconv_ctx_s *ctx);

 /* Available charset opcodes are: */
 
 #define TINICONV_CHARSET_ASCII       0
 #define TINICONV_CHARSET_CP1250      1
 #define TINICONV_CHARSET_CP1251      2
 #define TINICONV_CHARSET_CP1252      3
 #define TINICONV_CHARSET_CP1253      4
 #define TINICONV_CHARSET_CP1254      5
 #define TINICONV_CHARSET_CP1255      6
 #define TINICONV_CHARSET_CP1256      7
 #define TINICONV_CHARSET_CP1257      8
 #define TINICONV_CHARSET_CP1258      9
 #define TINICONV_CHARSET_CP936       10
 #define TINICONV_CHARSET_GB2312      11
 #define TINICONV_CHARSET_GBK         12
 #define TINICONV_CHARSET_ISO_2022_JP 13
 #define TINICONV_CHARSET_ISO_8859_1  14
 #define TINICONV_CHARSET_ISO_8859_2  15
 #define TINICONV_CHARSET_ISO_8859_3  16
 #define TINICONV_CHARSET_ISO_8859_4  17 
 #define TINICONV_CHARSET_ISO_8859_5  18
 #define TINICONV_CHARSET_ISO_8859_6  19
 #define TINICONV_CHARSET_ISO_8859_7  20
 #define TINICONV_CHARSET_ISO_8859_8  21
 #define TINICONV_CHARSET_ISO_8859_9  22
 #define TINICONV_CHARSET_ISO_8859_10 23
 #define TINICONV_CHARSET_ISO_8859_11 24
 #define TINICONV_CHARSET_ISO_8859_13 25 
 #define TINICONV_CHARSET_ISO_8859_14 26
 #define TINICONV_CHARSET_ISO_8859_15 27
 #define TINICONV_CHARSET_ISO_8859_16 28
 #define TINICONV_CHARSET_CP866       29
 #define TINICONV_CHARSET_KOI8_R      30
 #define TINICONV_CHARSET_KOI8_RU     31
 #define TINICONV_CHARSET_KOI8_U      32
 #define TINICONV_CHARSET_MACCYRILLIC 33
 #define TINICONV_CHARSET_UCS_2       34
 #define TINICONV_CHARSET_UTF_7       35
 #define TINICONV_CHARSET_UTF_8       36
 #define TINICONV_CHARSET_CHINESE     37
 #define TINICONV_CHARSET_BIG5        38
 #define TINICONV_CHARSET_ATARIST     39
 #define TINICONV_CHARSET_VISCII      40
 #define TINICONV_CHARSET_UTF_16      41
 #define TINICONV_CHARSET_UTF_16BE    42
 #define TINICONV_CHARSET_UTF_16LE    43

 /* You can use tool function tconv_find to get opcode from charset name */

 #define TINICONV_OPTION_IGNORE_IN_ILSEQ 1 /*< ignore incorrect input sequences */
 #define TINICONV_OPTION_IGNORE_OUT_ILSEQ 2 /*< replace sequence which can't be converted to OUT charset with OUTIL_CHAR */
 /* #define TINICONV_OPTION_TRANSLIT 4 (not supported) */
 #define TINICONV_OPTION_OUT_ILSEQ_CHAR(ch) (ch << 8)

 #define TINICONV_INIT_OK 0
 #define TINICONV_INIT_IN_CHARSET_NA -1
 #define TINICONV_INIT_OUT_CHARSET_NA -1

 /*
  * Convertion work
  *
  * param: pointer of the iconv structure descriptor
  * param: pointer of the input buffer
  * param: size of the input buffer
  * param: pointer of var, returns consumed size in the input buffer
  * param: pointer of the output buffer
  * param: size of the output buffer
  * param: pointer of var, returns consumed size in the output buffer, thus the size (in bytes) of the final character string.
  *
  * return: 0 if OK, negative value if error (see below)
  */
 int tconv_conv(struct tiniconv_ctx_s *ctx, unsigned char const *in_buf, int in_size, int *p_in_size_consumed, unsigned char *out_buf, int out_size, int *p_out_size_consumed);

 #define TINICONV_CONVERT_OK 0
 #define TINICONV_CONVERT_IN_TOO_SMALL -1
 #define TINICONV_CONVERT_OUT_TOO_SMALL -2
 #define TINICONV_CONVERT_IN_ILSEQ -3
 #define TINICONV_CONVERT_OUT_ILSEQ -4
   
@endnode


@node "tiniconvldg_tool_functions" "Tiniconv.ldg documentation"
@{0U}                                                        Tools functions@{0}

 Carefull: "int" are 32 bits (gcc)

 /* 
  * return the internal opcode corresponding to the charset (case independant).
  */ 
 int tconv_find(const char *name);

 /* Accepted names are:
 
 - US-ASCII, ASCII
 - CP1250, WINDOWS-1250
 - CP1251, WINDOWS-1251
 - CP1252, WINDOWS-1252
 - CP1253, WINDOWS-1253
 - CP1254, WINDOWS-1254
 - CP1255, WINDOWS-1255
 - CP1256, WINDOWS-1256
 - CP1257, WINDOWS-1257
 - CP1258, WINDOWS-1258
 - CP936, WINDOWS-936
 - GBK
 - ISO-2022-JP
 - ISO-8859-1, ISO8859-1, LATIN1
 - ISO-8859-2, ISO8859-2, LATIN2
 - ISO-8859-3, ISO8859-3, LATIN3
 - ISO-8859-4, ISO8859-4, LATIN4
 - ISO-8859-5, ISO8859-5, CYRILLIC
 - ISO-8859-6, ISO8859-6, ARABIC
 - ISO-8859-7, ISO8859-7, GREEK
 - ISO-8859-8, ISO8859-8, HEBREW
 - ISO-8859-9, ISO8859-9, LATIN5
 - ISO-8859-10, ISO8859-10, LATIN6
 - ISO-8859-11, ISO8859-11
 - ISO-8859-13, ISO8859-13, LATIN7
 - ISO-8859-14, ISO8859-14, LATIN8
 - ISO-8859-15, ISO8859-15, LATIN9
 - ISO-8859-16, ISO8859-16, LATIN10
 - CP866
 - KOI8-R
 - KOI8-RU
 - KOI8-U
 - X-MAC-CYRILLIC
 - UCS-2, ISO-10646-UCS-2
 - UTF-7, UTF7
 - UTF-8, UTF8
 - GB2312, EUC-CN
 - BIG5
 - ATARI, ATARIST
 - VISCII
 - UTF-16, UTF16
 - UTF16BE
 - UTF16LE
 */
 
@endnode


@node "tiniconvldg_history" "Tiniconv.ldg documentation"
@{0U}                                                                History@{0}
 
  @{0B}Release 1:@{0}
  + built with cross-compilation gcc, from tiniconv library v1.14.
  + added some charsets from original iconv library (ATARIST, Unicode UTF16).
  
@endnode
