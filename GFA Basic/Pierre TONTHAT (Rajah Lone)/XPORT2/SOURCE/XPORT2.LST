IF FRE()<204800
  ~FORM_ALERT(1,"[1][ M‚moire insuffisante | ou fragment‚e. |][Quitter]")
  QUIT
ELSE
  RESERVE 204800
  ON ERROR GOSUB gest_err
  ON BREAK GOSUB sortir2
  init_1
  init_2
  boucle_generale
ENDIF
'
> PROCEDURE sortir
  IF FORM_ALERT(1,CHAR{OB_SPEC(adtree%(nb_tree%),10)})=1
    sortir2
  ENDIF
RETURN
> PROCEDURE sortir2
  FOR i%=1 TO 3
    ferme_win(i%)
  NEXT i%
  IF m_adr%
    ~GEMDOS(73,L:m_adr%)
  ENDIF
  IF recoit%
    ~GEMDOS(73,L:recoit%)
  ENDIF
  IF envoit%
    ~GEMDOS(73,L:envoit%)
  ENDIF
  ~RSRC_FREE()
  ~APPL_EXIT()
  ' QUIT 0
  EDIT
RETURN
'
> PROCEDURE init_1
  ~APPL_INIT()
  '
  vdi_handle&=V~H
  control%=CONTRL
  ptsine%=PTSIN
  gcontrol%=GCONTRL
  intine%=INTIN
  gintoute%=GINTOUT
  '
  ~WIND_UPDATE(3)
  ~WIND_UPDATE(1)
  '
  ~GRAF_MOUSE(0,0)
  ~WIND_GET(0,4,screenx&,screeny&,screenl&,screenh&)
  '
  IF INT{{ADD(GB,4)}}>=399
    naes!=TRUE
  ELSE
    naes!=FALSE
  ENDIF
  '
  dummy%=LPEEK(&H4F2)
  dummy$=CHR$(ADD(48,PEEK(ADD(dummy%,2))))
  dummy$=dummy$+CHR$(ADD(48,PEEK(ADD(dummy%,4))))+CHR$(ADD(48,PEEK(ADD(dummy%,3))))
  tos_version%=VAL(dummy$)
  '
  magic!=@test_cookie("MagX",dummy%)
  mint!=@test_cookie("MiNT",dummy%)
  IF magic! OR mint!
    multi!=TRUE
  ELSE
    multi!=FALSE
  ENDIF
  '
  fslx!=FALSE
  IF magic!
    IF @appl_getinfo(7,mode&,dummy&,dummy&,dummy&)>0
      IF BTST(mode&,3)
        fslx!=TRUE
      ENDIF
    ENDIF
  ENDIF
  '
  @declare_1
  @declare_2
  RESERVE 15360
  @declare_3
  '
  ~RSRC_FREE()
  IF @s_exist("XPORT2.RSC")
    result%=RSRC_LOAD("XPORT2.RSC")
    IF result%=0
      ~FORM_ALERT(1,"[1][XPORT2.RSC n'a pas pu|etre charg‚ comme fichier|ressource.][ Ok ]")
      sortir2
    ELSE
      FOR i%=0 TO nb_tree%
        ~RSRC_GADDR(0,i%,adtree%(i%))
        hd&(i%)=OB_H(adtree%(i%),0)
        ld&(i%)=OB_W(adtree%(i%),0)
      NEXT i%
    ENDIF
  ELSE
    ~FORM_ALERT(1,"[1][|XPORT2.RSC non trouv‚. |Placez le … c“t‚ du PRG. |][ Ok ]")
    sortir2
  ENDIF
  '
RETURN
> PROCEDURE declare_1
  lect%=GEMDOS(25)
  chemin$=CHR$(lect%+65)+":"+DIR$(lect%+1)+"\"
  c0$=CHR$(0)
  masque$="*.*"+c0$
  essai_envoit$="ENVOI.TXT"+c0$
  essai_recoit$="RECU.TXT"+c0$
  '
  nb_tree%=5
  '
  DIM adtree%(nb_tree%),xd&(nb_tree%),yd&(nb_tree%),ld&(nb_tree%),hd&(nb_tree%)
  DIM hand_win%(nb_tree%),wx&(nb_tree%),wy&(nb_tree%),wl&(nb_tree%),wh&(nb_tree%)
  '
  DIM baud%(1,15)
  baud%(0,1)=1
  baud%(0,2)=2
  baud%(0,3)=4
  baud%(0,4)=7
  baud%(0,5)=8
  baud%(0,6)=9
  baud%(0,7)=11
  baud%(0,8)=13
  FOR i%=0 TO 15
    baud%(1,i%)=i%
  NEXT i%
  '
  DIM aff_vit%(15)
  aff_vit%(0)=19200
  aff_vit%(1)=9600
  aff_vit%(2)=4800
  aff_vit%(3)=3600
  aff_vit%(4)=2400
  aff_vit%(5)=2000
  aff_vit%(6)=1800
  aff_vit%(7)=1200
  aff_vit%(8)=600
  aff_vit%(9)=300
  aff_vit%(10)=200
  aff_vit%(11)=150
  aff_vit%(12)=134
  aff_vit%(13)=110
  aff_vit%(14)=75
  aff_vit%(15)=50
  '
RETURN
> PROCEDURE declare_2
  '
  nb_plan%=ROUND(LOG(WORK_OUT(13))/LOG(2))
  '
  portfolio!=TRUE
  machine!=FALSE
  vit_sup%=8
  vit_inf%=1
  choix_vit%=1
  buffer_val%=64
  '
  tempo%=100
  '
  DIM win!(4),aff!(4)
  FOR i%=1 TO 4
    win!(i%)=FALSE
    aff!(i%)=FALSE
  NEXT i%
  '
  DIM cp_win%(4)
  cp_win%(1)=&X1011
  cp_win%(2)=&X1011
  cp_win%(3)=&X1011
  cp_win%(4)=&X1
  '
  choix_affichage!=TRUE
  choix_recon!=FALSE
  choix_control!=FALSE
  '
RETURN
> PROCEDURE declare_3
  m_adr%=GEMDOS(72,L:16)
  IF m_adr%<1
    sortir2
  ENDIF
RETURN
> PROCEDURE init_2
  '
  FOR i%=1 TO nb_tree%
    FOR j%=0 TO OB_TAIL(adtree%(i%),0)
      dummy%=OB_TYPE(adtree%(i%),j%)
      SELECT dummy%
      CASE 20,22,26,27
        OB_FLAGS(adtree%(i%),j%)=BSET(OB_FLAGS(adtree%(i%),j%),9)
        IF BTST(OB_STATE(adtree%(i%),j%),0)
          OB_FLAGS(adtree%(i%),j%)=BSET(OB_FLAGS(adtree%(i%),j%),11)
        ELSE
          OB_FLAGS(adtree%(i%),j%)=BCLR(OB_FLAGS(adtree%(i%),j%),11)
        ENDIF
        IF dummy%=20 AND j%=0 AND nb_plan%<4
          OB_SPEC(adtree%(i%),0)=OB_SPEC(adtree%(i%),0) AND &X1111111111111111
        ENDIF
      DEFAULT
        OB_FLAGS(adtree%(i%),j%)=OB_FLAGS(adtree%(i%),j%) AND &X111111111
      ENDSELECT
    NEXT j%
  NEXT i%
  '
  IF OB_H(adtree%(0),1)<14
    fonte&=1
  ELSE
    fonte&=2
  ENDIF
  '
  OB_STATE(adtree%(2),11)=OB_STATE(adtree%(2),11) OR ABS(choix_affichage!)
  OB_STATE(adtree%(2),12)=OB_STATE(adtree%(2),12) OR ABS(choix_recon!)
  OB_STATE(adtree%(3),7)=OB_STATE(adtree%(3),7) OR ABS(choix_control!)
  '
  resetmenu
  CHAR{{OB_SPEC(adtree%(2),3)}}=STR$(buffer_val%)+c0$
  CHAR{{OB_SPEC(adtree%(2),13)}}=CHAR{OB_SPEC(adtree%(nb_tree%),13)}
  CHAR{{OB_SPEC(adtree%(3),1)}}=CHAR{OB_SPEC(adtree%(nb_tree%),14)}
  CHAR{{OB_SPEC(adtree%(3),9)}}=CHAR{OB_SPEC(adtree%(nb_tree%),15)}
  '
  ~WIND_UPDATE(2)
  ~WIND_UPDATE(0)
  ~MENU_BAR(adtree%(0),1)
  IF multi!=FALSE
    ~FORM_DIAL(3,0,0,0,0,screenx&,screeny&,screenl&,screenh&)
  ENDIF
  '
RETURN
'
> PROCEDURE boucle_generale
  DO
    evnt&=@ev_multi(&X110011,1,1,1,tempo%,mo_x&,mo_y&,mo_k&,dummy%,m_clavier%,mo_c&)
    IF BTST(evnt&,0)
      IF m_clavier%=7697
        sortir
      ENDIF
      SELECT m_clavier%
      CASE 15104 ! f1
        win(1)
      CASE 15360 ! f2
        win(2)
      CASE 15616 ! f3
        win(3)
      CASE 15872 ! f4
        portfolio
      CASE 16128 ! f5
        machine
      ENDSELECT
    ENDIF
    IF BTST(evnt&,1)
      IF mo_c&=1 AND mo_k&=1
        clic_win%=WIND_FIND(mo_x&,mo_y&)
        IF clic_win%=hand_win%(1) AND win!(1)
          delai
          win(1)
        ENDIF
        IF clic_win%=hand_win%(2) AND win!(2)
          delai
          gere_import
        ENDIF
        IF clic_win%=hand_win%(3) AND win!(3)
          delai
          gere_export
        ENDIF
      ENDIF
    ENDIF
    IF BTST(evnt&,4)
      SELECT m_type&
      CASE 10
        boucle_menu
      CASE 20
        redraw
      CASE 21,29
        win_topped
      CASE 22
        win_closed
      CASE 28
        win_moved
      CASE 50
        QUIT
      CASE 22360
        FOR i%=1 TO 3
          IF m_fenetre&=hand_win%(i%) AND win!(i%)=TRUE
            aff!(i%)=FALSE
          ENDIF
        NEXT i%
      CASE 22361
        FOR i%=1 TO 3
          IF m_fenetre&=hand_win%(i%) AND win!(i%)=TRUE
            aff!(i%)=TRUE
          ENDIF
        NEXT i%
      ENDSELECT
    ENDIF
    IF BTST(evnt&,5) AND exporter!
      exporter
    ENDIF
    CLR m_entree&
    CLR m_titre&
    CLR m_type&
    CLR m_fenetre&
    CLR m_x&
    CLR m_y&
    CLR m_l&
    CLR m_h&
  LOOP
RETURN
'
> PROCEDURE win_closed
  FOR i%=1 TO 3
    IF m_fenetre&=hand_win%(i%) AND win!(i%)
      ferme_win(i%)
    ENDIF
  NEXT i%
RETURN
> PROCEDURE win_moved
  m_x&=MAX(screenx&+1,m_x&)
  m_y&=MAX(screeny&+1,m_y&)
  ~WIND_SET(m_fenetre&,5,m_x&,m_y&,m_l&,m_h&)
  FOR i%=1 TO 3
    IF m_fenetre&=hand_win%(i%) AND win!(i%)
      move_win(i%,m_x&,m_y&,m_l&,m_h&)
    ENDIF
  NEXT i%
RETURN
> PROCEDURE win_topped
  FOR i%=1 TO 3
    IF m_fenetre&=hand_win%(i%) AND win!(i%)
      win(i%)
    ENDIF
  NEXT i%
RETURN
> PROCEDURE boucle_menu
  ~MENU_TNORMAL(adtree%(0),m_titre&,1)
  SELECT m_entree&
  CASE 7
    win(1)
  CASE 16
    win(2)
  CASE 17
    win(3)
  CASE 19
    portfolio
  CASE 20
    machine
  CASE 22
    sortir
  ENDSELECT
RETURN
'
> PROCEDURE win(dial&)
  IF win!(dial&)
    ~WIND_SET(hand_win%(dial&),10,0,0,0,0)
  ELSE
    create_win(dial&)
  ENDIF
RETURN
> PROCEDURE create_win(dial&)
  hand_win%(dial&)=@window_create(cp_win%(dial&))
  IF hand_win%(dial&)>0
    win!(dial&)=TRUE
    ~FORM_CENTER(adtree%(dial&),xd&(dial&),yd&(dial&),ld&(dial&),hd&(dial&))
    ~WIND_SET(hand_win%(dial&),2,CARD(SWAP(OB_SPEC(adtree%(4),dial&))),CARD(OB_SPEC(adtree%(4),dial&)),0,0)
    ~WIND_CALC(0,cp_win%(dial&),xd&(dial&),yd&(dial&),ld&(dial&),hd&(dial&),wx&(dial&),wy&(dial&),wl&(dial&),wh&(dial&))
    wx&(dial&)=MAX(screenx&+1,wx&(dial&))
    wy&(dial&)=MAX(screeny&+1,wy&(dial&))
    move_win(dial&,wx&(dial&),wy&(dial&),wl&(dial&),wh&(dial&))
    ~WIND_SET(hand_win%(dial&),24,&X1,dummy%,dummy%,dummy%)
    ~WIND_OPEN(hand_win%(dial&),wx&(dial&),wy&(dial&),wl&(dial&),wh&(dial&))
    ~WIND_GET(hand_win%(dial&),4,xd&(dial&),yd&(dial&),ld&(dial&),hd&(dial&))
  ELSE
    ~FORM_ALERT(1,CHAR{OB_SPEC(adtree%(nb_tree%),9)})
    win!(dial&)=FALSE
  ENDIF
  aff!(dial&)=win!(dial&)
RETURN
> PROCEDURE ferme_win(dial&)
  IF win!(dial&)
    ~WIND_CLOSE(hand_win%(dial&))
    ~WIND_DELETE(hand_win%(dial&))
    win!(dial&)=FALSE
  ENDIF
RETURN
> PROCEDURE move_win(dial&,x0&,y0&,l0&,h0&)
  IF win!(dial&)
    ~WIND_CALC(1,cp_win%(dial&),x0&,y0&,l0&,h0&,xd&(dial&),yd&(dial&),dummy%,dummy%)
    OB_X(adtree%(dial&),0)=xd&(dial&)
    OB_Y(adtree%(dial&),0)=yd&(dial&)
  ENDIF
RETURN
'
> PROCEDURE redraw
  LOCAL rx&,ry&,rl&,rh&
  control
  ~WIND_GET(m_fenetre&,11,rx&,ry&,rl&,rh&)
  WHILE rl&<>0 AND rh&<>0
    IF RC_INTERSECT(m_x&,m_y&,m_l&,m_h&,rx&,ry&,rl&,rh&)
      FOR i%=1 TO 3
        IF m_fenetre&=hand_win%(i%) AND win!(i%)=TRUE
          ~OBJC_DRAW(adtree%(i%),0,2,rx&,ry&,rl&,rh&)
        ENDIF
      NEXT i%
    ENDIF
    ~WIND_GET(m_fenetre&,12,rx&,ry&,rl&,rh&)
  WEND
  uncontrol
RETURN
> PROCEDURE black_white(arbre%,fils%,etat%)
  IF fils%>0
    SELECT etat%
    CASE 0
      OB_STATE(adtree%(arbre%),fils%)=BCLR(OB_STATE(adtree%(arbre%),fils%),0)
    CASE 1
      OB_STATE(adtree%(arbre%),fils%)=BSET(OB_STATE(adtree%(arbre%),fils%),0)
    ENDSELECT
  ENDIF
  IF win!(arbre%)=TRUE AND aff!(arbre%)=TRUE
    ~WIND_GET(hand_win%(arbre%),4,xf&,yf&,lf&,hf&)
    ~WIND_GET(hand_win%(arbre%),11,rx&,ry&,rl&,rh&)
    control
    WHILE rl&<>0 AND rh&<>0
      IF RC_INTERSECT(xf&,yf&,lf&,hf&,rx&,ry&,rl&,rh&)
        ~OBJC_DRAW(adtree%(arbre%),fils%,1,rx&,ry&,rl&,rh&)
      ENDIF
      ~WIND_GET(hand_win%(arbre%),12,rx&,ry&,rl&,rh&)
    WEND
    uncontrol
  ENDIF
RETURN
> PROCEDURE control
  ~WIND_UPDATE(3)
  ~WIND_UPDATE(1)
  v_hide_c
RETURN
> PROCEDURE uncontrol
  ~WIND_UPDATE(0)
  ~WIND_UPDATE(2)
  v_show_c
RETURN
'
> PROCEDURE portfolio
  portfolio!=TRUE
  vit_sup%=8
  vit_inf%=1
  resetmenu
RETURN
> PROCEDURE machine
  portfolio!=FALSE
  vit_sup%=15
  vit_inf%=0
  resetmenu
RETURN
> PROCEDURE resetmenu
  choix_vit%=1
  ~MENU_ICHECK(adtree%(0),19,ABS(portfolio!))
  ~MENU_ICHECK(adtree%(0),20,ABS(EVEN(portfolio!)))
  redraw_vit
RETURN
'
> PROCEDURE gere_import
  result%=OBJC_FIND(adtree%(2),0,1,mo_x&,mo_y&)
  SELECT result%
  CASE 2 ! dec Ko
    delai
    IF buffer_val%>8
      DIV buffer_val%,2
    ENDIF
    redraw_buf
  CASE 4 ! inc Ko
    delai
    IF buffer_val%<256
      MUL buffer_val%,2
    ENDIF
    redraw_buf
  CASE 7 ! dec bauds
    delai
    IF choix_vit%<vit_sup%
      INC choix_vit%
    ENDIF
    redraw_vit
  CASE 9 ! inc bauds
    delai
    IF choix_vit%>vit_inf%
      DEC choix_vit%
    ENDIF
    redraw_vit
  CASE 11 ! choix affichage
    delai
    IF choix_affichage!
      black_white(2,11,0)
      choix_affichage!=FALSE
    ELSE
      black_white(2,11,1)
      choix_affichage!=TRUE
    ENDIF
  CASE 12 ! choix sauver
    delai
    IF choix_recon!
      black_white(2,12,0)
      choix_recon!=FALSE
    ELSE
      black_white(2,12,1)
      choix_recon!=TRUE
    ENDIF
  CASE 13 ! lire
    IF exporter!=FALSE
      black_white(2,13,1)
      delai
      black_white(2,13,0)
      lire
    ENDIF
  DEFAULT
    win(2)
  ENDSELECT
RETURN
> PROCEDURE redraw_buf
  CHAR{{OB_SPEC(adtree%(2),3)}}=STR$(buffer_val%)+c0$
  black_white(2,3,0)
RETURN
> PROCEDURE lire
  taille_buf%=buffer_val%*1024
  recoit%=GEMDOS(72,L:taille_buf%)
  IF recoit%
    ~XBIOS(15,W:baud%(ABS(EVEN(portfolio!)),choix_vit%),W:-1,W:-1,W:-1,W:-1,W:-1)
    importer
  ELSE
    ~FORM_ALERT(1,CHAR{OB_SPEC(adtree%(nb_tree%),11)})
  ENDIF
RETURN
> PROCEDURE importer
  ~WIND_UPDATE(1)
  ~WIND_UPDATE(3)
  IF fonte&=1
    DEFTEXT 1,0,0,6
  ELSE
    DEFTEXT 1,0,0,13
  ENDIF
  y_plus&=8*fonte&
  win!(4)=FALSE
  IF choix_affichage!
    hand_win%(4)=@window_create(cp_win%(4))
    IF hand_win%(4)<0
      ~FORM_ALERT(1,CHAR{OB_SPEC(adtree%(nb_tree%),9)})
    ELSE
      win!(4)=TRUE
      ~WIND_SET(hand_win%(4),2,CARD(SWAP(OB_SPEC(adtree%(4),4))),CARD(OB_SPEC(adtree%(4),4)),0,0)
      ~WIND_OPEN(hand_win%(4),screenx&+1,screeny&+1,screenl&-4,screenh&-4)
      ~WIND_GET(hand_win%(4),4,wx&(4),wy&(4),wl&(4),wh&(4))
      x1&=wx&(4)
      y1&=wy&(4)
      x2&=wx&(4)+wl&(4)-1
      y2&=wy&(4)+wh&(4)-1
      CLIP x1&,y1&,x2&,y2&
      DEFFILL 0,2,8
      v_hide_c
      PBOX x1&,y1&,x2&,y2&
      v_show_c
      INC wx&(4)
      x3&=wx&(4)
      ADD wh&(4),wy&(4)
      ADD wy&(4),y_plus&-fonte&
      y3&=wy&(4)
    ENDIF
  ENDIF
  IF win!(4)=FALSE
    CHAR{{OB_SPEC(adtree%(2),13)}}=CHAR{OB_SPEC(adtree%(nb_tree%),18)}
    black_white(2,13,1)
  ENDIF
  len_texte%=0
  len!=TRUE
  imp%=0
  DEFFILL 0,2,8
  DEC taille_buf%
  v_hide_c
  DO
    INT{ADD(gcontrol%,2)}=0
    INT{ADD(gcontrol%,4)}=5
    INT{ADD(gcontrol%,6)}=0
    INT{ADD(gcontrol%,8)}=0
    GEMSYS 79
    mo_k&=INT{ADD(gintoute%,6)}
    IF INP?(1)
      imp|=INP(1)
      BYTE{recoit%+len_texte%}=imp|
      INC len_texte%
      IF win!(4)
        INT{ADD(control%,12)}=vdi_handle&
        INT{ptsine%}=wx&(4)
        INT{ADD(ptsine%,2)}=wy&(4)
        INT{intine%}=imp|
        VDISYS 8,1,1
        ADD wx&(4),8
        IF wx&(4)>=wl&(4)
          wx&(4)=x3&
          ADD wy&(4),y_plus&
        ENDIF
        IF wy&(4)>=wh&(4)
          INT{control%+2}=2
          INT{control%+6}=0
          INT{control%+10}=1
          INT{control%+12}=vdi_handle&
          INT{ptsine%}=x1&
          INT{ptsine%+2}=y1&
          INT{ptsine%+4}=x2&
          INT{ptsine%+6}=y2&
          VDISYS 11
          wy&(4)=y3&
        ENDIF
      ELSE
        IF len!
          CHAR{{OB_SPEC(adtree%(2),13)}}=CHAR{OB_SPEC(adtree%(nb_tree%),19)}
          black_white(2,13,1)
          len!=FALSE
        ENDIF
      ENDIF
    ENDIF
  LOOP UNTIL mo_k&=1 OR len_texte%=taille_buf% OR (imp|=26 AND choix_recon!=TRUE)
  IF imp|=26
    DEC len_texte%
  ENDIF
  m_clavier%=0
  IF win!(4)
    CLIP OFF
    ferme_win(4)
  ENDIF
  v_show_c
  ~WIND_UPDATE(0)
  ~WIND_UPDATE(2)
  CHAR{{OB_SPEC(adtree%(2),13)}}=STR$(len_texte%)+CHAR{OB_SPEC(adtree%(nb_tree%),17)}
  black_white(2,13,0)
  FOR i%=0 TO 26
    delai
  NEXT i%
  CHAR{{OB_SPEC(adtree%(2),13)}}=CHAR{OB_SPEC(adtree%(nb_tree%),13)}
  black_white(2,13,0)
  sauve
  IF recoit%
    ~GEMDOS(73,L:recoit%)
  ENDIF
  len_texte%=0
RETURN
> PROCEDURE sauve
  IF len_texte% AND recoit%
    IF fslx!=TRUE
      fslx_do(21,chemin$+c0$,essai_recoit$,"*.TXT,*.txt,*.ASC,*.asc"+c0$+"*.HTM,*.html"+c0$+"*.C,*.LST,*.S,*.PAS"+c0$+"*"+c0$+c0$,dummy$)
    ELSE
      dummy$=@fileselector$(21,chemin$+masque$,essai_recoit$)
    ENDIF
    IF LEN(dummy$) AND dummy$<>c0$
      fichier_sel$=dummy$
      err_gest&=1
      REPEAT
        err_choix&=1
        OPEN "o",#1,fichier_sel$
        BPUT #1,recoit%,len_texte%
      err_save:
        CLOSE #1
      UNTIL err_choix&=1
    ENDIF
  ENDIF
RETURN
'
> PROCEDURE gere_export
  result%=OBJC_FIND(adtree%(3),0,1,mo_x&,mo_y&)
  SELECT result%
  CASE 1 ! charger fichier
    IF exporter!=FALSE
      delai
      black_white(3,1,1)
      charger
      black_white(3,1,0)
    ENDIF
  CASE 3 ! dec bauds
    delai
    IF choix_vit%<vit_sup%
      INC choix_vit%
    ENDIF
    redraw_vit
  CASE 5 ! inc bauds
    delai
    IF choix_vit%>vit_inf%
      DEC choix_vit%
    ENDIF
    redraw_vit
  CASE 7 ! Control-Z
    delai
    IF choix_control!
      black_white(3,7,0)
      choix_control!=FALSE
    ELSE
      black_white(3,7,1)
      choix_control!=TRUE
    ENDIF
  CASE 9 ! envoyer
    black_white(3,9,1)
    delai
    IF envoit%<1 AND exporter!=FALSE
      black_white(3,1,1)
      charger
      black_white(3,1,0)
    ENDIF
    IF exporter!
      arret_exporter
    ELSE
      ecrire
    ENDIF
    black_white(3,9,0)
  DEFAULT
    win(3)
  ENDSELECT
RETURN
> PROCEDURE charger
  IF fslx!=TRUE
    fslx_do(14,chemin$+c0$,essai_envoit$,"*.TXT,*.txt,*.ASC,*.asc"+c0$+"*.HTM,*.html"+c0$+"*.C,*.LST,*.S,*.PAS"+c0$+"*"+c0$+c0$,dummy$)
  ELSE
    dummy$=@fileselector$(14,chemin$+masque$,essai_envoit$)
  ENDIF
  IF @s_exist(dummy$) AND dummy$<>c0$ AND LEN(dummy$)>1
    fichier_sel$=dummy$
    err_gest&=2
    REPEAT
      err_choix&=1
      OPEN "i",#1,fichier_sel$
      lof%=LOF(#1)
      IF envoit%
        ~GEMDOS(73,L:envoit%)
      ENDIF
      IF lof%
        envoit%=GEMDOS(72,L:lof%)
        IF envoit%
          BGET #1,envoit%,lof%
        ELSE
          ~FORM_ALERT(1,CHAR{OB_SPEC(adtree%(nb_tree%),12)})
        ENDIF
      ENDIF
    err_load:
      CLOSE #1
    UNTIL err_choix&=1
  ELSE
    IF envoit%
      ~GEMDOS(73,L:envoit%)
    ENDIF
    envoit%=0
    fichier_sel$=c0$
  ENDIF
  IF envoit%
    CHAR{{OB_SPEC(adtree%(3),1)}}=RIGHT$(fichier_sel$,30)
  ELSE
    CHAR{{OB_SPEC(adtree%(3),1)}}=CHAR{OB_SPEC(adtree%(nb_tree%),14)}
  ENDIF
RETURN
> PROCEDURE ecrire
  IF envoit%
    ~XBIOS(15,W:baud%(ABS(EVEN(portfolio!)),choix_vit%),W:-1,W:-1,W:-1,W:-1,W:-1)
    len_texte%=0
    exporter!=TRUE
    tempo%=30
    CHAR{{OB_SPEC(adtree%(3),9)}}=CHAR{OB_SPEC(adtree%(nb_tree%),16)}
  ELSE
    exporter!=FALSE
    tempo%=100
  ENDIF
RETURN
> PROCEDURE exporter
  IF GEMDOS(19)
    ~GEMDOS(4,W:PEEK(envoit%+len_texte%))
  ENDIF
  INC len_texte%
  IF len_texte%=lof%
    arret_exporter
  ENDIF
RETURN
> PROCEDURE arret_exporter
  exporter!=FALSE
  len_texte%=0
  IF choix_control!
    ~GEMDOS(4,W:32)
    ~GEMDOS(4,W:26)
  ENDIF
  IF envoit%
    ~GEMDOS(73,L:envoit%)
  ENDIF
  CHAR{{OB_SPEC(adtree%(3),9)}}=CHAR{OB_SPEC(adtree%(nb_tree%),20)}
  black_white(3,9,0)
  FOR i%=0 TO 26
    delai
  NEXT i%
  CHAR{{OB_SPEC(adtree%(3),9)}}=CHAR{OB_SPEC(adtree%(nb_tree%),15)}
  black_white(3,9,0)
  tempo%=100
RETURN
'
> PROCEDURE redraw_vit
  CHAR{{OB_SPEC(adtree%(2),8)}}=STR$(aff_vit%(baud%(ABS(EVEN(portfolio!)),choix_vit%)))
  CHAR{{OB_SPEC(adtree%(3),4)}}=STR$(aff_vit%(baud%(ABS(EVEN(portfolio!)),choix_vit%)))
  IF win!(2)
    black_white(2,8,0)
  ENDIF
  IF win!(3)
    black_white(3,4,0)
  ENDIF
RETURN
> PROCEDURE delai
  ~EVNT_TIMER(75)
RETURN
> PROCEDURE gest_err
  SELECT ERR
  CASE -33
    err_type&=0
  CASE -36
    err_type&=1
  CASE -46
    err_type&=2
  CASE 37
    err_type&=3
  CASE -13
    err_type&=4
  CASE -11
    err_type&=5
  CASE -10
    err_type&=6
  DEFAULT
    err_type&=7
  ENDSELECT
  v_show_c
  err_choix&=FORM_ALERT(1,CHAR{OB_SPEC(adtree%(nb_tree%),err_type&+1)})
  IF err_type&=7
    sortir2
  ENDIF
  ON ERROR GOSUB gest_err
  SELECT err_gest&
  CASE 1
    RESUME err_save
  CASE 2
    RESUME err_load
  ENDSELECT
RETURN
> PROCEDURE v_hide_c
  CONTRL(0)=123
  CONTRL(1)=0
  CONTRL(3)=0
  CONTRL(6)=vdi_handle&
  VDISYS
RETURN
> PROCEDURE v_show_c
  CONTRL(0)=122
  CONTRL(1)=0
  CONTRL(3)=1
  CONTRL(6)=vdi_handle&
  INTIN(0)=1
  VDISYS
RETURN
'
> FUNCTION window_create(cp_win_recu%)
'
GCONTRL(0)=100
GCONTRL(1)=5
GCONTRL(2)=1
GCONTRL(3)=0
GCONTRL(4)=0
'
GINTIN(0)=cp_win_recu%
GINTIN(1)=30
GINTIN(2)=30
GINTIN(3)=30
GINTIN(4)=30
'
GEMSYS
'
RETURN GINTOUT(0)
ENDFUNC
> FUNCTION test_cookie(cookie_name$,VAR cookie_valeur%)
LOCAL read_cook%,nom_cook%,cookie%
'
nom_cook%=CVL(cookie_name$)
cookie%=LPEEK(&H5A0)
cookie_valeur%=0
'
IF cookie%<>0
REPEAT
  read_cook%=LPEEK(cookie%)
  cookie_valeur%=LPEEK(cookie%+4)
  ADD cookie%,8
UNTIL read_cook%=0 OR read_cook%=nom_cook%
IF read_cook%=nom_cook%
  RETURN TRUE
ELSE
  RETURN FALSE
ENDIF
ELSE
RETURN FALSE
ENDIF
ENDFUNC
> FUNCTION ev_multi(em_flags&,em_cl&,em_ma&,em_st&,em_ct%,VAR em_mx&,em_my&,em_mk&,em_kbd%,em_key%,em_click&)
'
GCONTRL(0)=25
GCONTRL(1)=16
GCONTRL(2)=7
GCONTRL(3)=1
GCONTRL(4)=0
'
GINTIN(0)=em_flags&
GINTIN(1)=em_cl&
GINTIN(2)=em_ma&
GINTIN(3)=em_st&
GINTIN(4)=0
GINTIN(5)=0
GINTIN(6)=0
GINTIN(7)=0
GINTIN(8)=0
GINTIN(9)=0
GINTIN(10)=0
GINTIN(11)=0
GINTIN(12)=0
GINTIN(13)=0
INT{GINTIN+28}=WORD(em_ct%)
INT{GINTIN+30}=WORD(SWAP(em_ct%))
'
ADDRIN(0)=m_adr%
'
GEMSYS
'
em_mx&=GINTOUT(1)
em_my&=GINTOUT(2)
em_mk&=GINTOUT(3)
em_kbd%=GINTOUT(4)
em_key%=GINTOUT(5)
em_click&=GINTOUT(6)
'
m_type&=INT{m_adr%}
m_ap_id&=INT{m_adr%+2}
m_nothing&=INT{m_adr%+4}
m_titre&=INT{m_adr%+6}
m_fenetre&=INT{m_adr%+6}
m_entree&=INT{m_adr%+8}
m_x&=INT{m_adr%+8}
m_y&=INT{m_adr%+10}
m_l&=INT{m_adr%+12}
m_h&=INT{m_adr%+14}
'
RETURN GINTOUT(0)
ENDFUNC
> FUNCTION appl_getinfo(type&,VAR out1&,out2&,out3&,out4&)
GCONTRL(0)=130
GCONTRL(1)=0
GCONTRL(2)=5
GCONTRL(3)=0
GCONTRL(4)=0
GINTIN(0)=type&
'
GEMSYS
'
out1&=GINTOUT(1)
out2&=GINTOUT(2)
out3&=GINTOUT(3)
out4&=GINTOUT(4)
RETURN GINTOUT(0)
ENDFUNC
> FUNCTION fileselector$(type_msg&,path$,name$)
LOCAL path1$,name1$,choix_file&,retour_file&
LET path1$=path$
LET name1$=name$
retour_file&=@fi_input(type_msg&,path1$,name1$,choix_file&)
IF name1$=c0$ OR name1$=""
choix_file&=0
ENDIF
IF retour_file&=0 OR choix_file&=0
RETURN c0$
ELSE
RETURN LEFT$(path1$,RINSTR(path1$,"\"))+name1$
ENDIF
ENDFUNC
> FUNCTION fi_input(type_msg&,VAR fi_path$,fi_name$,fi_choix&)
'
~FRE()
~FRE(0)
'
IF tos_version%<104
type_msg&=0
ENDIF
'
IF type_msg&>0
GCONTRL(0)=91
ELSE
GCONTRL(0)=90
ENDIF
GCONTRL(1)=0
GCONTRL(2)=2
IF type_msg&>0
GCONTRL(3)=3
ELSE
GCONTRL(3)=2
ENDIF
GCONTRL(4)=0
'
fi_path$=fi_path$+SPACE$(300)
fi_name$=fi_name$+SPACE$(100)
'
ADDRIN(0)=V:fi_path$
ADDRIN(1)=V:fi_name$
IF type_msg&>0
ADDRIN(2)=OB_SPEC(adtree%(nb_tree%),type_msg&)
ENDIF
'
GEMSYS
'
fi_path$=CHAR{V:fi_path$}+c0$
fi_name$=CHAR{V:fi_name$}+c0$
fi_choix&=GINTOUT(1)
'
RETURN GINTOUT(0)
ENDFUNC
> PROCEDURE fslx_do(type_msg&,fi_path$,fi_name$,fi_masque$,VAR fs_name$)
'
~FRE()
~FRE(0)
'
rub$=fi_path$+"U:\"+c0$+c0$
fi_path$=fi_path$+SPACE$(300)
fi_name$=fi_name$+SPACE$(100)
'
GCONTRL(0)=194
GCONTRL(1)=4
GCONTRL(2)=4
GCONTRL(3)=6
GCONTRL(4)=2
'
GINTIN(0)=128
GINTIN(1)=33
GINTIN(2)=0
GINTIN(3)=0
'
ADDRIN(0)=OB_SPEC(adtree%(nb_tree%),type_msg&)
ADDRIN(1)=V:fi_path$
ADDRIN(2)=V:fi_name$
ADDRIN(3)=V:fi_masque$
ADDRIN(4)=0
ADDRIN(5)=V:rub$
'
GEMSYS
'
fsd%=ADDROUT(0)
'
IF GINTOUT(1)=1
IF CHAR{V:fi_name$}=""
fs_name$=c0$
ELSE
fs_name$=CHAR{V:fi_path$}+CHAR{V:fi_name$}+c0$
ENDIF
ELSE
fs_name$=c0$
ENDIF
'
IF GINTOUT(0)
GCONTRL(0)=191
GCONTRL(1)=0
GCONTRL(2)=1
GCONTRL(3)=1
GCONTRL(4)=0
'
ADDRIN(0)=fsd%
'
GEMSYS
ENDIF
'
RETURN
> FUNCTION s_exist(exist_name$)
exist_name$=exist_name$+c0$
LOCAL existe&
IF LEN(exist_name$)=0 OR LEFT$(exist_name$)=c0$
RETURN FALSE
ELSE
existe&=GEMDOS(61,L:V:exist_name$,W:0)
IF existe&>0
~GEMDOS(62,W:existe&)
RETURN TRUE
ELSE
RETURN FALSE
ENDIF
ENDIF
ENDFUNC
> PROCEDURE force_drive(force_drive$)
INT{m_adr%}=72
INT{m_adr%+2}=ap_id&
INT{m_adr%+4}=0
INT{m_adr%+6}=MAX(0,MIN(ASC(force_drive$)-65,25))
INT{m_adr%+8}=0
INT{m_adr%+10}=0
INT{m_adr%+12}=0
INT{m_adr%+14}=0
~APPL_WRITE(0,16,m_adr%)
RETURN
