RESERVE
IF FRE()<256000
  ~FORM_ALERT(1,"[1][ M‚moire insuffisante | ou fragment‚e. ][Quitter]")
  EDIT
ELSE
  '  ON ERROR GOSUB gest_err
  init_1
  init_2
  init_parx
  init_3
  init_4
  init_5
  boucle_generale
ENDIF
'
> PROCEDURE sortir
  result%=FORM_ALERT(1,CHAR{OB_SPEC(adtree%(6),11)})
  IF result%=1
    sortir2
  ENDIF
RETURN
> PROCEDURE sortir2
  ~WIND_GET(0,10,top_win%,dummy%,dummy%,dummy%)
  ~WIND_GET(top_win%,20,top_win%,dummy%,dummy%,dummy%)
  IF top_win%=ap_id&
    vs_color(20)
  ENDIF
  parx_trm_exit
  tout_fermer
  IF parx_adr_mem%
    FOR i%=0 TO parx_nb_slot&-1
      parx_libere_blk(i%)
    NEXT i%
    ~C:parx_manag_free%()
    ~GEMDOS(73,L:parx_adr_mem%)
  ENDIF
  IF raster_image%
    ~GEMDOS(73,L:raster_image%)
  ENDIF
  IF m_adr%
    ~GEMDOS(73,L:m_adr%)
  ENDIF
  ~MENU_BAR(adtree%(0),0)
  ~RSRC_FREE()
  ~APPL_EXIT()
  EDIT
RETURN
'
> PROCEDURE init_1
  ap_id&=APPL_INIT()
  vdi_handle&=V~H
  ~GRAF_MOUSE(0,0)
  '
  IF ap_id&=-1 OR vdi_handle&<0
    sortir2
  ENDIF
  '
  ~WIND_UPDATE(1)
  ~WIND_UPDATE(3)
  '
  ~WIND_GET(0,4,screenx&,screeny&,screenl&,screenh&)
  '
  @declare_1
  @declare_2
  @declare_3
  @declare_parx
  @declare_parx_mem
  @declare_parx_trm
  @declare_parx_rim
  RESERVE 20480
  '
  @declare_mem
  '
  ~RSRC_FREE()
  IF @s_exist(chemin$+qmt_rsc$)=TRUE
    result%=RSRC_LOAD(chemin$+qmt_rsc$)
    IF result%=0
      ~FORM_ALERT(1,"[1][ QM_TAB.RSC n'a pas pu| ˆtre charg‚ comme fichier| ressource.][Quitter]")
      sortir2
    ELSE
      FOR i%=0 TO nb_tree%
        ~RSRC_GADDR(0,i%,adtree%(i%))
      NEXT i%
      FOR i%=1 TO nb_tree%
        ~FORM_CENTER(adtree%(i%),xd&(i%),yd&(i%),ld&(i%),dummy%)
        hd&(i%)=OB_H(adtree%(i%),0)
        IF i%=3
          dummy&=OB_TAIL(adtree%(3),0)
          dummy&=OB_Y(adtree%(3),dummy&)+OB_H(adtree%(3),dummy&)+2
          OB_H(adtree%(3),0)=SHL(SHR(ADD(dummy&,15),4),4)
          OB_W(adtree%(3),0)=320
          hd&(3)=OB_H(adtree%(3),0)
        ENDIF
      NEXT i%
    ENDIF
  ELSE
    ~FORM_ALERT(1,"[1][ QM_TAB.RSC non trouv‚.| Placez le … c“t‚ de QM_TAB.PRG |][Quitter]")
    sortir2
  ENDIF
  '
RETURN
> PROCEDURE declare_1
  '
  c0$=CHR$(0)
  lect%=GEMDOS(25)
  chemin$=CHR$(lect%+65)+":"+DIR$(lect%+1)+"\"
  masque$="*.*"+c0$
  ext_qmt$=".QMT"+c0$
  ext_dat$=".DAT"+c0$
  ko$="Ko "+c0$
  fi_path$=SPACE$(512)
  fi_name$=SPACE$(128)
  '
  qmt_rsc$="QM_TAB.RSC"+c0$
  qmt_inf$="QM_TAB.INF"+c0$
  '
  dummy$=SPACE$(128)
  nom_tab$=SPACE$(128)
  nom_sav$=SPACE$(128)
  nom_courant$=SPACE$(128)
  '
  default_tab$=SPACE$(13)
  '
  signature$="TONTHAT"
  CLR signature$
  '
  nb_tree%=9
  '
  DIM adtree%(nb_tree%),xd&(nb_tree%),yd&(nb_tree%),ld&(nb_tree%),hd&(nb_tree%)
  DIM hand_win%(nb_tree%),wx&(nb_tree%),wy&(nb_tree%),wl&(nb_tree%),wh&(nb_tree%)
  '
RETURN
> PROCEDURE declare_2
  '
  DIM win!(nb_tree%),aff!(nb_tree%),full!(nb_tree%)
  FOR i%=0 TO nb_tree%
    win!(i%)=FALSE
    aff!(i%)=FALSE
  NEXT i%
  '
  DIM cp_win%(nb_tree%)
  cp_win%(0)=&X111111101111
  cp_win%(1)=&X1011
  cp_win%(2)=&X1011
  cp_win%(3)=&X111111101111
  cp_win%(4)=&X1011
  '
  clear_m_v
  '
RETURN
> PROCEDURE declare_3
  '
  default$="DEFAULT"
  '
  larg_tab&=300
  haut_tab&=300
  taille_tab%=larg_tab&*haut_tab&*4
  '
  DIM cur_x&(3),cur_y&(3),deb_x&(3),deb_y&(3),larg_vis&(3),larg_tot&(3),haut_vis&(3),haut_tot&(3)
  '
  larg_pixel&=(screenl&-15)/16
  haut_pixel&=(screenh&-15)/16
  '
  larg_tot&(0)=larg_tab&
  haut_tot&(0)=haut_tab&
  larg_tot&(3)=20
  haut_tot&(3)=12
  '
  select_nature_case&=0
  select_image&=1
  '
  DIM nom_image$(9)
  FOR i%=0 TO 9
    nom_image$(i%)=SPACE$(128)
  NEXT i%
  '
  DIM img_mfdb%(13)
  '
  esc!=FALSE
  '
RETURN
> PROCEDURE declare_mem
  '
  m_adr%=GEMDOS(72,L:16)
  IF m_adr%=<0
    sortir2
  ENDIF
  '
  CONTRL(1)=0
  CONTRL(3)=1
  CONTRL(6)=vdi_handle&
  INTIN(0)=1
  VDISYS 102
  nb_plan&=INTOUT(4)
  IF nb_plan&=<0
    nb_plan&=ROUND(LOG(WORK_OUT(13))/LOG(2))
  ENDIF
  IF nb_plan&=<0
    sortir2
  ENDIF
  '
  raster_image%=GEMDOS(72,L:304)
  IF raster_image%>0
    pxyarray%=raster_image%+280
    FOR i%=0 TO 13
      img_mfdb%(i%)=raster_image%+i%*20
      make_zero_mfdb(img_mfdb%(i%))
    NEXT i%
    WORD{img_mfdb%(10)+4}=WORK_OUT(0)+1
    WORD{img_mfdb%(10)+6}=WORK_OUT(1)+1
    WORD{img_mfdb%(10)+8}=(WORK_OUT(0)+1)/16
    WORD{img_mfdb%(10)+10}=0
    WORD{img_mfdb%(10)+12}=nb_plan&
    WORD{img_mfdb%(13)+4}=16
    WORD{img_mfdb%(13)+6}=16
    WORD{img_mfdb%(13)+8}=1
    WORD{img_mfdb%(13)+10}=0
    WORD{img_mfdb%(13)+12}=nb_plan&
  ELSE
    sortir2
  ENDIF
  '
RETURN
> PROCEDURE declare_parx
  '
  parx_size_image%=0
  parx_hand_image&=0
  parx_image_sans_palette!=FALSE
  '
  parx_sys$=SPACE$(128)
  '
  parx_lire_rim!=TRUE
  parx_lire_trm!=TRUE
  parx_lire_mem!=TRUE
  parx_lire_pal!=TRUE
  '
  parx_choix_config_mem&=2
  parx_choix_taille_mem&=150
  parx_choix_trm&=1
  parx_nb_tramage&=1
  parx_niv_gris!=FALSE
  parx_carte_graphique!=FALSE
  '
  parx_mem$="PARX.MEM"+c0$
  qm_mem$="QM_TAB.MEM"+c0$
  parx_trm$="PARX.TRM"+c0$
  qm_trm$="QM_TAB.TRM"+c0$
  fichier_rim$=SPACE$(128)
  '
  parx_adr_mem%=0
  @declare_parx_mem
  parx_nb_slot&=31
  DIM parx_tab_adr%(parx_nb_slot&-1),parx_size_tab%(parx_nb_slot&-1)
  '
  @declare_parx_trm
  '
  ptr_rim%=parx_tab_adr%(1)
  nombre_rim%=0
  @declare_parx_rim
  '
RETURN
> PROCEDURE declare_parx_mem
  parx_manag_malloc%=parx_adr_mem%+10
  parx_manag_free%=parx_adr_mem%+14
  parx_manag_shrink%=parx_adr_mem%+18
  parx_manag_grow%=parx_adr_mem%+22
  parx_manag_size%=parx_adr_mem%+26
  parx_manag_version%=parx_adr_mem%+30
  parx_blk_malloc%=parx_adr_mem%+50
  parx_blk_free%=parx_adr_mem%+54
  parx_blk_shrink%=parx_adr_mem%+58
  parx_blk_grow%=parx_adr_mem%+62
RETURN
> PROCEDURE declare_parx_trm
  parx_do_trm%=parx_tab_adr%(0)+1960
RETURN
> PROCEDURE declare_parx_rim
  parx_test_file%=ptr_rim%+56
  parx_get_palette%=ptr_rim%+60
  parx_do_file%=ptr_rim%+64
RETURN
> PROCEDURE init_2
  '
  IF @s_exist(chemin$+qmt_inf$)
    OPEN "i",#14,chemin$+qmt_inf$
    INPUT #14,parx_sys$
    INPUT #14,parx_lire_rim!
    INPUT #14,parx_lire_trm!
    INPUT #14,parx_lire_mem!
    INPUT #14,parx_lire_pal!
    INPUT #14,parx_choix_trm&
    INPUT #14,parx_niv_gris!
    INPUT #14,parx_carte_graphique!
    CLOSE #14
  ELSE
    parx_sys$=chemin$
  ENDIF
  '
  nom_tab$=c0$
  '
  DEFTEXT 1,0,0,4
  '
RETURN
> PROCEDURE init_parx
  '
  init_parx_mem
  IF dummy%=0
    gere_preference_parx
    init_parx_mem
  ENDIF
  init_parx_trm_rim
  '
  CHAR{{OB_SPEC(adtree%(7),4)}}=RIGHT$(parx_sys$,29)+c0$
  OB_STATE(adtree%(7),6)=OB_STATE(adtree%(7),6) OR ABS(parx_lire_rim!)
  OB_STATE(adtree%(7),8)=OB_STATE(adtree%(7),8) OR ABS(parx_lire_trm!)
  OB_STATE(adtree%(7),10)=OB_STATE(adtree%(7),10) OR ABS(parx_lire_mem!)
  OB_STATE(adtree%(7),12)=OB_STATE(adtree%(7),12) OR ABS(parx_lire_pal!)
  OB_STATE(adtree%(7),17)=OB_STATE(adtree%(7),17) OR ABS(parx_niv_gris!)
  OB_STATE(adtree%(7),19)=OB_STATE(adtree%(7),19) OR ABS(parx_carte_graphique!)
  '
  IF parx_adr_mem%>0
    parx_reserve_blk(20,6*(2^nb_plan&))
    vq_color
    parx_reserve_blk(2,nb_plan&*32)
    dummy%=(larg_pixel&+1)*(haut_pixel&+1)*nb_plan&*32
    parx_reserve_blk(10,dummy%)
    ' parx_reserve_blk(30,taille_tab%)
  ENDIF
  '
RETURN
> PROCEDURE init_parx_mem
  '
  LOCAL lof_mem%
  '
  IF parx_adr_mem%>0
    ~C:parx_manag_free%()
    ~GEMDOS(73,L:parx_adr_mem%)
  ENDIF
  '
  dummy%=0
  IF parx_lire_mem!
    IF @s_exist(parx_sys$+parx_mem$)=TRUE
      dummy%=1
    ELSE IF @s_exist(chemin$+qm_mem$)=TRUE
      dummy%=2
    ENDIF
  ELSE
    IF @s_exist(chemin$+qm_mem$)=TRUE
      dummy%=2
    ELSE IF @s_exist(parx_sys$+parx_mem$)=TRUE
      dummy%=1
    ENDIF
  ENDIF
  '
  IF dummy%=0
    ~FORM_ALERT(1,CHAR{OB_SPEC(adtree%(8),2)})
  ELSE
    IF dummy%=1
      dummy$=parx_sys$+parx_mem$
    ELSE
      dummy$=chemin$+qm_mem$
    ENDIF
    OPEN "i",#49,dummy$
    lof_mem%=LOF(#49)+ABS(ODD(LOF(#49)))
    parx_adr_mem%=GEMDOS(72,L:lof_mem%)
    IF parx_adr_mem%>0
      BGET #49,parx_adr_mem%,LOF(#49)
      @declare_parx_mem
      retour_mem%=C:parx_manag_version%()
      IF retour_mem%<500 OR MKL$(LONG{parx_adr_mem%})+MKL$(LONG{parx_adr_mem%+4})<>"PARX_MEM"
        ~FORM_ALERT(1,CHAR{OB_SPEC(adtree%(8),1)})
        ~GEMDOS(73,L:parx_adr_mem%)
        parx_adr_mem%=0
      ELSE
        CHAR{{OB_SPEC(adtree%(7),22)}}=LEFT$(STR$(retour_mem%),3)
      ENDIF
    ENDIF
    CLOSE #49
  ENDIF
  '
RETURN
> PROCEDURE init_parx_trm_rim
  LOCAL retour_fs%,taille_rim%,taille_totale_rim%
  '
  IF parx_adr_mem%>0
    '
    taille_parx_reserve%=C:parx_manag_malloc%(L:V:parx_tab_adr%(0),L:V:parx_size_tab%(0),W:0,W:parx_nb_slot&,L:SUB(GEMDOS(72,L:-1),51200))
    '
    dummy%=0
    IF parx_lire_trm!
      IF @s_exist(parx_sys$+parx_trm$)=TRUE
        dummy%=1
      ELSE IF @s_exist(chemin$+qm_trm$)=TRUE
        dummy%=2
      ENDIF
    ELSE
      IF @s_exist(chemin$+qm_trm$)=TRUE
        dummy%=2
      ELSE IF @s_exist(parx_sys$+parx_trm$)=TRUE
        dummy%=1
      ENDIF
    ENDIF
    '
    IF dummy%=0
      ~FORM_ALERT(1,CHAR{OB_SPEC(adtree%(8),4)})
    ELSE
      IF dummy%=1
        dummy$=parx_sys$+parx_trm$
      ELSE
        dummy$=chemin$+qm_trm$
      ENDIF
      endroit%=50
      REPEAT
        err_choix&=1
        OPEN "i",#50,dummy$
        parx_libere_blk(0)
        parx_reserve_blk(0,LOF(#50)+ABS(ODD(LOF(#50))))
        IF parx_tab_adr%(0)>0
          BGET #50,parx_tab_adr%(0),LOF(#50)
          @declare_parx_trm
          retour_trm%=WORD{parx_tab_adr%(0)+8}
          IF retour_trm%<200 OR retour_trm%>299 OR MKL$(LONG{parx_tab_adr%(0)})+MKL$(LONG{parx_tab_adr%(0)+4})<>"PARX_TRM"
            ~FORM_ALERT(1,CHAR{OB_SPEC(adtree%(8),3)})
            parx_libere_blk(0)
          ELSE
            CHAR{{OB_SPEC(adtree%(7),21)}}=LEFT$(STR$(retour_trm%),3)
            parx_trm_init
          ENDIF
        ENDIF
      endroit50:
        CLOSE #50
      UNTIL err_choix&=1
    ENDIF
    '
    IF parx_tab_adr%(0)>0
      parx_nb_tramage&=WORD{parx_tab_adr%(0)+1958}
      parx_choix_trm&=MAX(1,MIN(parx_choix_trm&,parx_nb_tramage&))
      CHAR{{OB_SPEC(adtree%(7),16)}}=CHAR{parx_tab_adr%(0)+1964+32*(parx_choix_trm&-1)}
    ELSE
      parx_nb_tramage&=1
      parx_choix_trm&=1
      CHAR{{OB_SPEC(adtree%(7),16)}}=c0$
    ENDIF
    '
    IF parx_tab_adr%(0)>0
      parx_reserve_blk(1,MAX(2048,C:parx_manag_size%()))
      exit!=FALSE
      IF parx_lire_rim!
        dummy$=parx_sys$
      ELSE
        dummy$=chemin$
      ENDIF
      '
      ptr_rim%=parx_tab_adr%(1)
      taille_totale_rim%=0
      nombre_rim%=0
      retour_fs%=FSFIRST(dummy$+"RIM\*.RIM"+c0$,1)
      DO
        EXIT IF retour_fs%<>0
        fichier_rim$=dummy$+"RIM\"+CHAR{FGETDTA()+30}+c0$
        OPEN "i",#51,fichier_rim$
        taille_rim%=LOF(#51)+ABS(ODD(LOF(#51)))
        IF taille_totale_rim%+taille_rim%=<parx_size_tab%(1)
          BGET #51,ptr_rim%,LOF(#51)
          IF MKL$(LONG{ptr_rim%})+MKL$(LONG{ptr_rim%+4})="READ_IMG"
            SELECT WORD{ptr_rim%+12}
            CASE 0,1
              LONG{ptr_rim%}=taille_rim%
              ADD taille_totale_rim%,taille_rim%
              ADD ptr_rim%,taille_rim%
              INC nombre_rim%
            ENDSELECT
          ENDIF
        ENDIF
        CLOSE #51
        retour_fs%=FSNEXT()
      LOOP
      parx_shrink_blk(1,taille_totale_rim%)
      '
    ENDIF
    '
    ' parx_shrink_tot
    '
  ENDIF
RETURN
> PROCEDURE init_3
  '
  CHAR{{OB_SPEC(adtree%(2),3)}}=STR$(larg_tab&)+c0$
  CHAR{{OB_SPEC(adtree%(2),7)}}=STR$(haut_tab&)+c0$
  CHAR{{OB_SPEC(adtree%(2),10)}}=default$+c0$
  aff_taille_tab
  '
  FOR i%=1 TO 9
    OB_FLAGS(adtree%(3),i%)=BSET(OB_FLAGS(adtree%(3),i%),7)
  NEXT i%
  OB_STATE(adtree%(3),1)=BSET(OB_STATE(adtree%(3),1),0)
  OB_STATE(adtree%(3),10)=BSET(OB_STATE(adtree%(3),10),0)
  '
  FOR i%=2 TO 18 STEP 2
    CHAR{{OB_SPEC(adtree%(4),i%)}}=c0$
  NEXT i%
  FOR i%=4 TO 18 STEP 2
    OB_FLAGS(adtree%(4),i%)=BSET(OB_FLAGS(adtree%(4),i%),7)
  NEXT i%
  '
  nom_image$(1)=chemin$+c0$
  FOR i%=2 TO 9
    nom_image$(i%)=c0$
  NEXT i%
  '
RETURN
> PROCEDURE init_4
  '
  multi!=@test_cookie("MagX",dummy%)
  IF multi!=FALSE
    multi!=@test_cookie("MiNT",dummy%)
  ENDIF
  '
  magic!=@test_cookie("MagX",dummy%)
  FOR i%=1 TO 9
    FOR j%=0 TO OB_TAIL(adtree%(i%),0)
      dummy%=OB_TYPE(adtree%(i%),j%)
      SELECT dummy%
      CASE 20,21,22,26,27,29,30
        OB_FLAGS(adtree%(i%),j%)=BSET(OB_FLAGS(adtree%(i%),j%),9)
        IF dummy%=20 AND nb_plan&<3 AND magic!=FALSE
          OB_SPEC(adtree%(i%),0)=OB_SPEC(adtree%(i%),0) AND &X1111111111111111
        ENDIF
      DEFAULT
        OB_FLAGS(adtree%(i%),j%)=OB_FLAGS(adtree%(i%),j%) AND &X111111111
      ENDSELECT
    NEXT j%
  NEXT i%
  '
RETURN
> PROCEDURE init_5
  '
  DEFFILL 1,2,8
  gris_menu(0)
  '
  ~WIND_UPDATE(2)
  ~WIND_UPDATE(0)
  '
  ~MENU_BAR(adtree%(0),1)
  '
  IF multi!=FALSE
    ~FORM_DIAL(3,0,0,0,0,screenx&,screeny&,screenl&,screenh&)
  ENDIF
  '
RETURN
'
> PROCEDURE boucle_generale
boucle_principale:
  endroit%=0
  DO
    evnt&=@ev_multi(&X110011,2,1,1,300,mo_x&,mo_y&,mo_k&,m_touche%,m_clavier%,mo_c&)
    IF BTST(evnt&,4)
      SELECT m_type&
      CASE 10
        boucle_menu
      CASE 20
        redraw
      CASE 21
        win_topped
      CASE 22
        win_closed
      CASE 23
        win_fulled
      CASE 24
        win_arrowed
      CASE 25
        win_hslided
      CASE 26
        win_vslided
      CASE 27
        win_sized
      CASE 28
        win_moved
      CASE 29,31
        win_ontop
      CASE 30
        win_untopped
      CASE 50
        shut_down
      CASE 22360
        FOR i%=0 TO 4
          IF m_fenetre&=hand_win%(i%) AND win!(i%)=TRUE
            aff!(i%)=FALSE
          ENDIF
        NEXT i%
      CASE 22361
        FOR i%=0 TO 4
          IF m_fenetre&=hand_win%(i%) AND win!(i%)=TRUE
            aff!(i%)=TRUE
          ENDIF
        NEXT i%
      ENDSELECT
    ENDIF
    IF BTST(evnt&,5)=TRUE
      ~WIND_GET(0,10,top_win%,dummy%,dummy%,dummy%)
      ~WIND_GET(top_win%,20,top_win%,dummy%,dummy%,dummy%)
      IF top_win%<>ap_id&
        vq_color
      ENDIF
      INC cpt_garbage%
      IF cpt_garbage%>20
        ~FRE(0)
        ~FRE()
        cpt_garbage%=0
      ENDIF
    ENDIF
    IF BTST(evnt&,0)
      boucle_clavier_generale
    ENDIF
    IF BTST(evnt&,1)
      boucle_souris_generale
    ENDIF
    clear_m_v
  LOOP
RETURN
'
> PROCEDURE boucle_menu
  ~MENU_TNORMAL(adtree%(0),m_titre&,1)
  SELECT m_entree&
  CASE 8
    win(1)
  CASE 17
    win(2)
  CASE 19 ! charger
    @load_tab_nom
  CASE 21 ! edit
    win(0)
  CASE 23 ! save
    @save_tab_nom
  CASE 25
    sortir
  CASE 27
    gere_preference_parx
  CASE 29
    win(4)
  CASE 30
    win(3)
  CASE 32
    gere_compiler
  ENDSELECT
RETURN
> PROCEDURE gris_menu(val_gris&)
  ~MENU_IENABLE(adtree%(0),21,val_gris&)
  ~MENU_IENABLE(adtree%(0),23,val_gris&)
  ~MENU_IENABLE(adtree%(0),29,val_gris&)
  ~MENU_IENABLE(adtree%(0),30,val_gris&)
  ~MENU_IENABLE(adtree%(0),32,val_gris&)
  IF val_gris&=1
    tab_en_cours!=TRUE
  ELSE
    tab_en_cours!=FALSE
  ENDIF
RETURN
'
> PROCEDURE boucle_souris_generale
  IF mo_c&=1 AND mo_k&=1
    clic_win%=WIND_FIND(mo_x&,mo_y&)
    delai
    boucle_generale_suite
  ENDIF
  IF mo_c&=1 AND mo_k&=3
    ~WIND_GET(0,10,top_win%,dummy%,dummy%,dummy%)
    IF top_win%=hand_win%(0) AND win!(0)=TRUE AND aff!(0)=TRUE
    ENDIF
  ENDIF
RETURN
> PROCEDURE boucle_generale_suite
  IF clic_win%=hand_win%(0) AND win!(0)=TRUE
    IF parx_size_tab%(11)>0 AND parx_size_tab%(30)>0
      gere_edit
    ENDIF
  ENDIF
  IF clic_win%=hand_win%(1) AND win!(1)=TRUE
    win(1)
  ENDIF
  IF clic_win%=hand_win%(2) AND win!(2)=TRUE
    gere_creer
  ENDIF
  IF clic_win%=hand_win%(3) AND win!(3)=TRUE
    gere_images
  ENDIF
  IF clic_win%=hand_win%(4) AND win!(4)=TRUE
    gere_charger_images
  ENDIF
RETURN
> PROCEDURE boucle_clavier_generale
  m_clavier&=BYTE(m_clavier%)
  ~WIND_GET(0,10,top_win%,dummy%,dummy%,dummy%)
  '
  ' test touches fonctions g‚n‚rales
  '
  IF m_clavier&=27 AND m_touche%=4
    FOR i%=1 TO 5
      IF top_win%=hand_win%(i%) AND win!(i%)=TRUE
        ferme_win(i%)
      ENDIF
    NEXT i%
  ENDIF
  '
  SELECT m_clavier%
  CASE 15104 ! f1
  CASE 15360 ! f2
  CASE 15616 ! f3
  CASE 15872 ! f4
  CASE 16128 ! f5
  CASE 16384 ! f6
  CASE 16640 ! f7
  CASE 16896 ! f8
  CASE 17152 ! f9
  CASE 17408 ! f10
  CASE 24832 ! Undo
  ENDSELECT
  '
  SELECT m_clavier&
  CASE 3 ! ^C
    win(3)
  CASE 5 ! ^E
    win(0)
  CASE 7 ! ^G
    ~FORM_ALERT(1,"[1][ Provoquer une | Garbage Collection. ][ Ok ]")
    FOR i%=0 TO 5
      ~FRE(0)
      ~FRE()
    NEXT i%
  CASE 9 ! ^I
    win(4)
  CASE 12 ! ^L
    @load_tab_nom
  CASE 14 ! ^N
    win(2)
  CASE 16 ! ^P
    gere_preference_parx
  CASE 17 ! ^Q
    sortir
  CASE 19 ! ^S
    @save_tab_nom
  CASE 24 ! ^X
    gere_compiler
  DEFAULT
    '
    FOR i%=0 TO 3
      IF top_win%=hand_win%(i%) AND win!(i%)=TRUE
        IF i%<>1
          clavier_win%=i%
        ENDIF
      ENDIF
    NEXT i%
    '
    IF clavier_win%=0 AND top_win%=hand_win%(0) AND win!(0)=TRUE
      SELECT m_touche%
      CASE 4  !            Control
      CASE 8,9,10,12,14  ! Alternate et consort
      DEFAULT !            normal
        boucle_clavier_text
      ENDSELECT
    ENDIF
    IF clavier_win%=3 AND top_win%=hand_win%(3) AND win!(3)=TRUE
      SELECT m_touche%
      CASE 4  !            Control
      CASE 8,9,10,12,14  ! Alternate et consort
      DEFAULT !            normal
        boucle_clavier_text
      ENDSELECT
    ENDIF
    '
    IF clavier_win%=2 AND top_win%=hand_win%(2) AND win!(2)=TRUE AND aff!(2)=TRUE
      boucle_mesag
    ENDIF
    '
  ENDSELECT
RETURN
> PROCEDURE boucle_clavier_text
  '
  SELECT m_clavier%
  CASE 20992 ! Insert
  CASE 18176 ! Clr Home
  CASE 18231 ! S+Clr home
  CASE 24832 ! undo
  CASE 18432 ! haut
  CASE 19712 ! droit
  CASE 20480 ! bas
  CASE 19200 ! gauche
  CASE 18488 ! S+haut
  CASE 19766,29696 ! S+droit ou C+droit
  CASE 20530 ! S+bas
  CASE 19252,29440 ! S+gauche ou C+gauche
  DEFAULT
    SELECT m_clavier&
    CASE 0
    CASE 8 ! backspace
    CASE 9 ! tab
    CASE 13 ! enter
    CASE 27 !escape
      IF clavier_win%=0
        IF esc!=FALSE
          esc!=TRUE
        ELSE
          esc!=FALSE
        ENDIF
        force_update(0,screenx&,screeny&,screenl&,screenh&)
      ENDIF
    CASE 32
      ~WIND_GET(0,10,top_win%,dummy%,dummy%,dummy%)
      IF top_win%=hand_win%(0) AND win!(0)=TRUE
        win(3)
      ELSE
        win(0)
      ENDIF
    CASE 48 TO 52
      black_white(3,select_nature_case&+10,0)
      select_nature_case&=MAX(0,m_clavier&-48)
      black_white(3,select_nature_case&+10,1)
    CASE 127 ! delete
    ENDSELECT
  ENDSELECT
  '
RETURN
> PROCEDURE edit_efface
  ~OBJC_EDIT(adtree%(2),10,0,edit_cur%,3,dummy%)
RETURN
> PROCEDURE edit_pose
  ~OBJC_EDIT(adtree%(2),10,0,0,1,edit_cur%)
RETURN
> PROCEDURE boucle_mesag
  ~OBJC_EDIT(adtree%(2),10,m_clavier%,edit_cur%,2,edit_cur%)
RETURN
'
> PROCEDURE win_sized
  FOR i%=0 TO 3
    IF i%=0 OR i%=3
      IF m_fenetre&=hand_win%(i%) AND win!(i%)=TRUE AND aff!(i%)=TRUE
        ~WIND_CALC(1,cp_win%(i%),m_x&,m_y&,m_l&,m_h&,s_x&,s_y&,s_l&,s_h&)
        s_l&=MIN(MAX(64,SHL(SHR(s_l&+15,4),4)),larg_tot&(i%)*16)
        IF i%=3
          s_h&=MIN(MAX(128,SHL(SHR(s_h&+15,4),4)),hd&(3)+haut_tot&(i%)*16)
        ELSE
          s_h&=MIN(MAX(128,SHL(SHR(s_h&+15,4),4)),haut_tot&(i%)*16)
        ENDIF
        ~WIND_CALC(0,cp_win%(i%),s_x&,s_y&,s_l&,s_h&,m_x&,m_y&,m_l&,m_h&)
        IF i%=3
          cur_x&(2)=0
          cur_y&(2)=0
          larg_tot&(2)=0
          haut_tot&(2)=0
          move_win(3,m_x&,m_y&,m_l&,m_h&)
        ENDIF
        ~WIND_SET(m_fenetre&,5,m_x&,m_y&,m_l&,m_h&)
        set_slide(i%)
        change_deb_hvis!=TRUE
        change_deb_vvis!=TRUE
        get_slide(i%)
        IF e%=0
          make_tableau
        ENDIF
        full!(i%)=FALSE
        force_update(i%,screenx&,screeny&,screenl&,screenh&)
      ENDIF
    ENDIF
  NEXT i%
RETURN
> PROCEDURE win_fulled
  IF m_fenetre&=hand_win%(0) AND win!(0)=TRUE
    IF full!(0)=FALSE
      ~WIND_CALC(0,cp_win%(0),screenx&+1,screeny&+1,MIN(larg_pixel&,larg_tot&(0))*16,MIN(haut_pixel&,haut_tot&(0))*16,wx&(0),wy&(0),wl&(0),wh&(0))
      wx&(0)=MAX(screenx&+1,wx&(0))
      wy&(0)=MAX(screeny&+1,wy&(0))
      full!(0)=TRUE
    ELSE
      ~WIND_GET(hand_win%(0),6,wx&(0),wy&(0),wl&(0),wh&(0))
      full!(0)=FALSE
    ENDIF
    ~WIND_SET(hand_win%(0),5,wx&(0),wy&(0),wl&(0),wh&(0))
    set_slide(0)
    change_deb_hvis!=TRUE
    change_deb_vvis!=TRUE
    get_slide(0)
    make_tableau
    force_update(0,screenx&,screeny&,screenl&,screenh&)
  ELSE IF m_fenetre&=hand_win%(3) AND win!(3)=TRUE
    IF full!(3)=FALSE
      ~WIND_CALC(0,cp_win%(3),screenx&+1,screeny&+1,MIN(larg_pixel&*16,larg_tot&(3)*16),MIN(haut_pixel&*16-hd&(3),hd&(3)+haut_tot&(3)*16),wx&(3),wy&(3),wl&(3),wh&(3))
      wx&(3)=MAX(screenx&+1,wx&(3))
      wy&(3)=MAX(screeny&+1,wy&(3))
      full!(3)=TRUE
    ELSE
      ~WIND_GET(hand_win%(3),6,wx&(3),wy&(3),wl&(3),wh&(3))
      full!(3)=FALSE
    ENDIF
    cur_x&(2)=0
    cur_y&(2)=0
    larg_tot&(2)=0
    haut_tot&(2)=0
    move_win(3,wx&(3),wy&(3),wl&(3),wh&(3))
    ~WIND_SET(hand_win%(3),5,wx&(3),wy&(3),wl&(3),wh&(3))
    set_slide(3)
    change_deb_hvis!=TRUE
    change_deb_vvis!=TRUE
    get_slide(3)
    force_update(3,screenx&,screeny&,screenl&,screenh&)
  ENDIF
RETURN
> PROCEDURE win_hslided
  FOR i%=0 TO 3
    IF i%=0 OR i%=3
      IF m_fenetre&=hand_win%(i%) AND win!(i%)=TRUE AND aff!(i%)=TRUE
        deb_x&(i%)=INT(((larg_tot&(i%)-larg_vis&(i%))*m_x&)/1000)
        deb_x&(i%)=MAX(0,MIN(deb_x&(i%),(larg_tot&(i%)-larg_vis&(i%))))
        set_slide(i%)
        get_slide(i%)
        ~WIND_GET(hand_win%(i%),4,xf&,yf&,lf&,hf&)
        IF i%=3
          ADD yf&,hd&(3)
          SUB hf&,hd&(3)
        ENDIF
        IF i%=0
          make_tableau
        ENDIF
        force_update(i%,xf&,yf&,lf&,hf&)
      ENDIF
    ENDIF
  NEXT i%
RETURN
> PROCEDURE win_vslided
  FOR i%=0 TO 3
    IF i%=0 OR i%=3
      IF m_fenetre&=hand_win%(i%) AND win!(i%)=TRUE AND aff!(i%)=TRUE
        deb_y&(i%)=INT(((haut_tot&(i%)-haut_vis&(i%))*m_x&)/1000)
        deb_y&(i%)=MAX(0,MIN(cur_y&(i%),(haut_tot&(i%)-haut_vis&(i%))))
        set_slide(i%)
        get_slide(i%)
        ~WIND_GET(hand_win%(i%),4,xf&,yf&,lf&,hf&)
        IF i%=3
          ADD yf&,hd&(3)
          SUB hf&,hd&(3)
        ENDIF
        IF i%=0
          make_tableau
        ENDIF
        force_update(i%,xf&,yf&,lf&,hf&)
      ENDIF
    ENDIF
  NEXT i%
RETURN
> PROCEDURE win_arrowed
  FOR i%=0 TO 3
    IF i%=0 OR i%=3
      IF m_fenetre&=hand_win%(i%) AND win!(i%)=TRUE AND aff!(i%)=TRUE
        get_slide(i%)
        dummy1%=deb_x&(i%)
        dummy2%=deb_y&(i%)
        SELECT m_x&
        CASE 0
          SUB deb_y&(i%),haut_vis&(i%)
        CASE 1
          ADD deb_y&(i%),haut_vis&(i%)
        CASE 2
          IF deb_y&(i%)>0
            DEC deb_y&(i%)
          ENDIF
        CASE 3
          IF deb_y&(i%)<haut_tot&(i%)-haut_vis&(i%)
            INC deb_y&(i%)
          ENDIF
        CASE 4
          SUB deb_x&(i%),larg_vis&(i%)
        CASE 5
          ADD deb_x&(i%),larg_vis&(i%)
        CASE 6
          IF deb_x&(i%)>0
            DEC deb_x&(i%)
          ENDIF
        CASE 7
          IF deb_x&(i%)<larg_tot&(i%)-larg_vis&(i%)
            INC deb_x&(i%)
          ENDIF
        ENDSELECT
        deb_x&(i%)=MAX(0,MIN(deb_x&(i%),(larg_tot&(i%)-larg_vis&(i%))))
        deb_y&(i%)=MAX(0,MIN(deb_y&(i%),(haut_tot&(i%)-haut_vis&(i%))))
        set_slide(i%)
        get_slide(i%)
        ~WIND_GET(hand_win%(i%),4,xf&,yf&,lf&,hf&)
        IF i%=3
          ADD yf&,hd&(3)
          SUB hf&,hd&(3)
        ENDIF
        IF i%=0
          SELECT m_x&
          CASE 0,1,2,3
            scroll_tableau(ABS(dummy2%-deb_y&(0)))
          CASE 4,5,6,7
            scroll_tableau(ABS(dummy1%-deb_x&(0)))
          ENDSELECT
        ENDIF
        force_update(i%,xf&,yf&,lf&,hf&)
      ENDIF
    ENDIF
  NEXT i%
RETURN
> PROCEDURE win_closed
  FOR i%=0 TO 4
    IF m_fenetre&=hand_win%(i%) AND win!(i%)=TRUE
      ferme_win(i%)
    ENDIF
  NEXT i%
  win_untopped
RETURN
> PROCEDURE win_moved
  m_x&=MAX(screenx&+1,m_x&)
  m_y&=MAX(screeny&+1,m_y&)
  FOR i%=0 TO 4
    IF m_fenetre&=hand_win%(i%) AND win!(i%)=TRUE
      ~WIND_SET(hand_win%(i%),5,m_x&,m_y&,m_l&,m_h&)
      move_win(i%,m_x&,m_y&,m_l&,m_h&)
      IF i%=3
        force_update(3,screenx&,screeny&,screenl&,screenh&)
      ENDIF
    ENDIF
  NEXT i%
RETURN
> PROCEDURE win_topped
  win_untopped
  FOR i%=0 TO 4
    IF m_fenetre&=hand_win%(i%) AND win!(i%)=TRUE
      ~WIND_SET(hand_win%(i%),10,0,0,0,0)
    ENDIF
  NEXT i%
  win_ontop
RETURN
> PROCEDURE win_untopped
  ~WIND_GET(0,10,top_win%,dummy%,dummy%,dummy%)
  IF top_win%=hand_win%(2) AND win!(2)=TRUE AND aff!(2)=TRUE
    edit_efface
  ENDIF
  ~WIND_GET(top_win%,20,top_win%,dummy%,dummy%,dummy%)
  IF top_win%<>ap_id&
    vs_color(20)
  ENDIF
RETURN
> PROCEDURE win_ontop
  IF m_fenetre&=hand_win%(2) AND win!(2)=TRUE AND aff!(2)=TRUE
    edit_pose
  ENDIF
  FOR i%=0 TO 4
    IF m_fenetre&=hand_win%(i%) AND win!(i%)=TRUE
      vs_color(21)
    ENDIF
  NEXT i%
RETURN
> PROCEDURE shut_down
  ~APPL_EXIT()
  QUIT
RETURN
> PROCEDURE set_slide(bar%)
  IF bar%=0 OR bar%=3
    IF win!(bar%)
      ~WIND_GET(hand_win%(bar%),4,dummy%,dummy%,lf&,hf&)
      IF bar%=3
        SUB hf&,hd&(3)
      ENDIF
      larg_vis&(bar%)=INT((lf&+15)/16)
      len_hslide%=MAX(1,MIN(1000,1000*(larg_vis&(bar%)/MAX(1,larg_tot&(bar%)))))
      ~WIND_SET(hand_win%(bar%),15,len_hslide%,dummy%,dummy%,dummy%)
      pos_hslide%=MAX(1,MIN(1000,(1000*deb_x&(bar%))/(MAX(1,larg_tot&(bar%)-larg_vis&(bar%)-1))))
      ~WIND_SET(hand_win%(bar%),8,pos_hslide%,dummy%,dummy%,dummy%)
      haut_vis&(bar%)=INT((hf&+15)/16)
      len_vslide%=MAX(1,MIN(1000,1000*(haut_vis&(bar%)/MAX(1,haut_tot&(bar%)))))
      ~WIND_SET(hand_win%(bar%),16,len_vslide%,dummy%,dummy%,dummy%)
      pos_vslide%=MAX(1,MIN(1000,(1000*deb_y&(bar%))/(MAX(1,haut_tot&(bar%)-haut_vis&(bar%)-1))))
      ~WIND_SET(hand_win%(bar%),9,pos_vslide%,dummy%,dummy%,dummy%)
    ENDIF
  ENDIF
RETURN
> PROCEDURE get_slide(bar%)
  IF bar%=0 OR bar%=3
    IF win!(bar%)
      ~WIND_GET(hand_win%(bar%),4,dummy%,dummy%,lf&,hf&)
      IF bar%=3
        SUB hf&,hd&(3)
      ENDIF
      haut_vis&(bar%)=INT((hf&+15)/16)
      larg_vis&(bar%)=INT((lf&+15)/16)
      IF change_deb_hvis!
        ~WIND_GET(hand_win%(bar%),8,pos_hslide%,dummy%,dummy%,dummy%)
        deb_x&(bar%)=INT(((larg_tot&(bar%)-larg_vis&(bar%))*pos_hslide%)/1000)
      ENDIF
      IF change_deb_vvis!
        ~WIND_GET(hand_win%(bar%),9,pos_vslide%,dummy%,dummy%,dummy%)
        deb_y&(bar%)=INT(((haut_tot&(bar%)-haut_vis&(bar%))*pos_vslide%)/1000)
      ENDIF
      change_deb_hvis!=FALSE
      change_deb_vvis!=FALSE
      deb_x&(bar%)=MAX(0,MIN(deb_x&(bar%),(larg_tot&(bar%)-larg_vis&(bar%))))
      deb_y&(bar%)=MAX(0,MIN(deb_y&(bar%),(haut_tot&(bar%)-haut_vis&(bar%))))
    ENDIF
  ENDIF
RETURN
'
> PROCEDURE win(dial&)
  IF win!(dial&)
    force_top(dial&)
  ELSE
    win_untopped
    SELECT dial&
    CASE 0,3
      IF tab_en_cours!
        IF parx_size_tab%(11)>0
          create_win(dial&)
        ELSE
          IF win!(4)
            force_top(4)
          ELSE
            create_win(4)
          ENDIF
        ENDIF
      ENDIF
    CASE 4
      IF tab_en_cours!
        create_win(dial&)
      ENDIF
    DEFAULT
      create_win(dial&)
    ENDSELECT
  ENDIF
RETURN
> PROCEDURE create_win(dial&)
  hand_win%(dial&)=@window_create(cp_win%(dial&))
  IF hand_win%(dial&)>0
    win!(dial&)=TRUE
    IF dial&=0
      ~WIND_SET(hand_win%(dial&),2,CARD(SWAP(OB_SPEC(adtree%(5),5))),CARD(OB_SPEC(adtree%(5),5)),0,0)
      wx&(0)=screenx&+1
      wy&(0)=screeny&+1
      wl&(0)=MIN(larg_pixel&,larg_tot&(0))*16
      wh&(0)=MIN(haut_pixel&,haut_tot&(0))*16
    ELSE
      ~WIND_SET(hand_win%(dial&),2,CARD(SWAP(OB_SPEC(adtree%(5),dial&))),CARD(OB_SPEC(adtree%(5),dial&)),0,0)
      ~FORM_CENTER(adtree%(dial&),xd&(dial&),yd&(dial&),ld&(dial&),dummy%)
      IF dial&=3
        ~WIND_CALC(0,cp_win%(3),screenx&+1,screeny&+1,MIN(larg_pixel&*16,ld&(3)),MIN(haut_pixel&*16-hd&(3),hd&(3)+192),wx&(3),wy&(3),wl&(3),wh&(3))
      ELSE
        ~WIND_CALC(0,cp_win%(dial&),xd&(dial&),yd&(dial&),ld&(dial&),hd&(dial&),wx&(dial&),wy&(dial&),wl&(dial&),wh&(dial&))
      ENDIF
      wx&(dial&)=MAX(screenx&+1,wx&(dial&))
      wy&(dial&)=MAX(screeny&+1,wy&(dial&))
      move_win(dial&,wx&(dial&),wy&(dial&),wl&(dial&),wh&(dial&))
    ENDIF
    ~WIND_SET(hand_win%(dial&),24,&X1,0,0,0)
    dummy%=WIND_OPEN(hand_win%(dial&),wx&(dial&),wy&(dial&),wl&(dial&),wh&(dial&))
    aff!(dial&)=win!(dial&)
    IF dial&=3
      cur_x&(3)=0
      cur_y&(3)=0
      cur_x&(2)=0
      cur_y&(2)=0
      larg_tot&(2)=0
      haut_tot&(2)=0
    ENDIF
    IF dial&=0 OR dial&=3
      set_slide(dial&)
      change_deb_hvis!=TRUE
      change_deb_vvis!=TRUE
      get_slide(dial&)
    ENDIF
    IF dial&=0
      make_tableau
    ENDIF
  ELSE
    no_more_win
  ENDIF
RETURN
> PROCEDURE ferme_win(dial&)
  IF win!(dial&)
    v_hide_c
    ~WIND_CLOSE(hand_win%(dial&))
    ~WIND_DELETE(hand_win%(dial&))
    v_show_c
    win!(dial&)=FALSE
    aff!(dial&)=FALSE
  ENDIF
RETURN
> PROCEDURE move_win(dial&,x0&,y0&,l0&,h0&)
  IF win!(dial&) AND dial&>0
    ~WIND_CALC(1,cp_win%(dial&),x0&,y0&,l0&,h0&,xd&(dial&),yd&(dial&),ld&(dial&),dummy%)
    OB_X(adtree%(dial&),0)=xd&(dial&)
    OB_Y(adtree%(dial&),0)=yd&(dial&)
    OB_W(adtree%(dial&),0)=ld&(dial&)
  ENDIF
RETURN
> PROCEDURE no_more_win
  ~FORM_ALERT(1,CHAR{OB_SPEC(adtree%(6),10)})
  win!(dial&)=FALSE
  aff!(dial&)=FALSE
RETURN
'
> PROCEDURE force_update(bar%,f_screenx&,f_screeny&,f_screenl&,f_screenh&)
  IF win!(bar%)=TRUE AND aff!(bar%)=TRUE
    INT{m_adr%}=20
    INT{m_adr%+2}=ap_id&
    INT{m_adr%+4}=0
    INT{m_adr%+6}=hand_win%(bar%)
    INT{m_adr%+8}=f_screenx&
    INT{m_adr%+10}=f_screeny&
    INT{m_adr%+12}=f_screenl&
    INT{m_adr%+14}=f_screenh&
    force
  ENDIF
RETURN
> PROCEDURE force_top(bar%)
  ~WIND_GET(0,10,top_win%,dummy%,dummy%,dummy%)
  IF top_win%<>hand_win%(bar%) AND win!(bar%)
    clear_m
    INT{m_adr%}=21
    INT{m_adr%+2}=ap_id&
    INT{m_adr%+6}=hand_win%(bar%)
    force
  ENDIF
RETURN
> PROCEDURE force
  ~APPL_WRITE(ap_id&,16,m_adr%)
RETURN
> PROCEDURE clear_m
  FOR i%=0 TO 12 STEP 4
    LONG{m_adr%+i%}=0
  NEXT i%
RETURN
> PROCEDURE clear_m_v
  m_type&=0
  m_ap_id&=0
  m_nothing&=0
  m_titre&=0
  m_fenetre&=0
  m_entree&=0
  m_x&=0
  m_y&=0
  m_l&=0
  m_h&=0
RETURN
'
> PROCEDURE redraw
  '
  control
  '
  win_untopped
  '
  ~WIND_GET(m_fenetre&,11,rx&,ry&,rl&,rh&)
  WHILE rl&<>0 AND rh&<>0
    IF RC_INTERSECT(m_x&,m_y&,m_l&,m_h&,rx&,ry&,rl&,rh&)
      FOR i%=0 TO 4
        IF m_fenetre&=hand_win%(i%) AND win!(i%)=TRUE AND aff!(i%)=TRUE
          IF i%=0
            fill_tableau
          ENDIF
          IF i%=3
            fill_images
          ENDIF
          IF i%>0
            ob_draw(adtree%(i%),0,3,rx&,ry&,rl&,rh&)
          ENDIF
        ENDIF
      NEXT i%
    ENDIF
    ~WIND_GET(m_fenetre&,12,rx&,ry&,rl&,rh&)
  WEND
  '
  win_ontop
  '
  uncontrol
RETURN
> PROCEDURE black_white(arbre%,fils%,etat%)
  IF fils%>0
    SELECT etat%
    CASE 0
      OB_STATE(adtree%(arbre%),fils%)=BCLR(OB_STATE(adtree%(arbre%),fils%),0)
    CASE 1
      OB_STATE(adtree%(arbre%),fils%)=BSET(OB_STATE(adtree%(arbre%),fils%),0)
    ENDSELECT
  ENDIF
  IF win!(arbre%)=TRUE AND aff!(arbre%)=TRUE
    ~WIND_GET(hand_win%(arbre%),4,xf&,yf&,lf&,hf&)
    ~WIND_GET(hand_win%(arbre%),11,rx&,ry&,rl&,rh&)
    control
    WHILE rl&<>0 AND rh&<>0
      IF RC_INTERSECT(xf&,yf&,lf&,hf&,rx&,ry&,rl&,rh&)
        ob_draw(adtree%(arbre%),fils%,1,rx&,ry&,rl&,rh&)
      ENDIF
      ~WIND_GET(hand_win%(arbre%),12,rx&,ry&,rl&,rh&)
    WEND
    uncontrol
  ENDIF
RETURN
> PROCEDURE fill_tableau
  ~WIND_GET(hand_win%(0),4,xf&,yf&,lf&,hf&)
  IF parx_tab_adr%(10)>0
    dummy1&=MIN(rl&,larg_tot&(0)*16)
    dummy2&=MIN(rh&,haut_tot&(0)*16)
    WORD{pxyarray%}=rx&-xf&
    WORD{ADD(pxyarray%,2)}=ry&-yf&
    WORD{ADD(pxyarray%,4)}=rx&-xf&-1+dummy1&
    WORD{ADD(pxyarray%,6)}=ry&-yf&-1+dummy2&
    WORD{ADD(pxyarray%,8)}=rx&
    WORD{ADD(pxyarray%,10)}=ry&
    WORD{ADD(pxyarray%,12)}=rx&-1+dummy1&
    WORD{ADD(pxyarray%,14)}=ry&-1+dummy2&
    '
    LONG{img_mfdb%(10)}=parx_tab_adr%(10)
    v_hide_c
    vro_cpyfm(img_mfdb%(10),img_mfdb%(0))
    v_show_c
    '
  ENDIF
  CLIP rx&,ry&,rl&,rh&
  GRAPHMODE 1
  v_hide_c
  IF esc!=TRUE
    FOR jt%=0 TO haut_vis&(0)
      FOR it%=0 TO larg_vis&(0)
        dummy%=LONG{parx_tab_adr%(30)+(it%+deb_x&(0))*4+(jt%+deb_y&(0))*larg_tot&(0)*4}
        dummy4&=BYTE(SHR(dummy%,24))
        TEXT xf&+it%*16+2,yf&+jt%*16+6,STR$(dummy4&)
      NEXT it%
    NEXT jt%
  ENDIF
  CLIP OFF
  v_show_c
RETURN
> PROCEDURE make_tableau
  IF parx_tab_adr%(30)>0 AND parx_size_tab%(30)>0
    ~GRAF_MOUSE(2,0)
    FOR jt%=0 TO haut_vis&(0)
      FOR it%=0 TO larg_vis&(0)
        dummy%=LONG{parx_tab_adr%(30)+(it%+deb_x&(0))*4+(jt%+deb_y&(0))*larg_tot&(0)*4}
        dummy1&=BYTE(dummy%)
        dummy2&=BYTE(SHR(dummy%,8))
        dummy3&=BYTE(SHR(dummy%,16))
        dummy4&=BYTE(SHR(dummy%,24))
        WORD{pxyarray%}=dummy1&*16
        WORD{ADD(pxyarray%,2)}=dummy2&*16
        WORD{ADD(pxyarray%,4)}=ADD(dummy1&,1)*16-1
        WORD{ADD(pxyarray%,6)}=ADD(dummy2&,1)*16-1
        WORD{ADD(pxyarray%,8)}=it%*16
        WORD{ADD(pxyarray%,10)}=jt%*16
        WORD{ADD(pxyarray%,12)}=ADD(it%,1)*16-1
        WORD{ADD(pxyarray%,14)}=ADD(jt%,1)*16-1
        '
        LONG{img_mfdb%(10)}=parx_tab_adr%(10)
        IF dummy3&>0 AND parx_size_tab%(10+dummy3&)>0
          LONG{img_mfdb%(dummy3&)}=parx_tab_adr%(10+dummy3&)
          vro_cpyfm(img_mfdb%(dummy3&),img_mfdb%(10))
        ELSE
          LONG{img_mfdb%(13)}=parx_tab_adr%(2)
          vro_cpyfm(img_mfdb%(13),img_mfdb%(10))
        ENDIF
      NEXT it%
    NEXT jt%
    ~GRAF_MOUSE(0,0)
  ENDIF
RETURN
> PROCEDURE scroll_tableau(v_scroll&)
  '
  IF v_scroll&>0 AND parx_size_tab%(30)>0 AND parx_tab_adr%(30)>0
    ~GRAF_MOUSE(2,0)
    SELECT m_x&
    CASE 0,2
      WORD{pxyarray%}=0
      WORD{ADD(pxyarray%,2)}=0
      WORD{ADD(pxyarray%,4)}=MAX(0,larg_vis&(0)*16-1)
      WORD{ADD(pxyarray%,6)}=MAX(0,(haut_vis&(0)-v_scroll&)*16-1)
      WORD{ADD(pxyarray%,8)}=0
      WORD{ADD(pxyarray%,10)}=v_scroll&*16
      WORD{ADD(pxyarray%,12)}=MAX(0,larg_vis&(0)*16-1)
      WORD{ADD(pxyarray%,14)}=MAX(0,haut_vis&(0)*16-1)
      dummy1%=0
      dummy2%=v_scroll&
      dummy3%=0
      dummy4%=larg_vis&(0)
    CASE 1,3
      WORD{pxyarray%}=0
      WORD{ADD(pxyarray%,2)}=v_scroll&*16
      WORD{ADD(pxyarray%,4)}=MAX(0,larg_vis&(0)*16-1)
      WORD{ADD(pxyarray%,6)}=MAX(0,haut_vis&(0)*16-1)
      WORD{ADD(pxyarray%,8)}=0
      WORD{ADD(pxyarray%,10)}=0
      WORD{ADD(pxyarray%,12)}=MAX(0,larg_vis&(0)*16-1)
      WORD{ADD(pxyarray%,14)}=MAX(0,(haut_vis&(0)-v_scroll&)*16-1)
      dummy1%=MAX(0,haut_vis&(0)-v_scroll&)
      dummy2%=haut_vis&(0)
      dummy3%=0
      dummy4%=larg_vis&(0)
    CASE 4,6
      WORD{pxyarray%}=0
      WORD{ADD(pxyarray%,2)}=0
      WORD{ADD(pxyarray%,4)}=MAX(0,(larg_vis&(0)-v_scroll&)*16-1)
      WORD{ADD(pxyarray%,6)}=MAX(0,haut_vis&(0)*16-1)
      WORD{ADD(pxyarray%,8)}=v_scroll&*16
      WORD{ADD(pxyarray%,10)}=0
      WORD{ADD(pxyarray%,12)}=MAX(0,larg_vis&(0)*16-1)
      WORD{ADD(pxyarray%,14)}=MAX(0,haut_vis&(0)*16-1)
      dummy1%=0
      dummy2%=haut_vis&(0)
      dummy3%=0
      dummy4%=v_scroll&
    CASE 5,7
      WORD{pxyarray%}=v_scroll&*16
      WORD{ADD(pxyarray%,2)}=0
      WORD{ADD(pxyarray%,4)}=MAX(0,larg_vis&(0)*16-1)
      WORD{ADD(pxyarray%,6)}=MAX(0,haut_vis&(0)*16-1)
      WORD{ADD(pxyarray%,8)}=0
      WORD{ADD(pxyarray%,10)}=0
      WORD{ADD(pxyarray%,12)}=MAX(0,(larg_vis&(0)-v_scroll&)*16-1)
      WORD{ADD(pxyarray%,14)}=MAX(0,haut_vis&(0)*16-1)
      dummy1%=0
      dummy2%=haut_vis&(0)
      dummy3%=MAX(0,larg_vis&(0)-v_scroll&)
      dummy4%=larg_vis&(0)
    ENDSELECT
    '
    LONG{img_mfdb%(10)}=parx_tab_adr%(10)
    vro_cpyfm(img_mfdb%(10),img_mfdb%(10))
    '
    FOR jt%=dummy1% TO dummy2%
      FOR it%=dummy3% TO dummy4%
        dummy%=LONG{parx_tab_adr%(30)+(it%+deb_x&(0))*4+(jt%+deb_y&(0))*larg_tot&(0)*4}
        dummy1&=BYTE(dummy%)
        dummy2&=BYTE(SHR(dummy%,8))
        dummy3&=BYTE(SHR(dummy%,16))
        dummy4&=BYTE(SHR(dummy%,24))
        WORD{pxyarray%}=dummy1&*16
        WORD{ADD(pxyarray%,2)}=dummy2&*16
        WORD{ADD(pxyarray%,4)}=ADD(dummy1&,1)*16-1
        WORD{ADD(pxyarray%,6)}=ADD(dummy2&,1)*16-1
        WORD{ADD(pxyarray%,8)}=it%*16
        WORD{ADD(pxyarray%,10)}=jt%*16
        WORD{ADD(pxyarray%,12)}=ADD(it%,1)*16-1
        WORD{ADD(pxyarray%,14)}=ADD(jt%,1)*16-1
        '
        LONG{img_mfdb%(10)}=parx_tab_adr%(10)
        IF dummy3&>0 AND parx_size_tab%(10+dummy3&)>0
          LONG{img_mfdb%(dummy3&)}=parx_tab_adr%(10+dummy3&)
          vro_cpyfm(img_mfdb%(dummy3&),img_mfdb%(10))
        ELSE
          LONG{img_mfdb%(13)}=parx_tab_adr%(2)
          vro_cpyfm(img_mfdb%(13),img_mfdb%(10))
        ENDIF
      NEXT it%
    NEXT jt%
    ~GRAF_MOUSE(0,0)
  ENDIF
RETURN
> PROCEDURE fill_images
  ~WIND_GET(hand_win%(3),4,xf&,yf&,lf&,hf&)
  ADD yf&,hd&(3)
  SUB hf&,hd&(3)
  CLIP rx&,ry&,rl&,rh&
  GRAPHMODE 1
  v_hide_c
  PBOX xf&,yf&,lf&+xf&-1,hf&+yf&-1
  v_show_c
  CLIP OFF
  IF parx_size_tab%(10+select_image&)>0
    dummy1&=MIN(rl&,larg_tot&(3)*16,WORD{img_mfdb%(select_image&)+4})
    dummy2&=MIN(rh&,haut_tot&(3)*16+hd&(3),WORD{img_mfdb%(select_image&)+6}+hd&(3))
    IF ry&>yf&
      WORD{pxyarray%}=deb_x&(3)*16+rx&-xf&
      WORD{ADD(pxyarray%,2)}=deb_y&(3)*16+ry&-yf&
      WORD{ADD(pxyarray%,4)}=deb_x&(3)*16-xf&+rx&-1+dummy1&
      WORD{ADD(pxyarray%,6)}=deb_y&(3)*16-yf&+ry&-1+dummy2&
      WORD{ADD(pxyarray%,8)}=rx&
      WORD{ADD(pxyarray%,10)}=ry&
      WORD{ADD(pxyarray%,12)}=rx&-1+dummy1&
      WORD{ADD(pxyarray%,14)}=ry&-1+dummy2&
    ELSE
      WORD{pxyarray%}=deb_x&(3)*16+rx&-xf&
      WORD{ADD(pxyarray%,2)}=deb_y&(3)*16
      WORD{ADD(pxyarray%,4)}=deb_x&(3)*16-xf&+rx&-1+dummy1&
      WORD{ADD(pxyarray%,6)}=deb_y&(3)*16+MAX(0,ry&-1+dummy2&-yf&)
      WORD{ADD(pxyarray%,8)}=rx&
      WORD{ADD(pxyarray%,10)}=yf&
      WORD{ADD(pxyarray%,12)}=rx&-1+dummy1&
      WORD{ADD(pxyarray%,14)}=ry&-1+dummy2&
    ENDIF
    '
    LONG{img_mfdb%(select_image&)}=parx_tab_adr%(10+select_image&)
    v_hide_c
    vro_cpyfm(img_mfdb%(select_image&),img_mfdb%(0))
    v_show_c
    '
  ENDIF
  IF haut_tot&(2)>0 AND larg_tot&(2)>0
    xfc&=MAX(0,cur_x&(2)-deb_x&(3))*16+xf&
    yfc&=MAX(0,cur_y&(2)-deb_y&(3))*16+yf&
    lfc&=larg_tot&(2)*16
    hfc&=haut_tot&(2)*16
    CLIP rx&,ry&,rl&,rh&
    GRAPHMODE 3
    v_hide_c
    PBOX xfc&,yfc&,lfc&+xfc&-1,hfc&+yfc&-1
    v_show_c
    CLIP OFF
  ENDIF
RETURN
'
> PROCEDURE load_tab_nom
  IF tab_en_cours!
    result%=FORM_ALERT(1,CHAR{OB_SPEC(adtree%(6),14)})
  ELSE
    result%=1
  ENDIF
  IF result%=1
    IF nom_tab$=c0$ OR LEN(nom_tab$)=0
      nom_tab$=chemin$+CHAR{{OB_SPEC(adtree%(2),10)}}+ext_qmt$
    ENDIF
    default_tab$=RIGHT$(nom_tab$,LEN(nom_tab$)-RINSTR(nom_tab$,"\"))
    dummy$=@fileselector2$(LEFT$(nom_tab$,RINSTR(nom_tab$,"\"))+LEFT$(masque$)+ext_qmt$,default_tab$)
    IF dummy$<>c0$ AND LEN(dummy$)>0
      nom_tab$=dummy$
      @load_tab
    ENDIF
  ENDIF
RETURN
> PROCEDURE load_tab
  '
  ferme_win(0)
  ferme_win(3)
  '
  FOR i%=1 TO 9
    make_zero_mfdb(img_mfdb%(i%))
    parx_libere_blk(20+i%)
    parx_libere_blk(10+i%)
  NEXT i%
  '
  nom_image$(1)=c0$
  FOR i%=2 TO 9
    nom_image$(i%)=c0$
  NEXT i%
  FOR i%=1 TO 9
    CHAR{{OB_SPEC(adtree%(4),i%*2)}}=RIGHT$(nom_image$(i%),13)
    OB_FLAGS(adtree%(3),i%)=BSET(OB_FLAGS(adtree%(3),i%),7)
    OB_STATE(adtree%(3),i%)=BCLR(OB_STATE(adtree%(3),i%),0)
  NEXT i%
  cur_x&(2)=0
  cur_y&(2)=0
  larg_tot&(2)=-1
  haut_tot&(2)=-1
  '
  endroit%=17
  REPEAT
    err_choix&=1
    OPEN "i",#17,nom_tab$
    INPUT #17;dummy$
    IF dummy$="QMT#1"
      INPUT #17;larg_tab&
      INPUT #17;haut_tab&
      FOR i%=1 TO 9
        INPUT #17;nom_image$(i%)
      NEXT i%
    ENDIF
  endroit17:
    CLOSE #17
  UNTIL err_choix&=1
  '
  larg_tot&(0)=larg_tab&
  haut_tot&(0)=haut_tab&
  '
  dummy$=LEFT$(nom_tab$,RINSTR(nom_tab$,".")-1)+ext_dat$
  endroit%=18
  REPEAT
    err_choix&=1
    OPEN "i",#18,dummy$
    dummy%=LOF(#18)
    parx_libere_blk(30)
    parx_reserve_blk(30,dummy%)
    IF parx_tab_adr%(30)>0 AND parx_size_tab%(30)>=dummy% AND dummy%=larg_tab&*haut_tab&*4
      BGET #18,parx_tab_adr%(30),parx_size_tab%(30)
      FOR il%=1 TO 9
        IF nom_image$(il%)<>c0$ AND LEN(nom_image$(il%))>1
          parx_ouvrir(il%)
          IF exit!=TRUE
            CHAR{{OB_SPEC(adtree%(4),il%*2)}}=RIGHT$(nom_image$(il%),13)
            OB_FLAGS(adtree%(3),il%)=BCLR(OB_FLAGS(adtree%(3),il%),7)
          ELSE
            OB_FLAGS(adtree%(3),il%)=BSET(OB_FLAGS(adtree%(3),il%),7)
          ENDIF
        ENDIF
      NEXT il%
      '
      larg_tot&(3)=MAX(20,WORD{img_mfdb%(1)+4}/16)
      haut_tot&(3)=MAX(12,WORD{img_mfdb%(1)+6}/16)
      cur_x&(3)=0
      cur_y&(3)=0
      cur_x&(2)=0
      cur_y&(2)=0
      larg_tot&(2)=0
      haut_tot&(2)=0
      '
      FOR i%=4 TO 18 STEP 2
        OB_FLAGS(adtree%(4),i%)=BCLR(OB_FLAGS(adtree%(4),i%),7)
        black_white(4,i%,0)
      NEXT i%
      FOR i%=2 TO 9
        black_white(3,i%,0)
      NEXT i%
      black_white(3,1,1)
      vs_color(21)
      select_image&=1
      gris_menu(1)
      CHAR{{OB_SPEC(adtree%(2),3)}}=STR$(larg_tab&)+c0$
      CHAR{{OB_SPEC(adtree%(2),7)}}=STR$(haut_tab&)+c0$
      dummy$=RIGHT$(nom_tab$,LEN(nom_tab$)-RINSTR(nom_tab$,"\"))
      dummy$=LEFT$(dummy$,LEN(dummy$)-INSTR(dummy$,"."))
      CHAR{{OB_SPEC(adtree%(2),10)}}=dummy$+c0$
      aff_taille_tab
      win(0)
    ELSE
      gris_menu(0)
      nom_tab$=c0$
      vs_color(20)
    ENDIF
  endroit18:
    CLOSE #18
  UNTIL err_choix&=1
  '
  force_update(2,screenx&,screeny&,screenl&,screenh&)
  force_update(4,screenx&,screeny&,screenl&,screenh&)
  '
RETURN
'
> PROCEDURE save_tab_nom
  IF nom_tab$=c0$ OR LEN(nom_tab$)=0
    nom_tab$=chemin$+CHAR{{OB_SPEC(adtree%(2),10)}}+ext_qmt$
  ENDIF
  default_tab$=RIGHT$(nom_tab$,LEN(nom_tab$)-RINSTR(nom_tab$,"\"))
  dummy$=@fileselector2$(LEFT$(nom_tab$,RINSTR(nom_tab$,"\"))+LEFT$(masque$)+ext_qmt$,default_tab$)
  IF @s_exist(dummy$)
    result%=FORM_ALERT(1,CHAR{OB_SPEC(adtree%(6),13)})
  ELSE
    result%=1
  ENDIF
  IF result%=1
    IF dummy$<>c0$ AND LEN(dummy$)>0
      nom_tab$=dummy$
      @save_tab
    ENDIF
  ENDIF
RETURN
> PROCEDURE save_tab
  '
  endroit%=15
  REPEAT
    err_choix&=1
    OPEN "o",#15,nom_tab$
    PRINT #15;"QMT#1"
    PRINT #15;larg_tot&(0)
    PRINT #15;haut_tot&(0)
    FOR i%=1 TO 9
      PRINT #15;nom_image$(i%)
    NEXT i%
  endroit15:
    CLOSE #15
  UNTIL err_choix&=1
  '
  dummy$=LEFT$(nom_tab$,RINSTR(nom_tab$,".")-1)+ext_dat$
  endroit%=16
  REPEAT
    err_choix&=1
    OPEN "o",#16,dummy$
    BPUT #16,parx_tab_adr%(30),parx_size_tab%(30)
  endroit16:
    CLOSE #16
  UNTIL err_choix&=1
  '
RETURN
'
> PROCEDURE gere_compiler
  control_form(9)
  DO
    result%=FORM_DO(adtree%(9),0)
  LOOP UNTIL result%=15
  OB_STATE(adtree%(9),result%)=BCLR(OB_STATE(adtree%(9),result%),0)
  uncontrol_form(9)
RETURN
'
> PROCEDURE gere_creer
  result%=OBJC_FIND(adtree%(2),0,3,mo_x&,mo_y&)
  SELECT result%
  CASE 0
    win(2)
  CASE 2
    SUB larg_tab&,10
    IF larg_tab&<50
      larg_tab&=50
    ENDIF
    CHAR{{OB_SPEC(adtree%(2),3)}}=STR$(larg_tab&)+c0$
    aff_taille_tab
    black_white(2,3,0)
  CASE 4
    ADD larg_tab&,10
    IF larg_tab&>500
      larg_tab&=500
    ENDIF
    CHAR{{OB_SPEC(adtree%(2),3)}}=STR$(larg_tab&)+c0$
    aff_taille_tab
    black_white(2,3,0)
  CASE 6
    SUB haut_tab&,10
    IF haut_tab&<20
      haut_tab&=20
    ENDIF
    CHAR{{OB_SPEC(adtree%(2),7)}}=STR$(haut_tab&)+c0$
    aff_taille_tab
    black_white(2,7,0)
  CASE 8
    ADD haut_tab&,10
    IF haut_tab&>500
      haut_tab&=500
    ENDIF
    CHAR{{OB_SPEC(adtree%(2),7)}}=STR$(haut_tab&)+c0$
    aff_taille_tab
    black_white(2,7,0)
  CASE 13
    black_white(2,13,1)
    delai
    IF tab_en_cours!
      dummy%=FORM_ALERT(1,CHAR{OB_SPEC(adtree%(6),14)})
    ELSE
      dummy%=1
    ENDIF
    IF dummy%=1
      ferme_win(0)
      ferme_win(3)
      IF tab_en_cours!=FALSE
        gris_menu(1)
      ENDIF
      FOR i%=1 TO 9
        make_zero_mfdb(img_mfdb%(i%))
        parx_libere_blk(20+i%)
        parx_libere_blk(10+i%)
      NEXT i%
      parx_libere_blk(30)
      nom_image$(1)=chemin$+c0$
      FOR i%=2 TO 9
        nom_image$(i%)=c0$
      NEXT i%
      larg_tot&(0)=larg_tab&
      haut_tot&(0)=haut_tab&
      taille_tab%=larg_tab&*haut_tab&*4
      parx_reserve_blk(30,taille_tab%)
      IF parx_size_tab%(30)>=taille_tab%
        ferme_win(2)
        win(4)
      ENDIF
    ENDIF
    black_white(2,13,0)
  ENDSELECT
RETURN
> PROCEDURE aff_taille_tab
  taille_tab%=larg_tab&*haut_tab&*4
  CHAR{{OB_SPEC(adtree%(2),12)}}=STR$(INT(taille_tab%/1024))+ko$
  black_white(2,12,0)
RETURN
'
> PROCEDURE gere_edit
  get_slide(0)
  ~WIND_GET(hand_win%(0),4,xfc&,yfc&,lfc&,hfc&)
  cur_x&(0)=(mo_x&-xfc&)/16
  cur_y&(0)=(mo_y&-yfc&)/16
  IF larg_tot&(0)>1
    cur_x&(0)=MAX(0,MIN(cur_x&(0),larg_vis&(0),larg_tot&(0)-1))
  ELSE
    cur_x&(0)=0
  ENDIF
  IF haut_tot&(0)>1
    cur_y&(0)=MAX(0,MIN(cur_y&(0),haut_vis&(0),haut_tot&(0)-1))
  ELSE
    cur_y&(0)=0
  ENDIF
  '
  control
  FOR jt%=0 TO MAX(0,haut_tot&(2)-1)
    FOR it%=0 TO MAX(0,larg_tot&(2)-1)
      WORD{pxyarray%}=(cur_x&(2)+it%)*16
      WORD{ADD(pxyarray%,2)}=(cur_y&(2)+jt%)*16
      WORD{ADD(pxyarray%,4)}=(cur_x&(2)+it%+1)*16-1
      WORD{ADD(pxyarray%,6)}=(cur_y&(2)+jt%+1)*16-1
      WORD{ADD(pxyarray%,8)}=(cur_x&(0)+it%)*16
      WORD{ADD(pxyarray%,10)}=(cur_y&(0)+jt%)*16
      WORD{ADD(pxyarray%,12)}=(cur_x&(0)+it%+1)*16-1
      WORD{ADD(pxyarray%,14)}=(cur_y&(0)+jt%+1)*16-1
      '
      dummy1%=cur_x&(2)+it%
      dummy2%=SHL(cur_y&(2)+jt%,8)
      dummy3%=SHL(select_image&,16)
      dummy4%=SHL(select_nature_case&,24)
      dummy%=dummy4% OR dummy3% OR dummy2% OR dummy1%
      LONG{parx_tab_adr%(30)+(deb_x&(0)+cur_x&(0)+it%)*4+(deb_y&(0)+cur_y&(0)+jt%)*larg_tot&(0)*4}=dummy%
      '
      LONG{img_mfdb%(select_image&)}=parx_tab_adr%(10+select_image&)
      LONG{img_mfdb%(10)}=parx_tab_adr%(10)
      vro_cpyfm(img_mfdb%(select_image&),img_mfdb%(10))
      '
    NEXT it%
  NEXT jt%
  uncontrol
  '
  xfc&=cur_x&(0)*16+xfc&
  yfc&=cur_y&(0)*16+yfc&
  lfc&=MAX(1,larg_tot&(2))*16
  hfc&=MAX(1,haut_tot&(2))*16
  force_update(0,xfc&,yfc&,lfc&,hfc&)
  '
RETURN
'
> PROCEDURE gere_images
  get_slide(3)
  result%=OBJC_FIND(adtree%(3),0,3,mo_x&,mo_y&)
  SELECT result%
  CASE 0
    win(3)
  CASE 1,2,3,4,5,6,7,8,9
    black_white(3,select_image&,0)
    select_image&=WORD(result%)
    black_white(3,result%,1)
    larg_tot&(3)=MIN(255,MAX(1,WORD{img_mfdb%(select_image&)+4}/16))
    haut_tot&(3)=MIN(255,MAX(1,WORD{img_mfdb%(select_image&)+6}/16))
    cur_x&(3)=0
    cur_y&(3)=0
    cur_x&(2)=0
    cur_y&(2)=0
    larg_tot&(2)=0
    haut_tot&(2)=0
    set_slide(3)
    get_slide(3)
    full!(3)=FALSE
    m_fenetre&=hand_win%(3)
    win_fulled
    force_update(3,screenx&,screeny&,screenl&,screenh&)
  CASE 10,11,12,13,14
    black_white(3,select_nature_case&+10,0)
    select_nature_case&=MAX(0,result%-10)
    black_white(3,result%,1)
  DEFAULT
    ~WIND_GET(hand_win%(3),4,xf&,yf&,lf&,hf&)
    ADD yf&,hd&(3)
    SUB hf&,hd&(3)
    xfc&=(cur_x&(2)-deb_x&(3))*16+xf&
    yfc&=(cur_y&(2)-deb_y&(3))*16+yf&
    lfc&=larg_tot&(2)*16
    hfc&=haut_tot&(2)*16
    IF lfc&>0 AND hfc&>0 AND xfc&>0 AND yfc&>0
      force_update(3,xfc&,yfc&,lfc&,hfc&)
    ENDIF
    ~WIND_GET(hand_win%(3),4,xfc&,yfc&,lfc&,hfc&)
    IF BTST(m_touche%,0) OR BTST(m_touche%,1)
      cur_x&(1)=deb_x&(3)+(mo_x&-xfc&)/16
      cur_y&(1)=deb_y&(3)+(mo_y&-yfc&-hd&(3)-1)/16
      IF larg_tot&(3)>1
        cur_x&(1)=MAX(0,MIN(cur_x&(1),larg_tot&(3),255))
      ELSE
        cur_x&(1)=0
      ENDIF
      IF haut_tot&(3)>1
        cur_y&(1)=MAX(0,MIN(cur_y&(1),haut_tot&(3),255))
      ELSE
        cur_y&(1)=0
      ENDIF
      larg_tot&(2)=MAX(1,cur_x&(1)-cur_x&(2)+1)
      haut_tot&(2)=MAX(1,cur_y&(1)-cur_y&(2)+1)
    ELSE
      cur_x&(2)=deb_x&(3)+(mo_x&-xfc&)/16
      cur_y&(2)=deb_y&(3)+(mo_y&-yfc&-hd&(3)-1)/16
      IF larg_tot&(3)>1
        cur_x&(2)=MAX(0,MIN(cur_x&(2),larg_tot&(3),255))
      ELSE
        cur_x&(2)=0
      ENDIF
      IF haut_tot&(3)>1
        cur_y&(2)=MAX(0,MIN(cur_y&(2),haut_tot&(3),255))
      ELSE
        cur_y&(2)=0
      ENDIF
      larg_tot&(2)=1
      haut_tot&(2)=1
    ENDIF
    xfc&=(cur_x&(2)-deb_x&(3))*16+xf&
    yfc&=(cur_y&(2)-deb_y&(3))*16+yf&
    lfc&=larg_tot&(2)*16
    hfc&=haut_tot&(2)*16
    IF lfc&>0 AND hfc&>0 AND xfc&>0 AND yfc&>0
      force_update(3,xfc&,yfc&,lfc&,hfc&)
    ENDIF
  ENDSELECT
RETURN
'
> PROCEDURE gere_charger_images
  result%=OBJC_FIND(adtree%(4),0,3,mo_x&,mo_y&)
  IF result% AND EVEN(result%)
    e%=result%/2
    black_white(4,result%,1)
    IF e%=1
      dummy$=@fileselector2$(LEFT$(nom_image$(1),RINSTR(nom_image$(1),"\"))+masque$,c0$)
      IF LEN(dummy$)>0 AND dummy$<>c0$
        nom_image$(1)=dummy$
        select_image&=1
        FOR i%=1 TO 9
          make_zero_mfdb(img_mfdb%(i%))
          parx_libere_blk(20+i%)
          parx_libere_blk(10+i%)
        NEXT i%
        FOR i%=4 TO 18 STEP 2
          OB_FLAGS(adtree%(4),i%)=BSET(OB_FLAGS(adtree%(4),i%),7)
          CHAR{{OB_SPEC(adtree%(4),i%)}}=c0$
        NEXT i%
        FOR i%=2 TO 9
          nom_image$(i%)=c0$
          OB_FLAGS(adtree%(3),i%)=BSET(OB_FLAGS(adtree%(3),i%),7)
          OB_STATE(adtree%(3),i%)=BCLR(OB_STATE(adtree%(3),i%),0)
        NEXT i%
        cur_x&(2)=0
        cur_y&(2)=0
        larg_tot&(2)=-1
        haut_tot&(2)=-1
        @parx_ouvrir(1)
        IF exit!=TRUE
          CHAR{{OB_SPEC(adtree%(4),2)}}=RIGHT$(nom_image$(1),13)
          FOR i%=4 TO 18 STEP 2
            OB_FLAGS(adtree%(4),i%)=BCLR(OB_FLAGS(adtree%(4),i%),7)
            black_white(4,i%,0)
          NEXT i%
          OB_FLAGS(adtree%(3),1)=BCLR(OB_FLAGS(adtree%(3),1),7)
          OB_STATE(adtree%(3),1)=BSET(OB_STATE(adtree%(3),1),0)
          FOR i%=2 TO 9
            black_white(3,2,0)
          NEXT i%
          black_white(3,1,1)
          vs_color(21)
        ELSE
          CHAR{{OB_SPEC(adtree%(4),2)}}=c0$
          vs_color(20)
        ENDIF
        full!(3)=FALSE
        m_fenetre&=hand_win%(3)
        win_fulled
        force_update(3,screenx&,screeny&,screenl&,screenh&)
        force_update(4,screenx&,screeny&,screenl&,screenh&)
      ENDIF
      black_white(4,2,0)
    ELSE
      dummy$=@fileselector2$(LEFT$(nom_image$(1),RINSTR(nom_image$(1),"\"))+masque$,c0$)
      IF dummy$<>c0$ AND LEN(dummy$)>0
        CHAR{{OB_SPEC(adtree%(4),result%)}}=c0$
        nom_image$(e%)=dummy$
        parx_libere_blk(10+e%)
        make_zero_mfdb(img_mfdb%(e%))
        @parx_ouvrir(e%)
        IF exit!=TRUE
          CHAR{{OB_SPEC(adtree%(4),result%)}}=RIGHT$(nom_image$(e%),13)
          OB_FLAGS(adtree%(3),e%)=BCLR(OB_FLAGS(adtree%(3),e%),7)
          select_image&=e%
          black_white(3,select_image&,1)
        ELSE
          nom_image$(e%)=c0$
          OB_FLAGS(adtree%(3),e%)=BSET(OB_FLAGS(adtree%(3),e%),7)
          select_image&=1
        ENDIF
        black_white(3,e%,-1)
        force_update(3,screenx&,screeny&,screenl&,screenh&)
        parx_libere_blk(20+e%)
      ENDIF
      black_white(4,result%,0)
    ENDIF
    IF select_image&=e%
      larg_tot&(3)=MAX(20,WORD{img_mfdb%(e%)+4}/16)
      haut_tot&(3)=MAX(12,WORD{img_mfdb%(e%)+6}/16)
      cur_x&(3)=0
      cur_y&(3)=0
      set_slide(3)
      get_slide(3)
      cur_x&(2)=0
      cur_y&(2)=0
      larg_tot&(2)=0
      haut_tot&(2)=0
      full!(3)=FALSE
      m_fenetre&=hand_win%(3)
      win_fulled
    ENDIF
  ELSE
    win(4)
  ENDIF
RETURN
> PROCEDURE gere_preference_parx
  control_form(7)
  DO
    result%=FORM_DO(adtree%(7),0)
    IF BTST(OB_STATE(adtree%(7),6),0)
      parx_lire_rim!=TRUE
    ELSE
      parx_lire_rim!=FALSE
    ENDIF
    IF BTST(OB_STATE(adtree%(7),8),0)
      parx_lire_trm!=TRUE
    ELSE
      parx_lire_trm!=FALSE
    ENDIF
    IF BTST(OB_STATE(adtree%(7),10),0)
      parx_lire_mem!=TRUE
    ELSE
      parx_lire_mem!=FALSE
    ENDIF
    IF BTST(OB_STATE(adtree%(7),12),0)
      parx_lire_pal!=TRUE
    ELSE
      parx_lire_pal!=FALSE
    ENDIF
    IF BTST(OB_STATE(adtree%(7),17),0)
      parx_niv_gris!=TRUE
    ELSE
      parx_niv_gris!=FALSE
    ENDIF
    IF BTST(OB_STATE(adtree%(7),19),0)
      parx_carte_graphique!=TRUE
    ELSE
      parx_carte_graphique!=FALSE
    ENDIF
    IF result%=15
      INC parx_choix_trm&
      IF parx_choix_trm&>parx_nb_tramage&
        parx_choix_trm&=1
      ENDIF
      IF parx_tab_adr%(0)>0
        CHAR{{OB_SPEC(adtree%(7),16)}}=CHAR{parx_tab_adr%(0)+1964+32*(parx_choix_trm&-1)}
      ELSE
        CHAR{{OB_SPEC(adtree%(7),16)}}=c0$
      ENDIF
    ENDIF
    IF result%=4
      dummy$=@fileselector2$(chemin$+c0$,c0$)
      dummy$=LEFT$(dummy$,MAX(0,LEN(dummy$)-1))
      IF LEN(dummy$)
        parx_sys$=dummy$
        CHAR{{OB_SPEC(adtree%(7),4)}}=RIGHT$(parx_sys$,30)+c0$
      ENDIF
    ENDIF
    SELECT result%
    CASE 4,15,23
      OB_STATE(adtree%(7),result%)=BCLR(OB_STATE(adtree%(7),result%),0)
    ENDSELECT
    IF result%=4
      ~OBJC_DRAW(adtree%(7),0,3,screenx&,screeny&,screenl&,screenh&)
    ENDIF
    IF result%=15
      ~OBJC_DRAW(adtree%(7),15,0,screenx&,screeny&,screenl&,screenh&)
      ~OBJC_DRAW(adtree%(7),16,0,screenx&,screeny&,screenl&,screenh&)
    ENDIF
  LOOP UNTIL result%=23
  uncontrol_form(7)
  '
  endroit%=14
  REPEAT
    err_choix&=1
    OPEN "o",#14,chemin$+qmt_inf$
    PRINT #14,parx_sys$
    PRINT #14,parx_lire_rim!
    PRINT #14,parx_lire_trm!
    PRINT #14,parx_lire_mem!
    PRINT #14,parx_lire_pal!
    PRINT #14,parx_choix_trm&
    PRINT #14,parx_niv_gris!
    PRINT #14,parx_carte_graphique!
  endroit14:
    CLOSE #14
  UNTIL err_choix&=1
  '
RETURN
> PROCEDURE parx_ouvrir(ind_image&)
  IF @s_exist(nom_image$(ind_image&))=TRUE
    ' parx_reserve_tot
    IF parx_adr_mem%>0 AND parx_tab_adr%(0)>0
      ~WIND_UPDATE(1)
      ~WIND_UPDATE(3)
      FOR i%=3 TO 9
        parx_libere_blk(i%)
      NEXT i%
      parx_hand_image&=GEMDOS(61,L:V:nom_image$(ind_image&),W:0)
      IF parx_hand_image&>0
        IF @parx_load_reco(ind_image&)=TRUE
          IF WORD{img_mfdb%(12)+4}<320 OR WORD{img_mfdb%(12)+6}<192
            ~FORM_ALERT(1,CHAR{OB_SPEC(adtree%(8),13)})
            exit!=FALSE
          ELSE IF @parx_load_palette(ind_image&)=TRUE
            IF @parx_load_image(ind_image&)=TRUE
              IF @parx_tramage(ind_image&)=FALSE
                ~FORM_ALERT(1,CHAR{OB_SPEC(adtree%(8),10)})
              ENDIF
            ELSE
              ~FORM_ALERT(1,CHAR{OB_SPEC(adtree%(8),8)})
            ENDIF
          ELSE
            ~FORM_ALERT(1,CHAR{OB_SPEC(adtree%(8),9)})
          ENDIF
        ELSE
          ~FORM_ALERT(1,CHAR{OB_SPEC(adtree%(8),7)})
        ENDIF
        ~GEMDOS(62,W:parx_hand_image&)
      ELSE
        ~FORM_ALERT(1,CHAR{OB_SPEC(adtree%(8),12)})
      ENDIF
      ~WIND_UPDATE(0)
      ~WIND_UPDATE(2)
      IF multi!=FALSE
        ~FORM_DIAL(3,0,0,0,0,screenx&,screeny&,screenl&,screenh&)
      ENDIF
    ELSE
      ~FORM_ALERT(1,CHAR{OB_SPEC(adtree%(8),4)})
      gere_preference_parx
    ENDIF
    ~GRAF_MOUSE(0,0)
    '
    ' parx_shrink_tot
    '
  ENDIF
RETURN
> FUNCTION parx_load_reco(ind_image&)
  '
  LOCAL parx_ext%
  '
  exit!=FALSE
  parx_reserve_blk(3,2048)
  IF retour_mem%>=parx_size_tab%(3)
    '
    parx_size_image%=GEMDOS(66,L:0,W:parx_hand_image&,W:2)
    ~GEMDOS(66,L:0,W:parx_hand_image&,W:0)
    dummy%=GEMDOS(63,W:parx_hand_image&,L:MIN(parx_size_image%,parx_size_tab%(3)),L:parx_tab_adr%(3))
    '
    parx_ext%=CVL(LEFT$(RIGHT$(nom_image$(ind_image&),5),4))
    '
    ptr_rim%=parx_tab_adr%(1)
    i%=0
    DO
      INC i%
      '
      LONG{img_mfdb%(12)}=XBIOS(3)
      WORD{img_mfdb%(12)+4}=WORK_OUT(0)+1
      WORD{img_mfdb%(12)+6}=WORK_OUT(1)+1
      WORD{img_mfdb%(12)+8}=(WORK_OUT(0)+1)/16
      WORD{img_mfdb%(12)+10}=0
      WORD{img_mfdb%(12)+12}=nb_plan&
      LONG{img_mfdb%(12)+14}=0
      WORD{img_mfdb%(12)+18}=parx_hand_image&
      '
      @declare_parx_rim
      retour_rim%=C:parx_test_file%(W:0,L:parx_tab_adr%(3),L:dummy%,L:parx_size_image%,L:parx_ext%,L:img_mfdb%(12))
      SELECT retour_rim%
      CASE 2
        exit!=TRUE
        parx_image_sans_palette!=FALSE
      CASE 3
        exit!=TRUE
        parx_image_sans_palette!=TRUE
      ENDSELECT
      EXIT IF exit!=TRUE
      '
      ADD ptr_rim%,LONG{ptr_rim%}
      '
    LOOP UNTIL i%=nombre_rim%
  ENDIF
  parx_libere_blk(3)
  '
  RETURN exit!
ENDFUNC
> FUNCTION parx_load_palette(ind_image&)
  '
  LOCAL parx_nb_coul%,parx_seek_pal%,parx_leng_pal%
  '
  exit!=FALSE
  parx_seek_pal%=LONG{img_mfdb%(12)}
  parx_leng_pal%=LONG{img_mfdb%(12)+14}
  parx_nb_coul%=2^MAX(1,WORD{img_mfdb%(12)+12})
  '
  parx_reserve_blk(5,parx_nb_coul%*6)
  IF retour_mem%>=(parx_nb_coul%*6) OR parx_image_sans_palette!=TRUE
    SELECT nb_plan&
    CASE 1
      BMOVE parx_tab_adr%(0)+12,parx_tab_adr%(5),parx_nb_coul%*6
    CASE 2
      BMOVE parx_tab_adr%(0)+26,parx_tab_adr%(5),parx_nb_coul%*6
    CASE 4
      BMOVE parx_tab_adr%(0)+54,parx_tab_adr%(5),parx_nb_coul%*6
    CASE 8
      BMOVE parx_tab_adr%(0)+166,parx_tab_adr%(5),parx_nb_coul%*6
    ENDSELECT
    parx_reserve_blk(3,parx_leng_pal%+ABS(ODD(parx_leng_pal%)))
    IF retour_mem%>=parx_leng_pal% OR parx_image_sans_palette!=TRUE
      '
      dummy%=0
      IF parx_image_sans_palette!=FALSE
        ~GEMDOS(66,L:parx_seek_pal%,W:parx_hand_image&,W:0)
        dummy%=GEMDOS(63,W:parx_hand_image&,L:parx_leng_pal%,L:parx_tab_adr%(3))
      ENDIF
      '
      LONG{img_mfdb%(12)}=parx_size_image%
      WORD{img_mfdb%(12)+18}=parx_hand_image&
      '
      @declare_parx_rim
      IF parx_image_sans_palette!=TRUE
        parx_nb_coul%=0
      ENDIF
      retour_rim%=C:parx_get_palette%(W:0,L:parx_tab_adr%(3),L:dummy%,L:parx_tab_adr%(5),L:parx_nb_coul%,L:img_mfdb%(12))
      IF retour_rim%=2 OR retour_rim%=0
        exit!=TRUE
      ENDIF
      '
    ENDIF
    parx_libere_blk(3)
  ENDIF
  '
  RETURN exit!
ENDFUNC
> FUNCTION parx_load_image(ind_image&)
  '
  LOCAL parx_size_data%,parx_seek_data%,parx_leng_data%
  '
  exit!=FALSE
  parx_seek_data%=LONG{img_mfdb%(12)}
  parx_leng_data%=LONG{img_mfdb%(12)+14}
  parx_size_data%=2*WORD{img_mfdb%(12)+8}*WORD{img_mfdb%(12)+6}*WORD{img_mfdb%(12)+12}
  '
  parx_reserve_blk(3,parx_leng_data%+ABS(ODD(parx_leng_data%)))
  IF retour_mem%>=parx_leng_data%
    parx_reserve_blk(4,parx_size_data%)
    IF retour_mem%>=parx_size_data%
      '
      dummy%=0
      ~GEMDOS(66,L:parx_seek_data%,W:parx_hand_image&,W:0)
      dummy%=GEMDOS(63,W:parx_hand_image&,L:parx_leng_data%,L:parx_tab_adr%(3))
      '
      LONG{img_mfdb%(12)}=parx_tab_adr%(4)
      WORD{img_mfdb%(12)+18}=parx_hand_image&
      '
      @declare_parx_rim
      retour_rim%=C:parx_do_file%(W:0,L:parx_tab_adr%(3),L:dummy%,L:img_mfdb%(12))
      IF retour_rim%=3 OR retour_rim%>4
        exit!=TRUE
      ENDIF
    ENDIF
  ENDIF
  parx_libere_blk(3)
  '
  RETURN exit!
ENDFUNC
> FUNCTION parx_tramage(ind_image&)
  '
  ~WIND_UPDATE(0)
  ~WIND_UPDATE(2)
  DO
    evnt&=@ev_multi(&X110000,2,1,1,200,mo_x&,mo_y&,mo_k&,m_touche%,m_clavier%,mo_c&)
    IF BTST(evnt&,4)=TRUE AND m_type&=20
      redraw
    ENDIF
  LOOP UNTIL evnt&=32
  ~WIND_UPDATE(1)
  ~WIND_UPDATE(3)
  '
  LOCAL parx_nb_coul%,parx_taille_trame%
  LOCAL parx_options_trm&
  '
  exit!=FALSE
  parx_changer_de_buffer!=FALSE
  '
  SELECT nb_plan&
  CASE 1,2,4,8
    parx_nb_coul%=(2^nb_plan&)
  DEFAULT
    parx_nb_coul%=0
  ENDSELECT
  '
  IF parx_nb_coul%>0
    IF parx_size_tab%(20+ind_image&)>0
      parx_libere_blk(20+ind_image&)
    ENDIF
    parx_reserve_blk(20+ind_image&,parx_nb_coul%*6)
  ENDIF
  IF retour_mem%>=parx_nb_coul%*6 OR parx_image_sans_palette!=TRUE
    '
    IF parx_niv_gris!=FALSE
      IF ind_image&=1
        dummy%=parx_tab_adr%(0)
      ELSE
        dummy%=parx_tab_adr%(21)
      ENDIF
      SELECT nb_plan&
      CASE 1
        BMOVE dummy%+12,parx_tab_adr%(20+ind_image&),parx_nb_coul%*6
      CASE 2
        BMOVE dummy%+26,parx_tab_adr%(20+ind_image&),parx_nb_coul%*6
      CASE 4
        BMOVE dummy%+54,parx_tab_adr%(20+ind_image&),parx_nb_coul%*6
      CASE 8
        BMOVE dummy%+166,parx_tab_adr%(20+ind_image&),parx_nb_coul%*6
      ENDSELECT
    ENDIF
    '
    IF parx_niv_gris!=TRUE
      parx_options_trm&=&X1010
    ELSE
      parx_options_trm&=&X110
    ENDIF
    '
    LONG{img_mfdb%(12)}=parx_tab_adr%(4)
    '
    LONG{img_mfdb%(11)}=0
    WORD{img_mfdb%(11)+4}=WORD{img_mfdb%(12)+4}
    WORD{img_mfdb%(11)+6}=WORD{img_mfdb%(12)+6}
    WORD{img_mfdb%(11)+8}=WORD{img_mfdb%(12)+8}
    WORD{img_mfdb%(11)+10}=0
    WORD{img_mfdb%(11)+12}=nb_plan&
    '
    @declare_parx_trm
    retour_trm%=C:parx_do_trm%(W:0,W:parx_choix_trm&,L:0,L:img_mfdb%(12),L:parx_tab_adr%(5),L:img_mfdb%(11),L:parx_tab_adr%(20+ind_image&),W:parx_options_trm&)
    parx_trm_error
    IF retour_trm%>=0
      IF retour_trm%>0
        '
        parx_taille_trame%=2*WORD{img_mfdb%(11)+8}*WORD{img_mfdb%(11)+6}*WORD{img_mfdb%(11)+12}
        '
        IF retour_trm%=&H7FFFFFFF
          parx_reserve_blk(3,MAX(16,C:parx_manag_size%()-parx_taille_trame%))
        ELSE
          parx_reserve_blk(3,retour_trm%)
        ENDIF
        IF retour_mem%>=4
          LONG{parx_tab_adr%(3)}=retour_mem%
        ENDIF
        IF retour_mem%<retour_trm%
          exit!=TRUE
          retour_trm%=-2
        ENDIF
        '
        dummy%=LONG{img_mfdb%(11)}
        IF dummy%=LONG{img_mfdb%(12)}
          parx_changer_de_buffer!=FALSE
          IF parx_taille_trame%>parx_size_tab%(4)
            parx_agrand_blk(4,parx_taille_trame%)
            IF retour_mem%>=parx_taille_trame%
              LONG{img_mfdb%(11)}=parx_tab_adr%(4)
            ELSE
              exit!=TRUE
              retour_trm%=-2
            ENDIF
          ENDIF
        ELSE IF dummy%=0
          parx_changer_de_buffer!=TRUE
          parx_reserve_blk(6,parx_taille_trame%)
          IF retour_mem%>=parx_taille_trame%
            LONG{img_mfdb%(11)}=parx_tab_adr%(6)
          ELSE
            exit!=TRUE
            retour_trm%=-2
          ENDIF
        ENDIF
        '
      ENDIF
      '
      LONG{img_mfdb%(12)}=parx_tab_adr%(4)
      IF parx_changer_de_buffer!=TRUE
        LONG{img_mfdb%(11)}=parx_tab_adr%(6)
      ELSE
        LONG{img_mfdb%(11)}=parx_tab_adr%(4)
      ENDIF
      '
      IF exit!=FALSE
        retour_trm%=C:parx_do_trm%(W:1,W:parx_choix_trm&,L:parx_tab_adr%(3),L:img_mfdb%(12),L:parx_tab_adr%(5),L:img_mfdb%(11),L:parx_tab_adr%(20+ind_image&),W:parx_options_trm&)
      ENDIF
      parx_trm_error
      IF retour_trm%=0 AND exit!=FALSE
        exit!=TRUE
      ELSE
        exit!=FALSE
      ENDIF
      '
    ENDIF
    '
  ENDIF
  '
  IF exit!=TRUE
    IF nb_plan&=8 AND ind_image&=1 AND parx_size_tab%(5)/6=16
      WORD{parx_tab_adr%(21)+6}=WORD{parx_tab_adr%(21)+1530}
      WORD{parx_tab_adr%(21)+8}=WORD{parx_tab_adr%(21)+1532}
      WORD{parx_tab_adr%(21)+10}=WORD{parx_tab_adr%(21)+1534}
    ENDIF
    '
    IF parx_size_tab%(10+ind_image&)>0
      parx_libere_blk(10+ind_image&)
    ENDIF
    parx_reserve_blk(10+ind_image&,parx_taille_trame%)
    IF parx_changer_de_buffer!=TRUE
      parx_libere_blk(4)
      LONG{img_mfdb%(11)}=parx_tab_adr%(6)
    ELSE
      IF parx_taille_trame%<parx_size_tab%(4)
        parx_shrink_blk(4,parx_taille_trame%)
      ENDIF
      LONG{img_mfdb%(11)}=parx_tab_adr%(4)
    ENDIF
    BMOVE img_mfdb%(11),img_mfdb%(ind_image&),20
    WORD{img_mfdb%(ind_image&)+10}=0
    IF retour_mem%>=parx_taille_trame%
      LONG{img_mfdb%(ind_image&)}=parx_tab_adr%(10+ind_image&)
      IF WORD{img_mfdb%(11)+10}=1
        trns_form(img_mfdb%(11),img_mfdb%(ind_image&))
      ELSE
        IF parx_changer_de_buffer!=FALSE
          BMOVE parx_tab_adr%(4),parx_tab_adr%(10+ind_image&),parx_taille_trame%
        ELSE
          BMOVE parx_tab_adr%(6),parx_tab_adr%(10+ind_image&),parx_taille_trame%
        ENDIF
      ENDIF
    ENDIF
  ELSE
    exit!=FALSE
  ENDIF
  make_zero_mfdb(img_mfdb%(11))
  make_zero_mfdb(img_mfdb%(12))
  '
  RETURN exit!
ENDFUNC
> PROCEDURE parx_reserve_blk(parx_index%,parx_taille%)
  IF parx_tab_adr%(parx_index%)=0
    retour_mem%=C:parx_blk_malloc%(L:V:parx_tab_adr%(0),L:V:parx_size_tab%(0),W:parx_index%,W:parx_nb_slot&,L:parx_taille%,W:0)
    IF retour_mem%<parx_taille%
      ~FORM_ALERT(1,CHAR{OB_SPEC(adtree%(6),12)})
      parx_libere_blk(parx_index%)
    ENDIF
  ENDIF
RETURN
> PROCEDURE parx_shrink_blk(parx_index%,parx_taille%)
  IF parx_tab_adr%(parx_index%)<>0 OR parx_size_tab%(parx_index%)<>0
    retour_mem%=C:parx_blk_shrink%(L:V:parx_tab_adr%(0),L:V:parx_size_tab%(0),W:parx_index%,W:parx_nb_slot&,L:parx_taille%,L:-1)
  ENDIF
RETURN
> PROCEDURE parx_agrand_blk(parx_index%,parx_taille%)
  IF parx_tab_adr%(parx_index%)<>0 OR parx_size_tab%(parx_index%)<>0
    retour_mem%=C:parx_blk_grow%(L:V:parx_tab_adr%(0),L:V:parx_size_tab%(0),W:parx_index%,W:parx_nb_slot&,L:parx_taille%,W:0,L:-1)
  ENDIF
RETURN
> PROCEDURE parx_libere_blk(parx_index%)
  IF parx_tab_adr%(parx_index%)>0
    ~C:parx_blk_free%(L:V:parx_tab_adr%(0),L:V:parx_size_tab%(0),W:parx_index%,W:parx_nb_slot&)
  ENDIF
RETURN
> PROCEDURE parx_shrink_tot
  dummy%=2048
  FOR i%=0 TO parx_nb_slot&-1
    ADD dummy%,parx_size_tab%(i%)
  NEXT i%
  taille_parx_reserve%=C:parx_manag_shrink%(L:dummy%)
RETURN
> PROCEDURE parx_reserve_tot
  dummy%=0
  FOR i%=0 TO parx_nb_slot&-1
    ADD dummy%,parx_size_tab%(i%)
  NEXT i%
  taille_parx_reserve%=C:parx_manag_grow%(0,L:ADD(dummy%,MAX(0,GEMDOS(72,L:-1)-51200)))
RETURN
> PROCEDURE parx_trm_init
  IF parx_tab_adr%(0)>0
    @declare_parx_trm
    retour_trm%=C:parx_do_trm%(W:2,W:ABS(parx_carte_graphique!),L:0,L:0,L:0,L:0,L:0,W:0)
    parx_trm_error
  ENDIF
RETURN
> PROCEDURE parx_trm_exit
  IF parx_tab_adr%(0)>0
    @declare_parx_trm
    ~C:parx_do_trm%(W:3,W:0,L:0,L:0,L:0,L:0,L:0,W:0)
  ENDIF
RETURN
> PROCEDURE parx_trm_error
  IF retour_trm%<>-2 AND retour_trm%<0
    ~FORM_ALERT(1,"[1][| Erreur TRM: "+STR$(retour_trm%)+" |][Annuler]")
  ENDIF
RETURN
'
> PROCEDURE tout_fermer
  FOR i%=0 TO 4
    ferme_win(i%)
  NEXT i%
RETURN
> PROCEDURE control
  ~WIND_UPDATE(1)
  ~WIND_UPDATE(3)
  v_hide_c
RETURN
> PROCEDURE uncontrol
  ~WIND_UPDATE(2)
  ~WIND_UPDATE(0)
  v_show_c
RETURN
> PROCEDURE delai
  ~EVNT_TIMER(75)
RETURN
> PROCEDURE gest_err
  SELECT ERR
  CASE -33
    err_type&=0
  CASE -36
    err_type&=1
  CASE -46
    err_type&=2
  CASE 37
    err_type&=3
  CASE -13
    err_type&=4
  CASE -11
    err_type&=5
  CASE -10
    err_type&=6
  CASE 26
    err_type&=7
  DEFAULT
    err_type&=8
  ENDSELECT
  uncontrol
  IF err_type&=8
    ~FORM_ALERT(1,ERR$(ERR))
  ENDIF
  err_choix&=FORM_ALERT(1,CHAR{OB_SPEC(adtree%(6),err_type&+1)})
  IF err_type&<7
    SELECT endroit%
    CASE 1
      RESUME endroit1
    CASE 2
      RESUME endroit2
    CASE 3
      RESUME endroit3
    CASE 14
      RESUME endroit14
    CASE 15
      RESUME endroit15
    CASE 16
      RESUME endroit16
    CASE 17
      RESUME endroit17
    CASE 18
      RESUME endroit18
    CASE 23
      RESUME endroit23
    ENDSELECT
  ENDIF
RETURN
> PROCEDURE control_form(dial&)
  ~WIND_UPDATE(1)
  ~WIND_UPDATE(3)
  ~FORM_CENTER(adtree%(dial&),xd&(dial&),yd&(dial&),ld&(dial&),hd&(dial&))
  DEC xd&(dial&)
  DEC yd&(dial&)
  ADD ld&(dial&),5
  ADD hd&(dial&),5
  ~FORM_DIAL(0,0,0,0,0,xd&(dial&),yd&(dial&),ld&(dial&),hd&(dial&))
  ~OBJC_DRAW(adtree%(dial&),0,3,screenx&,screeny&,screenl&,screenh&)
RETURN
> PROCEDURE uncontrol_form(dial&)
  ~WIND_UPDATE(2)
  ~WIND_UPDATE(0)
  ~FORM_DIAL(3,0,0,0,0,xd&(dial&),yd&(dial&),ld&(dial&),hd&(dial&))
RETURN
> PROCEDURE v_hide_c
  CONTRL(0)=123
  CONTRL(1)=0
  CONTRL(3)=0
  CONTRL(6)=vdi_handle&
  VDISYS
RETURN
> PROCEDURE v_show_c
  CONTRL(0)=122
  CONTRL(1)=0
  CONTRL(3)=1
  CONTRL(6)=vdi_handle&
  INTIN(0)=1
  VDISYS
RETURN
> FUNCTION fileselector2$(path$,name$)
  LOCAL path1$,name1$,choix_file&,retour_file&
  LET path1$=path$
  LET name1$=name$
  retour_file&=@fi_input(path1$,name1$,choix_file&)
  IF retour_file&=0 OR choix_file&=0
    RETURN c0$
  ELSE
    RETURN LEFT$(path1$,RINSTR(path1$,"\"))+name1$
  ENDIF
ENDFUNC
> FUNCTION fi_input(VAR fi_path$,fi_name$,fi_choix&)
  '
  GCONTRL(0)=90
  GCONTRL(1)=0
  GCONTRL(2)=2
  GCONTRL(3)=2
  GCONTRL(4)=0
  '
  fi_path$=fi_path$+SPACE$(300)
  fi_name$=fi_name$+SPACE$(100)
  '
  ADDRIN(0)=V:fi_path$
  ADDRIN(1)=V:fi_name$
  '
  GEMSYS
  '
  fi_path$=CHAR{V:fi_path$}+c0$
  fi_name$=CHAR{V:fi_name$}+c0$
  fi_choix&=GINTOUT(1)
  '
  RETURN GINTOUT(0)
ENDFUNC
> FUNCTION window_create(cp_win_recu%)
  '
  GCONTRL(0)=100
  GCONTRL(1)=5
  GCONTRL(2)=1
  GCONTRL(3)=0
  GCONTRL(4)=0
  '
  GINTIN(0)=cp_win_recu%
  GINTIN(1)=30
  GINTIN(2)=30
  GINTIN(3)=30
  GINTIN(4)=30
  '
  GEMSYS
  '
  RETURN GINTOUT(0)
ENDFUNC
> FUNCTION ev_multi(em_flags&,em_cl&,em_ma&,em_st&,em_ct%,VAR em_mx&,em_my&,em_mk&,em_kbd%,em_key%,em_click&)
  '
  GCONTRL(0)=25
  GCONTRL(1)=16
  GCONTRL(2)=7
  GCONTRL(3)=1
  GCONTRL(4)=0
  '
  GINTIN(0)=em_flags&
  GINTIN(1)=em_cl&
  GINTIN(2)=em_ma&
  GINTIN(3)=em_st&
  GINTIN(4)=0
  GINTIN(5)=0
  GINTIN(6)=0
  GINTIN(7)=0
  GINTIN(8)=0
  GINTIN(9)=0
  GINTIN(10)=0
  GINTIN(11)=0
  GINTIN(12)=0
  GINTIN(13)=0
  INT{GINTIN+28}=WORD(em_ct%)
  INT{GINTIN+30}=WORD(SWAP(em_ct%))
  '
  ADDRIN(0)=m_adr%
  '
  GEMSYS
  '
  em_mx&=GINTOUT(1)
  em_my&=GINTOUT(2)
  em_mk&=GINTOUT(3)
  em_kbd%=GINTOUT(4)
  em_key%=GINTOUT(5)
  em_click&=GINTOUT(6)
  '
  m_type&=INT{m_adr%}
  m_ap_id&=INT{m_adr%+2}
  m_nothing&=INT{m_adr%+4}
  m_titre&=INT{m_adr%+6}
  m_fenetre&=INT{m_adr%+6}
  m_entree&=INT{m_adr%+8}
  m_x&=INT{m_adr%+8}
  m_y&=INT{m_adr%+10}
  m_l&=INT{m_adr%+12}
  m_h&=INT{m_adr%+14}
  '
  RETURN GINTOUT(0)
ENDFUNC
> PROCEDURE ob_draw(ob_adr%,ob_start&,ob_dept&,ob_xclip&,ob_yclip&,ob_lclip&,ob_hclip&)
  '
  GCONTRL(0)=42
  GCONTRL(1)=6
  GCONTRL(2)=1
  GCONTRL(3)=1
  GCONTRL(4)=0
  '
  GINTIN(0)=ob_start&
  GINTIN(1)=ob_dept&
  GINTIN(2)=ob_xclip&
  GINTIN(3)=ob_yclip&
  GINTIN(4)=ob_lclip&
  GINTIN(5)=ob_hclip&
  '
  ADDRIN(0)=ob_adr%
  '
  GEMSYS
  '
RETURN
> FUNCTION s_exist(exist_name$)
  LOCAL existe&
  IF LEN(exist_name$)=0 OR exist_name$=c0$
    RETURN FALSE
  ELSE
    existe&=GEMDOS(61,L:V:exist_name$,W:0)
    IF existe&>0
      ~GEMDOS(62,W:existe&)
      RETURN TRUE
    ELSE
      RETURN FALSE
    ENDIF
  ENDIF
ENDFUNC
> FUNCTION test_cookie(cookie_name$,VAR cookie_valeur%)
  LOCAL read_cook%,nom_cook%,cookie%
  '
  nom_cook%=CVL(cookie_name$)
  cookie%=LPEEK(&H5A0)
  cookie_valeur%=0
  '
  IF cookie%<>0
    REPEAT
      read_cook%=LPEEK(cookie%)
      cookie_valeur%=LPEEK(cookie%+4)
      ADD cookie%,8
    UNTIL read_cook%=0 OR read_cook%=nom_cook%
    IF read_cook%=nom_cook%
      RETURN TRUE
    ELSE
      RETURN FALSE
    ENDIF
  ELSE
    RETURN FALSE
  ENDIF
ENDFUNC
> PROCEDURE make_zero_mfdb(pmfdb%)
  LONG{pmfdb%}=0
  LONG{ADD(pmfdb%,4)}=0
  LONG{ADD(pmfdb%,8)}=0
  LONG{ADD(pmfdb%,12)}=0
  LONG{ADD(pmfdb%,16)}=0
RETURN
> PROCEDURE make_xyarray(xq0&,yq0&,xq1&,yq1&,xz0&,yz0&,xz1&,yz1&)
  WORD{pxyarray%}=xq0&
  WORD{ADD(pxyarray%,2)}=yq0&
  WORD{ADD(pxyarray%,4)}=xq1&
  WORD{ADD(pxyarray%,6)}=yq1&
  WORD{ADD(pxyarray%,8)}=xz0&
  WORD{ADD(pxyarray%,10)}=yz0&
  WORD{ADD(pxyarray%,12)}=xz1&
  WORD{ADD(pxyarray%,14)}=yz1&
RETURN
> PROCEDURE vro_cpyfm(pscr_mfdb%,pdes_mfdb%)
  '
  CONTRL(1)=4
  CONTRL(2)=0
  CONTRL(3)=1
  CONTRL(4)=0
  CONTRL(6)=vdi_handle&
  LONG{ADD(CONTRL,14)}=pscr_mfdb%
  LONG{ADD(CONTRL,18)}=pdes_mfdb%
  INTIN(0)=3
  BMOVE pxyarray%,PTSIN,16
  '
  VDISYS 109
  '
RETURN
> PROCEDURE trns_form(pscr_mfdb%,pdes_mfdb%)
  CONTRL(1)=0
  CONTRL(3)=0
  CONTRL(6)=vdi_handle&
  LONG{ADD(CONTRL,14)}=pscr_mfdb%
  LONG{ADD(CONTRL,18)}=pdes_mfdb%
  VDISYS 110
RETURN
> PROCEDURE vs_color(ind_color&)
  IF parx_size_tab%(ind_color&)>0
    dummy%=MAX(2,MIN(parx_size_tab%(ind_color&)/6,256))-1
    FOR i&=0 TO dummy%
      CONTRL(1)=0
      CONTRL(3)=4
      CONTRL(6)=vdi_handle&
      INTIN(0)=i&
      INTIN(1)=WORD{parx_tab_adr%(ind_color&)+i&*6}
      INTIN(2)=WORD{parx_tab_adr%(ind_color&)+i&*6+2}
      INTIN(3)=WORD{parx_tab_adr%(ind_color&)+i&*6+4}
      VDISYS 14
    NEXT i&
  ENDIF
RETURN
> PROCEDURE vq_color
  IF parx_size_tab%(20)>0
    dummy%=MAX(2,MIN(parx_size_tab%(20)/6,256))-1
    FOR i&=0 TO dummy%
      CONTRL(1)=0
      CONTRL(3)=2
      CONTRL(6)=vdi_handle&
      INTIN(0)=i&
      INTIN(1)=1
      VDISYS 26
      WORD{parx_tab_adr%(20)+i&*6}=INTOUT(1)
      WORD{parx_tab_adr%(20)+i&*6+2}=INTOUT(2)
      WORD{parx_tab_adr%(20)+i&*6+4}=INTOUT(3)
    NEXT i&
  ENDIF
RETURN
