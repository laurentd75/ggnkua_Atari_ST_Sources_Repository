'This program started after I wrote a program for a friend to copy 
'out a folder on to a root directory or to a named folder on the destination 
'drive. Then I said, can I now copy a full disk without having to write 
'out a listing for it to get the names of the files / folders to copy.

'The result is before you, being very ''USER FRIENDLY''. The only important 
'thing to remember is that it 'SHOULD BE THE LAST FILE IN THE AUTO 
'FOLDER'. On AUTO loading for the first time, it will look for a file 
'with the name 'MENTOR.INF', if this is not found, then it will prompt 
'you for the Source drive, Destination drive, and then it will write 
'a file called 'MENTOR.INF' from where on next AUTO booting up it will 
'get the data required and not bother you at all.

'I have limited the program only to the extent that it will not copy 
'the AUTO folder and it will leave all .AC? files alone, as these accessories 
'and the AUTO folder are not required to work from a Ram disk. These files
'may be added if required.

'And there you have it very simple in operation.

'I  use  the program daily to boot disks into Ram disks,  this is  the  easy 
'option  when most RAM disk copying programs do not give you enough room  to 
'enter  long  filenames with drive and suffixes.  But the program  could  be 
'amended to copy a single file or specific files.

'Mac Marsden



@start
> PROCEDURE start
  CLS
  PRINT TAB(25);"'' T.B.F.T.R.D.C.S.T.C.O.T.U. ''"
  PRINT
  PRINT "   ' THE BEST FLOPPY TO RAM DISK COPIER SINCE THE CREATION OF THE UNIVERSE '"
  PRINT "                                  ________"
  PRINT "                                ? Probably ?"
  PRINT "                                  ÿÿÿÿÿÿÿÿ"
  @set_up
  @read_diskette
  @copy_folder
  END
RETURN
> PROCEDURE drive_dir(drive$)                     ! read drives
  path_counter&=0
  path_count&=0
  ERASE path$(),file$(),length%()
  DIM path$(1000),file$(1000),length%(1000)
  ABSOLUTE length%,BASEPAGE+154
  ABSOLUTE attrib|,BASEPAGE+149
  ~GEMDOS(26,L:BASEPAGE+128)  ! fsetdta
  FOR d%=1 TO LEN(drive$)
    read_dir(MID$(drive$,d%,1)+":\")
    WHILE path_count&>path_counter&
      INC path_counter&
      read_dir(path$(path_counter&))
    WEND
  NEXT d%
RETURN
> PROCEDURE read_dir(path$)                       ! read drives
  search$=path$+"*.*"+CHR$(0)
  finished&=GEMDOS(78,L:V:search$,&X10000)
  DO UNTIL finished&
    file$=CHAR{BASEPAGE+158}
    IF file$<>"." AND file$<>".."
      IF BTST(attrib|,4)
        INC path_count&
        path$(path_count&)=path$+file$+"\"
      ELSE
        INC file_count&
        file$(file_count&)=path$+file$
        length%(file_count&)=length%
      ENDIF
    ENDIF
    finished&=GEMDOS(79)  ! fsnext
  LOOP
RETURN
> PROCEDURE read_diskette                         ! read disk for folders
  drive_dir(z$)
  f&=1
  PRINT AT(15,12);"Creating Folders....."
  DO
    xx$=MID$(path$(f&),4,LEN(path$(f&))-4)
    miss1=INSTR(xx$,"AUTO")
    miss2=INSTR(xx$,".AC")
    IF miss1>0 OR miss2>0               ! if auto or .Ac file found then
      GOTO miss                         ! do not make directory
    ENDIF
    IF EXIST(xx$)                       ! if the file exists do not re-make it
      GOTO miss
    ELSE
      MKDIR v$+":\"+xx$                 ! Make directory
    ENDIF
  miss:
    INC f&
  LOOP UNTIL f&>path_count&
RETURN
> PROCEDURE copy_folder                           ! do the copying
  PRINT AT(37,12);"\ Copying Files............"
  PRINT
  cnt&=1
  DO
    IF MID$(file$(cnt&),4,LEN(c$))=c$
      maxmem=HIMEM                              ! find the address used by gfa
      free=FRE(0)                               ! find the available ram space
      RESERVE (1000)                            ! allow 1000 bytes for system use
      minmem=HIMEM                              ! find base address of our buffer
      RESERVE (free)                            ! reset the himem pointer
      IF (length%(cnt&)<(maxmem-minmem))        ! check there is room for file
        addr=minmem                             ! point to start of buffer
        rose=0
        mac=0
        rose=INSTR(file$(cnt&),"AUTO")
        mac=INSTR(file$(cnt&),".AC")
        IF rose>0 OR mac>0              ! if auto or .ac file do not copy
          GOTO anthony
        ENDIF
        BLOAD file$(cnt&),addr                                  ! load file
        s$=RIGHT$(file$(cnt&),LEN(file$(cnt&))-1)
        BSAVE v$+s$,addr,length%(cnt&)                          ! save file
      ELSE
        PRINT "File too long for buffer ";file$(cnt&)
      ENDIF
    ENDIF
  anthony:
    INC cnt&
  LOOP UNTIL cnt&>file_count&
  PRINT
  PRINT TAB(10);" Process Completed Successfully   ~  Have a nice day - Mac"
RETURN
> PROCEDURE set_up                                ! CHECK FOR MENTOR,INF
  @check_what_drive
  IF EXIST("A:\MENTOR.INF")             ! if file exists then load it
    OPEN "i",#1,"MENTOR.INF"
    INPUT #1,p$
    z$=LEFT$(p$,1)
    v$=RIGHT$(p$,1)
    CLOSE #1
  ELSE
    PRINT AT(1,20);"SET UP ROUTINE"                     ! if file not found
    PRINT "PLEASE ENTER SOUCE DRIVE [ ";b$;" ]";        ! get user information
    FORM INPUT 1,z$                                     ! and create file.
    PRINT "PLEASE INPUT DESTINATION DRIVE [ ";b$;" ]";
    FORM INPUT 1,v$
    PRINT "DATA CORRECT [ Y/N ]"
    a|=INP(2)
    SELECT a|
    CASE "N","n"
      p|=20
      DO
        PRINT AT(1,p|);SPC(60)
        INC p|
      LOOP UNTIL p|>23
      @set_up
    ENDSELECT
    p|=20
    DO
      PRINT AT(1,p|);SPC(60)
      INC p|
    LOOP UNTIL p|>23
    p$=z$+v$
    OPEN "o",#1,"a:\MENTOR.INF"
    PRINT #1,p$
    CLOSE #1
  ENDIF
RETURN
> PROCEDURE check_what_drive                      ! WHICH DRIVES ON LINE ?
  r%=BIOS(10)
  s$=BIN$(r%)
  ERASE d$()
  DIM d$(LEN(s$))
  pass=1
  FOR f=LEN(s$) DOWNTO 1
    d$(pass)=MID$(s$,f,1)
    INC pass
  NEXT f
  IF d$(1)="1"
    dr$="A"
  ELSE
    IF d$(2)="1"
      dr$="B"
    ELSE
      IF d$(3)="1"
        dr$="C"
      ELSE
        IF d$(4)="1"
          dr$="D"
        ENDIF
      ENDIF
    ENDIF
  ENDIF
  pass=1
  FOR f=LEN(s$) DOWNTO 1
    IF MID$(s$,f,1)="1"
      b$=b$+CHR$(pass+64)+","
    ENDIF
    INC pass
  NEXT f
RETURN
