' (C) Terry King / ST Beermat 1994
'
noelement%=256
DIM stack%(1000)
DIM a%(noelement%)
FOR a%=0 TO noelement%-1
  a%(a%)=RANDOM(256)
NEXT a%
PRINT "SORTING ";noelement%;" ELEMENTS"
startime=TIMER
quicksort(0,noelement%)
stoptime=TIMER
PRINT "COMPLETED IN ";(stoptime-startime)/200;" SECONDS"
END
'
PROCEDURE quicksort(m%,n%)
  pointer%=0
  empty%=FALSE
  push(m%,n%)
  WHILE NOT empty%
    i%=m%
    j%=n%
    p%=a%((i%+j%) DIV 2)                        !*
    REPEAT
      WHILE a%(i%)<p%                           !*
        INC i%
      WEND
      WHILE a%(j%)>p%                           !*
        DEC j%
      WEND
      IF i%<=j%
        SWAP a%(i%),a%(j%)                      !*
        INC i%
        DEC j%
      ENDIF
    UNTIL i%>j%
    IF m%<j%
      push(m%,j%)
    ENDIF
    IF i%<n%
      push(i%,n%)
    ENDIF
    pop
  WEND
RETURN
'
PROCEDURE push(first%,second%)
  stack%(pointer%)=first%
  stack%(pointer%+1)=second%
  ADD pointer%,2
RETURN
'
PROCEDURE pop
  empty%=FALSE
  SUB pointer%,2
  m%=stack%(pointer%)
  n%=stack%(pointer%+1)
  IF pointer%=0
    empty%=TRUE
  ENDIF
RETURN
' There,  all done. Now then, all you provide to the quicksort
' procedure  is  the  number of first and  last  elements  but
' you'll  have  to change the lines with an  asterisk  to  the
' array  that you want to sort.  String arrays can  be  sorted
' exactly the same way,  for example if you were using this to
' do the directory sort in the previous answer just replace a%
' with file$. Nothing to it.
' You can also adapt it to sort a number of arrays at once, if
' you  were sorting the filenames and wanted their file  sizes
' as well then add an extra line where the SWAP occurs.
' ie. SWAP file$(i%),file$(j%)
'     SWAP size%(i%),size%(j%)
