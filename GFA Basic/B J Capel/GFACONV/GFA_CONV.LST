Rem index for label_arrays
Dim Labels%(500),Labelsp%(500)
Stoe$="Q"
Nol%=0
Li%=0
Lip%=0
Flag_then!=0
Dq$=Chr$(34)
Fs:
Count_if%=0
Gosub Hello
Alert 2,"Stop on error|",2,"YES|NO",Button
If Button=2
  Stoe$="N"
Else
  Stoe$="Y"
Endif
Cls
File_in$="TEST.BAS"
File_out$="RESULT.LST"
Print "Select input file "
Fileselect "\*.*","TEST.LST",File_in$
If File_in$="" Then
  Goto Fs
Endif
Print "Select output file "
Fileselect "\*.*","RESULT.LST",File_out$
If File_in$=File_out$
  Alert 1,"In and outfile must|be different",1,"OK",Dummy%
  Goto Fs
Endif
If File_out$="" Then
  Goto Fs
Endif
Gosub Phase1
Cls
M$="End of Phase I|Press return"
Alert 1,M$,1," OK ",Button
Gosub Phase2
Gosub Show_stats
End
Procedure Phase1
  Message$="P H A S E  I"
  Gosub Title
  On Error Gosub Fehler
  File_ende=0
  Zeile%=-1
  Old_zeile%=0
  Open "I",#1,File_in$
  Do
    Line Input #1,L$
    Exit If File_ende
    Inc Nol%
    L2$=L$
    Gosub Get_token
    If Val?(Token$)=0
      Gosub No_line_number
    Else
      Print At(0,10);" LINE ";Val(Token$)
      Zeile%=Val(Token$)
      Gosub Get_token
      Gosub Add_labels
    Endif
  Loop
  Close #1
Return
Procedure Phase2
  Message$="P H A S E  II"
  Gosub Title
  Print
  Print
  File_ende=0
  On Error Gosub Fehler
  Open "I",#1,File_in$
  Open "O",#2,File_out$
  Do
    Line Input #1,L$
    Exit If File_ende
    Gosub Process_line
  Loop
  While Count_if%>0
    Lout$="ENDIF"
    Gosub Prout
    Dec Count_if%
  Wend
Return
Procedure Process_line
  Local T$,Ln%
  Lout$=""
  While Count_if%>0
    Lout$="ENDIF"
    Gosub Prout
    Dec Count_if%
  Wend
  Gosub Get_token
  T$=Token$
  Ln%=Val(T$)
  If Ln%=0 Then
    Gosub No_line_number
    Goto Process_line_r
  Endif
  Zeile%=Ln%
  Print At(0,10),"Line ";Ln%
  Gosub Check_label
  If Label_found! Then
    Lout$="L"+Token$+":"
    Gosub Prout
  Endif
  If Labelp_found! Then
    Lout$="PROCEDURE "+"L"+Token$
    Gosub Prout
  Endif
  Do
    Gosub Get_token
    Gosub Process_token
    Exit If Token$=""
  Loop
  Process_line_r:
Return
Procedure Process_token
  Local T$
  T$=Token$
  If T$="IF" Then
    Gosub Process_if
    Goto Process_token_r
  Endif
  If Token$="THEN" Then
    Gosub Process_then
    Goto Process_token_r
  Endif
  If T$="GOTO" Then
    Gosub Process_goto
    Goto Process_token_r
  Endif
  If T$="GOSUB" Then
    Gosub Process_gosub
    Goto Process_token_r
  Endif
  If T$="ON" Then
    Gosub Process_on
    Goto Process_token_r
  Endif
  If T$="RESTORE" Then
    Gosub Process_restore
    Goto Process_token_r
  Endif
  If T$="REM" Then
    Gosub Process_rem
    Goto Process_token_r
  Endif
  If T$=Dq$ Then
    Gosub Process_dq
    Goto Process_token_r
  Endif
  If T$="" Or T$=":" Then
    Gosub Prout
  Else
    Lout$=Lout$+T$+" "
  Endif
  Process_token_r:
Return
Procedure No_line_number
  Local X$
  Print
  Print Using "Line number expected. last number read: ###### ",Zeile%
  Print "Line in error --> "
  X$=Token$+L$
  X$=X$+Space$(79-Len(X$))
  Print X$
  If Stoe$="Y" Then
    Input "Press return to continue -> ",Dummy$
  Endif
  L$=""
  Lout$=""
  Token$=""
Return
Procedure Process_dq
  Pos=Instr(L$,Dq$)
  Lout$=Lout$+Dq$+Left$(L$,Pos)
  L$=Mid$(L$,Pos+1)
Return
Procedure Process_on
  Lout$=Lout$+"ON "
  Do
    Gosub Get_token
    Exit If Token$="GOSUB" Or Token$="GOTO"
    Lout$=Lout$+Token$
  Loop
  Lout$=Lout$+" "+Token$+" "
  Do
    Gosub Get_token
    Exit If Token$="" Or Token$=":"
    If Token$="," Then
      Lout$=Lout$+","
    Else
      Lout$=Lout$+"L"+Token$
    Endif
  Loop
  If Token$=":" Then
    Gosub Unget_token
  Endif
  Gosub Prout
Return
Procedure Process_if
  Lout$=Lout$+"IF "
  Do
    Gosub Get_token
    Lout$=Lout$+" "+Token$
    Exit If Token$="THEN"
  Loop
  Inc Count_if%
  Gosub Unget_token
  Gosub Prout
Return
Procedure Process_then
  Gosub Get_token
  If Val(Token$)>0 Then
    Lout$=Lout$+" GOTO "+"L"+Token$
  Else
    Gosub Unget_token
  Endif
Return
Procedure Process_goto
  Lout$=Lout$+" GOTO "
  Gosub Get_token
  Lout$=Lout$+"L"+Token$
Return
Procedure Process_gosub
  Lout$=Lout$+" GOSUB "
  Gosub Get_token
  Lout$=Lout$+"L"+Token$
Return
Procedure Process_rem
  Lout$=Lout$+"REM "
  Lout$=Lout$+L$
  L$=""
Return
Procedure Process_restore
  Lout$=Lout$+"RESTORE "
  Gosub Get_token
  If Val?(Token$) Then
    Lout$=Lout$+"L"+Token$
  Endif
Return
Procedure Get_token
  Local D$
  D$=" ,:"
  Rem add doublequote
  D$=D$+Chr$(34)
  Old_token$=Token$
  L_old$=L$
  Token$=""
  Gosub Remove_blanks
  L$=Upper$(L$)
  If L$="" Then
    Goto R_get_token
  Endif
  If Instr(D$,Left$(L$,1))<>0 Then
    Token$=Left$(L$,1)
    L$=Mid$(L$,2)
    Goto R_get_token
  Endif
  While Instr(D$,Left$(L$,1))=0
    Exit If L$=""
    Token$=Token$+Left$(L$,1)
    L$=Mid$(L$,2)
  Wend
  R_get_token:
Return
Procedure Unget_token
  L$=L_old$
  Token$=Old_token$
Return
Procedure Fehler
  Local E%
  Local Y$
  If Err=26 Then
    File_ende=-1
    Resume Next
  Endif
  E%=Err
  Print "Unexpected Error ";E%
  On Error
  Error E%
  Input "press return to stop program ",Y$
  End
Return
Procedure Remove_blanks
  While Left$(L$,1)=" "
    L$=Mid$(L$,2)
  Wend
Return
Procedure Prout
  Print #2,Lout$
  Lout$=""
Return
Procedure Check_label
  Local N%
  Label_found!=0
  Labelp_found!=0
  For N%=0 To Li%
    If Ln%=Labels%(N%) Then
      Label_found!=-1
    Endif
    Exit If Label_found!
  Next N%
  For N%=0 To Lip%
    If Ln%=Labelsp%(N%) Then
      Labelp_found!=-1
    Endif
    Exit If Labelp_found!
  Next N%
Return
Procedure Add_labels
  Local X$,Flag_gs!
  Do
    X$=Token$
    If X$="GOTO" Or Token$="THEN" Then
      Gosub Get_token
      If Val(Token$)>0 Then
        Labels%(Li%)=Val(Token$)
        Inc Li%
      Else
        If Token$="GOSUB" Or Token$="GOTO" Then
          Gosub Unget_token
          X$=""
        Endif
      Endif
    Endif
    If X$="GOSUB" Then
      Gosub Get_token
      Labelsp%(Lip%)=Val(Token$)
      Inc Lip%
    Endif
    If X$="RESTORE" Then
      Gosub Get_token
      If Val?(Token$)<>0 Then
        Labels%(Li%)=Val(Token$)
        Inc Li%
      Endif
    Endif
    If X$="ON" Then
      Repeat
        Gosub Get_token
      Until (Token$="GOSUB") Or (Token$="GOTO")
      If Token$="GOSUB" Then
        Flag_gs!=-1
      Else
        Flag_gs!=0
      Endif
      Repeat
        Gosub Get_token
        If Val?(Token$)<>0 Then
          If Flag_gs! Then
            Labelsp%(Lip%)=Val(Token$)
            Inc Lip%
          Else
            Labels%(Li%)=Val(Token$)
            Inc Li%
          Endif
        Endif
      Until Token$=":" Or Token$=""
    Endif
    Gosub Get_token
    Exit If Token$=""
  Loop
Return
Procedure Rp
  Close
  File_ende=0
  On Error Gosub Fehler
  Open "I",#1,File_out$
  Do
    Line Input #1,L$
    Exit If File_ende
    Print L$
    If Inkey$<>"" Then
      Input Dummy$
    Endif
  Loop
Return
Procedure Title
  Local L
  Cls
  L=Len(Message$)
  Print At(Fix((40-L)/2),5),Message$
Return
Procedure Hello
  Local M$
  M$="KLAUS MULDER|OBERE HAUPTSTRASSE 4|8051 MASSENHAUSEN|"
  M$=M$+"Tel: 08165-8437"
  Cls
  Deftext 1,16,0,32
  Text 50,200,"BASIC CONVERTER -KM- 16AUG86"
  Deftext 1,0
  Pause 150
  Alert 1,M$,1," RETURN ",Button
Return
Procedure Show_stats
  Cls
  M$=" END OF CONVERSION    |"
  M$=M$+"Lines: "+Str$(Nol%)+"|"+"Labels: "+Str$(Li%)
  M$=M$+"|"+"Procedures: "+Str$(Lip%)
  Alert 1,M$,1," OK ",Button
Return
Rem
Rem  following procedures used for debugging
Rem  =======================================
Rem
Rem (will print the input-file)
Procedure Fp
  Local Y$
  Close
  File_ende=0
  Open "I",#1,File_in$
  On Error Gosub Fehler
  Do
    Line Input #1,Y$
    Exit If File_ende
    Print Y$
  Loop
Return
Rem (will make a little basic file
Procedure Make_file
  Local Y$
  Close
  Open "O",#2,"TEST.LST"
  Do
    Line Input Y$
    Exit If Y$=""
    Print #2,Y$
  Loop
  Close
Return
Procedure Look_label
  Local Ln%,N%
  Input "Enter label# for GOTO -->";Ln%
  N%=-1
  Do
    Inc N%
    Exit If Labels%(N%)=Ln% Or N%=Li%
  Loop
  If Labels%(N%)=Ln% Then
    Print "Found !. Index  ";N%
  Else
    Print "label for GOTO  not found "
  Endif
Return
Procedure Look_labelp
  Local Ln%,N%
  Input "Enter label# for procedure -->";Ln%
  N%=-1
  Do
    Inc N%
    Exit If Labelsp%(N%)=Ln% Or N%=Lip%
  Loop
  If Labelsp%(N%)=Ln% Then
    Print "Found !. Index  ";N%
  Else
    Print "label for procedure not found "
  Endif
Return
