' ----------------------------------------------------------------------------
'      B R I C K     W O R K S
'      By    Paul Pratt   &    Stephen Everman
'      (C) 1988  ANTIC Publishing inc.
' ------------------------------------------------------------------------------
If Xbios(4)<>0       !CHECK RESOLUTION
  Alert 1,"  |  B R I C K   W O R K S  | | REQUIRES  LOW  RESOLUTION",1," SORRY ",B
  End
Endif
'
Reserve Fre(0)-32768  !set aside memory for flip screen
Vsync
Dim Obj$(20),Mask$(20),In_colors(16),Sm_obj$(7),Spider$(10),Spi_mask$(2),Treas$(15)
Dim T_mask$(15),Lrg_obj$(15),Sm_msk$(7)
Dim Scr(22,56),Spi_x(10),Spi_y(10),Up_down(10),Momentum(10)
Dim Spi_ofs(10),Ladder_doing(10),Ladder_ofs(10),Spi_trap(10),Spi_follow(10)
On Break Gosub Fini
Deftext 6,0,0,6
Cls
@Equate
@Get_in_colors
@Joy_init
@Set_pro_col
@In_hi_score
@In_objects
@Score_board
@Screen_drw
Hidem
Logical_base=1102
Physical_base=1118
S1%=Lpeek(Logical_base)
Base%=S1%
S2%=S1%-32768
Vsync
Slpoke Logical_base,S2%
Cls
S1=0
S2=1
S%=S1%*S1+S2%*S2
' Round=4
' @Round_next
'
Hold=True
Hold_obj=Brick
Hold$=Sm_obj$(Brick)
Hold_msk$=Sm_msk$(Brick)
@Main
' ----------------------------------------------------------
Procedure Fini
  Vsync
  Cls
  Showm
  Setcolor 0,0
  Out 4,8   !mouse on
  Alert 1,"  | B R I C K   W O R K S   | |  REMAINS   CONDEMNED  ",1,"I QUIT|RETRY",B
  If Lives<1 Or B=1
    If Score>Hi_score
      Hi_score=Score
    Endif
    '    Setcolor 0,7,7,7
    Open "R",#3,"HI_SCORE.BRK"
    Write #3,Hi_score
    Close #3
  Endif
  If B=1
    Vsync
    Slpoke Logical_base,Base%
    Slpoke Physical_base,Base%
    Reserve Fre(0)+32768  !give back memory
    Cls
    Vsync
    @Set_in_colors
    Vsync
    End
  Else
    If Lives<1  !if dead then new game
      @Equate
      Score=0
      @Score_board
      @Screen_drw
      Num_spi=1
      @Refresh_spi
      For X=0 To 5
        Spi_follow(X)=0
      Next X
    Endif
    Out 4,20
    Setcolor 0,Back_col
    Sput Main_screen$
  Endif
Return
' ---------------------------------------------------------------
Procedure Main
  Joy=0
  Vsync
  '  Pause 10
  While Play=True ! while no mouse button pressed
    '
    Joy=Peek(Joy_port2)
    Key=Peek(&HFFFC02)
    X_man=(Manx Div 16)+1
    Head=Many Div 4
    Feet=Head+5
    '
    If Key>186 And Key<197  !any function key hit
      @Rest(Key)
    Endif
    '
    If Key=225  ! UNDO key hit
      @Fini
    Endif
    '
    If (Scr(X_man,Feet+1)=0 Or Scr(X_man,Feet+1)=Safe) And Many<177
      @Fall
    Endif
    '
    If Scr(X_man,Feet+1)=Spring And Many-48>-12
      Sub Many,48
    Endif
    '
    If Joy=8    !WALK RIGHT
      If Manx<303
        For M_obj=1 To 2
          @Rise(1)
          If Ok_walk=True
            Dlr=8
            Add Manx,8
            Wave 8,4,7,2
            @Walk(M_obj)
          Endif
          For D=0 To Walktime-Num_spi
            @Spider
          Next D
        Next M_obj
      Else
        @Stand
      Endif
    Endif
    '
    If Joy=4   !WALK LEFT
      If Manx>1
        For M_obj=3 To 4
          @Rise(-1)
          If Ok_walk=True
            Dlr=-8
            Sub Manx,8
            Wave 8,4,7,2
            @Walk(M_obj)
          Endif
          For D=0 To Walktime-Num_spi
            @Spider
          Next D
        Next M_obj
      Else
        @Stand
      Endif
    Endif
    '
    If Joy=2 Or Joy=6 Or Joy=10      !ladder down
      If Scr(X_man,Feet+1)=Ladder
        If M_obj=5
          M_obj=6
        Else
          M_obj=5
        Endif
        Add Many,4
        Wave 8,4,7,2
        @Walk(M_obj)
        For D=0 To Climbtime-Num_spi
          @Spider
        Next D
      Else
        @Stand
      Endif
    Endif
    '
    At_feet=Scr(X_man,Feet)
    If Joy=1 Or Joy=5 Or Joy=9            !ladder up
      If Scr(X_man,Feet)=Ladder      !ladder up
        If M_obj=5
          M_obj=6
        Else
          M_obj=5
        Endif
        Sub Many,4
        Wave 8,4,7,2
        @Walk(M_obj)
        For D=0 To Climbtime-Num_spi
          @Spider
        Next D
      Else
        @Stand
      Endif
    Endif
    '
    '
    If Joy=130 Or Joy=129
      @Tromp
    Endif
    If Joy=136 Or Joy=132
      @Move_brick
    Endif
    '
    If Joy>12 And Joy<>136 And Joy<>132 And Joy<>129
      Release=True
      @Stand
    Endif
    '
    If Joy=0 Or Joy=5 Or Joy=9 Or Joy=10 Or Joy=6             !STAND
      Release=True
      @Stand
    Endif
  Wend
Return
' ------------------------------------------------------
Procedure Rest(Last)
  Setcolor 0,36
  While Peek(&HFFFC02)=Last
  Wend
  Setcolor 0,Back_col
Return
' ----------------------------------------------------
Procedure Tromp
  Liv=Lives
  Jumps=Random(10)+5
  While (Joy=130 Or Joy=129) And Scr(X_man,Feet+1)=Block And Liv=Lives
    Joy=Peek(Joy_port2)
    Sub Jumps,1
    J=Random(6)+3
    Sub Many,J
    For D=0 To 6
      @Spider
    Next D
    @Walk(7)
    Add Many,J
    Wave 8,3,5,1
    For D=0 To 6
      @Spider
    Next D
    @Walk(7)
    Exit If Scr(X_man,Feet+1)=0
    If Jumps<1
      @Who_killed
    Endif
  Wend
Return
' -------------------------------------
Procedure Who_killed
  For Check=0 To Num_spi
    If Manx=Spi_x(Check) And Many<Spi_y(Check) And Many+26>Spi_y(Check)
      Spi_kil=Check   !which spider is dead
    Endif
  Next Check
  '
  Bull=0
  Old_y=Spi_y(Spi_kil) Div 4
  X_spi=(Spi_x(Spi_kil) Div 16)+1
  Y_spi=Spi_y(Spi_kil) Div 4
  Spi_trap(Spi_kil)=0   !untrap spider
  While Scr(X_spi,Y_spi+2)=0 And Spi_y(Spi_kil)<194  !drop spider to death
    Add Spi_y(Spi_kil),4
    Add Bull,1
    Y_spi=Spi_y(Spi_kil) Div 4
    Add Many,4
    If M_obj=5
      M_obj=6
    Else
      M_obj=5
    Endif
    @Walk(M_obj)
  Wend
  @Walk(M_obj)
  '
  Scr(X_spi,Old_y)=0  !remove blocker over top of spider
  Scr(X_spi,Old_y-1)=0
  Scr(X_spi,Old_y+1)=0
  If Spi_follow(Spi_kil)<2 Or (Spi_follow(Spi_kil)>1 And Bull>8)
    @Shrink_num_spi
  Endif
Return
' ------------------------------------------------------
Procedure Shrink_num_spi
  If Spi_follow(Ss)<>6 And Num_spi>1
    @Prize_put
  Endif
  For Kill=Spi_kil To 7
    Spi_x(Kill)=Spi_x(Kill+1)
    Spi_y(Kill)=Spi_y(Kill+1)
    Spi_ofs(Kill)=Spi_ofs(Kill+1)
    Up_down(Kill)=Up_down(Kill+1)
    Momentum(Kill)=Momentum(Kill+1)
    Ladder_doing(Kill)=Ladder_doing(Kill+1)
    Ladder_ofs(Kill)=Ladder_ofs(Kill+1)
    Spi_trap(Kill)=Spi_trap(Kill+1)
    Spi_follow(Kill)=Spi_follow(Kill+1)
  Next Kill
  Sub Num_spi,1
  If Num_spi<1
    Add Round,1
    @Round_next
  Endif
Return
' ------------------------------------------------------
Procedure Prize_put
  For X=3 To 5
    Setcolor 0,X+2,X-1,0
    Pause 2
  Next X
  Print At(2,2);Chr$(7)
  Setcolor 0,Back_col
  Color 1
  Repeat
    Tx=Random(19)
    Ty=(Random(5)*40)+24
  Until Scr(Tx,(Ty Div 4)+1)=0 And Scr(Tx,(Ty Div 4)+3)=Brick
  T=Random(Round Div 2)+7
  If Random(7)=3
    T=16
  Endif
  To_score=(T-7)*20+100
  Put (Tx-1)*16,Ty+1,Treas$(T-6)
  Scr(Tx,(Ty Div 4)+1)=T
  Line 170,1,Tx*16,Ty
  Pause 3
  Sput Main_screen$
  For X=0 To 10  !Random(8)+8  !T-4
    Put (Tx-1)*16,Ty,Treas$(0)
    Pause 1
    Put (Tx-1)*16,Ty+1,Treas$(T-6)
    Pause 1
  Next X
  Sget Main_screen$
  Setcolor 0,Back_col
Return
' ----------------
' -----------------------------------------------------
Procedure Round_next
  Fantom=False
  Add Round_print,1
  If Round_print>22
    Round=Random(17)+4
  Endif
  On Round Gosub R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,R11,R12,R13,R14,R15,R16,R17,R18,R19,R20,R21,R22
  Sput Main_screen$
  Text 300,6,Round_print  !+Ex_round
  Sget Main_screen$
  If Round_print>22
    Back_col=3
  Endif
  Setcolor 0,Back_col
  If Fantom=True
    Setcolor 13,1,2,1      !save code by changing regular spi to fantom spi
  Else
    Setcolor 13,5,5,0
  Endif
  @Refresh_spi
  Inc Scr_limit
  If Random(3)=1 Or Scr_limit>4 Or Round_print>22    !new screen randomely or fifth turn
    If Round_print<23
      Num_levels=Levels
    Endif
    Scr_limit=0
    Sub Many,12
    @Screen_drw
  Endif
  @Prize_put
  Safe_time=Timer+400  !a little time befor spiders kills you, so can run
Return
' -----------------------------------------
Procedure R1
  Num_spi=1
Return
' --------------
Procedure R2
  Num_spi=2
Return
' --------------
Procedure R3
  Num_spi=3
  Levels=112
Return
' --------------
Procedure R4
  Num_spi=5
  '  Levels=112
Return
' --------------
Procedure R5
  Back_col=2
  Spi_follow(1)=2
  Num_spi=3
Return
' --------------
Procedure R6
  Num_spi=4
  Spi_follow(1)=2
Return
' --------------
Procedure R7
  Num_spi=4
  Back_col=1
  Spi_follow(2)=2
  Spi_follow(1)=2
  Levels=72
Return
' --------------
Procedure R8
  Num_spi=4
  Spi_follow(1)=2
  Spi_follow(2)=2
Return
' --------------
Procedure R9
  Num_spi=5
  Spi_follow(1)=2
  Spi_follow(2)=2
  Spi_follow(3)=2
Return
' --------------
Procedure R10
  Back_col=0
  Fantom=True
  Num_spi=4
  Spi_follow(3)=2
  Spi_follow(1)=2
  Spi_follow(2)=2
  Levels=32
Return
' --------------
Procedure R11
  Fantom=True
  Num_spi=4
  Spi_follow(2)=2
  Spi_follow(1)=2
Return
' --------------
Procedure R12
  Fantom=True
  Num_spi=5
  Spi_follow(1)=2
Return
' --------------
Procedure R13
  Fantom=True
  Num_spi=5
Return
' --------------
Procedure R14
  Back_col=1
  Setcolor 13,5,5,0
  Fantom=False
  Num_spi=3
  Spi_follow(1)=2
  Spi_follow(2)=4
Return
' --------------
Procedure R15
  Num_spi=4
  Spi_follow(3)=2
  Spi_follow(1)=4
  Spi_follow(2)=4
  Levels=32
Return
' --------------
Procedure R16
  Num_spi=5
  Back_col=2
  Spi_follow(4)=2
  Spi_follow(1)=4
  Spi_follow(2)=4
  Spi_follow(3)=2
Return
' --------------
Procedure R17
  Back_col=3
  Num_spi=4
  Spi_follow(3)=4
  Spi_follow(1)=4
  Spi_follow(2)=4
Return
' --------------
Procedure R18
  Num_spi=4
  Spi_follow(1)=2
  Spi_follow(2)=4
  Spi_follow(4)=4
  Spi_follow(3)=4
Return
' ---------------
Procedure R19
  Num_spi=5
  Spi_follow(1)=2
  Spi_follow(2)=4
  Spi_follow(3)=4
  Spi_follow(4)=4
Return
' ----------------
Procedure R20
  Num_spi=5
  Spi_follow(1)=2
  Spi_follow(2)=2
  Spi_follow(3)=4
  Spi_follow(4)=4
  Spi_follow(5)=4
Return
' -----------------
Procedure R21
  Num_spi=5
  Spi_follow(1)=2
  Spi_follow(2)=4
  Spi_follow(4)=4
  Spi_follow(3)=4
  Spi_follow(5)=4
Return
' -----------------
Procedure R22
  Num_spi=5
  Spi_follow(1)=4
  Spi_follow(2)=4
  Spi_follow(4)=4
  Spi_follow(3)=4
  Spi_follow(5)=4
Return
' ---------------------------------------------------
Procedure Stand
  @Walk(7)
  For D=0 To 6
    @Spider
  Next D
Return
' ---------------------------------------------------------------
Procedure Move_brick
  If Release=True     !if any stick action other than last pick up or put down
    Release=False
    If Joy=136
      Lr=1
    Else
      Lr=-1
    Endif
    @Limit  ! find bottom of level man is on
    '
    If Hold=False              !PICK UP BRICK
      Ofs=4
      @Find_bottom(Lr)       !find how far down man object to pick up is
      Hold_obj=Scr(X_man+Lr,Head)   ! this is object to pick up
      If Hold_obj<>Ladder And Hold_obj<>Block
        If Hold_obj=Brick Or Hold_obj=Spring
          @Up_brick(Hold_obj)    !pick up brick
        Else
          @Up_treasure           !pick up treasure
        Endif
      Endif
      '
    Else                      !PUT DOWN OBJECT
      If Hold_obj=Brick Or Hold_obj=Spring
        @Down_brick                      !put brick or spring down
      Endif
      If Hold_obj>3 And Hold_obj<19      !put treasure down
        @Down_treasure
      Endif
    Endif
  Else
    @Walk(7)
    @Spider
  Endif
Return
' ---------------------------
Procedure Down_brick
  Add Limit_down,4
  Ofs=8
  T=Hold_obj
  @Find_bottom(Lr)
  Hold_obj=T
  If Scr(1+(Manx Div 16)+Lr,(Many+D-Ofs+4) Div 4)<6
    If D>18
      Hold=False
      @Small_put(Sm_obj$(Hold_obj),Manx+(Lr*16),Many+D-Ofs)
      Scr(1+(Manx Div 16)+Lr,(Many+D-Ofs) Div 4)=Hold_obj
      Hold_obj=0
    Endif
  Endif
Return
' -------------------
Procedure Down_treasure
  Add Limit_down,4
  Ofs=8
  @Find_bottom(Lr)
  If Scr(1+(Manx Div 16)+Lr,(Many+D-Ofs) Div 4)=0  ! TREASURE TO FLOOR
    If D>18
      Hold=False
      Obj_brick=Hold_obj
      Add D,1
      @Small_put(Treas$(Hold_obj-6),Manx+Lr*16,Many+D-Ofs-4)
      Scr(1+(Manx Div 16)+Lr,(Many+D-Ofs) Div 4)=Hold_obj
      Hold_obj=0
    Endif
    '
  Else                      !TREASURE INTO SAFE
    If Scr(1+(Manx Div 16)+Lr,(Many+D-Ofs) Div 4)=Safe
      Add Score,To_score
      @Small_put(No_head$,1,1)
      Hold=False
      If (Score-Bonus_lev>=500 Or Hold_obj=16) And Lives<10
        @Bonus
        If Hold_obj<>16
          Add Bonus_lev,500  !number at which next bonus comes
        Endif
      Endif
      Hold_obj=0
      Print At(2,2);Chr$(7)
    Endif
  Endif
Return
' ------------------------
Procedure Up_treasure
  If D<Limit_down And Hold_obj>3 And Hold_obj<Safe !Scr(X_man+Lr,Head)=Brick And Scr(X_man+Lr,Head-1)=0
    Obj_brick=0    !put brick
    Hold$=Treas$(Hold_obj-6)
    Hold_msk$=T_mask$(Hold_obj-6)
    Scr(X_man+Lr,(Many+D-Ofs) Div 4)=0
    Hold=True
    @Small_put(Treas$(0),Manx+Lr*16,Many+D-Ofs-4)
  Endif
Return
' ------------------------
Procedure Up_brick(Ho)
  What=Scr(X_man+Lr,Head)
  If D<Limit_down And (What=Brick Or What=Spring) And Scr(X_man+Lr,Head-1)=0
    Hold=True
    Hold$=Sm_obj$(Ho)
    Hold_msk$=Sm_msk$(Ho)
    If Ho=Spring
      Hold_msk$=Sm_msk$(Ho-1)
    Endif
    @Small_put(Sm_obj$(0),Manx+(Lr*16),Many+D-Ofs)
    Scr(1+(Manx Div 16)+Lr,(Many+D-Ofs) Div 4)=0
  Endif
Return
' --------------------------------------------------------------
Procedure Bonus
  Add Lives,1
  @Small_put(Head$,Lives*12-3,1)
  Vsync
  Get 0,0,319,11,Score$
  Vsync
  Color 2
  For Y=2 To 3
    Color 4-Y
    For X=1 To 6+(2-Y)*2
      Sound 1,15-2*X,1,6,8-Y*2   !bonus sound
      Circle Lives*12+1,5,X
    Next X
  Next Y
  Sound 1,0,0,0
  Sput Main_screen$
Return
' ------------------------------------------------------------
Procedure Find_bottom(Lr)
  D=6
  X_man=(Manx Div 16)+1
  Head=Many Div 4
  While Scr(X_man+Lr,Head)=0 And D+Many<=Limit_down
    Add Head,1
    Add D,4
  Wend
  Sub D,4
Return
' ------------------------------------------------------------
Procedure Small_put(Thing$,Xpos,Ypos)
  Graphmode 1
  Deftext 10,0,0,4
  Vsync
  Slpoke Logical_base,S%
  Sput Main_screen$
  Slpoke Logical_base,S%
  Put Xpos,Ypos,Thing$
  Text 236,6,Score
  Sget Main_screen$
  Spi_num=Num_spi
  Vsync
  Slpoke Logical_base,S%
  While Spi_num>0
    Put Spi_x(Spi_num),Spi_y(Spi_num)+1,Spider$(Up_down(Spi_num)),7
    Dec Spi_num
  Wend
  Put Manx,Many,Obj$(7),7
  Vsync
  Slpoke Physical_base,S%
  Vsync
  S1=1-S1
  S2=1-S1
  S%=S1%*S1+S2%*S2
Return
' ---------------------------------------------------------------
Procedure Limit
  Limit_down=200
  While Limit_down>Many      !find lowes legal brick position below man
    Sub Limit_down,40
  Wend
  Add Limit_down,40
Return
' --------------------------------------------------------------
Procedure Rise(Amt)
  Tmp=Many
  T_feet=Feet
  X_m=X_man+Amt
  Ok_walk=True
  While (Scr(X_m,T_feet)=Brick Or Scr(X_m,T_feet)=Spring) And Tmp-4>=0
    Sub Tmp,4
    Sub T_feet,1
  Wend
  Many=Tmp
Return
' ---------------------------------------------------------------
Procedure Fall
  Sub M_obj,2 !set man to step once then changing to falling man
  While (Scr(X_man,Feet+1)=0 Or Scr(X_man,Feet+1)=Safe) And Many<177
    Add Many,4
    Add Feet,1
    @Walk(M_obj)
    If M_obj=5
      M_obj=6
    Else
      M_obj=5
    Endif
    @Spider
  Wend
Return
' -----------------------------------------------------------------
Procedure Walk(Ob1)
  Vsync
  Slpoke Logical_base,S%
  Sput Main_screen$
  Slpoke Logical_base,S%
  If Hold=True And Ob1<>7     !put obj behind man if walking
    Put Manx,Many+11,Hold$,7
  Endif
  Put Manx,Many,Mask$(Ob1),4
  Put Manx,Many,Obj$(Ob1),7
  If Hold=True And Ob1=7     !put obj infront of man if standing
    Put Manx,Many+11,Hold_msk$,4
    Put Manx,Many+11,Hold$,7
  Endif
  Spi_num=Num_spi
  Vsync
  Slpoke Logical_base,S%
  While Spi_num>0
    Put Spi_x(Spi_num),Spi_y(Spi_num)+1,Spider$(Up_down(Spi_num)),7
    Dec Spi_num
  Wend
  Slpoke Physical_base,S%
  Vsync
  S1=1-S1
  S2=1-S2
  S%=S1%*S1+S2%*S2
Return
' -----------------------------------------------------------------
'  SPIDER  ROUTINES
' -----------------------------------------------------------------
Procedure Spider
  If Timer-Spi_time>Spitime-Num_spi*Spiofs !And Num_spi>0
    Spi_time=Timer
    Quantom=Timer
    Sn=Num_spi
    While Timer-Quantom<1+Num_spi And Sn=>0
      @Check_kill
      @New_anim                 !toggle spider walking poshion
      If Spi_trap(Ss)>1
        @Trapped       !if spider is trapped in hole
        '
      Else
        If Momentum(Ss)<1 Or Spi_x(Ss)+Spi_ofs(Ss)<6 Or Spi_x(Ss)+Spi_ofs(Ss)>310
          @Momentum_new          !if out of moves get new direction
        Endif
        '
        If Ladder_doing(Ss)=0    !NOT on ladder
          @Regular_move
        Else
          @Move_ladder           !spider on ladder
        Endif
        '
        Dec Momentum(Ss)
      Endif
      Inc Ss
      Dec Sn
      If Ss>Num_spi   !if all spiders done, go back to beginning spider
        Ss=1
      Endif
    Wend
  Endif
Return
' ----------------------------------------------------------
Procedure New_anim
  If Odd(Up_down(Ss))
    Up_down(Ss)=2    !spider animation toggle
  Else
    Up_down(Ss)=1
  Endif
  If Spi_ofs(Ss)<>0
    Add Up_down(Ss),Spi_follow(Ss)  !change to type of spider
  Endif
Return
' -----------------------------------------------------------
Procedure Regular_move
  If Spi_x(Ss)+Spi_ofs(Ss)<310 And Spi_x(Ss)+Spi_ofs(Ss)>=0
    Add Spi_x(Ss),Spi_ofs(Ss)   !move spider to next poshion
  Endif
  '
  X_spi=(Spi_x(Ss) Div 16)+1
  Y_spi=Spi_y(Ss) Div 4
  Q=Scr(X_spi,Y_spi+2)
  Q1=Scr(X_spi,Y_spi+1)
  '
  If Spi_x(Ss) Mod 16=0
    @Spi_fall
  Endif
  '
  @Spi_rise
  Fell=False
  '
  If Scr(X_spi,Y_spi+2)=Ladder And (Spi_x(Ss)/16)=Int(Spi_x(Ss)/16)
    If Random(4)=2 Or (Spi_y(Ss)<Many And Spi_follow(Ss)>1)
      @Decide_ladder(4)           !down
    Endif
  Endif
  If Scr(X_spi,Y_spi+1)=Ladder And (Spi_x(Ss)/16)=Int(Spi_x(Ss)/16)
    If Random(4)=2 Or (Spi_y(Ss)>Many And Spi_follow(Ss)>1)
      @Decide_ladder(-4)          !up ladder
    Endif
  Endif
Return
' -----------------------------------------------
Procedure Spi_rise
  If Spi_x Mod 16=0 And Scr(X_spi,Y_spi+1)>3 And Scr(X_spi,Y_spi+1)<Safe And Random(2)=1
    Scr(X_spi,Y_spi+1)=0           ! spider steals treasure
    @Small_put(Treas$(0),(X_spi-1)*16,(Y_spi)*4)
  Endif
  While Q1<>0 And Q1<>3 And Q1<Safe And Fell=False       !rise
    Sub Spi_y(Ss),4
    Y_spi=Spi_y(Ss) Div 4
    Q1=Scr(X_spi,Y_spi+1)
  Wend
Return
' ----------------------------------------------
Procedure Spi_fall
  For W=1 To 3       !fall
    If (Q=0 Or Q=Safe) And Rised=False
      Add Spi_y(Ss),4
      Y_spi=Spi_y(Ss) Div 4
      Q=Scr(X_spi,Y_spi+2)
      Fell=True   !stop spider from rising back up until next turn
    Endif
  Next W
  @Trap_check
Return
' -------------------------------------------------------------
Procedure Trapped
  If Timer-Spi_trap(Ss)>2500    ! if interval of 2500 reached release spi
    X_spi=(Spi_x(Ss) Div 16)+1
    Y_spi=Spi_y(Ss) Div 4
    Scr(X_spi,Y_spi)=0
    Sub Spi_y(Ss),8
    @Check_kill
    @Momentum_new
    Add Spi_x(Ss),Spi_ofs(Ss)
    Spi_trap(Ss)=0
  Endif
Return
' ---------------------------------------------------------------
Procedure Trap_check
  If (Q=0 Or Q=Safe) And Spi_x(Ss) Mod 16=0   !check for traped
    Spi_x(Ss)=(Spi_x(Ss) Div 16)*16
    Spi_trap(Ss)=Timer+Random(520)
    If Spi_y(Ss) Mod 40=36 Or Spi_y(Ss) Mod 40=0
      Sub Spi_y(Ss),4
    Endif
    X_spi=(Spi_x(Ss) Div 16)+1
    Y_spi=Spi_y(Ss) Div 4
    Scr(X_spi,Y_spi)=Block
  Endif
Return
' --------------------------------------------------------------
Procedure Decide_ladder(Which)
  Ladder_doing(Ss)=1
  Ladder_ofs(Ss)=Which
  Add Spi_y(Ss),Ladder_ofs(Ss)
Return
' ---------------------------------------------------------------
Procedure Move_ladder
  X_spi=(Spi_x(Ss) Div 16)+1
  Y_spi=Spi_y(Ss) Div 4
  If Random(16)=2 And Spi_follow(Ss)<2 And Fantom=False
    Mul Ladder_ofs(Ss),-1     !change direction mid ladder
  Endif
  If Ladder_ofs(Ss)=-4
    Q=Scr(X_spi-1,Y_spi+2)
    Q1=Scr(X_spi-1,Y_spi+2)
    Bel=Scr(X_spi,Y_spi+1)
    If Q<>Brick And Q1<>Brick And Bel=Ladder
      Add Spi_y(Ss),-4  !Ladder_ofs(Ss)
    Else
      Ladder_doing(Ss)=0
    Endif
  Endif
  '
  If Ladder_ofs(Ss)=4
    Q=Scr(X_spi,Y_spi+2)
    Q1=Scr(X_spi+1,Y_spi-2)
    If Q=Ladder Or Q=Safe  !<>Brick And Q1<>Brick
      Add Spi_y(Ss),Ladder_ofs(Ss)
    Else
      Ladder_doing(Ss)=0
    Endif
  Endif
Return
' --------------------------------------------------------------------
Procedure Momentum_new
  If Spi_follow(Ss)=4 Or Fantom=True     !follow man
    Momentum(Ss)=Random(12)+1
    If Spi_x(Ss)>Manx
      Spi_ofs(Ss)=-8
    Else
      Spi_ofs(Ss)=8
    Endif
  Endif
  '
  If Spi_follow(Ss)<3 And Fantom=False     !random
    Momentum(Ss)=Random(10)+10
    Q=Random(2)
    If Q=1
      Spi_ofs(Ss)=8
    Endif
    If Q=0
      Spi_ofs(Ss)=-8
    Endif
  Endif
  '
Return
' --------------------------------------------------------------------
Procedure Check_kill
  Sn=Num_spi
  Repeat
    If (Spi_x(Sn)>=Manx And Spi_x(Sn)<=Manx+8) Or (Spi_x(Sn)+8>=Manx And Spi_x(Sn)+8<=Manx+8)
      If Spi_y(Sn)>Many And Spi_y(Sn)<Many+22 And Spi_trap(Sn)=0 And Timer>Safe_time
        W=Sn  !the spider doing the biteing
        @Killed
      Endif
    Endif
    Sub Sn,1
  Until Sn<=0
Return
' ----------------------------------------------------------------
Procedure Killed
  @Wrap_man
  @Small_put(No_head$,Lives*12-3,1)
  Vsync
  Get 0,0,319,11,Score$
  Hold=False     !lose what holding when killed
  Sub Lives,1
  If Lives<0
    @Fini
  Else
    @Fresher(W)
  Endif
Return
' ----------------------------------------------------------------
Procedure Wrap_man
  T_scr$=Main_screen$
  For X=0 To 18
    Wave 8,3,7,900+Random(200),1
    Sound 1,6+(X/2),5,7
    Spi_x(W)=Manx+Random(3)
    Spi_y(W)=Many+16+Random(3)-X
    Color 12
    Sput T_scr$
    Line Manx+Random(3),Spi_y(W)+Random(8),Spi_x(W)+18+Random(3),Spi_y(W)+Random(8)
    Color 8
    Line Manx-1+Random(3),Spi_y(W)+Random(8),Spi_x(W)+18+Random(3),Spi_y(W)+Random(8)
    Sget T_scr$
    Put Manx+R,Spi_y(W),Spider$(1+Spi_follow(W)),7
    If R=-5
      R=20
    Else
      R=-5
    Endif
  Next X
  Wave 0,0
  Sound 1,0
  Sub Many,8
  Sub Feet,2
Return
' --------------------------------------------------------------------
Procedure Refresh_spi
  For Y=0 To Num_spi
    @Fresher(Y)
  Next Y
Return
' -------  routines seperated so single spider can be moved after it kills you
Procedure Fresher(Y)
  Spi_y(Y)=184-40*Random(5-(Num_levels Div 40))
  Spi_x(Y)=Random(19)*16
  Spi_ofs(Y)=8
  Up_down(Y)=Random(2)+1
  Momentum(Y)=0
  Ladder_doing(Y)=0
  Ladder_ofs(Y)=4
  Spi_trap(Y)=0
Return
' ----------------------------------------------------------------
'    HOUSE KEEPING ROUTINES
' --------------------------------------------------------------------
'
Procedure Screen_drw
  Cls
  Print At(2,4);Chr$(7)
  Arrayfill Scr(),0
  @Blank_colors(3)
  Put 0,0,Score$,3
  For Z=Num_levels To 200 Step 40
    @Shelf_drw(Z)
  Next Z
  For Z=Num_levels To 180 Step 40
    For Across=0 To Random(4)+1
      Xp=Random(20)*16
      @Ladder_drw(Xp,Z)
    Next Across
  Next Z
  @Draw_safe
  @Refresh_spi
  Deffill 6,2,9
  If Num_levels>80
    @Sign
  Endif
  @Set_pro_col
  @Spring_put
  Graphmode 1
  Text 300,6,Round_print
  Sget Main_screen$ !Copy entire screen into screen
  M_obj=7
Return
' ---------------------------------------------------------------
Procedure Sign
  Graphmode 2
  Pbox 0,12,319,Num_levels-40
  Deffill 11,1,1
  Pbox 30,20,160,68
  Pbox 184,24,298,61
  Color 1
  Box 30,20,160,68
  Box 184,24,298,61
  Deftext 1,1,0,6
  Text 56,32,80,"CAUTION"
  Deftext 8,0,0,4
  Text 36,42,-121,"BRICK WORKS CONDEMNED"
  Text 64,50,"BY ORDER OF"
  Text 116,66,"(C)1988"
  Text 200,43,-86,"UNDO  = QUIT"
  Text 200,50,-86,"F1- F10 = PAUSE"
  Text 200,57,-86,"ANY KEY UNPAUSE"
  Deftext 1,0,0,4
  Text 192,33,-102,"By PRATT & EVERMAN"
  Color 10
  Line 190,36,294,36
  Deftext 2,1,0,4
  Text 36,59,120,"START MAGAZINE"
  Deftext 10,0,0,4
  '
Return
' ----------------------------------------------------------------------
Procedure Score_board
  @Blank_colors(3)
  For X=1 To Lives
    Put X*12-4,1,Head$
  Next X
  Color 9
  Line 0,10,319,10
  Line 0,11,319,11
  Deftext 6,0,0,4
  Text 128,6,-45,"HI SCORE"
  Text 204,6,30,"SCORE"
  Text 268,6,"ROUND"
  Deftext 10,0,0,4
  Text 174,6,Hi_score
  Text 236,6,Score
  Text 300,6,Round_print  !+Ex_round
  Get 0,0,319,11,Score$
Return
' ----------------------------------------------------------------------
Procedure Spring_put
  For X=0 To Random(6-(Num_levels Div 40))+2
    Repeat
      Tx=Random(19)
      Ty=(Random(5)*40)+26
    Until Scr(Tx,(Ty Div 4)+1)=0 And Scr(Tx,(Ty Div 4)+3)=Brick
    Put (Tx-1)*16,Ty+6,Sm_obj$(Spring)
    Scr(Tx,(Ty Div 4)+2)=Spring
  Next X
Return
' ------------------------------------
Procedure Shelf_drw(Z)
  For Y=0 To 1
    For X=0 To 20
      Put X*16,Z+Y*4,Sm_obj$(1)
      Scr(X+1,(Z Div 4)+Y)=Brick
    Next X
  Next Y
Return
' ------------------------------------
Procedure Ladder_drw(Xp,Z)
  For Y=0 To 9
    Put Xp,Z+Y*4,Sm_obj$(2)
    Scr((Xp Div 16)+1,(Z Div 4)+Y)=Ladder
  Next Y
Return
' -----------------------------------------------------------
Procedure Draw_safe
  Repeat
    Sx=Random(19)
    Sy=160-40*Random(5-(Num_levels Div 40))
  Until Scr(Sx+1,Sy Div 4)=0 And Sy>20
  Put Sx*16,Sy,Lrg_obj$(1),3
  For D=0 To 7
    Scr(Sx+1,(Sy Div 4)+D)=Safe
  Next D
Return
' -------------------------------------------------------------------
Procedure Get_in_colors
  For X=0 To 15
    In_colors(X)=Xbios(7,X,-1)-16515072
  Next X
Return
' -----------------------------------------
Procedure Joy_init
  Mc$=Mki$(&H23C8)+Mkl$(*A%)+Mki$(&H4E75)
  V%=Xbios(34)+24
  O%=Lpeek(V%)
  Lpoke V%,Varptr(Mc$)
  A%=0
  Out 4,&H16
  Repeat
  Until A%
  Lpoke V%,O%
  Joy_port1=A%+1
  Joy_port2=A%+2
  Out 4,&H14
Return
'
Procedure Set_pro_col
  Restore Kolors
  For X=0 To 15
    Read Dc
    Setcolor X,Dc
  Next X
Return
' -----------------------------------------
Procedure Set_in_colors
  For X=0 To 15
    Setcolor X,In_colors(X)
  Next X
Return
' -----------------------------------------
Procedure Blank_colors(C)
  For X=0 To 15
    Setcolor X,C
  Next X
Return
' -----------------------------------
Procedure In_hi_score
  ' THIS PROCEDURE SAVES THE HIGH SCORE TO A FILE, OR CREATES ONE IF NEEDED
  If Exist("HI_SCORE.BRK")
    Open "R",#3,"HI_SCORE.BRK"
    Input #3,Hi_score      !if Hi_score file exists, open and get hi score
    Close #3
  Else
    Open "R",#3,"HI_SCORE.BRK"
    Write #3,0
    Close #3
    Hi_score=0
  Endif
Return
' -------------------------------------------------------------
Procedure In_objects
  @Blank_colors(3)
  Cls
  Get 0,0,319,11,N_score$
  Get 0,0,15,3,Sm_obj$(0)
  Get 3,0,11,7,No_head$
  Scr_mem=Lpeek(1102)
  Get 0,0,15,31,Lrg_obj$(0)
  Get 0,0,15,7,Treas$(0)
  Restore Obj_data
  For Object=1 To 7
    For Scan_line=0 To 21
      Read Plane1,Plane2,Plane3,Plane4
      Dpoke Scr_mem+Scan_line*160,Plane1
      Dpoke Scr_mem+Scan_line*160+2,Plane2
      Dpoke Scr_mem+Scan_line*160+4,Plane3
      Dpoke Scr_mem+Scan_line*160+6,Plane4
    Next Scan_line
    Get 0,0,15,21,Obj$(Object)
  Next Object
  Get 3,0,11,6,Head$  !lives left token
  '
  For Object=1 To 7
    For Scan_line=0 To 21
      Read Plane1  !,Plane2,Plane3,Plane4
      Dpoke Scr_mem+Scan_line*160,Plane1
      Dpoke Scr_mem+Scan_line*160+2,Plane1
      Dpoke Scr_mem+Scan_line*160+4,Plane1
      Dpoke Scr_mem+Scan_line*160+6,Plane1
    Next Scan_line
    Get 0,0,15,22,Mask$(Object)
  Next Object
  '
  Cls
  For Object=1 To 5
    For Scan_line=0 To 3
      Read Plane1,Plane2,Plane3,Plane4
      Dpoke Scr_mem+Scan_line*160,Plane1
      Dpoke Scr_mem+Scan_line*160+2,Plane2
      Dpoke Scr_mem+Scan_line*160+4,Plane3
      Dpoke Scr_mem+Scan_line*160+6,Plane4
    Next Scan_line
    If Object>3
      Get 0,0,15,3,Sm_msk$(Object-3)
    Else
      Get 0,0,15,3,Sm_obj$(Object)
    Endif
  Next Object
  '
  Cls
  For Object=1 To 16
    For Scan_line=0 To 6
      Read Plane1,Plane2,Plane3,Plane4
      Dpoke Scr_mem+Scan_line*160,Plane1
      Dpoke Scr_mem+Scan_line*160+2,Plane2
      Dpoke Scr_mem+Scan_line*160+4,Plane3
      Dpoke Scr_mem+Scan_line*160+6,Plane4
    Next Scan_line
    If Object<7
      Get 0,0,15,6,Spider$(Object)
    Else
      Get 0,0,15,6,Treas$(Object-6)
    Endif
  Next Object
  '
  For Object=1 To 10
    For Scan_line=0 To 6
      Read Plane1 !,Plane2,Plane3,Plane4
      Dpoke Scr_mem+Scan_line*160,Plane1
      Dpoke Scr_mem+Scan_line*160+2,Plane1
      Dpoke Scr_mem+Scan_line*160+4,Plane1
      Dpoke Scr_mem+Scan_line*160+6,Plane1
    Next Scan_line
    Get 0,0,15,6,T_mask$(Object)
  Next Object
  '
  For Scan_line=0 To 31
    Read Plane1,Plane2,Plane3,Plane4
    Dpoke Scr_mem+Scan_line*160,Plane1
    Dpoke Scr_mem+Scan_line*160+2,Plane2
    Dpoke Scr_mem+Scan_line*160+4,Plane3
    Dpoke Scr_mem+Scan_line*160+6,Plane4
  Next Scan_line
  Get 0,0,15,31,Lrg_obj$(1)
  '
  Cls
  '  @Score_board
  @Set_pro_col
Return
' -------------------------------------------------------------------------
Procedure Equate
  '  COMPILER varables
  Spitime=38
  Spiofs=7
  Walktime=62
  Climbtime=70
  '
  ' INTERPRETER varables
  '  Spitime=28
  '  Spiofs=4
  '  Walktime=32
  '  Climbtime=30
  '
  Round_print=1
  Ex_round=0
  Num_levels=152
  Levels=152
  Play=True
  Hold=True
  Hold_obj=1
  M_obj=1
  Manx=112
  Many=162
  Taker=6
  Spix=176
  Spiy=90
  Num_spi=1
  Man=2
  Brick=1
  Spring=3
  Ladder=98
  Safe=17
  '
  Block=99
  Lives=10
  Back_col=3
  Round=1
Return
' ---------------------------------------------------------------------------
' ---------------------------------------------------------------------------
Obj_data:
' right man OBJECT #1
Data 0,0,0,0,1920,0,0,1920,1536,2432,0,3968,4032,0,0,4032,4080,3968
Data 0,112,3904,3936,160,864,4032,4032,0,3840,960,1984,1024,1920
Data 0,1920,256,1920,1920,3456,0,2048,1920,2176,0,2048,6016,2112,0,2112
Data 14304,11424,0,10240,13296,16176,0,15376,112,4016,0,3984,0,8064,0,8064
Data 0,7616,0,7616,0,7648,0,7648,0,14576,0,14576
Data 0,14448,0,14448,0,12344,0,12344,14364,14364,14364,0
' right man OBJECT #2
Data 1920,0,0,1920,1536,2432,0,3968,4032,0,0,4032
Data 4080,3968,0,112,3904,3936,160,864,4032,4032,0,3840,960,1984
Data 1024,1920,0,1920,256,1920,3840,1408,0,128,3840,128,0,128,3840,128,0,128
Data 1536,384,0,2432,896,2176,0,3072,448,2240,0,3648,448,3776,0,3648
Data 0,3968,0,3968,0,1920,0,1920,0,2944,0,2944,0,3520,0,3520
Data 0,7616,0,7616,0,6336,0,6336,7392,7392,7392,0
' left man OBJECT #3
Data 0,0,0,0,480,0,0,480,96,400,0,496,1008,0,0,1008,4080,496,0,3584,752,1776
Data 1280,1728,1008,1008,0,240,960,992,32,480,0,480,128,480,480,432,0,16
Data 480,272,0,16,488,528,0,528,2028,1332,0,20,4044,3324,0,2108,3584,3568
Data 0,2544,0,504,0,504,0,952,0,952,0,1976,0,1976,0,3868,0,3868,0,3612
Data 0,3612,0,7180,0,7180,14364,14364,14364,0
' left man OBJECT #4
Data 480,0,0,480,96,400,0,496,1008,0,0,1008,4080,496,0,3584,752,1776,1280,1728
Data 1008,1008,0,240,960,992,32,480,0,480,128,480,240,416,0,256,240,256,0,256
Data 240,256,0,256,96,384,0,400,448,272,0,48,896,784,0,624,896,880,0,624,0,496
Data 0,496,0,480,0,480,0,464,0,464,0,944,0,944,0,952,0,952,0,792,0,792
Data 1848,1848,1848,0
' lad man OBJECT #5
Data 0,1984,0,1984,2976,1088,0,4064,20448,20448,0,16384,53216,53216,0,49152
Data 53216,8176,0,0,53216,4064,0,2080,59331,1987,0,1091,62367,3168,0,3168
Data 29599,3168,0,3168,12572,3808,0,3808,24,4064,0,4064,16,2016,0,2016,16,4072
Data 0,2016,16,4064,0,4064,0,8176,0,8176,0,7920,0,7920,0,8176,0,7408
Data 0,240,0,240,0,112,0,112,112,112,112,0,0,0,0,0,0,0,0,0
' lad man  OBJECT #6
Data 0,992,0,992,1488,544,0,2032,2034,2034,0,2,2035,2035,0,3,2035,4088,0,0
Data 2035,2032,0,1040,50151,50144,0,49696,63951,1584,0,1584,63950,1584
Data 0,1584,14476,1904,0,1904,6144,2032,0,2032,2048,2016,0,2016,2048,6128
Data 0,2016,2048,2032,0,2032,0,4088,0,4088,0,3960,0,3960,0,4088,0,3896
Data 0,3840,0,3840,0,3584,0,3584,3584,3584,3584,0,0,0,0,0,0,0,0,0
' stand man OBJECT #7
Data 1984,0,0,1984,2976,1088,0,4064,4064,2080,0,1984,2336,3424,1728,1344
Data 4064,4064,0,1984,4064,4064,0,3168,896,1728,1088,1728,5008,4064,0,4064
Data 13208,4064,0,4064,29596,3424,0,3424,28700,20452,0,4064,63198,10536
Data 0,4064,61470,12268,0,4064,24588,8176,0,4064,14392,6096,0,8176
Data 6192,8176,0,8176,4112,3808,0,7920,0,7920,0,7920,0,7920,0,7920
Data 0,7920,0,7920,4096,7920,4096,3824,14960,14960,14960,0
'
' right man  MASK #1
Data 0,1920,3968,4032,4080,4064,4032,1984,1920,3968,3968,8128
Data 16352,16368,4080,8064,7616,7648,14576,14448,12344,14364
' right man MASK #2
Data 1920,3968,4032,4080,4064,4032,1984,1920,3968,3968,3968,3968
Data 3968,4032,4032,3968,1920,2944,3520,7616,6336,7392
' left man MASK #3
Data 0,480,496,1008,4080,2032,1008,992,480,496,496,1016,2044
Data 4092,4080,504,952,1976,3868,3612,7180,14364
' left man MASK #4
Data 480,496,1008,4080,2032,1008,992,480,496,496,496,496,496,1008,1008
Data 496,480,464,944,952,792,1848
' lad man MASK #5
Data 1984,4064,20448,53216,57328,53216,59331,65535,32767,16380,4088,2032
Data 4088,4080,8176,7920,8176,240,112,112,0,0
' lad man  MASK #6
Data 992,2032,2034,2035,4091,2035,50151,65535,65534,16380,8176,4064,8176
Data 4080,4088,3960,4088,3840,3584,3584,0,0
' stand man MASK #7
Data 1984,4064,4064,4064,4064,4064,1984,8176,16376,32764,32764,65534,65534
Data 32764,16376,8176,7920,7920,7920,7920,7920,14960
'
' brick sm_obj #1
Data 32255,32255
Data 65535,33280
Data 65246,65278
Data 32801,4513
Data 65519,65519
Data 32769,1048
Data 57215,57215
Data 65535,8320
' ladder sm_obj #2
Data 65535,65535
Data 24582,24582
Data 16386,16386
Data 0,0
Data 16386,16386
Data 0,0
Data 16386,16386
Data 0,0
'
' sm spring OBJECT #3
Data 65535,65535,65535,0
Data 15420,0,0,15420
Data 2016,0,0,2016
Data 65535,65151,65151,384
' brick mask sm_obj #1
Data 65535,65535,65535,65535,65535,65535,65535,65535
Data 65535,65535,65535,65535,65535,65535,65535,65535
' spring sm MASK #2
Data 65535,65535,65535,65535
Data 15420,15420,15420,15420
Data 2016,2016,2016,2016
Data 65535,65535,65535,65535
' spider OBJECT #1
Data 0,0,0,0,3168,0,3168,3168,7920,0,7920,5840,13976,1024
Data 16120,15096,19364,0,20452,20452,38866,0,37778,37778,37522,0,36882,36882
' spider OBJECT #2
Data 3168,0
Data 3168,3168
Data 7920,0
Data 7920,5840
Data 12984,0
Data 16120,16088
Data 11176,0
Data 12264,12264
Data 20452,0
Data 19364,19364
Data 21140,0
Data 20500,20500
Data 18468,0
Data 18468,18468
' red spider OBJECT #3
Data 0,0
Data 0,0
Data 3168,2080
Data 0,2080
Data 6832,640
Data 1088,3808
Data 16120,6832
Data 0,7920
Data 24548,8160
Data 0,8160
Data 38226,1344
Data 640,1984
Data 36882,0
Data 640,640
' red_spider OBJECT #4
Data 3168,1088
Data 0,1088
Data 6832,4752
Data 1088,7920
Data 16120,7920
Data 0,7920
Data 12264,4064
Data 0,4064
Data 19812,1344
Data 640,1984
Data 20500,0
Data 640,640
Data 18468,0
Data 0,0
' pur_crab OBJECT #5
Data 0,8194
Data 8194,0
Data 544,12614
Data 13158,544
Data 544,13654
Data 14198,0
Data 0,4088
Data 8188,0
Data 320,2728
Data 4088,320
Data 320,0
Data 5460,320
Data 0,0
Data 9236,0
' pur_crab OBJECT #6
Data 0,18441
Data 18441,0
Data 0,18441
Data 18441,0
Data 544,12614
Data 13158,544
Data 544,3416
Data 7516,0
Data 0,4088
Data 4088,0
Data 320,672
Data 6132,320
Data 320,0
Data 5458,320
' treasure OBJECT #1
Data 4064,0
Data 0,4064
Data 4064,480
Data 480,3584
Data 1984,448
Data 448,1536
Data 896,128
Data 128,768
Data 256,0
Data 0,256
Data 256,0
Data 0,256
Data 896,0
Data 0,896
' treasure OBJECT #2
Data 32764,32764
Data 0,0
Data 32764,32764
Data 16376,512
Data 32732,16420
Data 0,16376
Data 28268,20884
Data 0,16376
Data 32764,29764
Data 0,16376
Data 32764,32636
Data 0,16376
Data 32764,32764
Data 0,0
' treasure OBJECT #3
Data 8184,8184
Data 0,0
Data 16380,16380
Data 1056,1056
Data 2016,16380
Data 16380,16380
Data 988,15996
Data 15968,16352
Data 12672,16380
Data 4092,4092
Data 24,16380
Data 16356,16356
Data 6912,16380
Data 9468,9468
' treasure OBJECT #4
Data 65535,3834
Data 65535,65535
Data 32766,510
Data 32766,32766
Data 16380,2008
Data 16380,16380
Data 4080,352
Data 4080,4080
Data 384,128
Data 384,384
Data 960,128
Data 960,960
Data 4080,320
Data 4080,4080
' treasure OBJECT #5
Data 0,0
Data 0,0
Data 896,3168
Data 0,4064
Data 4064,4112
Data 0,8176
Data 896,3168
Data 0,4064
Data 1088,896
Data 0,1984
Data 896,0
Data 0,896
Data 256,0
Data 0,256
' treasure OBJECT #6
Data 896,0
Data 0,0
Data 1984,1728
Data 1728,1728
Data 2080,2080
Data 2080,2080
Data 2080,2080
Data 2080,2080
Data 2080,2080
Data 2080,2080
Data 1088,1088
Data 1088,1088
Data 896,896
Data 896,896
' treasure OBJECT #7
Data 0,0
Data 0,0
Data 0,0
Data 896,1088
Data 0,0
Data 1984,2080
Data 0,0
Data 896,3168
Data 0,0
Data 1088,896
Data 0,0
Data 896,0
Data 0,0
Data 256,0
' treasureOBJECT #8
Data 0,0
Data 0,0
Data 0,0
Data 0,0
Data 1088,0
Data 896,1984
Data 2592,0
Data 1472,4064
Data 1088,0
Data 896,1984
Data 640,0
Data 256,896
Data 256,0
Data 0,256
' treasure OBJECT #9
Data 28686,28686
Data 28686,384
Data 35217,63519
Data 35281,29582
Data 36369,61551
Data 32769,32766
Data 20082,26022
Data 21546,11220
Data 1648,14348
Data 384,15996
Data 712,7472
Data 0,8184
Data 1120,7064
Data 0,8184
' treasure OBJECT #10
Data 0,0,0,0,0,0,0,0
Data 14336,14336
Data 14336,14336
Data 27792,27792
Data 27792,27792
Data 18424,18424
Data 18424,18424
Data 28664,28664
Data 28664,28664
Data 14336,14336
Data 14336,14336
'
' treasure MASK #1-#12  each data statment used 4 times (once each color plane)
Data 4064,4064,1984,896,256,256,896
Data 32764,32764,32764,32764,32764,32764,32764
Data 8184,16380,16380,16380,16380,16380,16380
Data 65535,32766,16380,4080,384,960,4080
Data 0,4064,8176,4064,1984,896,256
Data 896,1984,2080,2080,2080,1088,896
Data 0,1984,4064,4064,1984,896,256
Data 0,0,1984,4064,1984,896,256
Data 29070,64479,65535,32766,16380,8184,8184
Data 0,0,14336,27792,18424,28664,14336
' Data 8176,12264,12264,12280,8168,28648,4068
'
' safe oBJECT #1
Data 0,0,0,0,0,0,0,0,32766,0,0,32766,65535,16380,16380,49155,65535,32766
Data 32766,32769,57351,32766
' Data 57351,32766
Data 24582,40953
Data 53235,32766
Data 20466,45069
Data 57339,32766
Data 24570,40965
Data 56955,32382
Data 24186,41349
Data 56635,32190
Data 23866,41797
Data 56507,32190
Data 23738,41669
Data 56955,32382
Data 24186,41349
Data 57339,32766
Data 24570,40965
Data 57339,32766
Data 24570,40965
Data 57339,32766
Data 24570,40965
Data 55803,32766
Data 23034,42501
Data 56315,32766
Data 23546,41989
Data 55803,32766
Data 23034,42501
Data 56827,32766
Data 24058,41477
Data 57339,32766
Data 24570,40965
Data 57339,32766
Data 24570,40965
Data 57339,32766
Data 24570,40965
Data 53235,32766
Data 20466,45069
Data 57351,32766
Data 24582,40953
Data 65535,32766
Data 32766,32769
Data 65535,32766
Data 32766,32769
Data 65535,32766
Data 32766,32769
Data 65535,32766
Data 32766,32769
Data 65535,16386
Data 16386,49149
Data 57351,0
Data 0,57351
Data 49155,0
Data 0,49155
Data 49155,0
Data 0,49155
'
'
Kolors:
Data 3,1792,512,1312,1573,116,1605,1365,1040,69,52,1859,1911,1360,1586,1872
