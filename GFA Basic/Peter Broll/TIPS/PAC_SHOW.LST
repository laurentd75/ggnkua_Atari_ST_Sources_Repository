'  die im TOS-Heft Nr.8 beschriebenen Routinen zum Entpacken von
'  Bildern im *.PAC Format waren Anlaû fÅr dieses Programm.
'  Mit Hilfe dieses Programms laesst sich ein Inhaltsverzeichnis
'  aller PAC-Bilder auf einem Laufwerk ermitteln.
'  da die im TOS Heft beschriebenen Assembler-Routinen von mir
'  nicht in ein kompiliertes Programm eingebunden werden konnten,
'  habe ich die Routine in GFA-Basic umgeschrieben.
'  Das Kompilieren geht nun problemlos.
'  Peter Broll  09.09.90
'
ON BREAK GOSUB beenden
'
bm&=0
DIM datei$(3000)      !  Max. Dateizahl auf Laufwerk
zahl%=0
suche%=0
ordner$=CHR$(228)
'
~FSETDTA(BASEPAGE+128)
'
start:
CLS
laufw%=BIOS(10)
PRINT AT(10,1);"Bilder Show fÅr PAC-Formate   von Peter Broll 09.09.90"
PRINT AT(10,3);"Folgende Laufwerke sind verfÅgbar:"
FOR i%=0 TO LEN(BIN$(laufw%))-1
  IF BTST(laufw%,i%)
    PRINT AT(10+2*i%,5);CHR$(65+i%)
  ENDIF
NEXT i%
'
PRINT AT(10,7);"Bitte Pfad entsprechend abÑndern (Q=Ende):"
PRINT AT(10,9);
'
lw$="a:\bilder"      !  Einstellung nach Wahl
'
FORM INPUT 70 AS lw$
lw$=UPPER$(lw$)
'
IF lw$="Q"
  END
ENDIF
'
PRINT AT(10,9);lw$
IF NOT BTST(laufw%,ASC(lw$)-65)
  PAUSE 20
  GOTO start
ENDIF
'
' lw$=x$+":"
show_dir(lw$)           ! Wurzelverzeichnis einlesen
'
DO UNTIL suche%>zahl%
  IF LEFT$(datei$(suche%),1)=ordner$
    show_dir(MID$(datei$(suche%),2))
  ENDIF
  INC suche%
LOOP
'
PRINT
PRINT TAB(9);"Ich sortiere ";suche%-1;" Daten"
PRINT
SSORT datei$(+),suche%
'
' Hier existiert ein sortiertes Verzeichnis aller Ordner und Dateien
'
'
finde$=".PAC"
'
i%=1
gefunden%=0
DO UNTIL i%=suche%
  EXIT IF LEFT$(datei$(i%),1)=ordner$
  IF RIGHT$(datei$(i%),4)=finde$         ! Ausblenden aller nicht
    INC gefunden%                        ! gewÅnschten Dateien.
    datei$(gefunden%)=datei$(i%)
    '    PRINT datei$(gefunden%)
  ENDIF
  INC i%
LOOP
'
weiter:
PRINT USING "        #### Ordner gefunden",suche%-i%
PRINT USING "        #### Dateien gefunden",i%-1
PRINT USING "        #### PAC-Bilder gefunden",gefunden%
'
hc%=0
bild_ende%=gefunden%
'
PRINT
PRINT TAB(9);"Ausgabe von Bild-Nr. (1 - max ";bild_ende%;" 0=Neustart) : ";
zahl$="1"
FORM INPUT 4 AS zahl$
zaehler%=VAL(zahl$)
IF zaehler%=0
  RUN
ENDIF
IF zaehler%<1 OR zaehler%>bild_ende%
  zaehler%=1
ENDIF
'
PRINT TAB(17);"bis Bild-Nr. (1 - max ";bild_ende%;") : ";
zahl$=STR$(bild_ende%)
FORM INPUT 4 AS zahl$
zahl%=VAL(zahl$)
IF zahl%>zaehler% OR zahl%<bild_ende%
  bild_ende%=zahl%
ENDIF
IF OUT?(0)=0
  ALERT 1,"| Falls Sie einen Drucker| besitzen, sollten Sie | ihn jetzt einschalten",1,"kapiert",wahl%
ENDIF
'
DO UNTIL zaehler%>bild_ende%
  $U+
  @zeige_pac(datei$(zaehler%))
  IF OUT?(0)<>0                       ! Drucker eingeschaltet ?
    BOX 0,0,639,399                   ! Rahmen setzen
    trenn%=RINSTR(datei$(zaehler%),"\")
    ordner$=MID$(datei$(zaehler%),4,trenn%-4)
    bild_name$=MID$(datei$(zaehler%),trenn%+1)
    IF hc%=1 AND ordner$<>ordner_alt$ ! neue Seite wenn Ordner-Wechsel
      LPRINT CHR$(12);
      hc%=0
    ENDIF
    ordner_alt$=ordner$
    LPRINT TAB(30);bild_name$;TAB(45);ordner$
    bild_drucken
    INC hc%
    IF hc%=5                   ! 5 Hardcopies je Seite
      LPRINT CHR$(12);
      hc%=0
    ENDIF
  ENDIF
  INC zaehler%
LOOP
RUN
'
PROCEDURE show_dir(lw$)           !    Sucht Dateien auf Laufwerk
  '
  e%=FSFIRST(lw$+"\*.*"+CHR$(0),-1)
  '
  DO UNTIL e%
    datei$(zahl%)=lw$+"\"+CHAR{BASEPAGE+158}
    attribut%=BYTE{BASEPAGE+149}
    '
    IF attribut%=16
      IF RIGHT$(datei$(zahl%),2)="\." OR RIGHT$(datei$(zahl%),3)="\.."
        DEC zahl%
      ELSE
        datei$(zahl%)=ordner$+datei$(zahl%)
      ENDIF
    ENDIF
    '
    INC zahl%
    e%=FSNEXT()
  LOOP
RETURN
'
'
PROCEDURE bild_drucken
  LPRINT CHR$(27);"3";CHR$(1);
  FOR i%=0 TO 399 STEP 24
    FOR j%=0 TO 2
      '
      s1%=i%+j%
      s2%=s1%+3
      s3%=s2%+3
      s4%=s3%+3
      s5%=s4%+3
      s6%=s5%+3
      s7%=s6%+3
      s8%=s7%+3
      '
      LPRINT SPC(30);CHR$(27);"*";CHR$(3);CHR$(128);CHR$(2);
      k%=0
      $U-
      REPEAT
        bm&=SHL&(PTST(k%,s1%),7)
        xx&=SHL&(PTST(k%,s2%),6)
        ADD bm&,xx&
        xx&=SHL&(PTST(k%,s3%),5)
        ADD bm&,xx&
        xx&=SHL&(PTST(k%,s4%),4)
        ADD bm&,xx&
        xx&=SHL&(PTST(k%,s5%),3)
        ADD bm&,xx&
        xx&=SHL&(PTST(k%,s6%),2)
        ADD bm&,xx&
        xx&=SHL&(PTST(k%,s7%),1)
        ADD bm&,xx&
        ADD bm&,PTST(k%,s8%)
        OUT 0,bm&
        INC k%
      UNTIL k%=640
      $U+
      LPRINT
    NEXT j%
    LPRINT CHR$(27);"J";CHR$(20)
  NEXT i%
  LPRINT CHR$(27);"2"
RETURN
'
PROCEDURE zeige_pac(bild_datei$)
  '
  $U-
  OPEN "I",#1,bild_datei$
  bild_string$=SPACE$(LOF(#1))
  BGET #1,VARPTR(bild_string$),LOF(#1)
  CLOSE #1
  sorc_begin$=LEFT$(bild_string$,4)
  bild_pos%=4+VARPTR(bild_string$)
  id_byte&=BYTE{bild_pos%}
  INC bild_pos%
  pack_byte&=BYTE{bild_pos%}
  INC bild_pos%
  sp_byte&=BYTE{bild_pos%}
  INC bild_pos%
  screen%=XBIOS(3)
  screen_pos%=screen%
  zeilen%=400
  bild_punkt%=32000
  achtzig%=80
  '
  IF sorc_begin$="pM85"
    GOTO horizontal
  ENDIF
  IF sorc_begin$<>"pM86"
    PRINT "error"
    GOTO pack_ende
  ENDIF
vertikal:
  byte_zahl&=0
  byte_0&=BYTE{bild_pos%}
  INC bild_pos%
  IF byte_0&=id_byte&
    byte_1&=pack_byte&
    byte_zahl&=BYTE{bild_pos%}
    INC bild_pos%
    GOTO v_ausgabe
  ENDIF
  IF byte_0&<>sp_byte&
    byte_1&=byte_0&
    GOTO v_ausgabe
  ENDIF
  byte_1&=BYTE{bild_pos%}
  INC bild_pos%
  byte_zahl&=BYTE{bild_pos%}
  INC bild_pos%
  IF byte_1&=0 AND byte_zahl&=0
    GOTO pack_ende
  ENDIF
v_ausgabe:
  BYTE{screen_pos%}=byte_1&       ! 8 Punkte setzen
  ADD screen_pos%,80          ! Eine Bildzeile nach unten
  DEC zeilen%
  IF zeilen%=0
    INC screen%
    IF screen%=ADD(XBIOS(3),achtzig%)
      GOTO pack_ende
    ENDIF
    screen_pos%=screen%
    zeilen%=400
  ENDIF
  IF byte_zahl&>0
    DEC byte_zahl&
    GOTO v_ausgabe
  ENDIF
  GOTO vertikal
horizontal:
  byte_0&=BYTE{bild_pos%}
  INC bild_pos%
  IF id_byte&=byte_0&
    byte_1&=pack_byte&
    byte_zahl&=BYTE{bild_pos%}
    INC bild_pos%
    GOTO hor_ausgabe
  ENDIF
  IF byte_0&<>sp_byte&
    BYTE{screen_pos%}=byte_0&
    INC screen_pos%
    DEC bild_punkt%
    IF bild_punkt%<0
      GOTO pack_ende
    ENDIF
    GOTO horizontal
  ENDIF
  byte_1&=BYTE{bild_pos%}
  INC bild_pos%
  byte_zahl&=BYTE{bild_pos%}
  INC bild_pos%
  IF byte_1&=0 AND byte_zahl&=0
    GOTO pack_ende
  ENDIF
hor_ausgabe:
  BYTE{screen_pos%}=byte_1&
  INC screen_pos%
  DEC bild_punkt%
  IF bild_punkt%<0
    GOTO pack_ende
  ENDIF
  IF byte_zahl&>0
    DEC byte_zahl&
    GOTO hor_ausgabe
  ENDIF
  GOTO horizontal
pack_ende:
  $U+
RETURN
'
PROCEDURE beenden
  ON BREAK
  text$=" | aktuelle Bild-Nr.: "+STR$(zaehler%)+" |"
  ALERT 3,text$,1,"WEITER|ENDE|NEUSTART",wahl%
  SELECT wahl%
  CASE 2
    END
  CASE 3
    IF OUT?(0)<>0
      LPRINT CHR$(12)
    ENDIF
    RUN
  ENDSELECT
  ON BREAK GOSUB beenden
RETURN
