'
'
' Mikrodraw
'
' Teil 2
'
' Programmiert von Konstantinos Lavassas
'         Januar/Februar 1990
'
' Redaktion: Ulrich Hilgefort
'
' fÅr:  TOS - Magazin + Software fÅr Atari ST und TT
'
' ----------------------------------------------------------------------------
'
' --------------------------PARAMETERFUNKTIONEN-------------------------------
> PROCEDURE kopiermodus            ! 2. Teil
  ALERT 2," Kopiermodus:  | A - transparent | B - Åberdeckt | C - XOR ",bb%," A | B | C ",bb%
  SELECT bb%
  CASE 1
    c_art%=7
  CASE 2
    c_art%=3
  CASE 3
    c_art%=6
  ENDSELECT
RETURN
> PROCEDURE kopierart              ! 2. Teil
  ALERT 2," Kopier- und Lasso-Art: | A - Normal| B - reduzierend ",km%," A | B ",km%
RETURN
'
' --------------------------ZEICHENOPERATIONEN--------------------------------
> PROCEDURE lupe                   ! 2. Teil
  SPUT puffer$(aktiv%)           ! aktuellen Pufferinhalt holen
  SGET d$
  DEFMOUSE 8
  @b_i
  DEFLINE 3,0,0,0
  DO                             ! Lupenrahmen positionieren
    MOUSE x%,y%,k%
    IF y%>367                    ! Rechteck im Bildschirm halten
      y%=367
    ENDIF
    IF x%>607
      x%=607
    ENDIF
    a$=INKEY$                    ! Undo abfragen
    IF ASC(RIGHT$(a$))=97
      c$=puffer$(aktiv%)
    ENDIF
    @b_s                         ! Flimmerfreie Grafik ein
    BOX x%,y%,x%+32,y%+32        ! Rechteck anzeigen
    EXIT IF k%=2                 ! Abbruch bei Mausklick re.
    IF k%=1                      ! links?
      @b_o                       ! Flimmerfreiheit aus
      @lupe_darstellen           ! eigentliche Lupe aufrufen
      @b_i
    ENDIF
  LOOP
  @b_o                           ! Flimmerfreiheit aus
  DEFLINE 1,0,0,0
  SGET puffer$(aktiv%)           ! Hintergrund in Puffer Åbernehmen
  CLR d$
RETURN
> PROCEDURE lupe_darstellen        ! 2. Teil
  LOCAL x,y,k,a$,b$,l%,t$
  SGET puffer$(aktiv%)           ! Letzte énderung in den Puffer retten
  GET x%,y%,x%+31,y%+31,a$       ! Ausschnitt im Puffer
  DEFLINE 1,0,0,0                ! Fenster aufbauen
  DEFFILL 1,0,0
  PBOX 199,98,557,357            ! Rahmen ziehen
  BOX 198,97,556,356
  BOX 298,98,297,356             ! Trennlinie
  GET 200,100,206,106,b$         ! Plott/Block
  DEFFILL 1,1,1
  xa%=231
  ya%=121
  PUT xa%,ya%,a$                 ! Puffer im Fenster
  DEFTEXT 1,0,0,13
  TEXT 204,330,"LUPE"
  DEFTEXT 1,0,0,4
  TEXT 204,344,"ESC = ABBRUCH"
  '
  FOR j%=ya% TO ya%+31           ! Ausschnitt vergrîûert darstellen
    FOR i%=xa% TO xa%+31
      IF POINT(i%,j%)=1          ! wenn gesetzt,
        yy%=(j%-ya%)*8+100
        xx%=(i%-xa%)*8+300
        PUT xx%,yy%,b$,12        ! ausgeben
      ENDIF
    NEXT i%
  NEXT j%
  '
  DO                             ! Eigentliche Lupefunktion
    MOUSE x,y,k
    t$=INKEY$
    EXIT IF t$=CHR$(27)          ! Abbruch bei ESC
    '
    ' Maus wurde angeklickt und befindet sich im Fenster
    IF x>300 AND x<554 AND y>100 AND y<354 AND k<>0
      xx%=INT((x-300)/8)         ! Koordinaten auf das Original umrechnen
      yy%=INT((y-100)/8)
      COLOR k AND 1              ! Links = Schwarz / Rechts = Weiû
      PLOT xx%+xa%,yy%+ya%       ! Zeichne / Lîsche Punkt im Original
      xx%=xx%*8+300              ! Linke obere Ecke des vergrîûerten Punktes
      yy%=yy%*8+100              ! berechnen
      IF k=1                     ! in Lupendarstellung anzeigen
        PUT xx%,yy%,b$,12        ! links = Plott/Block invertiert
      ELSE
        PUT xx%,yy%,b$           ! rechts = Plott/Block Åberdeckt
      ENDIF
    ENDIF
  LOOP
  GET xa%,ya%,xa%+31,ya%+31,a$   ! GeÑnderten Block retten
  @m_leer
  DEFLINE 3,0,0,0
  COLOR 1
  SPUT d$                        ! Alten Hintergrund
  PUT x%,y%,a$                   ! Puffer auf Hintergrund
  SGET d$                        ! Neuen Hintergrund retten
  CLR x,y,k,a$,b$,l%,t$
RETURN
'
' ---------------------------BLOCKOPERATIONEN--------------------------------
'
> PROCEDURE event_taste            ! 2. Teil
  t$=INKEY$                      ! Tastatur abfragen
  IF t$<>""
    t%=ASC(RIGHT$(t$,1))
    IF t%=99                     ! "c" gedrÅckt
      @b_o
      xx%=MOUSEX                 ! Mausposition retten
      yy%=MOUSEY
      @kopiermodus               ! Kopiermodus Ñndern
      SETMOUSE xx%,yy%           ! Maus auf gespeicherte Position
      @b_i
    ENDIF
    IF t%=98                     ! "b" gedrÅckt
      @b_o
      ==> ALERT 0,"Bild: "+STR$(akti v%)+"   ",1," ok ",s%
      @b_i
    ENDIF
    IF t%=97                     ! Undotaste
      c$=rette$
    ENDIF
    IF t%=72                     ! Cursor hoch
      puffer$(aktiv%)=c$         ! Bild puffern
      @cursor_h                  ! Zeiger verÑndern
      c$=puffer$(aktiv%)         ! neues Bild
      rette$=c$                  ! UNDO-Puffer besetzen
      SPUT c$                    ! Bild ausgeben
      @b_s
    ENDIF
    IF t%=80                     ! Cursor runter
      puffer$(aktiv%)=c$         ! siehe oben
      @cursor_r
      c$=puffer$(aktiv%)
      rette$=c$
      SPUT c$
      @b_s
    ENDIF
  ENDIF
RETURN
> PROCEDURE kopieren               ! 2. Teil
  LOCAL t$,a$                    ! Ausschnitt kopieren
  @m_leer                        ! Mausbuffer leeren
  IF xl%>0 AND yl%>0             ! Wenn etwas zum Kopieren da ist!
    '
    IF km%=2                     ! = reduzierend kopieren (B)
      minx=x1%
      miny=y1%
      IF me%=33
        move%=1
      ENDIF
      ERASE bild$()              !  Puffer initialisieren
      DIM bild$(3)
      IF me%<>37                 !  Bild aus Puffer holen
        bild$(1)=puffer$(aktiv%)
      ELSE                       ! nur bei Verzerren aktuellen Schirm nehmen
        SGET bild$(1)
      ENDIF
      GET x1%,y1%,x2%,y2%,bild$(3) ! gewÑhlten Block retten
      CLS                        ! aufrÑumen
      DEFFILL 1,0,0
      BOX x1%-2,y1%-2,x2%+2,y2%+2 ! Umgrenzungsrechteck bilden
      PUT x1%,y1%,bild$(3),2     ! Bildbereich aufkopieren
      DEFFILL 1,1,1
      FILL x2%+1,y2%+1           ! Block fÅllen
      PUT x1%,y1%,bild$(3),4     ! im (NOT) AND-Modus aufkopieren
      GET x1%,y1%,x2%,y2%,bild$(2) ! Maske retten
      bild$(1)=puffer$(aktiv%)   ! Originalbild auf Schirm
      @lasso_kopieren            ! Lasso aufrufen
      SGET puffer$(aktiv%)       ! Hintergrund retten
      ERASE bild$()
    ELSE
      '
      ' Normal Kopieren    --> Kopierart ( A )
      '
      GET x1%,y1%,x2%,y2%,a$     ! Ausschnitt in Puffer Åbernehmen
      SPUT puffer$(aktiv%)       ! Original im Hintergrund
      IF me%=33                  ! Bewegen: Ausschnitt
        PUT x1%,y1%,a$,6         ! per XOR-VerknÅpfung
      ENDIF                      ! lîschen
      HIDEM                      ! Maus abschalten
      SETMOUSE x1%,y1%           ! Mausposition auf obere linke Ecke
      @b_i
      DEFFILL 1,0,0
      DEFLINE lin%,0,0,0
      DO
        MOUSE x%,y%,k%           ! Mausabfrage
        EXIT IF k%=2             ! Abbruchbedingung (rechte Maustaste)
        @b_s                     !
        @event_taste             ! Tastaturabfrage (UNDO etc.)
        PUT x%,y%,a$,c_art%      ! Ausschnitt per gewÑhlter VerknÅpfung setzen
        IF k%=1                  ! Linke Maustaste wurde betÑtigt
          SGET c$                ! Block wird kopiert: Hintergrundspeicher
          '                        enthÑlt nun den kopierten Block
          IF c_art%=6            ! Wenn Kopiermodus= XOR
            @m_leer              ! Mauspuffer leeren, sonst Doppelaktionen
          ENDIF
        ELSE
          BOX x%,y%,x%+xl%,y%+yl% ! Rahmen anzeigen
        ENDIF
      LOOP
      @b_o
      SGET puffer$(aktiv%)       ! Hintergrund retten
    ENDIF
  ENDIF
  SHOWM                          ! Maus einschalten
  CLR t$,a$
RETURN
> PROCEDURE lasso                  ! 2. Teil
  SPUT puffer$(aktiv%)           ! aktuellen Pufferinhalt anzeigen
  IF me%=35
    move%=1                      ! Lasso-verschieben
  ENDIF
  '
  ERASE bild$()                  ! Puffer fÅr Lasso lîschen
  DIM bild$(4)
  '
  SGET bild$(1)                  ! Quelle nach Puffer 1 retten
  '
  @lasso_umfahren                ! Unterprogramm fÅr das Umfahren eines
  '                              ! Blockes
  @lasso_kopieren                ! Die eigentliche Lasso-kopier-Funktion
  '
  ERASE x%(),y%(),bild$()        ! Variablen und Puffer aufrÑumen
  SGET puffer$(aktiv%)           ! aktuelles Bild ausgeben
RETURN
> PROCEDURE lasso_umfahren         ! 2. Teil
  CLR i,exo!,n%,n,j,j1%,j2%,i1%,i2%,i1,i2,d%
  '
  fr%=10                         ! Fangradius fÅr den Endpunkt
  ERASE x%()                     ! Felder lîschen
  ERASE y%()
  DIM x%(502),y%(502)            ! Feld neu dimensionieren
  DEFFILL 1,1,1
  GRAPHMODE 3                    ! Graphikmodus XOR
  '                              ! Ziel umfahren
  REPEAT                         ! Los geht's
    MOUSE x,y,k
    INC d%                       ! DurchlaufzÑhler
    IF MOUSEK=1 AND d%>20        ! fÅr Reaktions-Verzîgerung
      IF x<>x% OR y<>y%          ! neuer Punkt ? ja, dann
        CLR d%                   ! Verzîgerung lîschen
        IF i>0                   ! nicht erster Punkt ?
          x1%=x%                 ! dann alte Koordinaten Åbernehmen
          y1%=y%
        ELSE                     ! sonst neue
          x1%=x
          y1%=y
        ENDIF
        x%=x                     ! Mausposition zwischenspeichern
        y%=y
        INC i                    ! nÑchster Punkt
        x%(i)=x%                 ! Koordinaten ablegen
        y%(i)=y%
        PLOT x%,y%               ! Punkt setzen
        DRAW x1%,y1% TO x%,y%    ! und vorletzten mit letztem Punkt verbinden
      ENDIF
      '
      IF i>10                    ! Entfernung zum Startpunkt < Fangradius ?
        IF INT(x%(1)/fr%)*fr%=INT(x%(i)/fr%)*fr% AND INT(y%(1)/fr%)*fr%=INT(y%(i)/fr%)*fr%
          exo!=TRUE              ! ja, abbrechen
        ENDIF
      ENDIF
    ENDIF
    '
  UNTIL i>499 OR exo!=TRUE OR MOUSEK=2 ! mehr als 500 Punkte, Abbruch oder Mausklick re.
  GRAPHMODE 1                    ! normaler Zeichenmodus
  IF i<3                         ! mindestens drei Punkte braucht's schon
    GOTO abbrechen
  ENDIF
  '
  CLR d%                         ! Lasso erstellen
  n=i+1                          ! PunktezÑhler korrigieren
  x%(n)=x%(1)                    ! Anfangs- = Endpunkt
  y%(n)=y%(1)
  CLR k,maxx,maxy
  minx=1000                      ! mehr geht nicht
  miny=1000
  maxx=1
  maxy=1
  n%=i
  FOR j%=1 TO n                  ! maximale Ausdehnung bestimmen und in
    maxx=MAX(maxx,x%(j%))        ! Rechteckform bringen
    maxy=MAX(maxy,y%(j%))
    minx=MIN(minx,x%(j%))
    miny=MIN(miny,y%(j%))
  NEXT j%
  xl%=ABS(maxx-minx)             ! LÑnge und Breite berechnen
  yl%=ABS(maxy-miny)
  '
  IF xl%>6 AND yl%>6 AND n>2 AND k<>2 ! Mindestgrîûe = 6 x 6 Pixel
    @lasso_erzeugen              ! und Lasso-Block erzeugen
  ENDIF
  abbrechen:
RETURN
> PROCEDURE lasso_erzeugen         ! 2. Teil
  SPUT bild$(1)                  ! Quelle auf Bildschirm bringen
  GET minx,miny,maxx,maxy,bild$(3) ! Block nach Bild 3 retten
  CLS                            ! Bildschirm lîschen
  '
  FOR i=1 TO n-1                 ! Umgrenzungslinie bilden:
    DRAW x%(i),y%(i) TO x%(i+1),y%(i+1) ! Punkte miteinander verbinden
  NEXT i
  BOX minx-2,miny-2,maxx+2,maxy+2 ! Umgrenzungs-Rechteck bilden
  '
  IF minx>2                      ! Zwischen Umgrenzung-Rechteck
    FILL minx-1,miny-1           ! und Umgrenzungslinie fÅllen
  ELSE
    FILL maxx+1,maxy+1
  ENDIF
  '
  GET minx,miny,maxx,maxy,bild$(2) ! gefÅllte Maske nach Bild 2 retten
  PUT minx,miny,bild$(3),2       ! Original mit Maske im Bildschirm
  '                              ! per AND NOT-Kopiermodus verknÅpfen
  GET minx,miny,maxx,maxy,bild$(3) ! Letzten Block retten
  '
  ' Pufferinhalte: Bild 1= Original
  '                Bild 2= Maske
  '                Bild 3= maskiertes Original (noch mit Rand)
  '
  IF km%=2                       ! Reduzierendes Lasso:
    CLS                          ! Bildschirm aufrÑumen
    DEFFILL 1,0,0
    BOX minx-2,miny-2,maxx+2,maxy+2 ! Umgrenzungs-Rechteck bilden
    PUT minx,miny,bild$(3),2     ! maskiertes Original aufkopieren
    DEFFILL 1,1,1
    FILL minx-1,miny-1           ! mit Schwarz fÅllen
    PUT minx,miny,bild$(3),4     ! per (NOT Quelle) AND-Modus maskiertes Original
    GET minx,miny,maxx,maxy,bild$(2) ! Maske neu besetzen
  ENDIF
RETURN
> PROCEDURE lasso_kopieren         ! 2. Teil
  LOCAL x,y,b$,i,k
  SPUT bild$(1)                  ! Originalbild holen
  IF move%=1                     ! Umrandeten Block per XOR lîschen
    PUT minx,miny,bild$(3),6     ! (= Bewegen)
  ENDIF
  @b_i
  REPEAT                         ! Maustastenbuffer leeren
  UNTIL MOUSEK=0
  '
  REPEAT
    MOUSE x,y,k
    @b_s                         ! Flimmerfreiheit ein
    @event_taste                 ! Tastatur abfragen ( UNDO etc.)
    PUT x,y,bild$(2),1           ! <--- Das erste PUT Åberdeckt den Hintergrund:
    '                            ! Maske per AND-VerknÅpfung
    PUT x,y,bild$(3),7           ! <--- Jetzt eingefangenes Original per
    '                            ! Transparent-Modus aufkopieren
    IF k=1                       ! linke Maustaste gedrÅckt ? ja, dann
      SGET c$                    ! Anti-Flimmer-Puffer neu besetzen
    ENDIF                        ! also Lasso-Inhalt Åbernehmen
  UNTIL k=2
  @b_o
  '
RETURN
> PROCEDURE biegen                 ! 2. Teil
  @vollbild                      ! MenÅleiste weg
  @raster                        ! Auswahlrechteck aufrufen
  IF xl%>5 AND yl%>5             ! Mindestgrîûe fÅr Biegefunktion = 5 x 5 Pixel
    DEFLINE lin%,0,0,0
    GET x1%,y1%,x2%,y2%,a$       ! Block nach a$
    xa%=319-xl%/2                ! Mittenposition berechnen
    ya%=199-yl%/2
    d%=(399-yl%)/2               ! Radius
    d=PI/xl%                     ! Skalierungsfaktor
    CLS
    LINE xa%,ya%,xa%,ya%+yl%     ! linke und rechte Begrenzung
    LINE xa%+xl%,ya%,xa%+xl%,ya%+yl%
    @b_i
    DO
      MOUSE x%,y%,k%
      EXIT IF k%<>0
      @b_s                       ! Rahmen zeichnen:
      IF y%<ya%                  ! nach oben biegen
        ry%=ABS(ya%-y%)
        x1=xl%/2*COS(PI)+319     ! Startpunkte berechnen
        y1=ry%*SIN(PI)+ya%
        FOR i=PI TO 2*PI+0.1 STEP 0.1 ! Berechnung des Bogens
          x=xl%/2*COS(i)+319
          y=ry%*SIN(i)+ya%
          DRAW x1,y1 TO x,y      ! letzten und vorletzten Punkt
          DRAW x1,y1+yl% TO x,y+yl% ! miteinander verbinden, li. + re.
          x1=x                   ! Koordinaten ablegen
          y1=y
        NEXT i
        flag%=1
      ELSE                       ! nach unten biegen, siehe oben
        flag%=2
        IF y%+yl%>399
          y%=399-yl%
        ENDIF
        ry%=ABS(ya%-y%)
        x1=xl%/2*COS(0)+319
        y1=ry%*SIN(0)+ya%
        FOR i=0 TO PI+0.1 STEP 0.1
          x=xl%/2*COS(i)+319
          y=ry%*SIN(i)+ya%
          DRAW x1,y1 TO x,y
          DRAW x1,y1+yl% TO x,y+yl%
          x1=x
          y1=y
        NEXT i
      ENDIF
    LOOP
    @b_o
    IF k%<>2                     ! Maustaste links gedrÅckt
      CLS
      PUT xa%,ya%,a$             ! Ausschnitt auf Schirm
      CLR a$
      IF flag%=2                 ! nach unten
        CLR i
      ELSE
        i=PI                     ! nach oben
      ENDIF
      DEFLINE 1,0,0,0
      SGET c$
      CLS
      FOR x%=1 TO xl%            ! Berechnung und Darstellung des Verbogenen
        y%=ry%*SIN(i)+ya%
        RC_COPY V:c$,xa%+x%,ya%,1,yl% TO XBIOS(3),xa%+x%,y%,3
        ADD i,d
      NEXT x%
      x1%=xa%                    ! Ausschnittsgrîûe neu berechnen
      x2%=xa%+xl%
      IF flag%=2                 ! nach unten
        y1%=ya%
        y2%=ya%+yl%+ry%
      ELSE                       ! nach oben
        y1%=ya%-ry%
        y2%=ya%+yl%
      ENDIF
      yl%=yl%+ry%
      @kopieren                  ! Ergebnis kopieren
    ENDIF
  ENDIF
  SPUT puffer$(aktiv%)
  CLR c$,flag%
RETURN
'
> PROCEDURE menue                  ! Achtung: énderung
  MENU OFF
  IF k%<>2
    me%=MENU(0)
  ENDIF
  CLR move%
  DEFTEXT 1,0,0,13
  DEFLINE 1,0,0,0
  @m_leer                        ! Mauspuffer leeren
  DEFMOUSE 5
  SELECT me%                     ! reagieren
  CASE 1
    ALERT 0," Kostas Lavassas:  MIKRODRAW   |  TOS - Magazin + Software   |     fÅr Atari ST und TT ",1," Aha ",a%
  CASE 11
    @bild_laden                  ! Bild laden
  CASE 12
    @bild_speichern              ! Bild speichern
  CASE 14
    @obj_laden                   ! GFA-Objekt laden
  CASE 15
    @obj_speichern               ! GFA-Objekt speichern
  CASE 17
    @ende                        ! Programm beenden
  CASE 20 TO 24
    @vollbild                    ! 20: Linie, 21: Rechteck, 22: Quadrat,
    @zeichnen                    ! 23: Kreis, 24: Ellipse
  CASE 25                        ! Freizeichnen
    @vollbild
    @freizeichnen
  CASE 26                        ! SprÅhen
    @spruhen
  CASE 27                        ! FÅllen
    @fill
  CASE 28                        ! Lupe
    @lupe
  CASE 29                        ! Radiergummi
    @radiergummi
  CASE 32                        ! Kopieren
    @vollbild
    @raster
    @kopieren
  CASE 33                        ! Bewegen
    @vollbild
    @raster
    @kopieren
  CASE 34                        ! Lasso kopieren
    @lasso
  CASE 35                        ! Lasso verschieben
    @lasso
  CASE 36                        ! Biegen
    @biegen
  CASE 37                        ! Verzerren
    @verzerren
  CASE 38                        ! Spiegeln horizontal
    @spiegeln_h
  CASE 39                        ! Spiegeln vertikal
    @spiegeln_v
  CASE 40 TO 42                  ! 40: Solarisation, 41: VerstÑrken
    @bild_manipulation           ! 42: VerdÅnnen
  CASE 43                        ! Format Ñndern (Formen)
    @formen
  CASE 44                        ! Invertieren
    @invertieren
  CASE 48                        ! Textart einstellen
    @textart
  CASE 49                        ! Text schreiben
    @text_schreiben
  CASE 52                        ! Linienattribute
    @linart
  CASE 53                        ! FÅllattribute
    @fuellattribute
  CASE 54                        ! FÅllmuster
    @muster
  CASE 55                        ! Kopierart
    @kopierart
  CASE 56                        ! Kopiermodus
    @kopiermodus
  CASE 59                        ! Drucken 9-Nadler
    @drucken
  CASE 60                        ! Drucken System (Hardcopy)
    @drucken
  ENDSELECT
  DEFMOUSE 8
  @m_leer
  CLR flag%
  @menu_aufbauen
RETURN
'
' -----------------------------Ende  Teil 2-----------------------------------
