'
'          Erstellung von eigenen Modulen fÅr Lavadraw Plus
'
'             programmiert von Konstantinos Lavassas 1990
'
' ---------------------------------------------------------------------------
' Um eine eigenes Modul fÅr Lavadraw Plus zu erstellen, brauchen Sie im
' Prinzip nur 5 verschiedene Proceduren, die im compilierten Programm die
' Verbindung zu Lavadraw herstellen:
'
' a) - 'LDW'           hier wird die Schnittstelle zu Lavadraw ausgewertet
' b) - 'BLTINIT'       Parameter fÅr BITBLT initialisieren
' c) - 'Blt_lesen'     kopieren des Bitmapausschnittes auf den Bildschirm
' d) - 'Blt_Schreiben' kopieren des Bildschirminhaltes auf die Bitmap
' e) - 'Scrollen'      bewege Bildschirm-Fenster auf der Bitmap
'
' ---------------------------------------------------------------------------
'
@ldw                         ! Commandline auswerten
'
@blt_init                    ! BIT_BLT-Parameter festlegen
'
@start_test                  ! Test (Lesen / Schreiben auf die Bitmap)
'
' ---------------------------------------------------------------------------
'
' Unterprogramme:
'
> PROCEDURE ldw                ! Modul-Aufruf (a)
  a$=SPACE$(34)              ! Puffer aus 34 Bytes
  c%=BASEPAGE+128            ! Commandline-Adresse aus Basepage ermitteln
  BMOVE c%,V:a$,30           ! Kopiere Inhalt in Puffer
  ERASE a$()                 ! Parameterpuffer lîschen
  DIM a$(13)                 ! Dimensionierung
  a$=TRIM$(a$)
  i%=1                       !
  FOR i=1 TO 30              ! Parameter lesen und in Einzelwerte umwandeln
    b$=MID$(a$,i,1)
    IF b$<>","
      a$(i%)=a$(i%)+b$
    ELSE
      INC i%
    ENDIF
    EXIT IF i%>4
  NEXT i
  '
  sp_adr%=VAL(a$(2))         ! Startadresse der Bitmap
  lenge%=VAL(a$(3))          ! LÑnge der Bitmap in Bytes
  breite%=lenge%*8           ! LÑnge der Bitmap in Pixel
  zeile%=VAL(a$(4))          ! Hîhe der Bitmap
  '
  ' Mit folgendem Trick kînnen Sie Ihre Programme auch unabhÑngig von
  ' Lavadraw starten:
  '
  IF a$(1)="LDW"             ! Kennung (Modul wurde aufgerufen)
    ldw%=1
    PRINT AT(2,2);"Bitmapadresse  : ";sp_adr%
    PRINT AT(2,3);"LÑnge in Bytes : ";lenge%
    PRINT AT(2,4);"LÑnge in Pixel : ";breite%
    PRINT AT(2,5);"Hîhe  in Zeilen: ";zeile%
    ALERT 0,"Das Modul ist aktiv! ",1," OK ",a%
  ELSE
    ALERT 0,"Ich bin ein normales |Programm !",1," OK ",a%
  ENDIF
  '
  ERASE a$()                 ! Puffer lîschen
  CLR a$
RETURN
'
> PROCEDURE blt_init           ! BITBLT-Parameter festlegen (b)
  '
  ERASE q%(),p%(),z%()       ! BITBLT-Array lîschen und dimensionieren
  DIM q%(8),p%(8),z%(8)
  '
  ' Quelle:
  '
  q%(0)=sp_adr%              ! muû immer gerade sein (Startadresse der Bitmap)
  q%(1)=breite%              ! Rasterbreite in Punkte/Bits (durch 16 teilbar)
  q%(2)=zeile%               ! Rasterhîhe (Anzahl der Zeilen)
  q%(3)=lenge%/2             ! Rasterbreite in Wîrtern: q%(1)/16
  q%(5)=1                    ! Anzahl der Bitplanes (Hires=1)
  '
  ' Ziel:
  '
  z%(0)=XBIOS(3)             ! muû immer gerade sein (Bildschirm)
  z%(1)=640                  ! Rasterbreite in Punkte/Bits (durch 16 teilbar)
  z%(2)=400                  ! Rasterhîhe (Anzahl der Zeilen)
  z%(3)=40                   ! Rasterbreite in Wîrtern: q%(1)/16
  z%(5)=1                    ! Anzahl der Bitplanes (Hires=1)
  '
  p%(8)=3                    ! Kopiermodus (Werte von 1 - 15 )
  '
  CLR x_p%,y_p%              ! Aktuelle Fensterposition auf der Bitmap
RETURN
'
> PROCEDURE blt_lesen          ! Fenster lesen (c)
  '
  ' Quelle ist die Bitmap
  '
  p%(0)=x_p%                 ! Quelle X-koordinate linke obere Ecke
  p%(1)=y_p%                 !        Y-Koordinate linke obere Ecke
  p%(2)=x_p%+639             ! Quelle X-koordinate rechte untere Ecke
  p%(3)=y_p%+399             !        Y-Koordinate rechte untere Ecke
  '
  ' Ziel ist der Bildschirm
  '
  p%(4)=0                    ! Ziel   X-koordinate linke obere Ecke
  p%(5)=0                    !        Y-Koordinate linke obere Ecke
  p%(6)=639                  ! Ziel   X-koordinate rechte untere Ecke
  p%(7)=399                  !        Y-Koordinate rechte untere Ecke
  '
  BITBLT q%(),z%(),p%()
RETURN
'
> PROCEDURE blt_schreiben      ! Fenster schreiben (d)
  '
  ' Falls Sie etwas gezeichnet haben, kînnen Sie es mit dieser Routine
  ' auf die Bitmap Åbernehmen
  '
  ' Ziel ist die Bitmap
  '
  p%(4)=x_p%                 ! Ziel   X-koordinate linke obere Ecke
  p%(5)=y_p%                 !        Y-Koordinate linke obere Ecke
  p%(6)=x_p%+639             !        X-koordinate rechte untere Ecke
  p%(7)=y_p%+399             !        Y-Koordinate rechte untere Ecke
  '
  ' Quelle ist der Bildschirm
  '
  p%(0)=0                    ! Quelle X-koordinate linke obere Ecke
  p%(1)=0                    !        Y-Koordinate linke obere Ecke
  p%(2)=639                  ! Quelle X-koordinate rechte untere Ecke
  p%(3)=399                  !        Y-Koordinate rechte untere Ecke
  '
  BITBLT z%(),q%(),p%()
  '
RETURN
'
> PROCEDURE scrollen           ! Bildschirm auf der Bitmap bewegen (e)
  '
  ' Bewegungsrichtung auswerten
  ' Es wird jeweils um (speed%) Pixel verschoben. Man kann natÅrlich auch
  ' andere Werte (1-128) einsetzen. Werte >128 sind nicht zu empfehlen.
  ' Achten Sie darauf, daû Sie horizontal nicht 639 bzw. vertikal 399
  ' Åberschreiten
  '
  ' Parameter speed% = Anzahl der jeweils addierten/subtrah. Pixel
  '
  IF x%>319 AND x_p%<breite%-640  ! nach rechts
    ADD x_p%,speed%
  ENDIF
  IF x%<319 AND x_p%>0            ! nach links
    SUB x_p%,speed%
  ENDIF
  IF y%>199 AND y_p%<zeile%-400   ! nach unten
    ADD y_p%,speed%
  ENDIF
  IF y%<199 AND y_p%>0            ! nach oben
    SUB y_p%,speed%
  ENDIF
  '
  SETMOUSE 319,199                ! Maus in die Mitte des Bildschirmes
  HIDEM                           ! positionieren und ausschalten
  @blt_lesen                      ! Bitmap-Ausschnitt lesen
  SHOWM                           ! Maus einschalten
RETURN
'
> PROCEDURE start_test
  '
  ' Ein einfaches Beispiel, wie Sie die Routinen  BLT_INIT, BIT_LESEN,
  ' BIT_SCHREIBEN, SCROLLEN und LDW in eigenen Programmen problemlos
  ' verwenden. Bei eingeschaltete Blitter bekommen Sie eine Beschleunigung
  ' der Scrollfunktion um ca. den Faktor 8 (das entspricht einer etwa 2 mal
  ' langsameren AusfÅhrung als die Assembler-Scrollroutine von Lavadraw),
  ' jedoch eine angenehme Scrollgeschwindigkeit.
  ' Wenn Sie unseren Grafikkurs aufmerksam verfolgt haben, ist die
  ' Einbindung dieser Routinen eine Sache von ein paar Minuten.
  '
  ALERT 0,"| Scrollgeschwindigkeit:| ",1,"8|16|32",zz%
  SELECT zz%
  CASE 1
    speed%=8
  CASE 2
    speed%=16
  CASE 3
    speed%=32
  ENDSELECT
  '
  '
  @blt_lesen                 ! Ausschnitt aus der Bitmap lesen
  '
  DO
    '
    MOUSE x%,y%,k%           ! Mausstatus abfragen
    '
    EXIT IF k%=2             ! Ausgang mit rechter Maustaste
    '
    IF k%=1                  ! Wenn linke Maustaste:
      BOX 0,0,200,30         ! Zeichne auf dem Bildschirm ein Rechteck
      TEXT 0,20,"TEST"       ! Schreibe links oben das Wort 'TEST'
      LINE 200,30,639,399    ! ziehe eine Linie Åber den Bildschirm
      CIRCLE 319,199,100     ! setze einen Kreis in die Bildschirmmitte
      @blt_schreiben         ! Ergebnis auf die Bitmap Åbernehmen
    ENDIF
    '
    IF x%<>319 OR y%<>199    ! Bei beliebigen Mausbewegungen wird in die
      @scrollen              ! entsprechende Richtung gescrollt.
    ENDIF
    '
  LOOP
  '
  END
RETURN
'
