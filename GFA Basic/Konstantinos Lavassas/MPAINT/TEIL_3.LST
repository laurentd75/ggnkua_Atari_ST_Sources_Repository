'
' Mikrodraw
'
' Teil 3
'
' Programmiert von Konstantinos Lavassas
'         Januar/Februar 1990
'
' Redaktion: Ulrich Hilgefort
'
' fÅr:  TOS - Magazin + Software fÅr Atari ST und TT
'
' ----------------------------------------------------------------------------
'
> PROCEDURE verzerren              ! 3. Teil
  LOCAL c$,xa%,xe%,d
  @vollbild                      ! MenÅleiste weg
  @raster                        ! Auswahlrechteck aufrufen
  IF xl%>0 AND yl%>0 AND k%=1    ! Auswahl > 0 und linke Maustaste gedrÅckt
    GET x1%,y1%,x2%,y2%,a$       ! Block nach a$
    CLS                          ! Bildschirm lîschen
    PUT 319-xl%/2,0,a$           ! Block zentrieren (horizontal)
    xa%=319-xl%/2                ! Linke Bildkante errechnen
    xe%=xa%+xl%                  ! Rechte Bildkante errechnen
    SGET c$                      ! Quellpuffer erstellen
    DO                           ! Verzerrschleife:
      MOUSE x%,y%,k%             ! Mausstatus abfragen
      EXIT IF k%=2               ! Ausgang mit rechter Maustaste
      IF k%=1                    ! linke Maustaste wurde gedrÅckt:
        IF x%+xl%>638            ! nur innerhalb des Bildschirmes verzerren
          x%=638-xl%
        ENDIF
        xe%=x%                   ! Endpunkt = Mausposition
        d=(xe%-xa%)/yl%          ! Skalierungsfaktor errechnen
        CLS
        FOR y%=0 TO yl%          ! Verzerren
          xx%=y%*d+xa%           ! linke x-Koordinate errechnen
          RC_COPY V:c$,xa%,y%,xl%,1 TO XBIOS(3),xx%,y%,3  ! Zeile kopieren
          ' Quelle       :    :  : Ziel          :   :
          '    Linke Ecke     :  :     Linke Ecke    :
          '             Breite   :        Kopiermodus 
          '                  Hîhe 
        NEXT y%                  ! weiter
      ENDIF
    LOOP
    CLR c$                       ! Quelle lîschen
    y1%=0                        ! Neue Ausschnittsgrîûe berechnen
    y2%=yl%
    IF xe%<xa%
      x1%=xe%
      x2%=xa%+xl%
    ELSE
      x1%=xa%
      x2%=xe%
    ENDIF
    xl%=ABS(x1%-x2%)
    @kopieren                    ! kopieren
  ENDIF
RETURN
> PROCEDURE spiegeln_h             ! 3. Teil
  @vollbild                      ! MenÅleiste weg
  @raster                        ! Auswahlrechteck aufrufen
  IF xl%>0 AND yl%>0 AND k%=1    ! Auswahl > 0 und linke Maustaste gedrÅckt
    CLR i%                       ! Laufvariable initialisieren
    FOR x%=x1% TO x2%            ! Schleife links/Anfang bis rechts/Ende
      INC i%                     ! Laufvariable um 1 erhîhen
      RC_COPY V:puffer$(aktiv%),x%,y1%,1,yl% TO XBIOS(2),x2%-i%,y1%,3
      ' Beschreibung dieser Funktion siehe unter Verzerren
    NEXT x%
    @kopieren                    ! gespiegelten Ausschnitt kopieren
  ENDIF
RETURN
> PROCEDURE spiegeln_v             ! 3. Teil
  @vollbild
  @raster                        ! siehe spiegeln_h
  IF xl%>0 AND yl%>0
    CLR i%
    FOR y%=y1% TO y2%            ! Schleife oben/Anfang bis unten/Ende
      INC i%
      RC_COPY V:puffer$(aktiv%),x1%,y%,xl%,1 TO XBIOS(2),x1%,y2%-i%,3
    NEXT y%
    @kopieren
  ENDIF
RETURN
> PROCEDURE bild_manipulation      ! 3. Teil
  LOCAL xmin%,ymin%,xmax%,ymax%,i%,j%
  @vollbild
  @raster
  IF xl%>0 AND yl%>0 AND k%=1    ! Auswahl > 0 und linke Maustaste gedrÅckt
    SELECT me%                   ! je nach aktivierter Funktion:
    CASE 40                      ! Solarisation
      i%=7                       ! Kopiermodus 1: transparent
      j%=6                       !             2: xor
      '
    CASE 41                      ! VerstÑrken
      i%=7                       ! Kopiermodus 1: transparent
      j%=7                       !             2: transparent
      '
    CASE 42                      ! VerdÅnnen
      i%=1                       ! Kopiermodus 1: neues Bild AND Hintergrund
      j%=5                       !             2: Hintergrund (neutral)
    ENDSELECT
    '
    GET x1%,y1%,x2%,y2%,a$       ! Block nach a$
    '
    PUT x1%-1,y1%,a$,i%          ! Block in alle Richtungen kopieren
    PUT x1%+1,y1%,a$,i%          ! und Effekt hiermit erreichen
    PUT x1%,y1%-1,a$,i%
    PUT x1%,y1%+1,a$,i%
    PUT x1%-1,y1%-1,a$,i%
    PUT x1%+1,y1%+1,a$,i%
    PUT x1%+1,y1%-1,a$,i%
    PUT x1%-1,y1%+1,a$,i%
    PUT x1%,y1%,a$,j%            ! Korrekturaufruf mit Modus 2
    '
    GET x1%-1,y1%-1,x2%+1,y2%+1,a$ ! neuen Block nach a$
    @kopieren                    ! und kopieren
  ENDIF
RETURN
> PROCEDURE formen                 ! 3. Teil
  LOCAL x,y,scale%,i,d,xm%,ym%,xmin%,ymin%,xmax%,ymax%,c$
  @vollbild
  @raster                        ! Block markieren
  IF k%=1 AND xl%>0 AND yl%>0
    xmin%=MIN(x1%,x2%)           ! Blockkoordinaten sortieren
    xmax%=MAX(x1%,x2%)
    ymin%=MIN(y1%,y2%)
    ymax%=MAX(y1%,y2%)
    xm%=xl%
    ym%=yl%
    GET xmin%,ymin%,xmax%,ymax%,a$ ! Block in Puffer a$
    '
    ALERT 2," Block formen | A - Proportional | B - Beliebig ",1," A | B ",f_flag%
    '
    @m_leer                      ! Mauspuffer leeren
    @raster                      ! Neuen Block definieren
    '
    CLR f_flag%
    '
    IF xm%>0 AND ym%>0 AND xl%>0 AND yl%>0 ! Hîhe formen:
      c$=puffer$(aktiv%)         ! Bildschirm in Puffer
      CLS
      IF ym%>=yl%                ! Neue BlocklÑnge kleiner als alte
        i=0                      ! Zielkoordinate
        y=ymin%                  ! Quellkoordinate/Start
        d=yl%/ym%                ! Skalierungsfaktor
        FOR k=0 TO ym%           ! Los geht's : von oben nach unten
          RC_COPY V:c$,xmin%,y,xm%+1,1 TO XBIOS(3),0,INT(i),7
          INC y
          ADD i,d                ! Zielkoordinate erhîhen
        NEXT k
      ELSE                       ! Neue BlocklÑnge grîûer als die alte
        d=ym%/yl%                ! Skalierungsfaktor
        i=ymin%                  ! Quellkoordinate/Start
        FOR k=0 TO yl%
          ADD i,d                ! Zielkoordinate erhîhen
          RC_COPY V:c$,xmin%,INT(i),xm%+1,1 TO XBIOS(3),0,k,7
        NEXT k
      ENDIF
      SGET c$                    ! Neuen Block in Puffer Åbernehmen
      '
      CLS                        ! Breite formen (Ñhnlich wie Hîhe)
      IF xm%>=xl%                ! Neue Blockbreite kleiner als alte
        i=0
        d=xl%/xm%
        FOR k=0 TO xm%+1         ! von links nach rechts:
          RC_COPY V:c$,k,1,1,ym%+1 TO XBIOS(3),INT(i),1,7
          ADD i,d
        NEXT k
      ELSE
        d=xm%/xl%
        i=0
        FOR k=0 TO xl%+1
          RC_COPY V:c$,INT(i),1,1,yl%+1 TO XBIOS(3),k,1,7
          ADD i,d
        NEXT k
      ENDIF
    ENDIF
    CLR c$
    x1%=0                        ! Neue Blockkoordinaten berechnen
    y1%=0
    x2%=xl%+1
    y2%=yl%+1
    @kopieren                    ! Ergebnis kopieren
  ENDIF
RETURN
> PROCEDURE invertieren            ! 3. Teil
  @vollbild
  @raster                        ! Auswahlrechteck aufrufen
  IF xl%>0 AND yl%>0 AND k%=1    ! Auswahl > 0 und linke Maustaste gedrÅckt
    GET x1%,y1%,x2%,y2%,a$       ! Ausschnitt nach a$ holen
    PUT x1%,y1%,a$,12            ! und invertiert ausgeben
    @kopieren
  ENDIF
  SGET puffer$(aktiv%)           ! öbernehmen
RETURN
'
' -----------------------------TEXTOPERATIONEN--------------------------------
> PROCEDURE textart                ! 3. Teil
  CLS
  RESTORE tex                    ! MenÅ aufbauen:
  y=0
  DEFTEXT 1,0,0,13
  TEXT 50,394,"TEXTATTRIBUTE"
  FOR i=1 TO 15
    READ ta%,tg%
    DEFTEXT 1,ta%,0,tg%          ! Textmodus einstellen
    TEXT 20,y+20,"ABCDEFabcdef"  ! Testtext ausgeben
    BOX 2,y,200,y+25             ! und einrahmen
    ADD y,25                     ! 25 Punkte weiter nach unten
  NEXT i
  GET 0,0,200,399,r$             ! Bildausschnitt in r$ puffern
  @m_leer                        ! Mauspuffer leeren
  DO                             ! Attribute auswÑhlen:
    MOUSE x,y,k                  ! Maus abfragen
    y%=INT(y/25)                 ! Maus befinden sich im Rahmen Nr. y%
    IF y1%<>y% AND y%<15         ! neues Feld angeklickt ?
      y1%=y%                     ! ja, alt=neu
      PUT 0,0,r$                 ! Bildschirm restaurieren
      GET 3,y1%*25+1,199,y1%*25+24,a$ ! aktuelles Fenster in Puffer holen
      PUT 3,y1%*25+1,a$,12       ! und invertieren
    ENDIF
    EXIT IF k<>0                 ! Ausgang bei Mausklick
  LOOP
  CLR r$,a$                      ! Puffer leeren
  '
  RESTORE tex                    ! Attribute Åbernehmen:
  FOR i=1 TO y1%+1               ! bis zum gewÑhlten Fenster hochzÑhlen
    READ ta%,tg%                 ! und Datas Åbernehmen
  NEXT i
  '
  tex:                           ! Attributkombinationen:
  DATA 0,4
  DATA 1,4
  DATA 4,4
  DATA 0,6
  DATA 1,6
  DATA 16,6
  DATA 4,6
  DATA 0,13
  DATA 1,13
  DATA 16,13
  DATA 4,13
  DATA 0,20
  DATA 1,20
  DATA 16,20
  DATA 4,20
  '
  SPUT puffer$(aktiv%)           ! Hintergrund restaurieren
RETURN
> PROCEDURE text_schreiben         ! 3. Teil
  @vollbild                      ! MenÅleiste weg
  DEFFILL 1,0,0                  ! Muster weiû
  DEFTEXT 1,ta%,0,tg%            ! Textattribute setzen
  VDISYS 38
  ch%=DPEEK(PTSOUT+6)            ! ergibt die Hîhe der Buchstaben
  @b_i
  GRAPHMODE 2                    ! Graphikmodus transparent
  DO
    MOUSE x%,y%,k%               ! Maus abfragen
    t$=INKEY$                    ! Tastatur abfragen
    '
    ' Mit 'Alternate' und den Ziffern im Zahlenblock sind alle ASCII's
    ' zugÑnglich: z.B. Alternate + 0 + 0 + 3 ->  
    '
    IF t$<>""                    ! Taste wurde gedrÅckt
      t%=ASC(RIGHT$(t$))         ! ASCII / Scancode erfragen
      '
      IF LEN(t$)=1               ! ASCII-Code (Normaltasten)
        SELECT t%
        CASE 127                 ! DEL lîscht die ganze Zeile
          alt_text$=tex$         ! alte Zeile = neue Zeile
          tex$=""                ! lîsche aktuelle Zeile
        CASE 27                  ! ESC = Ausgang
          k%=2
        CASE 8                   ! Backspace
          IF tex$<>""            ! wenn TextlÑnge>0
            tex$=LEFT$(tex$,LEN(tex$)-1) ! Text um 1 Zeichen vermindern
          ENDIF
          '
        CASE 13                  ! Return
          IF y%+ch%<399          ! Wenn der untere Rand noch nicht
            @b_s                 ! erreicht ist
            TEXT x%+1,y%,tex$    ! bringe Text auf der lezten Mausposition
            alt_text$=tex$       ! alt_tex$ neu besetzen
            SGET c$              ! Åbernehme Bild in Puffer
            ADD y%,ch%           ! eine Zeile tiefer gehen
            SETMOUSE x%,y%       ! und die Maus neu positionieren
            CLR tex$             ! lîsche alten Textpuffer
          ENDIF
          '
        DEFAULT                  ! Falls keine der vorherigen Taste
          tex$=tex$+t$           ! Binde zum Textpuffer das gewÅnschte
        ENDSELECT                ! Zeichen
        '
      ELSE                       ! Scan-Code (Sondertasten)
        '
        IF t%=97                 ! Undo
          c$=puffer$(aktiv%)     ! öbernehme alten Puffer
        ENDIF
        IF t%=98                 ! Help: letzte Zeile = aktuelle Zeile
          IF alt_text$<>""       ! natÅrlich nur, wenn eine existiert
            tex$=alt_text$
          ENDIF
        ENDIF
      ENDIF
    ENDIF
    EXIT IF k%=2                 ! Abbruch bei Mausklick rechts
    '
    @b_s                         ! Swap logischen/physikalischen Schirm
    '
    TEXT x%+1,y%,tex$            ! Text zeichnen an akt. Mausposition
    LINE x%,y%+2,x%,y%-ch%+2     ! Markierungslinien ausgeben
    LINE x%+1,y%+2,639,y%+2      ! (Lineal)
    '
    IF k%=1 AND tex$<>""         ! wenn Linksklick und Textpuffer leer
      @m_leer                    ! Mauspuffer leeren
      @b_s                       ! Swap logischen/physikalischen Schirm
      TEXT x%+1,y%,tex$          ! nur reinen Text positionieren
      alt_text$=tex$
      SGET c$                    ! und in Puffer Åbernehmen
    ENDIF
  LOOP                           ! Schleifenende
  @b_o
  GRAPHMODE 1                    ! Graphikmodus Åberdeckt
  SGET puffer$(aktiv%)           ! Ergebnis Åbernehmen
RETURN
'
' --------------------------------Vorspann------------------------------------
> PROCEDURE effekt                 ! 3. Teil
  '
  ' Dieser Vorspann kann weggelassen werden !
  ' Falls gewÅnscht, muû >>@effekt<< hinter >>@vorbereitung<<  
  ' eingesetzt werden . 
  '
  CLS
  DIM a$(400)
  @b_i                           ! Alles geschieht im Hintergrund
  @b_s
  DEFMOUSE 8
  DEFTEXT 1,0,0,20
  a$=CHR$(14)+CHR$(15)+" MIKROPAINT 1.0 "+CHR$(14)+CHR$(15)
  TEXT 20,300,"MIKROPAINT 1.0"
  DEFTEXT 1,0,0,13
  TEXT 20,330,"Programmiert von Konstantinos Lavassas fÅr das TOS-Magazin"
  TEXT 20,350,"Bahnhofstraûe 11, 3551 Bad Endbach, Telefon (02776) 8145"
  DEFTEXT 1,2,0,20
  TEXT 20,380,"Atari ST vor ever!"
  CLR yy%,f%,a$
  '
  ' So hat man frÅher ohne RC_COPY gearbeitet ...
  '
  my%=6
  miny%=390
  FOR u%=250 TO miny% STEP my%
    INC yy%
    GET 0,u%,550,u%+my%-1,a$(yy%) ! Bildsequenzen im Feld/Puffer
  NEXT u%
  @b_o
  FOR i%=1 TO yy%                  ! von 1 bis Anzahl der Felder
    FOR k%=0 TO miny% STEP my%     ! von oben bis unterste Position
      PUT 0,k%,a$(yy%-f%)          ! bewege in my% AbstÑnden das Bild
    NEXT k%
    INC f%                         ! weiter
    SUB miny%,my%                  ! unterste Position um my%=Feldhîhe
  NEXT i%                          ! vermindern
  @m_leer
  PRINT AT(71,25);"[ TASTE ]";
  REPEAT
  UNTIL INKEY$<>""                 ! Warten auf Tastendruck
  '
  ERASE a$()                       ! Feldpuffer wird nicht mehr gebraucht
  CLR miny%,l%,u%,yy%,f%
RETURN
'
' ------------------------------ Ende 3. Teil --------------------------------
