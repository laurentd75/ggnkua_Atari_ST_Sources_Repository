' /***********************************************
' *    Simple GFA blitter example                *
' *                                              *
' *    this program demonstrates using the       *
' *    Gem blit routines to scroll a region      *
' *    of the screen around.                     *
' *                                              *
' *    by Samuel Streeper                        *
' *    COPYRIGHT 1990 by Antic Publishing, Inc.  *
' ***********************************************/
'
DIM screenmfdb%(8)       ! memory form descriptor block for the screen
'                    ! some compiler define this as a FDB...
'
DIM ballsource%(8)   ! memory form descriptor for the ball image
'
DIM corners%(9)
DIM corn1%(9)        ! shadow for screen 1
DIM corn2%(9)        ! ball's shadow, screen 2
DIM barray|(9494)
DIM screen2|(32256)   ! the second screen for page flipping
'
'
~V_OPNVWK(1)
'
'    ! Set up the screen memory form definition block.
'    ! Do this immediately after open_vwork()
'    ! Only needs to be done once...
'
@init_mfdb
'
'    ! Read in the data file
'
@read_data
scrn2ptr%=((VARPTR(screen2|(0)))+255) AND &HFFFFFF00
spin%=1
x%=5
y%=5
dx%=5
dy%=2
HIDEM
'
'
'    ! Now do the example
'
@example
'
'
'    Clean up and exit
'
~V_CLSVWK()
END
'
' *****************************************
'
PROCEDURE example
  LOCAL i%
  done!=FALSE
  '
  ~V_CLRWK()                    ! clear the screen
  '
  corners%(8)=4                ! overwrite mode
  '
  top:
  '    Do the blit to move the ball
  '
  b%=INP?(2)            !look for a key to quit
  IF b%
    END
  ENDIF
  '
  ' #############################################################
  ' construct the second screen
  ' #############################################################
  screenmfdb%(0)=scrn2ptr%
  '
  i%=i%+spin%
  IF (i%<0)
    i%=5
  ELSE
    IF (i%>5)
      i%=0
    ENDIF
  ENDIF
  '
  ' *** tell the blitter where to blit from and to ***
  '
  corn2%(4)=x%                ! top corner x, dest
  corn2%(5)=y%                ! top corner y, dest
  corn2%(6)=x%+131            ! bot corner x, dest
  corn2%(7)=y%+ball_ht%       ! bot corner y, dest
  '
  ' *** the actual Gem blit call ***
  BITBLT ballsource%(),screenmfdb%(),corn2%()
  '
  ' *** tell the blitter where to blit from and to ***
  '
  corners%(0)=102*i%           ! top corner x, source
  corners%(1)=0                ! top corner y, source
  corners%(2)=corners%(0)+102  ! bot corner x, source
  corners%(3)=ball_ht%         ! bot corner y, source
  '
  corners%(4)=x%                ! top corner x, dest
  corners%(5)=y%                ! top corner y, dest
  corners%(6)=x%+102              ! bot corner x, dest
  corners%(7)=y%+ball_ht%          ! bot corner y, dest
  '
  ' *** the actual Gem blit call ***
  BITBLT ballsource%(),screenmfdb%(),corners%()
  '
  '  switch to it
  '
  ~XBIOS(5,L:scrn2ptr%,L:scrn2ptr%,-1)
  ~XBIOS(37)
  '
  ' now erase the ball on the first screen
  '
  corn1%(8)=0
  screenmfdb%(0)=scrn1ptr%
  BITBLT ballsource%(),screenmfdb%(),corn1%()
  corn1%(8)=3
  '
  '
  x%=x%+dx%
  IF (x%>maxx%)
    x%=maxx%
    dx%=-dx%
    spin%=-spin%
  ELSE
    IF (x%<5)
      x%=5
      dx%=-dx%
      spin%=-spin%
    ENDIF
  ENDIF
  '
  y%=y%+dy%
  IF (y%>maxy%)
    y%=maxy%
    dy%=-dy%
    spin%=-spin%
  ELSE
    IF (y%<5)
      y%=5
      dy%=-dy%
      spin%=-spin%
    ENDIF
  ENDIF
  '
  ' xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
  '       NOW DO THE SAME THING FOR THE FIRST SCREEN
  ' xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
  '
  i%=i%+spin%
  IF (i%<0)
    i%=5
  ELSE
    IF (i%>5)
      i%=0
    ENDIF
  ENDIF
  '
  ' *** tell the blitter where to blit from and to ***
  '
  corn1%(4)=x%                ! top corner x, dest
  corn1%(5)=y%                ! top corner y, dest
  corn1%(6)=x%+131            ! bot corner x, dest
  corn1%(7)=y%+ball_ht%       ! bot corner y, dest
  '
  ' *** the actual Gem blit call ***
  BITBLT ballsource%(),screenmfdb%(),corn1%()
  '
  ' *** tell the blitter where to blit from and to ***
  '
  corners%(0)=102*i%           ! top corner x, source
  corners%(1)=0                ! top corner y, source
  corners%(2)=corners%(0)+102  ! bot corner x, source
  corners%(3)=ball_ht%         ! bot corner y, source
  '
  corners%(4)=x%                ! top corner x, dest
  corners%(5)=y%                ! top corner y, dest
  corners%(6)=x%+102              ! bot corner x, dest
  corners%(7)=y%+ball_ht%          ! bot corner y, dest
  '
  ' *** the actual Gem blit call ***
  BITBLT ballsource%(),screenmfdb%(),corners%()
  ~XBIOS(5,L:scrn1ptr%,L:scrn1ptr%,-1)
  ~XBIOS(37)
  '
  ' now erase the ball on the other screen
  '
  corn2%(8)=0
  screenmfdb%(0)=scrn2ptr%
  BITBLT ballsource%(),screenmfdb%(),corn2%()
  corn2%(8)=3
  '
  '
  x%=x%+dx%
  IF (x%>maxx%)
    x%=maxx%
    dx%=-dx%
    spin%=-spin%
  ELSE
    IF (x%<5)
      x%=5
      dx%=-dx%
      spin%=-spin%
    ENDIF
  ENDIF
  '
  y%=y%+dy%
  IF (y%>maxy%)
    y%=maxy%
    dy%=-dy%
    spin%=-spin%
  ELSE
    IF (y%<5)
      y%=5
      dy%=-dy%
      spin%=-spin%
    ENDIF
  ENDIF
  '
  GOTO top        ! do this forever or until keypress
  '                    ! whichever comes first!
  '
RETURN
'
'
PROCEDURE init_mfdb
  '
  scrn1ptr%=XBIOS(3)                 ! logical screen base
  screenmfdb%(1)=WORK_OUT(0)+1            ! screen pixel width
  maxx%=screenmfdb%(1)
  screenmfdb%(2)=WORK_OUT(1)+1            ! screen pixel height
  maxy%=screenmfdb%(2)
  screenmfdb%(3)=screenmfdb%(1)/16            ! screen int width
  screenmfdb%(4)=0                        ! reserved
  '
  ' number of bitplanes for screen
  SELECT WORK_OUT(13)
  CASE 16
    screenmfdb%(5)=4
  CASE 8
    screenmfdb%(5)=3
  CASE 4
    screenmfdb%(5)=2
  DEFAULT
    screenmfdb%(5)=1
  ENDSELECT
RETURN
'
PROCEDURE read_data
  planes%=INT{L~A}
  IF (planes%<>1) AND (planes%<>2)
    ALERT 3," Must run in Medium | or High res! ",0," Rats! ",dummy%
    END
  ENDIF
  IF (planes%=2)
    ball_ht%=46
    IF EXIST("boink.im2")
      BLOAD "boink.im2",VARPTR(barray|(0))
    ELSE
      ALERT 3," File BOINK.IM2 | not found! ",0," Rats! ",dummy%
      END
    ENDIF
  ELSE
    ball_ht%=100
    IF EXIST("boink.im3")
      BLOAD "boink.im3",VARPTR(barray|(0))
    ELSE
      ALERT 3," File BOINK.IM3 | not found! ",0," Rats! ",dummy%
      END
    ENDIF
  ENDIF
  '
  ' Set up a memory form descriptor for the ball image
  '
  ballsource%(0)=VARPTR(barray|(0))       ! address of ball image
  ballsource%(1)=752                      ! ballsource pixel width
  ballsource%(2)=ball_ht%                 ! ballsource pixel height
  ballsource%(3)=752/16                   ! ballsource int width
  ballsource%(4)=0                        ! reserved
  ballsource%(5)=planes%
  '
  maxx%=maxx%-131-5
  maxy%=maxy%-ball_ht%-5
  '
  corn1%(0)=612
  corn1%(1)=0
  corn1%(2)=743
  corn1%(3)=ball_ht%
  corn1%(4)=0
  corn1%(5)=0
  corn1%(6)=131
  corn1%(7)=ball_ht%
  corn1%(8)=3
  '
  corn2%(0)=612
  corn2%(1)=0
  corn2%(2)=743
  corn2%(3)=ball_ht%
  corn2%(4)=0
  corn2%(5)=0
  corn2%(6)=131
  corn2%(7)=ball_ht%
  corn2%(8)=3
RETURN
