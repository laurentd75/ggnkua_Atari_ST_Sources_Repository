' /***********************************************
' *    Simple GFA blitter example                *
' *                                              *
' *    this program demonstrates using the       *
' *    Gem blit routines to scroll a region      *
' *    of the screen around.                     *
' *                                              *
' *    by Samuel Streeper                        *
' *    COPYRIGHT 1990 by Antic Publishing, Inc.  *
' ***********************************************/
'
DIM screen%(8)       ! memory form descriptor block for the screen
'                    ! some compiler define this as a FDB...
'
DIM corners%(9)
DIM anticx%(14),anticy%(14)
'
FOR i%=0 TO 12
  READ anticx%(i%),anticy%(i%)
NEXT i%
'
DATA    40,5,5,65,18,75,30,55,50,55,62,75,75,65,50,19
DATA    42,35,45,40,35,40,47,15,40,5
'
'
~V_OPNVWK(1)
'
'    ! Set up the screen memory form definition block.
'    ! Do this immediately after open_vwork()
'    ! Only needs to be done once...
'
@init_mfdb
'
'
'    ! Now do the example
'
@example
'
'
'    Clean up and exit
'
~V_CLSVWK()
END
'
' *****************************************
'
PROCEDURE example
  LOCAL i%,j%
  done!=FALSE
  '
  ~V_CLRWK()                    ! clear the screen
  '
  POLYLINE 13,anticx%(),anticy%()    ! put graphic on screen
  '
  corners%(8)=3                ! overwrite mode
  '
  top:
  '    Do the blit to scroll region vertically.
  '
  FOR i%=0 TO 20
    '
    b%=INP?(2)            !cconis()
    IF b%
      END
    ENDIF
    '
    ~XBIOS(37)                !Vsync() - slow this thing down!
    '
    ' *** tell the blitter where to blit from and to ***
    '
    corners%(0)=0                ! top corner x, source
    corners%(1)=i%*5             ! top corner y, source
    corners%(2)=80               ! bot corner x, source
    corners%(3)=corners%(1)+80   ! bot corner y, source
    '
    corners%(4)=0                ! top corner x, dest
    corners%(5)=(i%+1)*5         ! top corner y, dest
    corners%(6)=80               ! bot corner x, dest
    corners%(7)=corners%(5)+80   ! bot corner y, dest
    '
    ' *** the actual Gem blit call ***
    BITBLT screen%(),screen%(),corners%()
  NEXT i%
  '
  '
  '    Do blit to scroll region horozontally.
  FOR i%=0 TO 20
    '
    b%=INP?(2)            !cconis()
    IF b%
      END
    ENDIF
    '
    ~XBIOS(37)                !Vsync() - slow this thing down!
    '
    ' *** tell the blitter where to blit from and to ***
    '
    corners%(0)=i%*5             ! top corner x, source
    corners%(1)=100              ! top corner y, source
    corners%(2)=corners%(0)+80   ! bot corner x, source
    corners%(3)=180              ! bot corner y, source
    '
    corners%(4)=(i%+1)*5         ! top corner x, dest
    corners%(5)=100              ! top corner y, dest
    corners%(6)=corners%(4)+80   ! bot corner x, dest
    corners%(7)=180              ! bot corner y, dest
    '
    ' *** the actual Gem blit call ***
    BITBLT screen%(),screen%(),corners%()
  NEXT i%
  '
  '
  '    Do blit to scroll region diagonally.
  FOR i%=0 TO 20
    '
    b%=INP?(2)            !cconis()
    IF b%
      END
    ENDIF
    '
    ~XBIOS(37)                !Vsync() - slow this thing down!
    '
    ' *** tell the blitter where to blit from and to ***
    '
    corners%(0)=105-(i%*5)       ! top corner x, source
    corners%(1)=105-(i%*5)       ! top corner y, source
    corners%(2)=corners%(0)+80   ! bot corner x, source
    corners%(3)=corners%(1)+80   ! bot corner y, source
    '
    corners%(4)=corners%(0)-5    ! top corner x, dest
    corners%(5)=corners%(1)-5    ! top corner y, dest
    corners%(6)=corners%(2)-5    ! bot corner x, dest
    corners%(7)=corners%(3)-5    ! bot corner y, dest
    '
    ' *** the actual Gem blit call ***
    BITBLT screen%(),screen%(),corners%()
  NEXT i%
  '
  '
  GOTO top        ! do this forever or until keypress
  '                    ! whichever comes first!
  '
RETURN
'
'
PROCEDURE init_mfdb
  '
  screen%(0)=XBIOS(3)                 ! logical screen base
  screen%(1)=WORK_OUT(0)+1            ! screen pixel width
  screen%(2)=WORK_OUT(1)+1            ! screen pixel height
  screen%(3)=screen%(1)/16            ! screen int width
  screen%(4)=0                        ! reserved
  '
  ' number of bitplanes for screen
  SELECT WORK_OUT(13)
  CASE 16
    screen%(5)=4
  CASE 8
    screen%(5)=3
  CASE 4
    screen%(5)=2
  DEFAULT
    screen%(5)=1
  ENDSELECT
RETURN
