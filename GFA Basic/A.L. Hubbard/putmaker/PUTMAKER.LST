'                    -------------------------------------
'                       PUTMAKER.PRG        Version 1.0
'                    -------------------------------------
'                       Copyright 1988 Antic Publishing
'
' * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
' *                                                                         *
' *           PROGRAM TO MANIPULATE DEGAS AND NEOCHROME IMAGES,             *
' *                   AND GFA PUT & SCREEN FILES                            *
' *                                                                         *
' *      It will-                                                           *
' *  1-Load DEGAS  & NEO pictures, GFA PUT & SCREEN files.                  *
' *  2-Cut out portions of these pictures with a GEM type Rubber Box.       *
' *  3-Save these portions as GFA BASIC PUT & SCREEN format files, as well  *
' *      as DEGAS or NEOCHROME images.                                      *
' *  4-Import images in any of these formats and save them to any other.    *
' *                                                                         *
' *                                 Enjoy!                                  *
' *       A.L. Hubbard                            GEnie....A.HUBBARD1       *
' *                                            NEUTRAL ZONE (Toronto)       *
' *                                               TRITEK    (Toronto)       *
' *                                                                         *
' * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
'
' -------------------------------- Start_up ------------------------------------
'
Res=Xbios(4)+1
If Res=1 Or Res=3                    ! Make sure resolution is medium.
  Alert 1,"  PUTMAKER only runs in |   Medium Resolution!| | Please change resolution.",1,"Okay",Dummy
  End
Endif
'
If Not Exist("PUTMAKER.PUT")
  Alert 1,"PUTMAKER.PUT must be|in the same folder.",1,"Cancel",D
  End
Endif
'
Default_drive=Gemdos(25)+1           ! Save the original user active drive.
Dim User_palette(15)                 ! Save original user colors.
For I=0 To 15
  User_palette(I)=Xbios(7,W:I,W:-1)
Next I
'
Setcolor 0,6,6,6    ! White            Set program colors.
Setcolor 1,5,2,3    ! Burgundy
Setcolor 2,1,2,4    ! Blue
Setcolor 3,1,1,1    ! Black
Color 3                              ! Color used for boxes on workscreen.
Dim Program_palette(3)               ! Save program colors used on main screen.
For I=0 To 3
  Program_palette(I)=Xbios(7,W:I,W:-1)
Next I
Gosub Save_workscreen_colors
'
Mainscreen$=Space$(9926)             ! Load Main screen PUT file to variable,
Bload "PUTMAKER.PUT",Varptr(Mainscreen$)
Put 164,60,Mainscreen$               ! and Put on main screen.
Deftext 3,16,0,12
Text 363,162,"MED"                   ! Print starting resolution.
'
' ------------------------------ Create menu bar -------------------------------
'
Dim Bar$(40)                         ! Dim string to hold menu text.
For I=0 To 40                        ! Set up loop.
  Read Bar$(I)                       ! Read data,
  Exit If Bar$(I)="***"              ! until end marker is reached.
Next I
Bar$(I)=""                           ! Sets required blanks in fields of
Bar$(I+1)=""                         ! menu array. (Menu Text Follows)
Data Desk, About This Program ,--------------------,1,2,3,4,5,6,""
Data Intro, Introduction ,--------------, QUIT ,""
Data Load,    PUT File ,    NEO File ,  DEGAS File , SCREEN File ,""
Data Save,    PUT File  ,    NEO File  ,  DEGAS File  , SCREEN File  ,""
Data Select,  PUT Area  ,------------, RESOLUTION ,""
Data View, Selected PUT ,--------------,  WORKSCREEN  ,""
Data ***
Menu Bar$()                          ! Activate Menu Bar.
On Menu  Gosub Menu
'
' ----------------------------- Main Program Loop ------------------------------
Do
  On Menu                            ! Looks at Menu and branches.
Loop
' ------------------------------- Reading Menu ---------------------------------
'
Procedure Menu
  On Error Gosub Error               ! Set error trapping routine.
  Menu Off                           ! Turn menu choice selected off.
  If Bar$(Menu(0))=" About This Program "
    Gosub About
  Endif
  If Bar$(Menu(0))=" Introduction "
    Gosub Intro
  Endif
  If Bar$(Menu(0))=" QUIT "
    Gosub Quit
  Endif
  If Bar$(Menu(0))="    PUT File "
    Gosub Put_load
  Endif
  If Bar$(Menu(0))="    NEO File "
    Gosub Neo_load
  Endif
  If Bar$(Menu(0))="  DEGAS File "
    Gosub Deg_load
  Endif
  If Bar$(Menu(0))=" SCREEN File "
    Gosub Scr_load
  Endif
  If Bar$(Menu(0))="    PUT File  "
    Gosub Put_save
  Endif
  If Bar$(Menu(0))="    NEO File  "
    Gosub Neo_save
  Endif
  If Bar$(Menu(0))="  DEGAS File  "
    Gosub Deg_save
  Endif
  If Bar$(Menu(0))=" SCREEN File  "
    Gosub Scr_save
  Endif
  If Bar$(Menu(0))="  PUT Area  "
    Gosub Put_select
  Endif
  If Bar$(Menu(0))=" RESOLUTION "
    Gosub Res_select
  Endif
  If Bar$(Menu(0))=" Selected PUT "
    Gosub View_put
  Endif
  If Bar$(Menu(0))="  WORKSCREEN  "
    Gosub Workscreen
  Endif
  Menu_return:                       ! Return point for error trapping routine.
Return
'
' ---------------------------- Menu Components ---------------------------------
'
Procedure About                      ! Credit box for the program.
  Sound 1,8,#55
  Wave 1,1,9,7500                    ! Ring bell and change frame color.
  Setcolor 1,6,6,0
  M$="PUT MAKER  FILE CONVERTER|      by A.L.Hubbard |  "+Chr$(189)+" 1988 Antic Publishing"
  Alert 0,M$,1,"Ok Fine!",B
  Setcolor 1,5,2,3
Return
'
Procedure Intro                      ! Draw program information screen.
  Deffill 0,2,8
  Pbox 163,60,474,183                ! Erase main screen graphic.
  Defline ,4
  Rbox 60,25,590,180                 ! Draw outline box and
  Defline ,1                         ! add information text.
  Deftext 1,0,0,6
  Text 70,40,"          A PUT MAKER AND FILE CONVERTER IN GFA BASIC! "
  Text 70,50,"---------------------------------------------------------------"
  Text 70,60,"      This program loads DEGAS images, NEOCHROME images and "
  Text 70,70,"            GFA PUT & SCREEN files, and cuts portions"
  Text 70,80,"               of them with a GEM-type rubber box."
  Text 70,90,"----------------------------------------------------------------"
  Text 70,100,"   It will then save any of these imported images or the cut"
  Text 70,110,"        portions of them in GFA PUT or SCREEN formats."
  Text 70,120,"   It will also save any of these imported images to a disk"
  Text 70,130,"     file in the uncompressed DEGAS or NEOCHROME formats."
  Text 70,140,"----------------------------------------------------------------"
  Text 70,150,"    It runs in MEDIUM resolution only, but will import and"
  Text 70,160,"          manipulate files in MEDIUM or LOW resolution!"
  Text 70,170,"              Enjoy!.....................Al Hubbard"
  Med_flag=1                         ! Set flag to inform Button procedure it
  Gosub Button                       ! will be displayed on MED res screen.
  Pbox 58,25,592,180                 ! Clear screen below menu and
  Put 164,60,Mainscreen$             ! rebuild main menu screen.
  Deftext 3,16,0,12
  If Res=1
    Text 363,162,"LOW"
  Else
    Text 363,162,"MED"
  Endif
Return
'
Procedure Quit                       ! Final end of program.
  Sound 1,8,#55
  Wave 1,1,9,7500
  Setcolor 1,6,6,0
  M$=" |  Ready to QUIT?     "
  Alert 2,M$,2," YES | NO ",B
  Setcolor 1,5,2,3
  If B=1
    Deffill 3,2,8                    ! Print goodbye message.
    Pbox 221,145,417,166
    Deftext 0,0,0,12
    Graphmode 2
    Text 225,161,"Bye for Now!"
    Pause 50
    For I=0 To 15                    ! Restore original user colors.
      Setcolor I,User_palette(I)
    Next I
    Chdrive (Default_drive)          ! Restore original active drive.
    Cls
    End
  Endif
Return
'
Procedure Put_load                   ! This loads a GFA PUT file from disk
  Title$=" LOAD PUT FILE "           ! to the workscreen.
  Gosub Title_print
  Lode_flag=1                        ! SELECT_FILE called from load routine.
  Ext$="PUT"                         ! The .PUT extension seems to be a naming
  Gosub Select_file                  ! convention for GFA PUT files.
  If Path_filename$=""               ! We cannot force a proper resolution as no
    Deffill 0,2,8                    ! resolution info is stored with file.
    Pbox 195,14,445,26               ! Erases Title box at top of screen.
    Goto Put_load_end
  Endif
  Cls
  Put$=""                            ! Null PUT string so PUT cannot exist
  '                                  ! without it's workscreen.
  If Res=1                           ! Check resolution of workscreen
    Void Xbios(5,L:-1,L:-1,W:0)      ! and change if necessary.
  Endif
  Gosub Set_workscreen_colors        ! Set color palette to Workscreen palette.
  '                                  ! This MAY be correct for the PUT file,
  '                                  ! the program palette probably WON'T be.
  B$=Space$(32000)                   ! Reserve space for the largest possible
  '                                  ! PUT file.
  Bload Path_filename$,Varptr(B$)    ! Load PUT file to variable,
  Put 0,0,B$                         ! PUT file to screen (top left corner),
  Sget Workscreen$                   ! and store Workscreen.
  Gosub Button                       ! Wait for Mouse Button to continue.
  Gosub Set_program_colors           ! Set the MED resolution screen colors,
  If Res=1                           ! check the workscreen resolution
    Void Xbios(5,L:-1,L:-1,W:1)      ! and insure that resolution is medium
  Endif                              ! going back to main menu.
  Gosub Main_screen
  Put_load_end:
Return
'
Procedure Neo_load                   ! Loads a NEOCHROME picture file
  Title$=" LOAD NEO FILE "           ! to the workscreen.
  Gosub Title_print
  Lode_flag=1
  Ext$="NEO"
  Gosub Select_file
  If Path_filename$=""
    Deffill 0,2,8
    Pbox 195,14,445,26
    Goto Neo_load_end
  Endif
  Cls
  Put$=""
  Void Xbios(5,L:-1,L:-1,W:0)        ! Change resolution of screen to low.
  Res=1                              ! (NEOCHROME is Low Resolution only)
  Open "I",#1,Path_filename$         ! Open channel for input file,
  Seek #1,4                          ! move to first NEO color byte,
  For N=0 To 15                      ! load color palette information,
    X=Inp(#1)
    Y=Inp(#1)
    Z=X*256+Y
    C=Xbios(7,N,Z)                   ! and install it.
  Next N
  Bload Path_filename$,Xbios(2)-128  ! Load picture information to screen,
  Close #1                           ! close input file,
  Sget Workscreen$                   ! and store Workscreen.
  Gosub Button
  Gosub Save_workscreen_colors       ! Saves new Workscreen color palette.
  Gosub Set_program_colors
  Void Xbios(5,L:-1,L:-1,W:1)        ! Change resolution back to medium.
  Gosub Main_screen
  Neo_load_end:
Return
'
Procedure Deg_load                   ! Loads an uncompressed DEGAS picture
  Title$=" LOAD DEGAS FILE "         ! file to the workscreen.
  Gosub Title_print
  Lode_flag=1
  Ext$="PI"+Str$(Res)                ! Establish proper file extension for
  Gosub Select_file                  ! resolution of workscreen.
  If Path_filename$=""
    Deffill 0,2,8
    Pbox 195,14,445,26
    Goto Deg_load_end
  Endif
  Cls
  Put$=""
  Res=Val(Right$(Path_filename$,1))  ! If extension has been changed in file
  If Res=1                           ! selection box, change workscreen
    Void Xbios(5,L:-1,L:-1,W:0)      ! resolution to match file selected.
  Else
    Void Xbios(5,L:-1,L:-1,W:1)
  Endif
  Open "I",#1,Path_filename$
  Seek #1,2                          ! Move to first DEGAS color byte.
  For N=0 To 15                      ! (First 2 bytes are DEGAS resolution info)
    X=Inp(#1)
    Y=Inp(#1)
    Z=X*256+Y
    C=Xbios(7,N,Z)
  Next N
  Bload Path_filename$,Xbios(2)-34
  Close #1
  Sget Workscreen$
  Gosub Button
  Gosub Save_workscreen_colors
  Gosub Set_program_colors
  If Res=1
    Void Xbios(5,L:-1,L:-1,W:1)
  Endif
  Gosub Main_screen
  Deg_load_end:
Return
'
Procedure Scr_load                   ! Loads a GFA screen file.
  Title$=" LOAD SCREEN FILE "
  Gosub Title_print
  Lode_flag=1
  Ext$="*"                           ! We can't do much to force proper
  Gosub Select_file                  ! resolution and file match for SCREEN
  If Path_filename$=""               ! files as there is no firm convention.
    Deffill 0,2,8
    Pbox 195,14,445,26
    Goto Scr_load_end
  Endif
  Cls
  Put$=""
  If Res=1
    Void Xbios(5,L:-1,L:-1,W:0)
  Endif
  Gosub Set_workscreen_colors
  Bload Path_filename$,Xbios(2)
  Sget Workscreen$
  Gosub Button
  Gosub Set_program_colors
  If Res=1
    Void Xbios(5,L:-1,L:-1,W:1)
  Endif
  Gosub Main_screen
  Scr_load_end:
Return
'
Procedure Put_save                   ! Saves the selected PUT to a GFA PUT file.
  If Put$=""                         ! Check for file available to save and
    Gosub No_put                     ! if not, inform user and quit.
    Goto Put_save_end
  Endif
  Title$=" SAVE PUT FILE "
  Gosub Title_print
  Ext$="PUT"
  Gosub Select_file
  If Path_filename$=""               ! If no name selected to save under, quit.
    Goto Put_save_end
  Else
    Gosub Force_extension            ! Forces proper file extension.
  Endif
  Bsave Path_filename$,Varptr(Put$),Len(Put$)   ! Saves PUT area selected.
  Med_flag=1                         ! Denotes Button procedure called from
  Gosub Button                       ! Medium resolution screen.
  Put_save_end:
  Deffill 0,2,8                      ! Erases Title box at top of screen.
  Pbox 195,14,445,26
Return
'
Procedure Neo_save                   ! Saves the workscreen, if present, to
  If Workscreen$=""                  ! a NEOCHROME picture file.
    Gosub No_workscreen              ! If not present, quit.
    Goto Neo_save_end
  Endif
  If Res<>1                          ! If resolution is not LOW, inform user and
    Sound 1,8,#55                    ! quit. (NEO only LOW res)
    Wave 1,1,9,7500
    Setcolor 1,6,6,0
    M$=" Cannot save MEDIUM  | Resolution Picture | |in NEOCHROME Format!"
    Alert 3,M$,1,"Sorry!",B
    Setcolor 1,5,2,3
    Goto Neo_save_end
  Endif
  Title$=" SAVE NEO FILE "
  Gosub Title_print
  Ext$="NEO"
  Gosub Select_file
  If Path_filename$=""
    Goto Neo_save_end
  Else
    Gosub Force_extension
  Endif
  Open "O",#1,Path_filename$         ! Create file on disk.
  Print #1;String$(4,0);             ! Save first 4 bytes (unused in NEO).
  For X=0 To 15                      ! Get and save color palette.
    C_num1=Work_palette(X)
    Cnum=C_num1 And &H777            ! Clear out top byte.
    Ch=Int(Cnum/256)                 ! Break in two (it's a word, not byte).
    C_l=Cnum-(Ch*256)
    Print #1;Chr$(Ch);Chr$(C_l);     ! Now save 2 bytes to disk.
  Next X
  Print #1;String$(92,0);            ! Pad out header (bytes unused by NEO).
  Print #1;Workscreen$               ! Now save screen to file,
  Close #1                           ! and close file.
  Med_flag=1
  Gosub Button
  Neo_save_end:
  Deffill 0,2,8
  Pbox 195,14,445,26
Return
'
Procedure Deg_save                   ! Saves the workscreen to a DEGAS
  If Workscreen$=""                  ! uncompressed picture file.
    Gosub No_workscreen
    Goto Deg_save_end
  Endif
  Title$=" SAVE DEGAS FILE "
  Gosub Title_print
  Ext$="PI"+Str$(Res)
  Gosub Select_file
  If Path_filename$=""
    Goto Deg_save_end
  Else
    Gosub Force_extension
  Endif
  Open "O",#1,Path_filename$         ! Create file on disk.
  Print #1;Chr$(0);                  ! Save first two bytes (res info).
  Print #1;Chr$(Res-1);
  For X=0 To 15                      ! Get and save color palette.
    C_num1=Work_palette(X)
    Cnum=C_num1 And &H777            ! Clear out top byte.
    Ch=Int(Cnum/256)                 ! Break in two (it's a word, not byte).
    C_l=Cnum-(Ch*256)
    Print #1;Chr$(Ch);Chr$(C_l);     ! Now save 2 bytes to disk.
  Next X
  Print #1;Workscreen$               ! Now save screen to file.
  For X=0 To 31                      ! Save animation info (all zero's).
    Print #1;Chr$(0);
  Next X
  Close #1                           ! Close file.
  Med_flag=1
  Gosub Button
  Deg_save_end:
  Deffill 0,2,8
  Pbox 195,14,445,26
Return
'
Procedure Scr_save                   ! Saves the workscreen to a
  If Workscreen$=""                  ! GFA screen file.
    Gosub No_workscreen
    Goto Scr_save_end
  Endif
  Title$=" SAVE SCREEN FILE "
  Gosub Title_print
  Ext$="*"
  Gosub Select_file
  If Path_filename$=""
    Goto Scr_save_end
  Endif
  Bsave Path_filename$,Varptr(Workscreen$),32000
  Med_flag=1
  Gosub Button
  Scr_save_end:
  Deffill 0,2,8
  Pbox 195,14,445,26
Return
'
Procedure Put_select                 ! Selects PUT area using a GEM-type rubber
  Local L%                           ! box.
  Local R%
  If Workscreen$=""
    Gosub No_workscreen
    Goto Put_select_end
  Endif
  Cls
  M$="Left Button Starts Box.....|Release to End Area Selected.| |Any Button to Leave Screen"
  Alert 1,M$,1," OK ",B
  Start:
  Gosub Part_select
  Cls                                ! Displays PUT co-ordinates selected.
  Print At(20,20);"1st Corner X = ";Tlx
  Print At(31,21);"Y = ";Tly
  Print At(44,20);"2nd Corner X = ";Brx
  Print At(55,21);"Y = ";Bry
  M$="| |Are you happy with this area?"
  Alert 2,M$,3," YES | REDO | QUIT ",B
  If B=1                             ! If area selected is correct,
    If Res=1
      Void Xbios(5,L:-1,L:-1,W:0)
    Endif
    Gosub Set_workscreen_colors
    Sput Workscreen$
    Get Tlx,Tly,Brx,Bry,Put$         ! store PUT area selected.
    Graphmode 3                      ! Set XOR mode for box drawing so it can
    Box Tlx,Tly,Brx,Bry              ! always be seen no matter what the
    Pause 25                         ! screen colors are.
    Graphmode 1                      ! Back to normal (Replace) Graphmode.
    Cls
    If Tlx<Brx And Bly<Bry           ! This confirms and displays the
      Xx=Tlx                         ! actual PUT which has been stored.
      Yy=Tly
    Endif                            ! Most of the code is to take care
    If Tlx>Brx And Bly<Bry           ! of the fact that the second corner
      Xx=Brx                         ! chosen can be anywhere in relation
      Yy=Tly                         ! to the first corner.
    Endif
    If Tlx<Brx And Tly>Bry           ! This code also makes sure  the PUT file
      Xx=Tlx                         ! is displayed on screen at the same
      Yy=Bry                         ! location it was cut from.
    Endif
    If Tlx>Brx And Tly>Bry
      Xx=Brx
      Yy=Bry
    Endif
    Put Xx,Yy,Put$
    Deffill 0,2,8                    ! Then build and display a box
    Deftext 1,1,0,6                  ! confirming the above.
    If Res=2                         ! This code centers the box regardless
      L%=232                         ! of the resolution selected.
      R%=410
    Else
      L%=72
      R%=250
    Endif
    Deffill 0,2,8
    Pbox L%-2,176,R%+2,186
    Box L%-2,176,R%+2,186
    Box L%-1,176,R%+1,186
    Text L%+5,184," Selected and Stored "
    Gosub Button
    If Res=1
      Void Xbios(5,L:-1,L:-1,W:1)
    Endif
    Gosub Set_program_colors
    Gosub Main_screen
    Goto Put_select_end
  Endif
  If B=3                             ! If QUIT selected,
    Tlx=Tly=Brx=Bry=0                ! clear variables,
    Gosub Main_screen
    Goto Put_select_end              ! and quit.
  Endif
  Goto Start                         ! If REDO selected, go to start.
  Put_select_end:
Return
'
Procedure Part_select                ! Selects the actual workscreen part to be
  Put$=""                            ! used as a GFA PUT file for the program.
  If Res=1
    Void Xbios(5,L:-1,L:-1,W:0)
  Endif
  Gosub Set_workscreen_colors
  Sput Workscreen$
  Tlx=Tly=Brx=Bry=0                  ! Nulls PUT area variables.
  Do                                 ! Waits for mouse Left button to begin.
    Mouse X,Y,K
    Exit If K=1
  Loop
  If Res=1 And X>320                 ! Corrects for LOW res X values greater
    Tlx=X-320                        ! than 320 on the LOW resolution screen.
  Else                               ! This happens because GEM doesn't
    Tlx=X                            ! recognize when we have changed res.
  Endif
  Tly=Y
  Graphmode 3                        ! Sets Xor mode for box so it can be seen.
  While Mousek=1                     ! Insures left mouse button is still down.
    Repeat
      Mouse X,Y,K                    ! Draws indicator box,
      If Res=1 And X>320
        Brx=X-320
      Else
        Brx=X
      Endif
      Bry=Y
      Box Tlx,Tly,Brx,Bry
      Sput Workscreen$               ! and erases by swapping in the full screen
    Until K=0                        ! until the mouse button is released.
  Wend
  Box Tlx,Tly,Brx,Bry                ! Draws box on screen for area indication.
  Graphmode 1                        ! Back to normal graphics mode.
  Gosub Button
  Gosub Set_program_colors
  If Res=1
    Void Xbios(5,L:-1,L:-1,W:1)
  Endif
Return
'
Procedure Title_print                ! Draws title box above file selector box.
  Deffill 1,2,1
  Pbox 195,14,445,26
  Deftext 1,1,0,6
  Text 320-(Len(Title$)*4),23,Title$ ! Centers Title in title box.
Return
'
Procedure Workscreen                 ! Displays workscreen when requested.
  If Workscreen$=""
    Gosub No_workscreen
    Goto Screen_end
  Endif
  If Res=1
    Void Xbios(5,L:-1,L:-1,W:0)
  Endif
  Gosub Set_workscreen_colors        ! Set the proper color palette.
  Sput Workscreen$
  Gosub Button
  Gosub Set_program_colors           ! Restore program colors.
  If Res=1
    Void Xbios(5,L:-1,L:-1,W:1)
  Endif
  Gosub Main_screen
  Screen_end:
Return
'
Procedure View_put                   ! Displays selected PUT when requested.
  If Put$=""
    Gosub No_put
    Goto View_end
  Endif
  If Res=1
    Void Xbios(5,L:-1,L:-1,W:0)
  Endif
  Cls
  Gosub Set_workscreen_colors
  Put Xx,Yy,Put$
  Gosub Button
  Gosub Set_program_colors
  If Res=1
    Void Xbios(5,L:-1,L:-1,W:1)
  Endif
  Gosub Main_screen
  View_end:
Return
'
Procedure Button                     ! Prints "BUTTON to CONTINUE" at bottom of
  Deftext 1,1,0,6                    ! screen, waits for button click
  Local L%                           ! to continue then erases itself.
  Local R%
  If Res=2 Or Med_flag=1             ! Changes location of box in relation
    L%=232                           ! to the screen resolution selected.
    R%=410
  Else
    L%=72
    R%=250
  Endif
  Deffill 0,2,8
  Pbox L%-2,189,R%+2,199             ! Draws blank filled box,
  Box L%-2,189,R%+2,199              ! with border, and adds text.
  Box L%-1,189,R%+1,199
  Text L%+10,197," BUTTON to CONTINUE "
  Do                                 ! Waits for any mouse click to exit loop.
    Mouse X,Y,K
    Exit If Mousek<>0
  Loop
  Pause 10                           ! Pauses so mouse button IS released.
  Deffill 0,2,8                      ! Erases ONLY button box.
  Pbox L%-2,189,R%+2,199
  Med_flag=0                         ! Resets medium resolution call flag.
Return
'
Procedure Res_select                 ! Selects workscreen resolution
  Sound 1,8,#55                      ! from the main menu desktop.
  Wave 1,1,9,7500
  Setcolor 1,6,6,0
  M$=" | Selected Resolution?"
  Alert 2,M$,Res," LOW | MED ",B
  Setcolor 1,5,2,3
  Deftext 3,16,0,12
  If B=1
    Res=1                            ! Displays the resolution of the
    Text 363,162,"LOW"               ! workscreen on the main screen,
  Else
    Res=2                            ! and changes the resolution variable.
    Text 363,162,"MED"
  Endif
Return
'
Procedure Select_file                ! Call File Selector box.
  Path_name$=Space$(64)              ! Reserve space for path name.
  Drive=Gemdos(25)                   ! Get current drive.
  Ptr=Varptr(Path_name$)
  Void Gemdos(71,L:Ptr,W:Drive+1)    ! Get current path name.
  For I=1 To 63
    If Asc(Mid$(Path_name$,I,1))=0
      Path_name$=Left$(Path_name$,I-1)
      I=63
    Endif
  Next I
  Select_start:
  D$=Chr$(Drive+65)+":"+Path_name$+"\*."+Ext$     ! Current drive + path.
  Fileselect D$,B$,Path_filename$
  If Path_filename$<>""
    If Lode_flag=1                   ! If loading from disk, check for file.
      If Gemdos(78,L:Varptr(Path_filename$))=-33
        Alert 1," | File Does Not Exist! ",1," REDO | QUIT ",B
        Path_filename$=""
        If B=1
          Goto Select_start
        Else
          Goto Select_end
        Endif
      Endif
    Endif
    P_f$=Right$(Path_filename$,13)
    F_o$=Right$(P_f$,Len(P_f$)-(Instr(P_f$,"\")))
    If Instr(F_o$,".")=0             ! This section parses out of the full
      E_o$=""                        ! path and filename string the file only
    Else                             ! and extension only string as well.
      E_o$=Right$(F_o$,Len(F_o$)-(Instr(F_o$,".")))
    Endif
    File_only$=F_o$                  ! Used later to force proper extension.
    Ext_only$=E_o$                   ! on a file which is being saved.
    Chdrive Instr("ABCDEF",Left$(Path_filename$,1))! Changes to selected drive.
  Endif
  Select_end:
  Lode_flag=0
Return
'
Procedure Force_extension            ! This procedure forces the proper
  If Ext_only$<>Ext$                 ! extension on a file when saving it.
    If Instr(F_o$,".")=0             ! It will correct an improper extension, or
      Fi_o$=F_o$+"."+Ext$            ! add the proper one if none was selected.
    Else
      Fi_o$=Left$(F_o$,Instr(F_o$,"."))+Ext$
    Endif
    Path_filename$=Left$(Path_filename$,Instr(Path_filename$,F_o$)-1)+Fi_o$
  Else
    Path_filename$=Left$(Path_filename$,Instr(Path_filename$,F_o$)-1)+F_o$
  Endif
  File_only$=Fi_o$
Return
'
Procedure Main_screen                ! This procedure cleans up the main screen.
  Cls                                ! It clears the screen,
  Put 164,60,Mainscreen$             ! places opening graphic on the screen,
  Menu Bar$()                        ! and resets the menu bar.
  Deftext 3,16,0,12
  If Res=1                           ! It then displays proper resolution of
    Text 363,162,"LOW"               ! workscreen on menu screen graphic.
  Else
    Text 363,162,"MED"
  Endif
Return
'
Procedure No_workscreen              ! Displays alert box when asked to display
  Sound 1,8,#55                      ! workscreen, and none is loaded.
  Wave 1,1,9,7500
  Setcolor 1,6,6,0
  M$=" |No Workscreen Loaded!|  |  Please Load First!"
  Alert 3,M$,1," OK ",B
  Setcolor 1,5,2,3
Return
'
Procedure No_put                     ! Displays alert box when asked to display
  Sound 1,8,#55                      ! PUT file and none is selected.
  Wave 1,1,9,7500
  Setcolor 1,6,6,0
  M$=" |No PUT Area Selected!|  | Please Select First!"
  Alert 3,M$,1," OK ",B
  Setcolor 1,5,2,3
Return
'
Procedure Set_workscreen_colors      ! This sets the Workscreen color palette.
  For I=0 To 15
    Setcolor I,Work_palette(I)
  Next I
Return
'
Procedure Set_program_colors         ! This sets the 4 colors used on the main
  For I=0 To 3                       ! menu screen to the program colors.
    Setcolor I,Program_palette(I)
  Next I
Return
'
Procedure Save_workscreen_colors     ! Saves the Workscreen color palette
  Erase Work_palette()               ! after it has been changed by program
  Dim Work_palette(15)               ! start-up, or by loading a DEGAS or
  For I=0 To 15                      ! NEOCHROME picture file.
    Work_palette(I)=Xbios(7,W:I,W:-1)
  Next I
Return
'
Procedure Error                      ! Traps expected error without dropping
  If Err=37                          ! out of program.  In this case we are
    Sound 1,8,#55                    ! looking for ERR=37 which is DISK FULL
    Wave 1,1,9,7500                  ! error which may be encountered during
    Setcolor 1,6,6,0                 ! saving a file to the disk.
    Deffill 0,2,8
    Pbox 195,14,445,26
    M$=" |  DISKETTE IS FULL!  | |Please use other Disk"
    Alert 3,M$,1," OK ",B
    Setcolor 1,5,2,3
    Close #1                         ! Closes the file opened for disk access,
    On Error Gosub Error             ! resets error routine for next occurence,
    Resume Menu_return               ! and resumes program execution at menu.
  Endif
Return
'
' --------------------------- That's all folks! --------------------------------
'
